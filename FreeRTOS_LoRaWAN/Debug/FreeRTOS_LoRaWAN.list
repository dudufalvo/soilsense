
FreeRTOS_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d1d0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  0801d310  0801d310  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e168  0801e168  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0801e168  0801e168  0001f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e170  0801e170  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e170  0801e170  0001f170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e174  0801e174  0001f174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0801e178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e0  20000118  0801e290  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f8  0801e290  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046ec3  00000000  00000000  00020142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b107  00000000  00000000  00067005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000037a8  00000000  00000000  00072110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a38  00000000  00000000  000758b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa58  00000000  00000000  000782f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004625d  00000000  00000000  000a2d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b03  00000000  00000000  000e8fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001beaa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e4fc  00000000  00000000  001beaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  001ccfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	0801d2f8 	.word	0x0801d2f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	0801d2f8 	.word	0x0801d2f8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	@ 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000894:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000898:	f000 b96a 	b.w	8000b70 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	460c      	mov	r4, r1
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d14e      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c0:	4694      	mov	ip, r2
 80008c2:	458c      	cmp	ip, r1
 80008c4:	4686      	mov	lr, r0
 80008c6:	fab2 f282 	clz	r2, r2
 80008ca:	d962      	bls.n	8000992 <__udivmoddi4+0xde>
 80008cc:	b14a      	cbz	r2, 80008e2 <__udivmoddi4+0x2e>
 80008ce:	f1c2 0320 	rsb	r3, r2, #32
 80008d2:	4091      	lsls	r1, r2
 80008d4:	fa20 f303 	lsr.w	r3, r0, r3
 80008d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008dc:	4319      	orrs	r1, r3
 80008de:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f f68c 	uxth.w	r6, ip
 80008ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb07 1114 	mls	r1, r7, r4, r1
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb04 f106 	mul.w	r1, r4, r6
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800090a:	f080 8112 	bcs.w	8000b32 <__udivmoddi4+0x27e>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 810f 	bls.w	8000b32 <__udivmoddi4+0x27e>
 8000914:	3c02      	subs	r4, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a59      	subs	r1, r3, r1
 800091a:	fa1f f38e 	uxth.w	r3, lr
 800091e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000922:	fb07 1110 	mls	r1, r7, r0, r1
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f606 	mul.w	r6, r0, r6
 800092e:	429e      	cmp	r6, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x94>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800093a:	f080 80fc 	bcs.w	8000b36 <__udivmoddi4+0x282>
 800093e:	429e      	cmp	r6, r3
 8000940:	f240 80f9 	bls.w	8000b36 <__udivmoddi4+0x282>
 8000944:	4463      	add	r3, ip
 8000946:	3802      	subs	r0, #2
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800094e:	2100      	movs	r1, #0
 8000950:	b11d      	cbz	r5, 800095a <__udivmoddi4+0xa6>
 8000952:	40d3      	lsrs	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	e9c5 3200 	strd	r3, r2, [r5]
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d905      	bls.n	800096e <__udivmoddi4+0xba>
 8000962:	b10d      	cbz	r5, 8000968 <__udivmoddi4+0xb4>
 8000964:	e9c5 0100 	strd	r0, r1, [r5]
 8000968:	2100      	movs	r1, #0
 800096a:	4608      	mov	r0, r1
 800096c:	e7f5      	b.n	800095a <__udivmoddi4+0xa6>
 800096e:	fab3 f183 	clz	r1, r3
 8000972:	2900      	cmp	r1, #0
 8000974:	d146      	bne.n	8000a04 <__udivmoddi4+0x150>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xcc>
 800097a:	4290      	cmp	r0, r2
 800097c:	f0c0 80f0 	bcc.w	8000b60 <__udivmoddi4+0x2ac>
 8000980:	1a86      	subs	r6, r0, r2
 8000982:	eb64 0303 	sbc.w	r3, r4, r3
 8000986:	2001      	movs	r0, #1
 8000988:	2d00      	cmp	r5, #0
 800098a:	d0e6      	beq.n	800095a <__udivmoddi4+0xa6>
 800098c:	e9c5 6300 	strd	r6, r3, [r5]
 8000990:	e7e3      	b.n	800095a <__udivmoddi4+0xa6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	f040 8090 	bne.w	8000ab8 <__udivmoddi4+0x204>
 8000998:	eba1 040c 	sub.w	r4, r1, ip
 800099c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	2101      	movs	r1, #1
 80009a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80009aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ae:	fb08 4416 	mls	r4, r8, r6, r4
 80009b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009b6:	fb07 f006 	mul.w	r0, r7, r6
 80009ba:	4298      	cmp	r0, r3
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x11c>
 80009be:	eb1c 0303 	adds.w	r3, ip, r3
 80009c2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x11a>
 80009c8:	4298      	cmp	r0, r3
 80009ca:	f200 80cd 	bhi.w	8000b68 <__udivmoddi4+0x2b4>
 80009ce:	4626      	mov	r6, r4
 80009d0:	1a1c      	subs	r4, r3, r0
 80009d2:	fa1f f38e 	uxth.w	r3, lr
 80009d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009da:	fb08 4410 	mls	r4, r8, r0, r4
 80009de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009e2:	fb00 f707 	mul.w	r7, r0, r7
 80009e6:	429f      	cmp	r7, r3
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x148>
 80009ea:	eb1c 0303 	adds.w	r3, ip, r3
 80009ee:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x146>
 80009f4:	429f      	cmp	r7, r3
 80009f6:	f200 80b0 	bhi.w	8000b5a <__udivmoddi4+0x2a6>
 80009fa:	4620      	mov	r0, r4
 80009fc:	1bdb      	subs	r3, r3, r7
 80009fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a02:	e7a5      	b.n	8000950 <__udivmoddi4+0x9c>
 8000a04:	f1c1 0620 	rsb	r6, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a0e:	431f      	orrs	r7, r3
 8000a10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a14:	fa04 f301 	lsl.w	r3, r4, r1
 8000a18:	ea43 030c 	orr.w	r3, r3, ip
 8000a1c:	40f4      	lsrs	r4, r6
 8000a1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a22:	0c38      	lsrs	r0, r7, #16
 8000a24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a28:	fbb4 fef0 	udiv	lr, r4, r0
 8000a2c:	fa1f fc87 	uxth.w	ip, r7
 8000a30:	fb00 441e 	mls	r4, r0, lr, r4
 8000a34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a38:	fb0e f90c 	mul.w	r9, lr, ip
 8000a3c:	45a1      	cmp	r9, r4
 8000a3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x1a6>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a4a:	f080 8084 	bcs.w	8000b56 <__udivmoddi4+0x2a2>
 8000a4e:	45a1      	cmp	r9, r4
 8000a50:	f240 8081 	bls.w	8000b56 <__udivmoddi4+0x2a2>
 8000a54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	eba4 0409 	sub.w	r4, r4, r9
 8000a5e:	fa1f f983 	uxth.w	r9, r3
 8000a62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a66:	fb00 4413 	mls	r4, r0, r3, r4
 8000a6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a72:	45a4      	cmp	ip, r4
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x1d2>
 8000a76:	193c      	adds	r4, r7, r4
 8000a78:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a7c:	d267      	bcs.n	8000b4e <__udivmoddi4+0x29a>
 8000a7e:	45a4      	cmp	ip, r4
 8000a80:	d965      	bls.n	8000b4e <__udivmoddi4+0x29a>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	443c      	add	r4, r7
 8000a86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	429c      	cmp	r4, r3
 8000a94:	46ce      	mov	lr, r9
 8000a96:	469c      	mov	ip, r3
 8000a98:	d351      	bcc.n	8000b3e <__udivmoddi4+0x28a>
 8000a9a:	d04e      	beq.n	8000b3a <__udivmoddi4+0x286>
 8000a9c:	b155      	cbz	r5, 8000ab4 <__udivmoddi4+0x200>
 8000a9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000aa2:	eb64 040c 	sbc.w	r4, r4, ip
 8000aa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aaa:	40cb      	lsrs	r3, r1
 8000aac:	431e      	orrs	r6, r3
 8000aae:	40cc      	lsrs	r4, r1
 8000ab0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	e750      	b.n	800095a <__udivmoddi4+0xa6>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	430c      	orrs	r4, r1
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad4:	fa1f f78c 	uxth.w	r7, ip
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae0:	0c23      	lsrs	r3, r4, #16
 8000ae2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae6:	fb00 f107 	mul.w	r1, r0, r7
 8000aea:	4299      	cmp	r1, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x24c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000af6:	d22c      	bcs.n	8000b52 <__udivmoddi4+0x29e>
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d92a      	bls.n	8000b52 <__udivmoddi4+0x29e>
 8000afc:	3802      	subs	r0, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b08:	fb08 3311 	mls	r3, r8, r1, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb01 f307 	mul.w	r3, r1, r7
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x276>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b20:	d213      	bcs.n	8000b4a <__udivmoddi4+0x296>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d911      	bls.n	8000b4a <__udivmoddi4+0x296>
 8000b26:	3902      	subs	r1, #2
 8000b28:	4464      	add	r4, ip
 8000b2a:	1ae4      	subs	r4, r4, r3
 8000b2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b30:	e739      	b.n	80009a6 <__udivmoddi4+0xf2>
 8000b32:	4604      	mov	r4, r0
 8000b34:	e6f0      	b.n	8000918 <__udivmoddi4+0x64>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e706      	b.n	8000948 <__udivmoddi4+0x94>
 8000b3a:	45c8      	cmp	r8, r9
 8000b3c:	d2ae      	bcs.n	8000a9c <__udivmoddi4+0x1e8>
 8000b3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	e7a8      	b.n	8000a9c <__udivmoddi4+0x1e8>
 8000b4a:	4631      	mov	r1, r6
 8000b4c:	e7ed      	b.n	8000b2a <__udivmoddi4+0x276>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e799      	b.n	8000a86 <__udivmoddi4+0x1d2>
 8000b52:	4630      	mov	r0, r6
 8000b54:	e7d4      	b.n	8000b00 <__udivmoddi4+0x24c>
 8000b56:	46d6      	mov	lr, sl
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1a6>
 8000b5a:	4463      	add	r3, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e74d      	b.n	80009fc <__udivmoddi4+0x148>
 8000b60:	4606      	mov	r6, r0
 8000b62:	4623      	mov	r3, r4
 8000b64:	4608      	mov	r0, r1
 8000b66:	e70f      	b.n	8000988 <__udivmoddi4+0xd4>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	e730      	b.n	80009d0 <__udivmoddi4+0x11c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bba:	4013      	ands	r3, r2
 8000bbc:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bce:	4a24      	ldr	r2, [pc, #144]	@ (8000c60 <MX_ADC_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bd4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c18:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_ADC_Init+0x94>)
 8000c4a:	f001 fef5 	bl	8002a38 <HAL_ADC_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000c54:	f000 fb0a 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000134 	.word	0x20000134
 8000c60:	40012400 	.word	0x40012400

08000c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <HAL_ADC_MspInit+0x24>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d103      	bne.n	8000c7e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c7a:	f7ff ff7b 	bl	8000b74 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40012400 	.word	0x40012400

08000c8c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <HAL_ADC_MspDeInit+0x24>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d103      	bne.n	8000ca6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000c9e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ca2:	f7ff ff7f 	bl	8000ba4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40012400 	.word	0x40012400

08000cb4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <SYS_InitMeasurement+0x14>)
 8000cba:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <SYS_InitMeasurement+0x18>)
 8000cbc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000134 	.word	0x20000134
 8000ccc:	40012400 	.word	0x40012400

08000cd0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000cde:	f000 f871 	bl	8000dc4 <SYS_GetBatteryLevel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000ce6:	4830      	ldr	r0, [pc, #192]	@ (8000da8 <SYS_GetTemperatureLevel+0xd8>)
 8000ce8:	f000 f8a0 	bl	8000e2c <ADC_ReadChannels>
 8000cec:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <SYS_GetTemperatureLevel+0xdc>)
 8000cf0:	881a      	ldrh	r2, [r3, #0]
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <SYS_GetTemperatureLevel+0xe0>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d026      	beq.n	8000d48 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <SYS_GetTemperatureLevel+0xdc>)
 8000cfc:	881a      	ldrh	r2, [r3, #0]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <SYS_GetTemperatureLevel+0xe0>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d01c      	beq.n	8000d40 <SYS_GetTemperatureLevel+0x70>
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	4a28      	ldr	r2, [pc, #160]	@ (8000db4 <SYS_GetTemperatureLevel+0xe4>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <SYS_GetTemperatureLevel+0xe0>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2264      	movs	r2, #100	@ 0x64
 8000d22:	fb03 f202 	mul.w	r2, r3, r2
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <SYS_GetTemperatureLevel+0xdc>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <SYS_GetTemperatureLevel+0xe0>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	331e      	adds	r3, #30
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	e001      	b.n	8000d44 <SYS_GetTemperatureLevel+0x74>
 8000d40:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d44:	81fb      	strh	r3, [r7, #14]
 8000d46:	e01c      	b.n	8000d82 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	fb03 f202 	mul.w	r2, r3, r2
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <SYS_GetTemperatureLevel+0xe8>)
 8000d52:	fba3 1302 	umull	r1, r3, r3, r2
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	0852      	lsrs	r2, r2, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	0adb      	lsrs	r3, r3, #11
 8000d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000d6a:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000d6e:	4a13      	ldr	r2, [pc, #76]	@ (8000dbc <SYS_GetTemperatureLevel+0xec>)
 8000d70:	fb82 1203 	smull	r1, r2, r2, r3
 8000d74:	1292      	asrs	r2, r2, #10
 8000d76:	17db      	asrs	r3, r3, #31
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	331e      	adds	r3, #30
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <SYS_GetTemperatureLevel+0xf0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f01a ff1a 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8000d9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	b0001000 	.word	0xb0001000
 8000dac:	1fff75c8 	.word	0x1fff75c8
 8000db0:	1fff75a8 	.word	0x1fff75a8
 8000db4:	09ee009f 	.word	0x09ee009f
 8000db8:	00100101 	.word	0x00100101
 8000dbc:	68db8bad 	.word	0x68db8bad
 8000dc0:	0801d310 	.word	0x0801d310

08000dc4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000dd2:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <SYS_GetBatteryLevel+0x5c>)
 8000dd4:	f000 f82a 	bl	8000e2c <ADC_ReadChannels>
 8000dd8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	e016      	b.n	8000e14 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <SYS_GetBatteryLevel+0x60>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00b      	beq.n	8000e0a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <SYS_GetBatteryLevel+0x60>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000dfc:	fb03 f202 	mul.w	r2, r3, r2
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	80fb      	strh	r3, [r7, #6]
 8000e08:	e004      	b.n	8000e14 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e0a:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <SYS_GetBatteryLevel+0x64>)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e14:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	b4002000 	.word	0xb4002000
 8000e24:	1fff75aa 	.word	0x1fff75aa
 8000e28:	004c08d8 	.word	0x004c08d8

08000e2c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e44:	f7ff fec0 	bl	8000bc8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e48:	481a      	ldr	r0, [pc, #104]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e4a:	f002 fbdb 	bl	8003604 <HAL_ADCEx_Calibration_Start>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e54:	f000 fa0a 	bl	800126c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e6c:	f002 f942 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000e76:	f000 f9f9 	bl	800126c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e7c:	f002 f81e 	bl	8002ebc <HAL_ADC_Start>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000e86:	f000 f9f1 	bl	800126c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000e8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e8e:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e90:	f002 f88c 	bl	8002fac <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000e94:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e96:	f002 f857 	bl	8002f48 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000e9c:	f002 f91d 	bl	80030da <HAL_ADC_GetValue>
 8000ea0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000ea2:	4804      	ldr	r0, [pc, #16]	@ (8000eb4 <ADC_ReadChannels+0x88>)
 8000ea4:	f001 ff8e 	bl	8002dc4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000ea8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000134 	.word	0x20000134

08000eb8 <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <PreSleepProcessing+0x34>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	099b      	lsrs	r3, r3, #6
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <PreSleepProcessing+0x38>)
 8000ed8:	f003 fce4 	bl	80048a4 <HAL_LPTIM_Counter_Start_IT>
  /*Enter Low Power Mode*/
  // HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000edc:	2101      	movs	r1, #1
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f004 f876 	bl	8004fd0 <HAL_PWR_EnterSLEEPMode>
//  *ulExpectedIdleTime = 0;
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	10624dd3 	.word	0x10624dd3
 8000ef0:	200009ec 	.word	0x200009ec

08000ef4 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <PostSleepProcessing+0x1c>)
 8000efe:	f003 fd73 	bl	80049e8 <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 8000f02:	f000 f8b5 	bl	8001070 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200009ec 	.word	0x200009ec

08000f14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <vApplicationGetIdleTaskMemory+0x30>)
 8000f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f32:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000198 	.word	0x20000198
 8000f44:	200001ec 	.word	0x200001ec

08000f48 <LL_AHB1_GRP1_EnableClock>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f7c:	2004      	movs	r0, #4
 8000f7e:	f7ff ffe3 	bl	8000f48 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff ffe0 	bl	8000f48 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f002 fc8c 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f002 fca3 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fac:	f023 0218 	bic.w	r2, r3, #24
 8000fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <LL_AHB2_GRP1_EnableClock>:
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08e      	sub	sp, #56	@ 0x38
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f001 fb61 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f835 	bl	8001070 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001006:	f000 f8bd 	bl	8001184 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800100a:	f000 f88f 	bl	800112c <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <main+0x68>)
 8001010:	f107 041c 	add.w	r4, r7, #28
 8001014:	461d      	mov	r5, r3
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 ffa9 	bl	8009f80 <osThreadCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0c      	ldr	r2, [pc, #48]	@ (8001064 <main+0x6c>)
 8001032:	6013      	str	r3, [r2, #0]
  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <main+0x70>)
 8001036:	463c      	mov	r4, r7
 8001038:	461d      	mov	r5, r3
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 8001046:	463b      	mov	r3, r7
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f008 ff98 	bl	8009f80 <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a06      	ldr	r2, [pc, #24]	@ (800106c <main+0x74>)
 8001054:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8001056:	f008 ff8c 	bl	8009f72 <osKernelStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105a:	bf00      	nop
 800105c:	e7fd      	b.n	800105a <main+0x62>
 800105e:	bf00      	nop
 8001060:	0801d328 	.word	0x0801d328
 8001064:	20000a28 	.word	0x20000a28
 8001068:	0801d354 	.word	0x0801d354
 800106c:	20000a2c 	.word	0x20000a2c

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09a      	sub	sp, #104	@ 0x68
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2248      	movs	r2, #72	@ 0x48
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f01c f88c 	bl	801d19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001096:	f003 ff8d 	bl	8004fb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff ff7e 	bl	8000f9c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <SystemClock_Config+0xb8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <SystemClock_Config+0xb8>)
 80010aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <SystemClock_Config+0xb8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 80010bc:	232c      	movs	r3, #44	@ 0x2c
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c0:	2381      	movs	r3, #129	@ 0x81
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010cc:	23b0      	movs	r3, #176	@ 0xb0
 80010ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fa89 	bl	80055f8 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010ec:	f000 f8be 	bl	800126c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80010f0:	234f      	movs	r3, #79	@ 0x4f
 80010f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fe0e 	bl	8005d30 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800111a:	f000 f8a7 	bl	800126c <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3768      	adds	r7, #104	@ 0x68
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	58000400 	.word	0x58000400

0800112c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <MX_LPTIM1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_LPTIM1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001144:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001148:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_LPTIM1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_LPTIM1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_LPTIM1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_LPTIM1_Init+0x50>)
 800116a:	f003 fad3 	bl	8004714 <HAL_LPTIM_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f87a 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200009ec 	.word	0x200009ec
 8001180:	40007c00 	.word	0x40007c00

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff ff14 	bl	8000fc6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <MX_GPIO_Init+0x70>)
 80011a4:	f003 f9fc 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_GPIO_Init+0x70>)
 80011b0:	f003 f9f6 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b4:	2320      	movs	r3, #32
 80011b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <MX_GPIO_Init+0x70>)
 80011ca:	f002 ffbb 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_GPIO_Init+0x70>)
 80011e6:	f002 ffad 	bl	8004144 <HAL_GPIO_Init>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	48000400 	.word	0x48000400

080011f8 <StartLoRaWANTask>:

/* USER CODE END 4 */
/* USER CODE BEGIN 4 */

void StartLoRaWANTask(void const * argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 8001200:	f008 fbe8 	bl	80099d4 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_LoRaWAN_Process();
 8001204:	f008 fbee 	bl	80099e4 <MX_LoRaWAN_Process>
    osDelay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f008 ff05 	bl	800a018 <osDelay>
	MX_LoRaWAN_Process();
 800120e:	bf00      	nop
 8001210:	e7f8      	b.n	8001204 <StartLoRaWANTask+0xc>
	...

08001214 <StartLedTask>:
  }
  /* USER CODE END 5 */
}
/* USER CODE END 4 */
void StartLedTask(void const * argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800121c:	2120      	movs	r1, #32
 800121e:	4811      	ldr	r0, [pc, #68]	@ (8001264 <StartLedTask+0x50>)
 8001220:	f003 f9d5 	bl	80045ce <HAL_GPIO_TogglePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <StartLedTask+0x50>)
 800122c:	f003 f9b8 	bl	80045a0 <HAL_GPIO_WritePin>
  testeValue = 0xF0;
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <StartLedTask+0x54>)
 8001232:	22f0      	movs	r2, #240	@ 0xf0
 8001234:	701a      	strb	r2, [r3, #0]
  osDelay(6000);
 8001236:	f241 7070 	movw	r0, #6000	@ 0x1770
 800123a:	f008 feed 	bl	800a018 <osDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001244:	4807      	ldr	r0, [pc, #28]	@ (8001264 <StartLedTask+0x50>)
 8001246:	f003 f9ab 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800124a:	2120      	movs	r1, #32
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <StartLedTask+0x50>)
 800124e:	f003 f9be 	bl	80045ce <HAL_GPIO_TogglePin>
  testeValue = 0xFF;
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <StartLedTask+0x54>)
 8001254:	22ff      	movs	r2, #255	@ 0xff
 8001256:	701a      	strb	r2, [r3, #0]
  osDelay(6000);
 8001258:	f241 7070 	movw	r0, #6000	@ 0x1770
 800125c:	f008 fedc 	bl	800a018 <osDelay>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001260:	bf00      	nop
 8001262:	e7db      	b.n	800121c <StartLedTask+0x8>
 8001264:	48000400 	.word	0x48000400
 8001268:	20000c74 	.word	0x20000c74

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <Error_Handler+0x8>

08001278 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_APB1_GRP1_EnableClock>:
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012bc:	68fb      	ldr	r3, [r7, #12]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	222c      	movs	r2, #44	@ 0x2c
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f01b ff61 	bl	801d19c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012dc:	4a22      	ldr	r2, [pc, #136]	@ (8001368 <MX_RTC_Init+0xa0>)
 80012de:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012e0:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012e2:	221f      	movs	r2, #31
 80012e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_RTC_Init+0x9c>)
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012fe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_RTC_Init+0x9c>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001306:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_RTC_Init+0x9c>)
 8001308:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800130c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800130e:	4815      	ldr	r0, [pc, #84]	@ (8001364 <MX_RTC_Init+0x9c>)
 8001310:	f005 f9ca 	bl	80066a8 <HAL_RTC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800131a:	f7ff ffa7 	bl	800126c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800131e:	4811      	ldr	r0, [pc, #68]	@ (8001364 <MX_RTC_Init+0x9c>)
 8001320:	f005 fcb8 	bl	8006c94 <HAL_RTCEx_SetSSRU_IT>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800132a:	f7ff ff9f 	bl	800126c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800133a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800133e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_RTC_Init+0x9c>)
 800134e:	f005 fa25 	bl	800679c <HAL_RTC_SetAlarm_IT>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001358:	f7ff ff88 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3730      	adds	r7, #48	@ 0x30
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000a30 	.word	0x20000a30
 8001368:	40002800 	.word	0x40002800

0800136c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b090      	sub	sp, #64	@ 0x40
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2238      	movs	r2, #56	@ 0x38
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f01b ff0d 	bl	801d19c <memset>
  if(rtcHandle->Instance==RTC)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <HAL_RTC_MspInit+0x74>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d125      	bne.n	80013d8 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800138c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001390:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001396:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f005 f869 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80013a8:	f7ff ff60 	bl	800126c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ac:	f7ff ff64 	bl	8001278 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80013b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013b4:	f7ff ff70 	bl	8001298 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2002      	movs	r0, #2
 80013be:	f002 fa74 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80013c2:	2002      	movs	r0, #2
 80013c4:	f002 fa8b 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	202a      	movs	r0, #42	@ 0x2a
 80013ce:	f002 fa6c 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013d2:	202a      	movs	r0, #42	@ 0x2a
 80013d4:	f002 fa83 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013d8:	bf00      	nop
 80013da:	3740      	adds	r7, #64	@ 0x40
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40002800 	.word	0x40002800

080013e4 <LL_APB1_GRP1_EnableClock>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001408:	68fb      	ldr	r3, [r7, #12]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	210f      	movs	r1, #15
 800141c:	f06f 0001 	mvn.w	r0, #1
 8001420:	f002 fa43 	bl	80038aa <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	@ 0x40
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	2238      	movs	r2, #56	@ 0x38
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f01b feaf 	bl	801d19c <memset>
  if(hlptim->Instance==LPTIM1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a11      	ldr	r2, [pc, #68]	@ (8001488 <HAL_LPTIM_MspInit+0x60>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d11a      	bne.n	800147e <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_LPTIM_MspInit+0x64>)
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4618      	mov	r0, r3
 8001458:	f005 f80c 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8001462:	f7ff ff03 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001466:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800146a:	f7ff ffbb 	bl	80013e4 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	2027      	movs	r0, #39	@ 0x27
 8001474:	f002 fa19 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001478:	2027      	movs	r0, #39	@ 0x27
 800147a:	f002 fa30 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3740      	adds	r7, #64	@ 0x40
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40007c00 	.word	0x40007c00
 800148c:	000c0004 	.word	0x000c0004

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <NMI_Handler+0x4>

08001498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <MemManage_Handler+0x4>

080014a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f001 f91c 	bl	8002704 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014cc:	f009 fbe6 	bl	800ac9c <xTaskGetSchedulerState>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014d6:	f009 fdd7 	bl	800b088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80014e6:	f005 fc11 	bl	8006d0c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000a30 	.word	0x20000a30

080014f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014fc:	f003 f880 	bl	8004600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <DMA1_Channel5_IRQHandler+0x10>)
 800150a:	f002 fc7f 	bl	8003e0c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000b0c 	.word	0x20000b0c

08001518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART1_IRQHandler+0x10>)
 800151e:	f006 fa4d 	bl	80079bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000a7c 	.word	0x20000a7c

0800152c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <USART2_IRQHandler+0x10>)
 8001532:	f006 fa43 	bl	80079bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000b6c 	.word	0x20000b6c

08001540 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <RTC_Alarm_IRQHandler+0x10>)
 8001546:	f005 fa91 	bl	8006a6c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000a30 	.word	0x20000a30

08001554 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <SUBGHZ_Radio_IRQHandler+0x10>)
 800155a:	f005 ff3f 	bl	80073dc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000a68 	.word	0x20000a68

08001568 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <LPTIM1_IRQHandler+0x10>)
 800156e:	f003 faa1 	bl	8004ab4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200009ec 	.word	0x200009ec

0800157c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001588:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001598:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a0:	68fb      	ldr	r3, [r7, #12]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_SUBGHZ_Init+0x20>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_SUBGHZ_Init+0x20>)
 80015b8:	f005 fc94 	bl	8006ee4 <HAL_SUBGHZ_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80015c2:	f7ff fe53 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000a68 	.word	0x20000a68

080015d0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff ffcf 	bl	800157c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2032      	movs	r0, #50	@ 0x32
 80015e4:	f002 f961 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015e8:	2032      	movs	r0, #50	@ 0x32
 80015ea:	f002 f978 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001620:	4b02      	ldr	r3, [pc, #8]	@ (800162c <LL_FLASH_GetUDN+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	1fff7580 	.word	0x1fff7580

08001630 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <LL_FLASH_GetDeviceID+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	1fff7584 	.word	0x1fff7584

08001648 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <LL_FLASH_GetSTCompanyID+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0a1b      	lsrs	r3, r3, #8
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	1fff7584 	.word	0x1fff7584

08001660 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff ffc6 	bl	80015f6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800166a:	f01b f8a1 	bl	801c7b0 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800166e:	f000 f964 	bl	800193a <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001672:	f01a fa7b 	bl	801bb6c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001676:	4809      	ldr	r0, [pc, #36]	@ (800169c <SystemApp_Init+0x3c>)
 8001678:	f01a fb26 	bl	801bcc8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800167c:	2002      	movs	r0, #2
 800167e:	f01a fb31 	bl	801bce4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001682:	f7ff fb17 	bl	8000cb4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001686:	f000 f95e 	bl	8001946 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800168a:	f01a fd15 	bl	801c0b8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800168e:	2101      	movs	r1, #1
 8001690:	2001      	movs	r0, #1
 8001692:	f01a fd51 	bl	801c138 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	08001875 	.word	0x08001875

080016a0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END UTIL_SEQ_Idle_1 */
//  UTIL_LPM_EnterLowPower();
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80016b6:	f7ff fb85 	bl	8000dc4 <SYS_GetBatteryLevel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d902      	bls.n	80016ce <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80016c8:	23fe      	movs	r3, #254	@ 0xfe
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	e014      	b.n	80016f8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80016d4:	d202      	bcs.n	80016dc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	e00d      	b.n	80016f8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80016e2:	461a      	mov	r2, r3
 80016e4:	4613      	mov	r3, r2
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <GetBatteryLevel+0x68>)
 80016f0:	fba3 2302 	umull	r2, r3, r3, r2
 80016f4:	09db      	lsrs	r3, r3, #7
 80016f6:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <GetBatteryLevel+0x6c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	2100      	movs	r1, #0
 8001702:	2002      	movs	r0, #2
 8001704:	f01a fa60 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001708:	79fb      	ldrb	r3, [r7, #7]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	1b4e81b5 	.word	0x1b4e81b5
 8001718:	0801d370 	.word	0x0801d370

0800171c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001726:	f7ff fad3 	bl	8000cd0 <SYS_GetTemperatureLevel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	da00      	bge.n	8001732 <GetTemperatureLevel+0x16>
 8001730:	33ff      	adds	r3, #255	@ 0xff
 8001732:	121b      	asrs	r3, r3, #8
 8001734:	b21b      	sxth	r3, r3
 8001736:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001738:	88fb      	ldrh	r3, [r7, #6]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800174e:	f7ff ff65 	bl	800161c <LL_FLASH_GetUDN>
 8001752:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800175a:	d138      	bne.n	80017ce <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800175c:	f000 ffe4 	bl	8002728 <HAL_GetUIDw0>
 8001760:	4604      	mov	r4, r0
 8001762:	f000 fff5 	bl	8002750 <HAL_GetUIDw2>
 8001766:	4603      	mov	r3, r0
 8001768:	4423      	add	r3, r4
 800176a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800176c:	f000 ffe6 	bl	800273c <HAL_GetUIDw1>
 8001770:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	0e1a      	lsrs	r2, r3, #24
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3307      	adds	r3, #7
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	0c1a      	lsrs	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3306      	adds	r3, #6
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	0a1a      	lsrs	r2, r3, #8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3305      	adds	r3, #5
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	0e1a      	lsrs	r2, r3, #24
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3303      	adds	r3, #3
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	0c1a      	lsrs	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3302      	adds	r3, #2
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	0a1a      	lsrs	r2, r3, #8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80017cc:	e031      	b.n	8001832 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3307      	adds	r3, #7
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	0a1a      	lsrs	r2, r3, #8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3306      	adds	r3, #6
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	0c1a      	lsrs	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3305      	adds	r3, #5
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	0e1a      	lsrs	r2, r3, #24
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80017fc:	f7ff ff18 	bl	8001630 <LL_FLASH_GetDeviceID>
 8001800:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3303      	adds	r3, #3
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800180c:	f7ff ff1c 	bl	8001648 <LL_FLASH_GetSTCompanyID>
 8001810:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3302      	adds	r3, #2
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	0a1a      	lsrs	r2, r3, #8
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3301      	adds	r3, #1
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	701a      	strb	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}

0800183a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800183a:	b590      	push	{r4, r7, lr}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001844:	f7ff feea 	bl	800161c <LL_FLASH_GetUDN>
 8001848:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001850:	d10b      	bne.n	800186a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001852:	f000 ff69 	bl	8002728 <HAL_GetUIDw0>
 8001856:	4604      	mov	r4, r0
 8001858:	f000 ff70 	bl	800273c <HAL_GetUIDw1>
 800185c:	4603      	mov	r3, r0
 800185e:	405c      	eors	r4, r3
 8001860:	f000 ff76 	bl	8002750 <HAL_GetUIDw2>
 8001864:	4603      	mov	r3, r0
 8001866:	4063      	eors	r3, r4
 8001868:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800186a:	687b      	ldr	r3, [r7, #4]

}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}

08001874 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4618      	mov	r0, r3
 8001884:	f01a fed6 	bl	801c634 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <TimestampNow+0x3c>)
 8001892:	2110      	movs	r1, #16
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f81d 	bl	80018d4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7fe fc70 	bl	8000180 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0801d37c 	.word	0x0801d37c

080018b4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80018b8:	2101      	movs	r1, #1
 80018ba:	2002      	movs	r0, #2
 80018bc:	f01a fc0c 	bl	801c0d8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2002      	movs	r0, #2
 80018cc:	f01a fc04 	bl	801c0d8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018d4:	b40c      	push	{r2, r3}
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f01b fb03 	bl	801cef8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018fc:	b002      	add	sp, #8
 80018fe:	4770      	bx	lr

08001900 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001918:	f000 f8de 	bl	8001ad8 <TIMER_IF_GetTimerValue>
 800191c:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f95a 	bl	8001be6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <EnvSensors_Init>:
  return 0;
  /* USER CODE END EnvSensors_Read */
}

int32_t  EnvSensors_Init(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800194a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001982:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <TIMER_IF_Init+0x5c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f083 0301 	eor.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <TIMER_IF_Init+0x60>)
 8001992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001998:	f7ff fc96 	bl	80012c8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800199c:	f000 f856 	bl	8001a4c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80019a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <TIMER_IF_Init+0x60>)
 80019a6:	f005 f805 	bl	80069b4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <TIMER_IF_Init+0x60>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <TIMER_IF_Init+0x60>)
 80019b4:	f005 f93c 	bl	8006c30 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f9d3 	bl	8001d64 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80019be:	f000 f85f 	bl	8001a80 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <TIMER_IF_Init+0x5c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000a74 	.word	0x20000a74
 80019d8:	20000a30 	.word	0x20000a30

080019dc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	@ 0x38
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	222c      	movs	r2, #44	@ 0x2c
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f01b fbd2 	bl	801d19c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80019f8:	f000 f828 	bl	8001a4c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <TIMER_IF_StartTimer+0x68>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a18:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	2201      	movs	r2, #1
 8001a26:	4619      	mov	r1, r3
 8001a28:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <TIMER_IF_StartTimer+0x6c>)
 8001a2a:	f004 feb7 	bl	800679c <HAL_RTC_SetAlarm_IT>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001a34:	f7ff fc1a 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001a38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3738      	adds	r7, #56	@ 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000a78 	.word	0x20000a78
 8001a48:	20000a30 	.word	0x20000a30

08001a4c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <TIMER_IF_StopTimer+0x2c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a60:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <TIMER_IF_StopTimer+0x30>)
 8001a62:	f004 ffa7 	bl	80069b4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <TIMER_IF_StopTimer+0x30>)
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40002800 	.word	0x40002800
 8001a7c:	20000a30 	.word	0x20000a30

08001a80 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001a84:	f000 f98e 	bl	8001da4 <GetTimerTicks>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a03      	ldr	r2, [pc, #12]	@ (8001a98 <TIMER_IF_SetTimerContext+0x18>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a8e:	4b02      	ldr	r3, [pc, #8]	@ (8001a98 <TIMER_IF_SetTimerContext+0x18>)
 8001a90:	681b      	ldr	r3, [r3, #0]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000a78 	.word	0x20000a78

08001a9c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	@ (8001aac <TIMER_IF_GetTimerContext+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000a78 	.word	0x20000a78

08001ab0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001aba:	f000 f973 	bl	8001da4 <GetTimerTicks>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000a78 	.word	0x20000a78

08001ad8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <TIMER_IF_GetTimerValue+0x24>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001aea:	f000 f95b 	bl	8001da4 <GetTimerTicks>
 8001aee:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000a74 	.word	0x20000a74

08001b00 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001b1a:	b5b0      	push	{r4, r5, r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b22:	2100      	movs	r1, #0
 8001b24:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	2000      	movs	r0, #0
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	0d95      	lsrs	r5, r2, #22
 8001b30:	0294      	lsls	r4, r2, #10
 8001b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fea1 	bl	8000884 <__aeabi_uldivmod>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4613      	mov	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}

08001b54 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b54:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b5e:	2100      	movs	r1, #0
 8001b60:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	2000      	movs	r0, #0
 8001b66:	460c      	mov	r4, r1
 8001b68:	4605      	mov	r5, r0
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f04f 0a00 	mov.w	sl, #0
 8001b72:	f04f 0b00 	mov.w	fp, #0
 8001b76:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001b7a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001b7e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001b82:	4650      	mov	r0, sl
 8001b84:	4659      	mov	r1, fp
 8001b86:	1b02      	subs	r2, r0, r4
 8001b88:	eb61 0305 	sbc.w	r3, r1, r5
 8001b8c:	f04f 0000 	mov.w	r0, #0
 8001b90:	f04f 0100 	mov.w	r1, #0
 8001b94:	0099      	lsls	r1, r3, #2
 8001b96:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b9a:	0090      	lsls	r0, r2, #2
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	eb12 0804 	adds.w	r8, r2, r4
 8001ba4:	eb43 0905 	adc.w	r9, r3, r5
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	4640      	mov	r0, r8
 8001bc2:	4649      	mov	r1, r9
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	0a82      	lsrs	r2, r0, #10
 8001bce:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001bd2:	0a8b      	lsrs	r3, r1, #10
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001be4:	4770      	bx	lr

08001be6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff93 	bl	8001b1a <TIMER_IF_Convert_ms2Tick>
 8001bf4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001bf6:	f000 f8d5 	bl	8001da4 <GetTimerTicks>
 8001bfa:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bfc:	e000      	b.n	8001c00 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001bfe:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001c00:	f000 f8d0 	bl	8001da4 <GetTimerTicks>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f6      	bhi.n	8001bfe <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001c22:	f01a ff13 	bl	801ca4c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001c36:	f000 f8a5 	bl	8001d84 <TIMER_IF_BkUp_Read_MSBticks>
 8001c3a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f88f 	bl	8001d64 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001c4e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001c5c:	f000 f8a2 	bl	8001da4 <GetTimerTicks>
 8001c60:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c62:	f000 f88f 	bl	8001d84 <TIMER_IF_BkUp_Read_MSBticks>
 8001c66:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c80:	2000      	movs	r0, #0
 8001c82:	460c      	mov	r4, r1
 8001c84:	4605      	mov	r5, r0
 8001c86:	eb12 0804 	adds.w	r8, r2, r4
 8001c8a:	eb43 0905 	adc.w	r9, r3, r5
 8001c8e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	0a82      	lsrs	r2, r0, #10
 8001ca0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001ca4:	0a8b      	lsrs	r3, r1, #10
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2200      	movs	r2, #0
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001cb8:	f04f 0b00 	mov.w	fp, #0
 8001cbc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff46 	bl	8001b54 <TIMER_IF_Convert_Tick2ms>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3730      	adds	r7, #48	@ 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cdc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001cea:	f005 f833 	bl	8006d54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000a30 	.word	0x20000a30

08001cfc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	2101      	movs	r1, #1
 8001d08:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001d0a:	f005 f823 	bl	8006d54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000a30 	.word	0x20000a30

08001d1c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001d26:	2100      	movs	r1, #0
 8001d28:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001d2a:	f005 f82b 	bl	8006d84 <HAL_RTCEx_BKUPRead>
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000a30 	.word	0x20000a30

08001d40 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	4804      	ldr	r0, [pc, #16]	@ (8001d60 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001d4e:	f005 f819 	bl	8006d84 <HAL_RTCEx_BKUPRead>
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000a30 	.word	0x20000a30

08001d64 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001d72:	f004 ffef 	bl	8006d54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000a30 	.word	0x20000a30

08001d84 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001d8e:	f004 fff9 	bl	8006d84 <HAL_RTCEx_BKUPRead>
 8001d92:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001d94:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000a30 	.word	0x20000a30

08001da4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <GetTimerTicks+0x14>)
 8001daa:	f7ff fdd9 	bl	8001960 <LL_RTC_TIME_GetSubSecond>
 8001dae:	4603      	mov	r3, r0
 8001db0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40002800 	.word	0x40002800

08001dbc <LL_AHB2_GRP1_EnableClock>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de0:	68fb      	ldr	r3, [r7, #12]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <LL_APB1_GRP1_EnableClock>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e10:	68fb      	ldr	r3, [r7, #12]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_APB1_GRP1_DisableClock>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e32:	4013      	ands	r3, r2
 8001e34:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <LL_APB2_GRP1_EnableClock>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e64:	68fb      	ldr	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <LL_APB2_GRP1_DisableClock>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e86:	4013      	ands	r3, r2
 8001e88:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001e9a:	4a23      	ldr	r2, [pc, #140]	@ (8001f28 <MX_USART1_UART_Init+0x94>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001edc:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ede:	f005 fc34 	bl	800774a <HAL_UART_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ee8:	f7ff f9c0 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001ef0:	f007 fc85 	bl	80097fe <HAL_UARTEx_SetTxFifoThreshold>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001efa:	f7ff f9b7 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efe:	2100      	movs	r1, #0
 8001f00:	4808      	ldr	r0, [pc, #32]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001f02:	f007 fcba 	bl	800987a <HAL_UARTEx_SetRxFifoThreshold>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f0c:	f7ff f9ae 	bl	800126c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <MX_USART1_UART_Init+0x90>)
 8001f12:	f007 fc39 	bl	8009788 <HAL_UARTEx_EnableFifoMode>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f1c:	f7ff f9a6 	bl	800126c <Error_Handler>
  }

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000a7c 	.word	0x20000a7c
 8001f28:	40013800 	.word	0x40013800

08001f2c <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b096      	sub	sp, #88	@ 0x58
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2238      	movs	r2, #56	@ 0x38
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f01b f925 	bl	801d19c <memset>
  if(uartHandle->Instance==USART1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5d      	ldr	r2, [pc, #372]	@ (80020cc <HAL_UART_MspInit+0x1a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d156      	bne.n	800200a <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001f60:	4b5b      	ldr	r3, [pc, #364]	@ (80020d0 <HAL_UART_MspInit+0x1a4>)
 8001f62:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fa83 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f74:	f7ff f97a 	bl	800126c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f7c:	f7ff ff60 	bl	8001e40 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7ff ff1b 	bl	8001dbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 8001f86:	23c0      	movs	r3, #192	@ 0xc0
 8001f88:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f96:	2307      	movs	r3, #7
 8001f98:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	484c      	ldr	r0, [pc, #304]	@ (80020d4 <HAL_UART_MspInit+0x1a8>)
 8001fa2:	f002 f8cf 	bl	8004144 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80020dc <HAL_UART_MspInit+0x1b0>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001fac:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fae:	2212      	movs	r2, #18
 8001fb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb2:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb8:	4b47      	ldr	r3, [pc, #284]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbe:	4b46      	ldr	r3, [pc, #280]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc4:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fca:	4b43      	ldr	r3, [pc, #268]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fd0:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fdc:	483e      	ldr	r0, [pc, #248]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001fde:	f001 fc9b 	bl	8003918 <HAL_DMA_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001fe8:	f7ff f940 	bl	800126c <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3a      	ldr	r2, [pc, #232]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001ff0:	679a      	str	r2, [r3, #120]	@ 0x78
 8001ff2:	4a39      	ldr	r2, [pc, #228]	@ (80020d8 <HAL_UART_MspInit+0x1ac>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	2024      	movs	r0, #36	@ 0x24
 8001ffe:	f001 fc54 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002002:	2024      	movs	r0, #36	@ 0x24
 8002004:	f001 fc6b 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002008:	e05b      	b.n	80020c2 <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0x1b4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d156      	bne.n	80020c2 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002014:	2302      	movs	r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002018:	4b32      	ldr	r3, [pc, #200]	@ (80020e4 <HAL_UART_MspInit+0x1b8>)
 800201a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fa27 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_UART_MspInit+0x104>
      Error_Handler();
 800202c:	f7ff f91e 	bl	800126c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002034:	f7ff feda 	bl	8001dec <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff febf 	bl	8001dbc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800203e:	230c      	movs	r3, #12
 8002040:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204e:	2307      	movs	r3, #7
 8002050:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f002 f872 	bl	8004144 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002062:	4a1e      	ldr	r2, [pc, #120]	@ (80020dc <HAL_UART_MspInit+0x1b0>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002068:	2214      	movs	r2, #20
 800206a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 800206e:	2210      	movs	r2, #16
 8002070:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 800207a:	2280      	movs	r2, #128	@ 0x80
 800207c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800208a:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002090:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002096:	4814      	ldr	r0, [pc, #80]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 8002098:	f001 fc3e 	bl	8003918 <HAL_DMA_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 80020a2:	f7ff f8e3 	bl	800126c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 80020aa:	679a      	str	r2, [r3, #120]	@ 0x78
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_UART_MspInit+0x1bc>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2102      	movs	r1, #2
 80020b6:	2025      	movs	r0, #37	@ 0x25
 80020b8:	f001 fbf7 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020bc:	2025      	movs	r0, #37	@ 0x25
 80020be:	f001 fc0e 	bl	80038de <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3758      	adds	r7, #88	@ 0x58
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40013800 	.word	0x40013800
 80020d0:	00030001 	.word	0x00030001
 80020d4:	48000400 	.word	0x48000400
 80020d8:	20000b0c 	.word	0x20000b0c
 80020dc:	40020058 	.word	0x40020058
 80020e0:	40004400 	.word	0x40004400
 80020e4:	000c0004 	.word	0x000c0004
 80020e8:	20000bfc 	.word	0x20000bfc

080020ec <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a16      	ldr	r2, [pc, #88]	@ (8002154 <HAL_UART_MspDeInit+0x68>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d110      	bne.n	8002120 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020fe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002102:	f7ff feb5 	bl	8001e70 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 8002106:	21c0      	movs	r1, #192	@ 0xc0
 8002108:	4813      	ldr	r0, [pc, #76]	@ (8002158 <HAL_UART_MspDeInit+0x6c>)
 800210a:	f002 f97b 	bl	8004404 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002112:	4618      	mov	r0, r3
 8002114:	f001 fca8 	bl	8003a68 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002118:	2024      	movs	r0, #36	@ 0x24
 800211a:	f001 fbee 	bl	80038fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800211e:	e015      	b.n	800214c <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <HAL_UART_MspDeInit+0x70>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d110      	bne.n	800214c <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 800212a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800212e:	f7ff fe75 	bl	8001e1c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 8002132:	210c      	movs	r1, #12
 8002134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002138:	f002 f964 	bl	8004404 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fc91 	bl	8003a68 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002146:	2025      	movs	r0, #37	@ 0x25
 8002148:	f001 fbd7 	bl	80038fa <HAL_NVIC_DisableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013800 	.word	0x40013800
 8002158:	48000400 	.word	0x48000400
 800215c:	40004400 	.word	0x40004400

08002160 <LL_APB2_GRP1_ForceReset>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <LL_APB2_GRP1_ReleaseReset>:
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	43db      	mvns	r3, r3
 8002194:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002198:	4013      	ands	r3, r2
 800219a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80021b6:	4905      	ldr	r1, [pc, #20]	@ (80021cc <LL_EXTI_EnableIT_0_31+0x24>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	58000800 	.word	0x58000800

080021d0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <vcom_Init+0x28>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80021de:	f7fe fecb 	bl	8000f78 <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 80021e2:	f7ff fe57 	bl	8001e94 <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80021e6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80021ea:	f7ff ffdd 	bl	80021a8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80021ee:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000c60 	.word	0x20000c60

080021fc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002200:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002204:	f7ff ffac 	bl	8002160 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002208:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800220c:	f7ff ffb9 	bl	8002182 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002210:	4804      	ldr	r0, [pc, #16]	@ (8002224 <vcom_DeInit+0x28>)
 8002212:	f7ff ff6b 	bl	80020ec <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002216:	200f      	movs	r0, #15
 8002218:	f001 fb6f 	bl	80038fa <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800221c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000a7c 	.word	0x20000a7c

08002228 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4804      	ldr	r0, [pc, #16]	@ (800224c <vcom_Trace_DMA+0x24>)
 800223c:	f005 fb2c 	bl	8007898 <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 8002240:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000a7c 	.word	0x20000a7c

08002250 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002258:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <vcom_ReceiveInit+0x70>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800225e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002262:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	e893 0006 	ldmia.w	r3, {r1, r2}
 800226c:	4815      	ldr	r0, [pc, #84]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800226e:	f007 f9fe 	bl	800966e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002272:	bf00      	nop
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002282:	d0f7      	beq.n	8002274 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002284:	bf00      	nop
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002294:	d1f7      	bne.n	8002286 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80022a4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80022a6:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022a8:	f007 fa3c 	bl	8009724 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	4906      	ldr	r1, [pc, #24]	@ (80022c8 <vcom_ReceiveInit+0x78>)
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <vcom_ReceiveInit+0x74>)
 80022b2:	f005 fa9b 	bl	80077ec <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 80022b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000c64 	.word	0x20000c64
 80022c4:	20000a7c 	.word	0x20000a7c
 80022c8:	20000c5c 	.word	0x20000c5c

080022cc <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_UART_TxCpltCallback+0x18>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2000      	movs	r0, #0
 80022da:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000c60 	.word	0x20000c60

080022e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_UART_RxCpltCallback+0x38>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_UART_RxCpltCallback+0x26>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <HAL_UART_RxCpltCallback+0x38>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	2101      	movs	r1, #1
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <HAL_UART_RxCpltCallback+0x3c>)
 800230c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 800230e:	2201      	movs	r2, #1
 8002310:	4904      	ldr	r1, [pc, #16]	@ (8002324 <HAL_UART_RxCpltCallback+0x3c>)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f005 fa6a 	bl	80077ec <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000c64 	.word	0x20000c64
 8002324:	20000c5c 	.word	0x20000c5c

08002328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002328:	480d      	ldr	r0, [pc, #52]	@ (8002360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800232a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800232c:	f7ff fb12 	bl	8001954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <LoopForever+0x6>)
  ldr r1, =_edata
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <LoopForever+0xe>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002348:	4c0a      	ldr	r4, [pc, #40]	@ (8002374 <LoopForever+0x16>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002356:	f01a ff29 	bl	801d1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800235a:	f7fe fe4d 	bl	8000ff8 <main>

0800235e <LoopForever>:

LoopForever:
    b LoopForever
 800235e:	e7fe      	b.n	800235e <LoopForever>
  ldr   r0, =_estack
 8002360:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800236c:	0801e178 	.word	0x0801e178
  ldr r2, =_sbss
 8002370:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002374:	200044f8 	.word	0x200044f8

08002378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>

0800237a <LL_AHB2_GRP1_EnableClock>:
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4313      	orrs	r3, r2
 8002390:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7ff ffd7 	bl	800237a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80023cc:	2320      	movs	r3, #32
 80023ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	4a0b      	ldr	r2, [pc, #44]	@ (800240c <BSP_LED_Init+0x60>)
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	f107 020c 	add.w	r2, r7, #12
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 feaa 	bl	8004144 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	4a06      	ldr	r2, [pc, #24]	@ (800240c <BSP_LED_Init+0x60>)
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	2120      	movs	r1, #32
 80023fa:	2201      	movs	r2, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 f8cf 	bl	80045a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000004 	.word	0x20000004

08002410 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <BSP_LED_On+0x28>)
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	2120      	movs	r1, #32
 8002424:	2200      	movs	r2, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f002 f8ba 	bl	80045a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000004 	.word	0x20000004

0800243c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4a06      	ldr	r2, [pc, #24]	@ (8002464 <BSP_LED_Off+0x28>)
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	2120      	movs	r1, #32
 8002450:	2201      	movs	r2, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f002 f8a4 	bl	80045a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000004 	.word	0x20000004

08002468 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002488:	2002      	movs	r0, #2
 800248a:	f7ff ff76 	bl	800237a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800248e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002492:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002494:	2301      	movs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	4a20      	ldr	r2, [pc, #128]	@ (800252c <BSP_PB_Init+0xc4>)
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	f107 020c 	add.w	r2, r7, #12
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fe45 	bl	8004144 <HAL_GPIO_Init>
 80024ba:	e031      	b.n	8002520 <BSP_PB_Init+0xb8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80024bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80024c0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <BSP_PB_Init+0xc4>)
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	f107 020c 	add.w	r2, r7, #12
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fe37 	bl	8004144 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <BSP_PB_Init+0xc8>)
 80024dc:	441a      	add	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	4914      	ldr	r1, [pc, #80]	@ (8002534 <BSP_PB_Init+0xcc>)
 80024e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f001 fe18 	bl	800411e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <BSP_PB_Init+0xc8>)
 80024f4:	1898      	adds	r0, r3, r2
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002538 <BSP_PB_Init+0xd0>)
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	461a      	mov	r2, r3
 8002500:	2100      	movs	r1, #0
 8002502:	f001 fdf3 	bl	80040ec <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002506:	2029      	movs	r0, #41	@ 0x29
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4a0c      	ldr	r2, [pc, #48]	@ (800253c <BSP_PB_Init+0xd4>)
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	f001 f9c9 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002518:	2329      	movs	r3, #41	@ 0x29
 800251a:	4618      	mov	r0, r3
 800251c:	f001 f9df 	bl	80038de <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008
 8002530:	20000c68 	.word	0x20000c68
 8002534:	0801dc28 	.word	0x0801dc28
 8002538:	2000000c 	.word	0x2000000c
 800253c:	20000010 	.word	0x20000010

08002540 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff fff1 	bl	8002540 <BSP_PB_Callback>
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_AHB2_GRP1_EnableClock>:
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7ff ffdb 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80025ac:	2310      	movs	r3, #16
 80025ae:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c4:	f001 fdbe 	bl	8004144 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80025c8:	2320      	movs	r3, #32
 80025ca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d4:	f001 fdb6 	bl	8004144 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80025d8:	2200      	movs	r2, #0
 80025da:	2120      	movs	r1, #32
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e0:	f001 ffde 	bl	80045a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80025e4:	2200      	movs	r2, #0
 80025e6:	2110      	movs	r1, #16
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025ec:	f001 ffd8 	bl	80045a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d83f      	bhi.n	800268c <BSP_RADIO_ConfigRFSwitch+0x90>
 800260c:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002625 	.word	0x08002625
 8002618:	0800263f 	.word	0x0800263f
 800261c:	08002659 	.word	0x08002659
 8002620:	08002673 	.word	0x08002673
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	2110      	movs	r1, #16
 8002628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262c:	f001 ffb8 	bl	80045a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002638:	f001 ffb2 	bl	80045a0 <HAL_GPIO_WritePin>
      break;      
 800263c:	e027      	b.n	800268e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800263e:	2201      	movs	r2, #1
 8002640:	2110      	movs	r1, #16
 8002642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002646:	f001 ffab 	bl	80045a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800264a:	2200      	movs	r2, #0
 800264c:	2120      	movs	r1, #32
 800264e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002652:	f001 ffa5 	bl	80045a0 <HAL_GPIO_WritePin>
      break;
 8002656:	e01a      	b.n	800268e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002658:	2201      	movs	r2, #1
 800265a:	2110      	movs	r1, #16
 800265c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002660:	f001 ff9e 	bl	80045a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002664:	2201      	movs	r2, #1
 8002666:	2120      	movs	r1, #32
 8002668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266c:	f001 ff98 	bl	80045a0 <HAL_GPIO_WritePin>
      break;
 8002670:	e00d      	b.n	800268e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002672:	2200      	movs	r2, #0
 8002674:	2110      	movs	r1, #16
 8002676:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800267a:	f001 ff91 	bl	80045a0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800267e:	2201      	movs	r2, #1
 8002680:	2120      	movs	r1, #32
 8002682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002686:	f001 ff8b 	bl	80045a0 <HAL_GPIO_WritePin>
      break;
 800268a:	e000      	b.n	800268e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800268c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800269c:	2302      	movs	r3, #2
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ce:	2003      	movs	r0, #3
 80026d0:	f001 f8e0 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026d4:	f003 fcf0 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a09      	ldr	r2, [pc, #36]	@ (8002700 <HAL_Init+0x3c>)
 80026dc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff f90e 	bl	8001900 <HAL_InitTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	e001      	b.n	80026f4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026f0:	f7fe fe90 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026f4:	79fb      	ldrb	r3, [r7, #7]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_IncTick+0x1c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_IncTick+0x20>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a03      	ldr	r2, [pc, #12]	@ (8002724 <HAL_IncTick+0x20>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000018 	.word	0x20000018
 8002724:	20000c70 	.word	0x20000c70

08002728 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800272c:	4b02      	ldr	r3, [pc, #8]	@ (8002738 <HAL_GetUIDw0+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	1fff7590 	.word	0x1fff7590

0800273c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002740:	4b02      	ldr	r3, [pc, #8]	@ (800274c <HAL_GetUIDw1+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	1fff7594 	.word	0x1fff7594

08002750 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002754:	4b02      	ldr	r3, [pc, #8]	@ (8002760 <HAL_GetUIDw2+0x10>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	1fff7598 	.word	0x1fff7598

08002764 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2107      	movs	r1, #7
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	210f      	movs	r1, #15
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 010f 	and.w	r1, r3, #15
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	43db      	mvns	r3, r3
 80028a4:	401a      	ands	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0219      	lsls	r1, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	400b      	ands	r3, r1
 80028ae:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80028b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028d6:	f023 0317 	bic.w	r3, r3, #23
 80028da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028fc:	f023 0317 	bic.w	r3, r3, #23
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6093      	str	r3, [r2, #8]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002922:	d101      	bne.n	8002928 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002944:	f023 0317 	bic.w	r3, r3, #23
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800296a:	f023 0317 	bic.w	r3, r3, #23
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsDisableOngoing+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsDisableOngoing+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d8:	f023 0317 	bic.w	r3, r3, #23
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029fe:	f023 0317 	bic.w	r3, r3, #23
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d101      	bne.n	8002a2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1ae      	b.n	8002db8 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe f8fb 	bl	8000c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff44 	bl	800290e <LL_ADC_IsInternalRegulatorEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d115      	bne.n	8002ab8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff18 	bl	80028c6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a96:	4b9b      	ldr	r3, [pc, #620]	@ (8002d04 <HAL_ADC_Init+0x2cc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8002d08 <HAL_ADC_Init+0x2d0>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002aaa:	e002      	b.n	8002ab2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f9      	bne.n	8002aac <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff26 	bl	800290e <LL_ADC_IsInternalRegulatorEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f043 0210 	orr.w	r2, r3, #16
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff93 	bl	8002a14 <LL_ADC_REG_IsConversionOngoing>
 8002aee:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 8154 	bne.w	8002da6 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 8150 	bne.w	8002da6 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b0e:	f043 0202 	orr.w	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff30 	bl	8002980 <LL_ADC_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d14f      	bne.n	8002bc6 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f023 0118 	bic.w	r1, r3, #24
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d111      	bne.n	8002b7e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b66:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002b6c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002b72:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	4b61      	ldr	r3, [pc, #388]	@ (8002d0c <HAL_ADC_Init+0x2d4>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b9a:	d014      	beq.n	8002bc6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d00f      	beq.n	8002bc6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bae:	d00a      	beq.n	8002bc6 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002bb0:	4b57      	ldr	r3, [pc, #348]	@ (8002d10 <HAL_ADC_Init+0x2d8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002bc0:	4953      	ldr	r1, [pc, #332]	@ (8002d10 <HAL_ADC_Init+0x2d8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7e1b      	ldrb	r3, [r3, #24]
 8002bca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7e5b      	ldrb	r3, [r3, #25]
 8002bd0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bd2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e9b      	ldrb	r3, [r3, #26]
 8002bd8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bda:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002be0:	2a00      	cmp	r2, #0
 8002be2:	d002      	beq.n	8002bea <HAL_ADC_Init+0x1b2>
 8002be4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002be8:	e000      	b.n	8002bec <HAL_ADC_Init+0x1b4>
 8002bea:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bf2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	da04      	bge.n	8002c06 <HAL_ADC_Init+0x1ce>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c04:	e001      	b.n	8002c0a <HAL_ADC_Init+0x1d2>
 8002c06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                 hadc->Init.DataAlign                                           |
 8002c0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002c12:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d114      	bne.n	8002c50 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7e9b      	ldrb	r3, [r3, #26]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c64:	4313      	orrs	r3, r2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002c76:	f423 73f3 	bic.w	r3, r3, #486	@ 0x1e6
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	4b22      	ldr	r3, [pc, #136]	@ (8002d14 <HAL_ADC_Init+0x2dc>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	6979      	ldr	r1, [r7, #20]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f7ff fd7d 	bl	80027a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4919      	ldr	r1, [pc, #100]	@ (8002d18 <HAL_ADC_Init+0x2e0>)
 8002cb4:	f7ff fd75 	bl	80027a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d108      	bne.n	8002cd2 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f062 020f 	orn	r2, r2, #15
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd0:	e044      	b.n	8002d5c <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cda:	d13f      	bne.n	8002d5c <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e00c      	b.n	8002cfc <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	d012      	beq.n	8002d1c <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d9ef      	bls.n	8002ce2 <HAL_ADC_Init+0x2aa>
 8002d02:	e00c      	b.n	8002d1e <HAL_ADC_Init+0x2e6>
 8002d04:	20000000 	.word	0x20000000
 8002d08:	053e2d63 	.word	0x053e2d63
 8002d0c:	1ffffc02 	.word	0x1ffffc02
 8002d10:	40012708 	.word	0x40012708
 8002d14:	dffffc02 	.word	0xdffffc02
 8002d18:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002d1c:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f062 020f 	orn	r2, r2, #15
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d34:	e012      	b.n	8002d5c <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f003 031c 	and.w	r3, r3, #28
 8002d48:	f06f 020f 	mvn.w	r2, #15
 8002d4c:	fa02 f103 	lsl.w	r1, r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <HAL_ADC_Init+0x388>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002d82:	e018      	b.n	8002db6 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	f023 0312 	bic.w	r3, r3, #18
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002da4:	e007      	b.n	8002db6 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	833fffe7 	.word	0x833fffe7

08002dc4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06a      	b.n	8002eac <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fabe 	bl	8003364 <ADC_ConversionStop>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb82 	bl	80034fc <ADC_Disable>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fd6d 	bl	80028ec <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8002e20:	f023 0303 	bic.w	r3, r3, #3
 8002e24:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f240 329f 	movw	r2, #927	@ 0x39f
 8002e2e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <HAL_ADC_DeInit+0xf0>)
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002e4e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0207 	bic.w	r2, r2, #7
 8002e5e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1a      	ldr	r2, [r3, #32]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_ADC_DeInit+0xf4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <HAL_ADC_DeInit+0xf4>)
 8002e84:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8002e88:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fefe 	bl	8000c8c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	833e0200 	.word	0x833e0200
 8002eb8:	40012708 	.word	0x40012708

08002ebc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fda3 	bl	8002a14 <LL_ADC_REG_IsConversionOngoing>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d132      	bne.n	8002f3a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start+0x26>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e02e      	b.n	8002f40 <HAL_ADC_Start+0x84>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa80 	bl	80033f0 <ADC_Enable>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11a      	bne.n	8002f30 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	221c      	movs	r2, #28
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fd4d 	bl	80029c8 <LL_ADC_REG_StartConversion>
 8002f2e:	e006      	b.n	8002f3e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002f38:	e001      	b.n	8002f3e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Stop+0x16>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e022      	b.n	8002fa4 <HAL_ADC_Stop+0x5c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9fc 	bl	8003364 <ADC_ConversionStop>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d111      	bne.n	8002f9a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fac0 	bl	80034fc <ADC_Disable>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e010      	b.n	8002fe6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e077      	b.n	80030d2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fe6:	f7fe fc95 	bl	8001914 <HAL_GetTick>
 8002fea:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002fec:	e021      	b.n	8003032 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ff4:	d01d      	beq.n	8003032 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002ff6:	f7fe fc8d 	bl	8001914 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <HAL_ADC_PollForConversion+0x60>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d112      	bne.n	8003032 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	f043 0204 	orr.w	r2, r3, #4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0d6      	beq.n	8002fee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fbc4 	bl	80027de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d031      	beq.n	80030c0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7e9b      	ldrb	r3, [r3, #26]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d12d      	bne.n	80030c0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b08      	cmp	r3, #8
 8003070:	d126      	bne.n	80030c0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fccc 	bl	8002a14 <LL_ADC_REG_IsConversionOngoing>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d112      	bne.n	80030a8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 020c 	bic.w	r2, r2, #12
 8003090:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80030a6:	e00b      	b.n	80030c0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e1b      	ldrb	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	220c      	movs	r2, #12
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x28>
 8003118:	2302      	movs	r3, #2
 800311a:	e110      	b.n	800333e <HAL_ADC_ConfigChannel+0x24a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fc73 	bl	8002a14 <LL_ADC_REG_IsConversionOngoing>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80f7 	bne.w	8003324 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	f000 80b1 	beq.w	80032a2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003148:	d004      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800314e:	4a7e      	ldr	r2, [pc, #504]	@ (8003348 <HAL_ADC_ConfigChannel+0x254>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f7ff fb70 	bl	8002844 <LL_ADC_REG_SetSequencerChAdd>
 8003164:	e041      	b.n	80031ea <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	210f      	movs	r1, #15
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_ADC_ConfigChannel+0xa0>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	e011      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xc4>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e003      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	6849      	ldr	r1, [r1, #4]
 80031bc:	f001 011f 	and.w	r1, r1, #31
 80031c0:	408b      	lsls	r3, r1
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d808      	bhi.n	80031ea <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	f7ff fb0c 	bl	8002802 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7ff fb49 	bl	800288e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f280 8097 	bge.w	8003334 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003206:	4851      	ldr	r0, [pc, #324]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 8003208:	f7ff fabe 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 800320c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a4f      	ldr	r2, [pc, #316]	@ (8003350 <HAL_ADC_ConfigChannel+0x25c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d120      	bne.n	800325a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11b      	bne.n	800325a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003228:	4619      	mov	r1, r3
 800322a:	4848      	ldr	r0, [pc, #288]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 800322c:	f7ff fa9a 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003230:	4b48      	ldr	r3, [pc, #288]	@ (8003354 <HAL_ADC_ConfigChannel+0x260>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	4a48      	ldr	r2, [pc, #288]	@ (8003358 <HAL_ADC_ConfigChannel+0x264>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800324a:	e002      	b.n	8003252 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f9      	bne.n	800324c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003258:	e06c      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3f      	ldr	r2, [pc, #252]	@ (800335c <HAL_ADC_ConfigChannel+0x268>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10c      	bne.n	800327e <HAL_ADC_ConfigChannel+0x18a>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003274:	4619      	mov	r1, r3
 8003276:	4835      	ldr	r0, [pc, #212]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 8003278:	f7ff fa74 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
 800327c:	e05a      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a37      	ldr	r2, [pc, #220]	@ (8003360 <HAL_ADC_ConfigChannel+0x26c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d155      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800328e:	2b00      	cmp	r3, #0
 8003290:	d150      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003298:	4619      	mov	r1, r3
 800329a:	482c      	ldr	r0, [pc, #176]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 800329c:	f7ff fa62 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
 80032a0:	e048      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032aa:	d004      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032b0:	4a25      	ldr	r2, [pc, #148]	@ (8003348 <HAL_ADC_ConfigChannel+0x254>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d107      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7ff fad1 	bl	8002868 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da32      	bge.n	8003334 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ce:	481f      	ldr	r0, [pc, #124]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 80032d0:	f7ff fa5a 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 80032d4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_ADC_ConfigChannel+0x25c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d107      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032e6:	4619      	mov	r1, r3
 80032e8:	4818      	ldr	r0, [pc, #96]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 80032ea:	f7ff fa3b 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
 80032ee:	e021      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	@ (800335c <HAL_ADC_ConfigChannel+0x268>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d107      	bne.n	800330a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003300:	4619      	mov	r1, r3
 8003302:	4812      	ldr	r0, [pc, #72]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 8003304:	f7ff fa2e 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
 8003308:	e014      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a14      	ldr	r2, [pc, #80]	@ (8003360 <HAL_ADC_ConfigChannel+0x26c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10f      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800331a:	4619      	mov	r1, r3
 800331c:	480b      	ldr	r0, [pc, #44]	@ (800334c <HAL_ADC_ConfigChannel+0x258>)
 800331e:	f7ff fa21 	bl	8002764 <LL_ADC_SetCommonPathInternalCh>
 8003322:	e007      	b.n	8003334 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800333c:	7ffb      	ldrb	r3, [r7, #31]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	80000004 	.word	0x80000004
 800334c:	40012708 	.word	0x40012708
 8003350:	b0001000 	.word	0xb0001000
 8003354:	20000000 	.word	0x20000000
 8003358:	053e2d63 	.word	0x053e2d63
 800335c:	b8004000 	.word	0xb8004000
 8003360:	b4002000 	.word	0xb4002000

08003364 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fb4f 	bl	8002a14 <LL_ADC_REG_IsConversionOngoing>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d033      	beq.n	80033e4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fb0f 	bl	80029a4 <LL_ADC_IsDisableOngoing>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fb2c 	bl	80029ee <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003396:	f7fe fabd 	bl	8001914 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800339c:	e01b      	b.n	80033d6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800339e:	f7fe fab9 	bl	8001914 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d914      	bls.n	80033d6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e007      	b.n	80033e6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1dc      	bne.n	800339e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fabd 	bl	8002980 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d169      	bne.n	80034e0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b36      	ldr	r3, [pc, #216]	@ (80034ec <ADC_Enable+0xfc>)
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e055      	b.n	80034e2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fa7a 	bl	8002934 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003440:	482b      	ldr	r0, [pc, #172]	@ (80034f0 <ADC_Enable+0x100>)
 8003442:	f7ff f9a1 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 8003446:	4603      	mov	r3, r0
 8003448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <ADC_Enable+0x104>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <ADC_Enable+0x108>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003462:	e002      	b.n	800346a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3b01      	subs	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7e5b      	ldrb	r3, [r3, #25]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d033      	beq.n	80034e0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003478:	f7fe fa4c 	bl	8001914 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	e028      	b.n	80034d2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fa7b 	bl	8002980 <LL_ADC_IsEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fa4d 	bl	8002934 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800349a:	f7fe fa3b 	bl	8001914 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d914      	bls.n	80034d2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d00d      	beq.n	80034d2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d1cf      	bne.n	8003480 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	80000017 	.word	0x80000017
 80034f0:	40012708 	.word	0x40012708
 80034f4:	20000000 	.word	0x20000000
 80034f8:	053e2d63 	.word	0x053e2d63

080034fc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fa4b 	bl	80029a4 <LL_ADC_IsDisableOngoing>
 800350e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fa33 	bl	8002980 <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d047      	beq.n	80035b0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d144      	bne.n	80035b0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0305 	and.w	r3, r3, #5
 8003530:	2b01      	cmp	r3, #1
 8003532:	d10c      	bne.n	800354e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fa0e 	bl	800295a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2203      	movs	r2, #3
 8003544:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003546:	f7fe f9e5 	bl	8001914 <HAL_GetTick>
 800354a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800354c:	e029      	b.n	80035a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003552:	f043 0210 	orr.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356a:	f7fe f9d3 	bl	8001914 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d914      	bls.n	80035a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f043 0210 	orr.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1dc      	bne.n	800356a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <LL_ADC_IsEnabled>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_IsEnabled+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_IsEnabled+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <LL_ADC_IsCalibrationOnGoing>:
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035f2:	d101      	bne.n	80035f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_ADCEx_Calibration_Start+0x1a>
 800361a:	2302      	movs	r3, #2
 800361c:	e068      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0xec>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff68 	bl	80034fc <ADC_Disable>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ffc0 	bl	80035ba <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d14c      	bne.n	80036da <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003648:	f043 0202 	orr.w	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0203 	bic.w	r2, r2, #3
 800366a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800367a:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800367c:	e014      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 800368a:	d30d      	bcc.n	80036a8 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f023 0312 	bic.w	r3, r3, #18
 8003694:	f043 0210 	orr.w	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e023      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff96 	bl	80035de <LL_ADC_IsCalibrationOnGoing>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e2      	bne.n	800367e <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68d9      	ldr	r1, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80036d8:	e005      	b.n	80036e6 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372a:	4a04      	ldr	r2, [pc, #16]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4906      	ldr	r1, [pc, #24]	@ (8003790 <__NVIC_EnableIRQ+0x34>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db12      	blt.n	80037cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	490a      	ldr	r1, [pc, #40]	@ (80037d8 <__NVIC_DisableIRQ+0x44>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	3320      	adds	r3, #32
 80037bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037c0:	f3bf 8f4f 	dsb	sy
}
 80037c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037c6:	f3bf 8f6f 	isb	sy
}
 80037ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	@ (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	@ (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	@ 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
         );
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	@ 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff2b 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff42 	bl	8003740 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ffb4 	bl	8003830 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff83 	bl	80037dc <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff35 	bl	800375c <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff43 	bl	8003794 <__NVIC_DisableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e08e      	b.n	8003a48 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <HAL_DMA_Init+0x138>)
 8003932:	429a      	cmp	r2, r3
 8003934:	d80f      	bhi.n	8003956 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b45      	ldr	r3, [pc, #276]	@ (8003a54 <HAL_DMA_Init+0x13c>)
 800393e:	4413      	add	r3, r2
 8003940:	4a45      	ldr	r2, [pc, #276]	@ (8003a58 <HAL_DMA_Init+0x140>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	009a      	lsls	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a42      	ldr	r2, [pc, #264]	@ (8003a5c <HAL_DMA_Init+0x144>)
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40
 8003954:	e00e      	b.n	8003974 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4b40      	ldr	r3, [pc, #256]	@ (8003a60 <HAL_DMA_Init+0x148>)
 800395e:	4413      	add	r3, r2
 8003960:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <HAL_DMA_Init+0x140>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a3c      	ldr	r2, [pc, #240]	@ (8003a64 <HAL_DMA_Init+0x14c>)
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800398a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fb24 	bl	8004014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039d4:	d102      	bne.n	80039dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_DMA_Init+0x106>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d80c      	bhi.n	8003a1e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb4d 	bl	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	e008      	b.n	8003a30 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40020407 	.word	0x40020407
 8003a54:	bffdfff8 	.word	0xbffdfff8
 8003a58:	cccccccd 	.word	0xcccccccd
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	bffdfbf8 	.word	0xbffdfbf8
 8003a64:	40020400 	.word	0x40020400

08003a68 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07b      	b.n	8003b72 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b3a      	ldr	r3, [pc, #232]	@ (8003b7c <HAL_DMA_DeInit+0x114>)
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d80f      	bhi.n	8003ab6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b38      	ldr	r3, [pc, #224]	@ (8003b80 <HAL_DMA_DeInit+0x118>)
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a38      	ldr	r2, [pc, #224]	@ (8003b84 <HAL_DMA_DeInit+0x11c>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	@ (8003b88 <HAL_DMA_DeInit+0x120>)
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ab4:	e00e      	b.n	8003ad4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b33      	ldr	r3, [pc, #204]	@ (8003b8c <HAL_DMA_DeInit+0x124>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <HAL_DMA_DeInit+0x11c>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b90 <HAL_DMA_DeInit+0x128>)
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	f003 021c 	and.w	r2, r3, #28
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa8f 	bl	8004014 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b06:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00f      	beq.n	8003b30 <HAL_DMA_DeInit+0xc8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d80b      	bhi.n	8003b30 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fac3 	bl	80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40020407 	.word	0x40020407
 8003b80:	bffdfff8 	.word	0xbffdfff8
 8003b84:	cccccccd 	.word	0xcccccccd
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	bffdfbf8 	.word	0xbffdfbf8
 8003b90:	40020400 	.word	0x40020400

08003b94 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA_Start_IT+0x20>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e069      	b.n	8003c88 <HAL_DMA_Start_IT+0xf4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d155      	bne.n	8003c74 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f9d3 	bl	8003f98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 020e 	orr.w	r2, r2, #14
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e00f      	b.n	8003c2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 020a 	orr.w	r2, r2, #10
 8003c2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c48:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c60:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e008      	b.n	8003c86 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2280      	movs	r2, #128	@ 0x80
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e04f      	b.n	8003d42 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d008      	beq.n	8003cc0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e040      	b.n	8003d42 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 020e 	bic.w	r2, r2, #14
 8003cce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf4:	f003 021c 	and.w	r2, r3, #28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003d02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d005      	beq.n	8003d70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2204      	movs	r2, #4
 8003d68:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	e047      	b.n	8003e00 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 020e 	bic.w	r2, r2, #14
 8003d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	f003 021c 	and.w	r2, r3, #28
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dbc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dde:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
    }
  }
  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e28:	f003 031c 	and.w	r3, r3, #28
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x7c>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d107      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e64:	f003 021c 	and.w	r2, r3, #28
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8081 	beq.w	8003f80 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003e86:	e07b      	b.n	8003f80 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	f003 031c 	and.w	r3, r3, #28
 8003e90:	2202      	movs	r2, #2
 8003e92:	409a      	lsls	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03d      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x10c>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d038      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 020a 	bic.w	r2, r2, #10
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f8c <HAL_DMA_IRQHandler+0x180>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d909      	bls.n	8003eec <HAL_DMA_IRQHandler+0xe0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003edc:	f003 031c 	and.w	r3, r3, #28
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <HAL_DMA_IRQHandler+0x184>)
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	6053      	str	r3, [r2, #4]
 8003eea:	e008      	b.n	8003efe <HAL_DMA_IRQHandler+0xf2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef0:	f003 031c 	and.w	r3, r3, #28
 8003ef4:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <HAL_DMA_IRQHandler+0x188>)
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d038      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003f16:	e033      	b.n	8003f80 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1c:	f003 031c 	and.w	r3, r3, #28
 8003f20:	2208      	movs	r2, #8
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02a      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x176>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d025      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 020e 	bic.w	r2, r2, #14
 8003f44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f003 021c 	and.w	r2, r3, #28
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
}
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40020080 	.word	0x40020080
 8003f90:	40020400 	.word	0x40020400
 8003f94:	40020000 	.word	0x40020000

08003f98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f003 021c 	and.w	r2, r3, #28
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d108      	bne.n	8003ff8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ff6:	e007      	b.n	8004008 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
	...

08004014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b1c      	ldr	r3, [pc, #112]	@ (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d813      	bhi.n	8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004034:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3b08      	subs	r3, #8
 8004044:	4a14      	ldr	r2, [pc, #80]	@ (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e011      	b.n	8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800405a:	4413      	add	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	3b08      	subs	r3, #8
 8004068:	4a0b      	ldr	r2, [pc, #44]	@ (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	3307      	adds	r3, #7
 8004072:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004078:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2201      	movs	r2, #1
 8004082:	409a      	lsls	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40020407 	.word	0x40020407
 8004098:	cccccccd 	.word	0xcccccccd
 800409c:	4002081c 	.word	0x4002081c
 80040a0:	40020880 	.word	0x40020880

080040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2201      	movs	r2, #1
 80040d4:	409a      	lsls	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	1000823f 	.word	0x1000823f
 80040e8:	40020940 	.word	0x40020940

080040ec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	460b      	mov	r3, r1
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	605a      	str	r2, [r3, #4]
      break;
 800410a:	e002      	b.n	8004112 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	75fb      	strb	r3, [r7, #23]
      break;
 8004110:	bf00      	nop
  }

  return status;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e003      	b.n	800413a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004152:	e140      	b.n	80043d6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	4013      	ands	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8132 	beq.w	80043d0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d005      	beq.n	8004184 <HAL_GPIO_Init+0x40>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d130      	bne.n	80041e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ba:	2201      	movs	r2, #1
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0201 	and.w	r2, r3, #1
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d017      	beq.n	8004222 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d123      	bne.n	8004276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	08da      	lsrs	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3208      	adds	r2, #8
 8004236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	220f      	movs	r2, #15
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	6939      	ldr	r1, [r7, #16]
 8004272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	2203      	movs	r2, #3
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0203 	and.w	r2, r3, #3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 808c 	beq.w	80043d0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80042b8:	4a4e      	ldr	r2, [pc, #312]	@ (80043f4 <HAL_GPIO_Init+0x2b0>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	2207      	movs	r2, #7
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042e2:	d00d      	beq.n	8004300 <HAL_GPIO_Init+0x1bc>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a44      	ldr	r2, [pc, #272]	@ (80043f8 <HAL_GPIO_Init+0x2b4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <HAL_GPIO_Init+0x1b8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a43      	ldr	r2, [pc, #268]	@ (80043fc <HAL_GPIO_Init+0x2b8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_GPIO_Init+0x1b4>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e004      	b.n	8004302 <HAL_GPIO_Init+0x1be>
 80042f8:	2307      	movs	r3, #7
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_Init+0x1be>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_GPIO_Init+0x1be>
 8004300:	2300      	movs	r3, #0
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	f002 0203 	and.w	r2, r2, #3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4093      	lsls	r3, r2
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004312:	4938      	ldr	r1, [pc, #224]	@ (80043f4 <HAL_GPIO_Init+0x2b0>)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004320:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004326:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004346:	4a2e      	ldr	r2, [pc, #184]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800434e:	4b2c      	ldr	r3, [pc, #176]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004354:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004374:	4a22      	ldr	r2, [pc, #136]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800437c:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a0:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043a6:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <HAL_GPIO_Init+0x2bc>)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3301      	adds	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f aeb7 	bne.w	8004154 <HAL_GPIO_Init+0x10>
  }
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	48000400 	.word	0x48000400
 80043fc:	48000800 	.word	0x48000800
 8004400:	58000800 	.word	0x58000800

08004404 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004412:	e0af      	b.n	8004574 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004414:	2201      	movs	r2, #1
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a2 	beq.w	800456e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800442a:	4a59      	ldr	r2, [pc, #356]	@ (8004590 <HAL_GPIO_DeInit+0x18c>)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	3302      	adds	r3, #2
 8004432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004436:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	2207      	movs	r2, #7
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004452:	d00d      	beq.n	8004470 <HAL_GPIO_DeInit+0x6c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a4f      	ldr	r2, [pc, #316]	@ (8004594 <HAL_GPIO_DeInit+0x190>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <HAL_GPIO_DeInit+0x68>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <HAL_GPIO_DeInit+0x194>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_GPIO_DeInit+0x64>
 8004464:	2302      	movs	r3, #2
 8004466:	e004      	b.n	8004472 <HAL_GPIO_DeInit+0x6e>
 8004468:	2307      	movs	r3, #7
 800446a:	e002      	b.n	8004472 <HAL_GPIO_DeInit+0x6e>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_GPIO_DeInit+0x6e>
 8004470:	2300      	movs	r3, #0
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f002 0203 	and.w	r2, r2, #3
 8004478:	0092      	lsls	r2, r2, #2
 800447a:	4093      	lsls	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	429a      	cmp	r2, r3
 8004480:	d136      	bne.n	80044f0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004482:	4b46      	ldr	r3, [pc, #280]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 8004484:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	4943      	ldr	r1, [pc, #268]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 800448e:	4013      	ands	r3, r2
 8004490:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004494:	4b41      	ldr	r3, [pc, #260]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 8004496:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	493f      	ldr	r1, [pc, #252]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80044a6:	4b3d      	ldr	r3, [pc, #244]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	493b      	ldr	r1, [pc, #236]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80044b4:	4b39      	ldr	r3, [pc, #228]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4937      	ldr	r1, [pc, #220]	@ (800459c <HAL_GPIO_DeInit+0x198>)
 80044be:	4013      	ands	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	2207      	movs	r2, #7
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004590 <HAL_GPIO_DeInit+0x18c>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	3302      	adds	r3, #2
 80044da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	482b      	ldr	r0, [pc, #172]	@ (8004590 <HAL_GPIO_DeInit+0x18c>)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	400a      	ands	r2, r1
 80044ea:	3302      	adds	r3, #2
 80044ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2103      	movs	r1, #3
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	08d2      	lsrs	r2, r2, #3
 8004524:	4019      	ands	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3208      	adds	r2, #8
 800452a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	2103      	movs	r1, #3
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	2101      	movs	r1, #1
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2103      	movs	r1, #3
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	401a      	ands	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3301      	adds	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af49 	bne.w	8004414 <HAL_GPIO_DeInit+0x10>
  }
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	48000400 	.word	0x48000400
 8004598:	48000800 	.word	0x48000800
 800459c:	58000800 	.word	0x58000800

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045bc:	e002      	b.n	80045c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	460b      	mov	r3, r1
 80045d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4013      	ands	r3, r2
 80045e6:	041a      	lsls	r2, r3, #16
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	400b      	ands	r3, r1
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	619a      	str	r2, [r3, #24]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800460a:	4b08      	ldr	r3, [pc, #32]	@ (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004616:	4a05      	ldr	r2, [pc, #20]	@ (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	4618      	mov	r0, r3
 8004620:	f005 fa68 	bl	8009af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	58000800 	.word	0x58000800

08004630 <LL_RCC_SetLPTIMClockSource>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	43db      	mvns	r3, r3
 8004648:	401a      	ands	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <LL_RCC_GetLPTIMClockSource>:
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800466e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4013      	ands	r3, r2
 8004676:	0c1a      	lsrs	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4313      	orrs	r3, r2
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <LL_APB1_GRP1_ForceReset>:
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4313      	orrs	r3, r2
 800469c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <LL_APB1_GRP2_ForceReset>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4313      	orrs	r3, r2
 80046be:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <LL_APB1_GRP1_ReleaseReset>:
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	43db      	mvns	r3, r3
 80046dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046e0:	4013      	ands	r3, r2
 80046e2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <LL_APB1_GRP2_ReleaseReset>:
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	43db      	mvns	r3, r3
 8004700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004704:	4013      	ands	r3, r2
 8004706:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
	...

08004714 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0b6      	b.n	8004894 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc fe71 	bl	8001428 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004766:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004770:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004772:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fac2 	bl	8004d00 <LPTIM_WaitForFlag>
 800477c:	4603      	mov	r3, r0
 800477e:	2b03      	cmp	r3, #3
 8004780:	d101      	bne.n	8004786 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e086      	b.n	8004894 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 faea 	bl	8004d60 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 faaa 	bl	8004ce6 <HAL_LPTIM_GetState>
 8004792:	4603      	mov	r3, r0
 8004794:	2b03      	cmp	r3, #3
 8004796:	d101      	bne.n	800479c <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e07b      	b.n	8004894 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d004      	beq.n	80047b6 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047b4:	d103      	bne.n	80047be <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f023 031e 	bic.w	r3, r3, #30
 80047bc:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d005      	beq.n	80047d6 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4b30      	ldr	r3, [pc, #192]	@ (800489c <HAL_LPTIM_Init+0x188>)
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047e6:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80047ec:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80047f2:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80047f8:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004810:	4313      	orrs	r3, r2
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d004      	beq.n	800482a <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004828:	d107      	bne.n	800483a <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004832:	4313      	orrs	r3, r2
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004842:	4293      	cmp	r3, r2
 8004844:	d00a      	beq.n	800485c <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800484e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004854:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <HAL_LPTIM_Init+0x18c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	621a      	str	r2, [r3, #32]
 800487e:	e004      	b.n	800488a <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004888:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	ff19f1fe 	.word	0xff19f1fe
 80048a0:	40007c00 	.word	0x40007c00

080048a4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a48      	ldr	r2, [pc, #288]	@ (80049dc <HAL_LPTIM_Counter_Start_IT+0x138>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <HAL_LPTIM_Counter_Start_IT+0x2e>
 80048c0:	4b47      	ldr	r3, [pc, #284]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c6:	4a46      	ldr	r2, [pc, #280]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048d0:	e015      	b.n	80048fe <HAL_LPTIM_Counter_Start_IT+0x5a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a43      	ldr	r2, [pc, #268]	@ (80049e4 <HAL_LPTIM_Counter_Start_IT+0x140>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <HAL_LPTIM_Counter_Start_IT+0x4a>
 80048dc:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e2:	4a3f      	ldr	r2, [pc, #252]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048ec:	e007      	b.n	80048fe <HAL_LPTIM_Counter_Start_IT+0x5a>
 80048ee:	4b3c      	ldr	r3, [pc, #240]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80048f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00c      	beq.n	8004920 <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 800490a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800490e:	d107      	bne.n	8004920 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 800491e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2210      	movs	r2, #16
 8004936:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004940:	2110      	movs	r1, #16
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9dc 	bl	8004d00 <LPTIM_WaitForFlag>
 8004948:	4603      	mov	r3, r0
 800494a:	2b03      	cmp	r3, #3
 800494c:	d101      	bne.n	8004952 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e03f      	b.n	80049d2 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa04 	bl	8004d60 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9c4 	bl	8004ce6 <HAL_LPTIM_GetState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b03      	cmp	r3, #3
 8004962:	d101      	bne.n	8004968 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e034      	b.n	80049d2 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0210 	orr.w	r2, r2, #16
 8004976:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0202 	orr.w	r2, r2, #2
 8004986:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004996:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049a6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0204 	orr.w	r2, r2, #4
 80049c6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40007c00 	.word	0x40007c00
 80049e0:	58000800 	.word	0x58000800
 80049e4:	40009400 	.word	0x40009400

080049e8 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	@ (8004aa8 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d108      	bne.n	8004a14 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 8004a02:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a08:	4a28      	ldr	r2, [pc, #160]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a12:	e015      	b.n	8004a40 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a25      	ldr	r2, [pc, #148]	@ (8004ab0 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <HAL_LPTIM_Counter_Stop_IT+0x48>
 8004a1e:	4b23      	ldr	r3, [pc, #140]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a24:	4a21      	ldr	r2, [pc, #132]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a2e:	e007      	b.n	8004a40 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004a30:	4b1e      	ldr	r3, [pc, #120]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a36:	4a1d      	ldr	r2, [pc, #116]	@ (8004aac <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004a38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f98d 	bl	8004d60 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f94d 	bl	8004ce6 <HAL_LPTIM_GetState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d101      	bne.n	8004a56 <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e024      	b.n	8004aa0 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0210 	bic.w	r2, r2, #16
 8004a64:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0202 	bic.w	r2, r2, #2
 8004a74:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a84:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a94:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40007c00 	.word	0x40007c00
 8004aac:	58000800 	.word	0x58000800
 8004ab0:	40009400 	.word	0x40009400

08004ab4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d106      	bne.n	8004ae6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8af 	bl	8004c44 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d10d      	bne.n	8004b10 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d106      	bne.n	8004b10 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2202      	movs	r2, #2
 8004b08:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f8a3 	bl	8004c56 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d10d      	bne.n	8004b3a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d106      	bne.n	8004b3a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2204      	movs	r2, #4
 8004b32:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f897 	bl	8004c68 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10d      	bne.n	8004b64 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d106      	bne.n	8004b64 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f88b 	bl	8004c7a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d10d      	bne.n	8004b8e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d106      	bne.n	8004b8e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2210      	movs	r2, #16
 8004b86:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f87f 	bl	8004c8c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d106      	bne.n	8004bb8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f873 	bl	8004c9e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d10d      	bne.n	8004be2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d106      	bne.n	8004be2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2240      	movs	r2, #64	@ 0x40
 8004bda:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f867 	bl	8004cb0 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bec:	2b80      	cmp	r3, #128	@ 0x80
 8004bee:	d10d      	bne.n	8004c0c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b80      	cmp	r3, #128	@ 0x80
 8004bfc:	d106      	bne.n	8004c0c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2280      	movs	r2, #128	@ 0x80
 8004c04:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f85b 	bl	8004cc2 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c1a:	d10f      	bne.n	8004c3c <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2a:	d107      	bne.n	8004c3c <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c34:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f84c 	bl	8004cd4 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004cf4:	b2db      	uxtb	r3, r3
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004d0e:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <LPTIM_WaitForFlag+0x58>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a12      	ldr	r2, [pc, #72]	@ (8004d5c <LPTIM_WaitForFlag+0x5c>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	0b9b      	lsrs	r3, r3, #14
 8004d1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d002      	beq.n	8004d4a <LPTIM_WaitForFlag+0x4a>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ec      	bne.n	8004d24 <LPTIM_WaitForFlag+0x24>

  return result;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000
 8004d5c:	d1b71759 	.word	0xd1b71759

08004d60 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8004d6c:	b672      	cpsid	i
}
 8004d6e:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a8c      	ldr	r2, [pc, #560]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d015      	beq.n	8004da6 <LPTIM_Disable+0x46>
 8004d7a:	4a8b      	ldr	r2, [pc, #556]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d818      	bhi.n	8004db2 <LPTIM_Disable+0x52>
 8004d80:	4a8a      	ldr	r2, [pc, #552]	@ (8004fac <LPTIM_Disable+0x24c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <LPTIM_Disable+0x2e>
 8004d86:	4a8a      	ldr	r2, [pc, #552]	@ (8004fb0 <LPTIM_Disable+0x250>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d006      	beq.n	8004d9a <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8004d8c:	e011      	b.n	8004db2 <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d8e:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8004d92:	f7ff fc66 	bl	8004662 <LL_RCC_GetLPTIMClockSource>
 8004d96:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004d98:	e00c      	b.n	8004db4 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004d9a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004d9e:	f7ff fc60 	bl	8004662 <LL_RCC_GetLPTIMClockSource>
 8004da2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004da4:	e006      	b.n	8004db4 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004da6:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 8004daa:	f7ff fc5a 	bl	8004662 <LL_RCC_GetLPTIMClockSource>
 8004dae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004db0:	e000      	b.n	8004db4 <LPTIM_Disable+0x54>
      break;
 8004db2:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d019      	beq.n	8004e22 <LPTIM_Disable+0xc2>
 8004dee:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d81d      	bhi.n	8004e30 <LPTIM_Disable+0xd0>
 8004df4:	4a6d      	ldr	r2, [pc, #436]	@ (8004fac <LPTIM_Disable+0x24c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <LPTIM_Disable+0xa2>
 8004dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb0 <LPTIM_Disable+0x250>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8004e00:	e016      	b.n	8004e30 <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004e02:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004e06:	f7ff fc3e 	bl	8004686 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004e0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004e0e:	f7ff fc5c 	bl	80046ca <LL_APB1_GRP1_ReleaseReset>
      break;
 8004e12:	e00e      	b.n	8004e32 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004e14:	2020      	movs	r0, #32
 8004e16:	f7ff fc47 	bl	80046a8 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004e1a:	2020      	movs	r0, #32
 8004e1c:	f7ff fc67 	bl	80046ee <LL_APB1_GRP2_ReleaseReset>
      break;
 8004e20:	e007      	b.n	8004e32 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004e22:	2040      	movs	r0, #64	@ 0x40
 8004e24:	f7ff fc40 	bl	80046a8 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004e28:	2040      	movs	r0, #64	@ 0x40
 8004e2a:	f7ff fc60 	bl	80046ee <LL_APB1_GRP2_ReleaseReset>
      break;
 8004e2e:	e000      	b.n	8004e32 <LPTIM_Disable+0xd2>
      break;
 8004e30:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <LPTIM_Disable+0xe6>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <LPTIM_Disable+0xe6>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8097 	beq.w	8004f74 <LPTIM_Disable+0x214>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a57      	ldr	r2, [pc, #348]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <LPTIM_Disable+0x118>
 8004e50:	4a55      	ldr	r2, [pc, #340]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d815      	bhi.n	8004e82 <LPTIM_Disable+0x122>
 8004e56:	4a55      	ldr	r2, [pc, #340]	@ (8004fac <LPTIM_Disable+0x24c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <LPTIM_Disable+0x104>
 8004e5c:	4a54      	ldr	r2, [pc, #336]	@ (8004fb0 <LPTIM_Disable+0x250>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d005      	beq.n	8004e6e <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8004e62:	e00e      	b.n	8004e82 <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004e64:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8004e68:	f7ff fbe2 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004e6c:	e00a      	b.n	8004e84 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004e6e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004e72:	f7ff fbdd 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004e76:	e005      	b.n	8004e84 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8004e78:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 8004e7c:	f7ff fbd8 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004e80:	e000      	b.n	8004e84 <LPTIM_Disable+0x124>
        break;
 8004e82:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01a      	beq.n	8004ec0 <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004ea2:	2108      	movs	r1, #8
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff2b 	bl	8004d00 <LPTIM_WaitForFlag>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d103      	bne.n	8004eb8 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01a      	beq.n	8004efc <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004ede:	2110      	movs	r1, #16
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff0d 	bl	8004d00 <LPTIM_WaitForFlag>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d103      	bne.n	8004ef4 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff feee 	bl	8004d00 <LPTIM_WaitForFlag>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d103      	bne.n	8004f32 <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f3a:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d011      	beq.n	8004f6a <LPTIM_Disable+0x20a>
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <LPTIM_Disable+0x248>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d812      	bhi.n	8004f72 <LPTIM_Disable+0x212>
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <LPTIM_Disable+0x24c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <LPTIM_Disable+0x1fa>
 8004f52:	4a17      	ldr	r2, [pc, #92]	@ (8004fb0 <LPTIM_Disable+0x250>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8004f58:	e00b      	b.n	8004f72 <LPTIM_Disable+0x212>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f5c:	f7ff fb68 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004f60:	e008      	b.n	8004f74 <LPTIM_Disable+0x214>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f64:	f7ff fb64 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004f68:	e004      	b.n	8004f74 <LPTIM_Disable+0x214>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f6c:	f7ff fb60 	bl	8004630 <LL_RCC_SetLPTIMClockSource>
        break;
 8004f70:	e000      	b.n	8004f74 <LPTIM_Disable+0x214>
        break;
 8004f72:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f9c:	b662      	cpsie	i
}
 8004f9e:	bf00      	nop

  __enable_irq();
}
 8004fa0:	bf00      	nop
 8004fa2:	3728      	adds	r7, #40	@ 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40009800 	.word	0x40009800
 8004fac:	40007c00 	.word	0x40007c00
 8004fb0:	40009400 	.word	0x40009400

08004fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a03      	ldr	r2, [pc, #12]	@ (8004fcc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	58000400 	.word	0x58000400

08004fd0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fe2:	4b13      	ldr	r3, [pc, #76]	@ (8005030 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fee:	d10d      	bne.n	800500c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ff0:	f000 f83c 	bl	800506c <HAL_PWREx_DisableLowPowerRunMode>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004ffa:	e015      	b.n	8005028 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005008:	f000 f822 	bl	8005050 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_PWR_EnterSLEEPMode+0x64>)
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005012:	f023 0304 	bic.w	r3, r3, #4
 8005016:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800501e:	bf30      	wfi
 8005020:	e002      	b.n	8005028 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005022:	bf40      	sev
    __WFE();
 8005024:	bf20      	wfe
    __WFE();
 8005026:	bf20      	wfe
  }
}
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	58000400 	.word	0x58000400
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <HAL_PWREx_GetVoltageRange+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	58000400 	.word	0x58000400

08005050 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005054:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a03      	ldr	r2, [pc, #12]	@ (8005068 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800505a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800505e:	6013      	str	r3, [r2, #0]
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	58000400 	.word	0x58000400

0800506c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005072:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a15      	ldr	r2, [pc, #84]	@ (80050cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005078:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800507c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2232      	movs	r2, #50	@ 0x32
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	0c9b      	lsrs	r3, r3, #18
 8005090:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005092:	e002      	b.n	800509a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a6:	d102      	bne.n	80050ae <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f2      	bne.n	8005094 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ba:	d101      	bne.n	80050c0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e000      	b.n	80050c2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	58000400 	.word	0x58000400
 80050d0:	20000000 	.word	0x20000000
 80050d4:	431bde83 	.word	0x431bde83

080050d8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e8:	d101      	bne.n	80050ee <LL_PWR_IsEnabledBkUpAccess+0x16>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	58000400 	.word	0x58000400

080050fc <LL_RCC_HSE_EnableTcxo>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800510a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <LL_RCC_HSE_DisableTcxo>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005126:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005146:	d101      	bne.n	800514c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <LL_RCC_HSE_Enable>:
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005168:	6013      	str	r3, [r2, #0]
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <LL_RCC_HSE_Disable>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <LL_RCC_HSE_IsReady>:
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051a0:	d101      	bne.n	80051a6 <LL_RCC_HSE_IsReady+0x18>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <LL_RCC_HSE_IsReady+0x1a>
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <LL_RCC_HSI_Enable>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c2:	6013      	str	r3, [r2, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <LL_RCC_HSI_Disable>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <LL_RCC_HSI_IsReady>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051fa:	d101      	bne.n	8005200 <LL_RCC_HSI_IsReady+0x18>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <LL_RCC_HSI_IsReady+0x1a>
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <LL_RCC_HSI_SetCalibTrimming>:
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <LL_RCC_LSE_IsReady>:
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d101      	bne.n	800524a <LL_RCC_LSE_IsReady+0x18>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <LL_RCC_LSE_IsReady+0x1a>
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <LL_RCC_LSI_Enable>:
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <LL_RCC_LSI_Disable>:
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <LL_RCC_LSI_IsReady>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d101      	bne.n	80052ac <LL_RCC_LSI_IsReady+0x18>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <LL_RCC_LSI_IsReady+0x1a>
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_MSI_Enable>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6013      	str	r3, [r2, #0]
}
 80052ca:	bf00      	nop
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_MSI_Disable>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_MSI_IsReady>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d101      	bne.n	8005304 <LL_RCC_MSI_IsReady+0x16>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <LL_RCC_MSI_IsReady+0x18>
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d101      	bne.n	8005324 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <LL_RCC_MSI_GetRange>:
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005350:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <LL_RCC_MSI_SetCalibTrimming>:
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <LL_RCC_SetSysClkSource>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_GetSysClkSource>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_SetAHBPrescaler>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <LL_RCC_SetAHB3Prescaler>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053f6:	f023 020f 	bic.w	r2, r3, #15
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <LL_RCC_SetAPB1Prescaler>:
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <LL_RCC_SetAPB2Prescaler>:
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800544a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <LL_RCC_GetAHBPrescaler>:
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <LL_RCC_GetAHB3Prescaler>:
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <LL_RCC_GetAPB1Prescaler>:
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <LL_RCC_GetAPB2Prescaler>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054cc:	6013      	str	r3, [r2, #0]
}
 80054ce:	bf00      	nop
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80054d6:	b480      	push	{r7}
 80054d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80054f2:	b480      	push	{r7}
 80054f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005504:	d101      	bne.n	800550a <LL_RCC_PLL_IsReady+0x18>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <LL_RCC_PLL_IsReady+0x1a>
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005524:	4618      	mov	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800553a:	4618      	mov	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0303 	and.w	r3, r3, #3
}
 8005566:	4618      	mov	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr

0800556e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800556e:	b480      	push	{r7}
 8005570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d101      	bne.n	8005586 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005598:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800559c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055a4:	d101      	bne.n	80055aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c6:	d101      	bne.n	80055cc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055e8:	d101      	bne.n	80055ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e38b      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560a:	f7ff fece 	bl	80053aa <LL_RCC_GetSysClkSource>
 800560e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005610:	f7ff ffa2 	bl	8005558 <LL_RCC_PLL_GetMainSource>
 8005614:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80c9 	beq.w	80057b6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x3e>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d17b      	bne.n	8005728 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d178      	bne.n	8005728 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005636:	f7ff fe5a 	bl	80052ee <LL_RCC_MSI_IsReady>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x54>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e36a      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x72>
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005668:	e006      	b.n	8005678 <HAL_RCC_OscConfig+0x80>
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005678:	4293      	cmp	r3, r2
 800567a:	d222      	bcs.n	80056c2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fd51 	bl	8006128 <RCC_SetFlashLatencyFromMSIRange>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e348      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800569a:	f043 0308 	orr.w	r3, r3, #8
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fe4e 	bl	800535c <LL_RCC_MSI_SetCalibTrimming>
 80056c0:	e021      	b.n	8005706 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fe35 	bl	800535c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fd16 	bl	8006128 <RCC_SetFlashLatencyFromMSIRange>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e30d      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005706:	f000 fcd7 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 800570a:	4603      	mov	r3, r0
 800570c:	4aa1      	ldr	r2, [pc, #644]	@ (8005994 <HAL_RCC_OscConfig+0x39c>)
 800570e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005710:	4ba1      	ldr	r3, [pc, #644]	@ (8005998 <HAL_RCC_OscConfig+0x3a0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc f8f3 	bl	8001900 <HAL_InitTick>
 800571a:	4603      	mov	r3, r0
 800571c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d047      	beq.n	80057b4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	e2fc      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02c      	beq.n	800578a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005730:	f7ff fdc1 	bl	80052b6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005734:	f7fc f8ee 	bl	8001914 <HAL_GetTick>
 8005738:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800573c:	f7fc f8ea 	bl	8001914 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e2e9      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800574e:	f7ff fdce 	bl	80052ee <LL_RCC_MSI_IsReady>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f1      	beq.n	800573c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005762:	f043 0308 	orr.w	r3, r3, #8
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fdea 	bl	800535c <LL_RCC_MSI_SetCalibTrimming>
 8005788:	e015      	b.n	80057b6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800578a:	f7ff fda2 	bl	80052d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800578e:	f7fc f8c1 	bl	8001914 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005796:	f7fc f8bd 	bl	8001914 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e2bc      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057a8:	f7ff fda1 	bl	80052ee <LL_RCC_MSI_IsReady>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f1      	bne.n	8005796 <HAL_RCC_OscConfig+0x19e>
 80057b2:	e000      	b.n	80057b6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d05f      	beq.n	8005882 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_OscConfig+0x1dc>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d10d      	bne.n	80057ea <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10a      	bne.n	80057ea <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d4:	f7ff fcdb 	bl	800518e <LL_RCC_HSE_IsReady>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d050      	beq.n	8005880 <HAL_RCC_OscConfig+0x288>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d14c      	bne.n	8005880 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e29b      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80057ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057fc:	4313      	orrs	r3, r2
 80057fe:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005808:	d102      	bne.n	8005810 <HAL_RCC_OscConfig+0x218>
 800580a:	f7ff fca4 	bl	8005156 <LL_RCC_HSE_Enable>
 800580e:	e00d      	b.n	800582c <HAL_RCC_OscConfig+0x234>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005818:	d104      	bne.n	8005824 <HAL_RCC_OscConfig+0x22c>
 800581a:	f7ff fc6f 	bl	80050fc <LL_RCC_HSE_EnableTcxo>
 800581e:	f7ff fc9a 	bl	8005156 <LL_RCC_HSE_Enable>
 8005822:	e003      	b.n	800582c <HAL_RCC_OscConfig+0x234>
 8005824:	f7ff fca5 	bl	8005172 <LL_RCC_HSE_Disable>
 8005828:	f7ff fc76 	bl	8005118 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fc f86e 	bl	8001914 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fc f86a 	bl	8001914 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	@ 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e269      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800584e:	f7ff fc9e 	bl	800518e <LL_RCC_HSE_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f1      	beq.n	800583c <HAL_RCC_OscConfig+0x244>
 8005858:	e013      	b.n	8005882 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fc f85b 	bl	8001914 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005862:	f7fc f857 	bl	8001914 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b64      	cmp	r3, #100	@ 0x64
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e256      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005874:	f7ff fc8b 	bl	800518e <LL_RCC_HSE_IsReady>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f1      	bne.n	8005862 <HAL_RCC_OscConfig+0x26a>
 800587e:	e000      	b.n	8005882 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005880:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d04b      	beq.n	8005926 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_OscConfig+0x2a8>
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d113      	bne.n	80058c2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d110      	bne.n	80058c2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a0:	f7ff fca2 	bl	80051e8 <LL_RCC_HSI_IsReady>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x2be>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e235      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fca5 	bl	800520a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c0:	e031      	b.n	8005926 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d019      	beq.n	80058fe <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ca:	f7ff fc71 	bl	80051b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fc f821 	bl	8001914 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d6:	f7fc f81d 	bl	8001914 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e21c      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80058e8:	f7ff fc7e 	bl	80051e8 <LL_RCC_HSI_IsReady>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f1      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fc87 	bl	800520a <LL_RCC_HSI_SetCalibTrimming>
 80058fc:	e013      	b.n	8005926 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fe:	f7ff fc65 	bl	80051cc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fc f807 	bl	8001914 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590a:	f7fc f803 	bl	8001914 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e202      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800591c:	f7ff fc64 	bl	80051e8 <LL_RCC_HSI_IsReady>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f1      	bne.n	800590a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d06f      	beq.n	8005a12 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d057      	beq.n	80059ea <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005942:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	429a      	cmp	r2, r3
 8005950:	d036      	beq.n	80059c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d006      	beq.n	800596a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e1db      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005974:	f7ff fc7e 	bl	8005274 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005978:	f7fb ffcc 	bl	8001914 <HAL_GetTick>
 800597c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800597e:	e00d      	b.n	800599c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fb ffc8 	bl	8001914 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b11      	cmp	r3, #17
 800598c:	d906      	bls.n	800599c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e1c7      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
 8005992:	bf00      	nop
 8005994:	20000000 	.word	0x20000000
 8005998:	20000014 	.word	0x20000014
          while (LL_RCC_LSI_IsReady() != 0U)
 800599c:	f7ff fc7a 	bl	8005294 <LL_RCC_LSI_IsReady>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ec      	bne.n	8005980 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ae:	f023 0210 	bic.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c0:	f7ff fc48 	bl	8005254 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c4:	f7fb ffa6 	bl	8001914 <HAL_GetTick>
 80059c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059cc:	f7fb ffa2 	bl	8001914 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b11      	cmp	r3, #17
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e1a1      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80059de:	f7ff fc59 	bl	8005294 <LL_RCC_LSI_IsReady>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f1      	beq.n	80059cc <HAL_RCC_OscConfig+0x3d4>
 80059e8:	e013      	b.n	8005a12 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ea:	f7ff fc43 	bl	8005274 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fb ff91 	bl	8001914 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059f6:	f7fb ff8d 	bl	8001914 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b11      	cmp	r3, #17
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e18c      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a08:	f7ff fc44 	bl	8005294 <LL_RCC_LSI_IsReady>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f1      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80d8 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a20:	f7ff fb5a 	bl	80050d8 <LL_PWR_IsEnabledBkUpAccess>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a2a:	f7ff fac3 	bl	8004fb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2e:	f7fb ff71 	bl	8001914 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a36:	f7fb ff6d 	bl	8001914 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e16c      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a48:	f7ff fb46 	bl	80050d8 <LL_PWR_IsEnabledBkUpAccess>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f1      	beq.n	8005a36 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d07b      	beq.n	8005b52 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b85      	cmp	r3, #133	@ 0x85
 8005a60:	d003      	beq.n	8005a6a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d109      	bne.n	8005a7e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a76:	f043 0304 	orr.w	r3, r3, #4
 8005a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7e:	f7fb ff49 	bl	8001914 <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fb ff3b 	bl	8001914 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e138      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ab0:	f7ff fbbf 	bl	8005232 <LL_RCC_LSE_IsReady>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ef      	beq.n	8005a9a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b81      	cmp	r3, #129	@ 0x81
 8005ac0:	d003      	beq.n	8005aca <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b85      	cmp	r3, #133	@ 0x85
 8005ac8:	d121      	bne.n	8005b0e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fb ff23 	bl	8001914 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005ae4:	e00a      	b.n	8005afc <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fb ff15 	bl	8001914 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e112      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0ec      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005b0c:	e060      	b.n	8005bd0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fb ff01 	bl	8001914 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fb fef3 	bl	8001914 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0f0      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ec      	bne.n	8005b2a <HAL_RCC_OscConfig+0x532>
 8005b50:	e03e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fb fedf 	bl	8001914 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fb fed1 	bl	8001914 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0ce      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ec      	bne.n	8005b6e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fb febe 	bl	8001914 <HAL_GetTick>
 8005b98:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb0:	f7fb feb0 	bl	8001914 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0ad      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bc6:	f7ff fb34 	bl	8005232 <LL_RCC_LSE_IsReady>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1ef      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80a3 	beq.w	8005d20 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d076      	beq.n	8005cce <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d14b      	bne.n	8005c80 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be8:	f7ff fc75 	bl	80054d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fb fe92 	bl	8001914 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fb fe8e 	bl	8001914 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b0a      	cmp	r3, #10
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e08d      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c06:	f7ff fc74 	bl	80054f2 <LL_RCC_PLL_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f1      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	4b45      	ldr	r3, [pc, #276]	@ (8005d2c <HAL_RCC_OscConfig+0x734>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c22:	4311      	orrs	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c28:	0212      	lsls	r2, r2, #8
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c30:	4311      	orrs	r1, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c36:	4311      	orrs	r1, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c46:	f7ff fc38 	bl	80054ba <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c58:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fb fe5b 	bl	8001914 <HAL_GetTick>
 8005c5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fb fe57 	bl	8001914 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b0a      	cmp	r3, #10
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e056      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c74:	f7ff fc3d 	bl	80054f2 <LL_RCC_PLL_IsReady>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0f1      	beq.n	8005c62 <HAL_RCC_OscConfig+0x66a>
 8005c7e:	e04f      	b.n	8005d20 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c80:	f7ff fc29 	bl	80054d6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c9e:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fb fe34 	bl	8001914 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fb fe30 	bl	8001914 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b0a      	cmp	r3, #10
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e02f      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cc2:	f7ff fc16 	bl	80054f2 <LL_RCC_PLL_IsReady>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f1      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x6b8>
 8005ccc:	e028      	b.n	8005d20 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e023      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f003 0203 	and.w	r2, r3, #3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d115      	bne.n	8005d1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d10e      	bne.n	8005d1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	11c1808c 	.word	0x11c1808c

08005d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e10f      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d44:	4b89      	ldr	r3, [pc, #548]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d91b      	bls.n	8005d8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d52:	4b86      	ldr	r3, [pc, #536]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f023 0207 	bic.w	r2, r3, #7
 8005d5a:	4984      	ldr	r1, [pc, #528]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d62:	f7fb fdd7 	bl	8001914 <HAL_GetTick>
 8005d66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d6a:	f7fb fdd3 	bl	8001914 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0f3      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d1ef      	bne.n	8005d6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fb10 	bl	80053c0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005da0:	f7fb fdb8 	bl	8001914 <HAL_GetTick>
 8005da4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005da8:	f7fb fdb4 	bl	8001914 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e0d4      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dba:	f7ff fbd8 	bl	800556e <LL_RCC_IsActiveFlag_HPRE>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0f1      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d016      	beq.n	8005dfe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fb06 	bl	80053e6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dda:	f7fb fd9b 	bl	8001914 <HAL_GetTick>
 8005dde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005de2:	f7fb fd97 	bl	8001914 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e0b7      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005df4:	f7ff fbcc 	bl	8005590 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f1      	beq.n	8005de2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff faff 	bl	8005412 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e14:	f7fb fd7e 	bl	8001914 <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e1c:	f7fb fd7a 	bl	8001914 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e09a      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e2e:	f7ff fbc1 	bl	80055b4 <LL_RCC_IsActiveFlag_PPRE1>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f1      	beq.n	8005e1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d017      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff faf4 	bl	8005438 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e50:	f7fb fd60 	bl	8001914 <HAL_GetTick>
 8005e54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e58:	f7fb fd5c 	bl	8001914 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e07c      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e6a:	f7ff fbb4 	bl	80055d6 <LL_RCC_IsActiveFlag_PPRE2>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f1      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d043      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005e88:	f7ff f981 	bl	800518e <LL_RCC_HSE_IsReady>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d11e      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e066      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d106      	bne.n	8005eac <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005e9e:	f7ff fb28 	bl	80054f2 <LL_RCC_PLL_IsReady>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d113      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e05b      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005eb4:	f7ff fa1b 	bl	80052ee <LL_RCC_MSI_IsReady>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e050      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ec2:	f7ff f991 	bl	80051e8 <LL_RCC_HSI_IsReady>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e049      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fa55 	bl	8005384 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fb fd1b 	bl	8001914 <HAL_GetTick>
 8005ede:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee2:	f7fb fd17 	bl	8001914 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e035      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef8:	f7ff fa57 	bl	80053aa <LL_RCC_GetSysClkSource>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1ec      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f08:	4b18      	ldr	r3, [pc, #96]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d21b      	bcs.n	8005f4e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 0207 	bic.w	r2, r3, #7
 8005f1e:	4913      	ldr	r1, [pc, #76]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f26:	f7fb fcf5 	bl	8001914 <HAL_GetTick>
 8005f2a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f2e:	f7fb fcf1 	bl	8001914 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e011      	b.n	8005f64 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f40:	4b0a      	ldr	r3, [pc, #40]	@ (8005f6c <HAL_RCC_ClockConfig+0x23c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d1ef      	bne.n	8005f2e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f4e:	f000 f8b3 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 8005f52:	4603      	mov	r3, r0
 8005f54:	4a06      	ldr	r2, [pc, #24]	@ (8005f70 <HAL_RCC_ClockConfig+0x240>)
 8005f56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f58:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fb fccf 	bl	8001900 <HAL_InitTick>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	58004000 	.word	0x58004000
 8005f70:	20000000 	.word	0x20000000
 8005f74:	20000014 	.word	0x20000014

08005f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f86:	f7ff fa10 	bl	80053aa <LL_RCC_GetSysClkSource>
 8005f8a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f8c:	f7ff fae4 	bl	8005558 <LL_RCC_PLL_GetMainSource>
 8005f90:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x2c>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b0c      	cmp	r3, #12
 8005f9c:	d139      	bne.n	8006012 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d136      	bne.n	8006012 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005fa4:	f7ff f9b3 	bl	800530e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d115      	bne.n	8005fda <HAL_RCC_GetSysClockFreq+0x62>
 8005fae:	f7ff f9ae 	bl	800530e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x4e>
 8005fb8:	f7ff f9b9 	bl	800532e <LL_RCC_MSI_GetRange>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	e005      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x5a>
 8005fc6:	f7ff f9bd 	bl	8005344 <LL_RCC_MSI_GetRangeAfterStandby>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	0a1b      	lsrs	r3, r3, #8
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	4a36      	ldr	r2, [pc, #216]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x134>)
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	e014      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x8c>
 8005fda:	f7ff f998 	bl	800530e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x7a>
 8005fe4:	f7ff f9a3 	bl	800532e <LL_RCC_MSI_GetRange>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f003 030f 	and.w	r3, r3, #15
 8005ff0:	e005      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x86>
 8005ff2:	f7ff f9a7 	bl	8005344 <LL_RCC_MSI_GetRangeAfterStandby>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	091b      	lsrs	r3, r3, #4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80060ac <HAL_RCC_GetSysClockFreq+0x134>)
 8006000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006004:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d115      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006010:	e012      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d102      	bne.n	800601e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006018:	4b25      	ldr	r3, [pc, #148]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e00c      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d109      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006024:	f7ff f886 	bl	8005134 <LL_RCC_HSE_IsEnabledDiv2>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800602e:	4b20      	ldr	r3, [pc, #128]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e001      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006034:	4b1f      	ldr	r3, [pc, #124]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006036:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006038:	f7ff f9b7 	bl	80053aa <LL_RCC_GetSysClkSource>
 800603c:	4603      	mov	r3, r0
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d12f      	bne.n	80060a2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006042:	f7ff fa89 	bl	8005558 <LL_RCC_PLL_GetMainSource>
 8006046:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0xde>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d003      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0xe4>
 8006054:	e00d      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006056:	4b16      	ldr	r3, [pc, #88]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006058:	60fb      	str	r3, [r7, #12]
        break;
 800605a:	e00d      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800605c:	f7ff f86a 	bl	8005134 <LL_RCC_HSE_IsEnabledDiv2>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d102      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006068:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800606a:	e005      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800606c:	4b11      	ldr	r3, [pc, #68]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800606e:	60fb      	str	r3, [r7, #12]
        break;
 8006070:	e002      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60fb      	str	r3, [r7, #12]
        break;
 8006076:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006078:	f7ff fa4c 	bl	8005514 <LL_RCC_PLL_GetN>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	fb03 f402 	mul.w	r4, r3, r2
 8006084:	f7ff fa5d 	bl	8005542 <LL_RCC_PLL_GetDivider>
 8006088:	4603      	mov	r3, r0
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	3301      	adds	r3, #1
 800608e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006092:	f7ff fa4b 	bl	800552c <LL_RCC_PLL_GetR>
 8006096:	4603      	mov	r3, r0
 8006098:	0f5b      	lsrs	r3, r3, #29
 800609a:	3301      	adds	r3, #1
 800609c:	fbb4 f3f3 	udiv	r3, r4, r3
 80060a0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060a2:	697b      	ldr	r3, [r7, #20]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd90      	pop	{r4, r7, pc}
 80060ac:	0801db98 	.word	0x0801db98
 80060b0:	00f42400 	.word	0x00f42400
 80060b4:	01e84800 	.word	0x01e84800

080060b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b8:	b598      	push	{r3, r4, r7, lr}
 80060ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060bc:	f7ff ff5c 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80060c0:	4604      	mov	r4, r0
 80060c2:	f7ff f9cc 	bl	800545e <LL_RCC_GetAHBPrescaler>
 80060c6:	4603      	mov	r3, r0
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	4a03      	ldr	r2, [pc, #12]	@ (80060dc <HAL_RCC_GetHCLKFreq+0x24>)
 80060d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80060d8:	4618      	mov	r0, r3
 80060da:	bd98      	pop	{r3, r4, r7, pc}
 80060dc:	0801db38 	.word	0x0801db38

080060e0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b598      	push	{r3, r4, r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060e4:	f7ff ffe8 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 80060e8:	4604      	mov	r4, r0
 80060ea:	f7ff f9d0 	bl	800548e <LL_RCC_GetAPB1Prescaler>
 80060ee:	4603      	mov	r3, r0
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	4a03      	ldr	r2, [pc, #12]	@ (8006100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd98      	pop	{r3, r4, r7, pc}
 8006100:	0801db78 	.word	0x0801db78

08006104 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006104:	b598      	push	{r3, r4, r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006108:	f7ff ffd6 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 800610c:	4604      	mov	r4, r0
 800610e:	f7ff f9c9 	bl	80054a4 <LL_RCC_GetAPB2Prescaler>
 8006112:	4603      	mov	r3, r0
 8006114:	0adb      	lsrs	r3, r3, #11
 8006116:	4a03      	ldr	r2, [pc, #12]	@ (8006124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006120:	4618      	mov	r0, r3
 8006122:	bd98      	pop	{r3, r4, r7, pc}
 8006124:	0801db78 	.word	0x0801db78

08006128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006128:	b590      	push	{r4, r7, lr}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	4a10      	ldr	r2, [pc, #64]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800613a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006140:	f7ff f998 	bl	8005474 <LL_RCC_GetAHB3Prescaler>
 8006144:	4603      	mov	r3, r0
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	4a0c      	ldr	r2, [pc, #48]	@ (8006180 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4a09      	ldr	r2, [pc, #36]	@ (8006184 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0c9c      	lsrs	r4, r3, #18
 8006164:	f7fe ff68 	bl	8005038 <HAL_PWREx_GetVoltageRange>
 8006168:	4603      	mov	r3, r0
 800616a:	4619      	mov	r1, r3
 800616c:	4620      	mov	r0, r4
 800616e:	f000 f80b 	bl	8006188 <RCC_SetFlashLatency>
 8006172:	4603      	mov	r3, r0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	bd90      	pop	{r4, r7, pc}
 800617c:	0801db98 	.word	0x0801db98
 8006180:	0801db38 	.word	0x0801db38
 8006184:	431bde83 	.word	0x431bde83

08006188 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	@ 0x38
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006192:	4a3a      	ldr	r2, [pc, #232]	@ (800627c <RCC_SetFlashLatency+0xf4>)
 8006194:	f107 0320 	add.w	r3, r7, #32
 8006198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800619c:	6018      	str	r0, [r3, #0]
 800619e:	3304      	adds	r3, #4
 80061a0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80061a2:	4a37      	ldr	r2, [pc, #220]	@ (8006280 <RCC_SetFlashLatency+0xf8>)
 80061a4:	f107 0318 	add.w	r3, r7, #24
 80061a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061ac:	6018      	str	r0, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80061b2:	4a34      	ldr	r2, [pc, #208]	@ (8006284 <RCC_SetFlashLatency+0xfc>)
 80061b4:	f107 030c 	add.w	r3, r7, #12
 80061b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80061ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80061be:	2300      	movs	r3, #0
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c8:	d11b      	bne.n	8006202 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ce:	e014      	b.n	80061fa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	3338      	adds	r3, #56	@ 0x38
 80061d6:	443b      	add	r3, r7
 80061d8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d807      	bhi.n	80061f4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	3338      	adds	r3, #56	@ 0x38
 80061ea:	443b      	add	r3, r7
 80061ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061f2:	e021      	b.n	8006238 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3301      	adds	r3, #1
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d9e7      	bls.n	80061d0 <RCC_SetFlashLatency+0x48>
 8006200:	e01a      	b.n	8006238 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006202:	2300      	movs	r3, #0
 8006204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006206:	e014      	b.n	8006232 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	3338      	adds	r3, #56	@ 0x38
 800620e:	443b      	add	r3, r7
 8006210:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006214:	461a      	mov	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4293      	cmp	r3, r2
 800621a:	d807      	bhi.n	800622c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	3338      	adds	r3, #56	@ 0x38
 8006222:	443b      	add	r3, r7
 8006224:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800622a:	e005      	b.n	8006238 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622e:	3301      	adds	r3, #1
 8006230:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006234:	2b02      	cmp	r3, #2
 8006236:	d9e7      	bls.n	8006208 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <RCC_SetFlashLatency+0x100>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f023 0207 	bic.w	r2, r3, #7
 8006240:	4911      	ldr	r1, [pc, #68]	@ (8006288 <RCC_SetFlashLatency+0x100>)
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006248:	f7fb fb64 	bl	8001914 <HAL_GetTick>
 800624c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800624e:	e008      	b.n	8006262 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006250:	f7fb fb60 	bl	8001914 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e007      	b.n	8006272 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006262:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <RCC_SetFlashLatency+0x100>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800626c:	429a      	cmp	r2, r3
 800626e:	d1ef      	bne.n	8006250 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3738      	adds	r7, #56	@ 0x38
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	0801d388 	.word	0x0801d388
 8006280:	0801d390 	.word	0x0801d390
 8006284:	0801d398 	.word	0x0801d398
 8006288:	58004000 	.word	0x58004000

0800628c <LL_RCC_LSE_IsReady>:
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d101      	bne.n	80062a4 <LL_RCC_LSE_IsReady+0x18>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <LL_RCC_LSE_IsReady+0x1a>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <LL_RCC_SetUSARTClockSource>:
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	43db      	mvns	r3, r3
 80062c4:	401a      	ands	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <LL_RCC_SetI2SClockSource>:
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <LL_RCC_SetLPUARTClockSource>:
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006318:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800631c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <LL_RCC_SetI2CClockSource>:
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800633e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800634a:	43db      	mvns	r3, r3
 800634c:	401a      	ands	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006356:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr

0800636a <LL_RCC_SetLPTIMClockSource>:
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006376:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <LL_RCC_SetRNGClockSource>:
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80063b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <LL_RCC_SetADCClockSource>:
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bc80      	pop	{r7}
 80063ee:	4770      	bx	lr

080063f0 <LL_RCC_SetRTCClockSource>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006404:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr

0800641a <LL_RCC_GetRTCClockSource>:
{
 800641a:	b480      	push	{r7}
 800641c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr

08006432 <LL_RCC_ForceBackupDomainReset>:
{
 8006432:	b480      	push	{r7}
 8006434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800644a:	bf00      	nop
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr

08006452 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006452:	b480      	push	{r7}
 8006454:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800646a:	bf00      	nop
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr
	...

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006480:	2300      	movs	r3, #0
 8006482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006484:	2300      	movs	r3, #0
 8006486:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d058      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006494:	f7fe fd8e 	bl	8004fb4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006498:	f7fb fa3c 	bl	8001914 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800649e:	e009      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a0:	f7fb fa38 	bl	8001914 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d902      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	74fb      	strb	r3, [r7, #19]
        break;
 80064b2:	e006      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064b4:	4b7b      	ldr	r3, [pc, #492]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c0:	d1ee      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80064c2:	7cfb      	ldrb	r3, [r7, #19]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d13c      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80064c8:	f7ff ffa7 	bl	800641a <LL_RCC_GetRTCClockSource>
 80064cc:	4602      	mov	r2, r0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d00f      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064e4:	f7ff ffa5 	bl	8006432 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064e8:	f7ff ffb3 	bl	8006452 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d014      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fb fa08 	bl	8001914 <HAL_GetTick>
 8006504:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006506:	e00b      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006508:	f7fb fa04 	bl	8001914 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d902      	bls.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	74fb      	strb	r3, [r7, #19]
            break;
 800651e:	e004      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006520:	f7ff feb4 	bl	800628c <LL_RCC_LSE_IsReady>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d1ee      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ff5b 	bl	80063f0 <LL_RCC_SetRTCClockSource>
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
 8006540:	e001      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	7cfb      	ldrb	r3, [r7, #19]
 8006544:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fea9 	bl	80062ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe9e 	bl	80062ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fec0 	bl	8006308 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006590:	2b00      	cmp	r3, #0
 8006592:	d004      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fee6 	bl	800636a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fedb 	bl	800636a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fed0 	bl	800636a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff fea9 	bl	8006332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fe9e 	bl	8006332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fe93 	bl	8006332 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d011      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fe5e 	bl	80062de <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662a:	d107      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800662c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800663a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fea5 	bl	800639c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800665a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006668:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d011      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fea3 	bl	80063c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800668a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006698:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800669a:	7cbb      	ldrb	r3, [r7, #18]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	58000400 	.word	0x58000400

080066a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d068      	beq.n	800678c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fa fe4c 	bl	800136c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006798 <HAL_RTC_Init+0xf0>)
 80066de:	22ca      	movs	r2, #202	@ 0xca
 80066e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80066e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006798 <HAL_RTC_Init+0xf0>)
 80066e4:	2253      	movs	r2, #83	@ 0x53
 80066e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fa0f 	bl	8006b0c <RTC_EnterInitMode>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d13f      	bne.n	8006778 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80066f8:	4b27      	ldr	r3, [pc, #156]	@ (8006798 <HAL_RTC_Init+0xf0>)
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4a26      	ldr	r2, [pc, #152]	@ (8006798 <HAL_RTC_Init+0xf0>)
 80066fe:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006706:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006708:	4b23      	ldr	r3, [pc, #140]	@ (8006798 <HAL_RTC_Init+0xf0>)
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6859      	ldr	r1, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	4319      	orrs	r1, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	430b      	orrs	r3, r1
 800671c:	491e      	ldr	r1, [pc, #120]	@ (8006798 <HAL_RTC_Init+0xf0>)
 800671e:	4313      	orrs	r3, r2
 8006720:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	491a      	ldr	r1, [pc, #104]	@ (8006798 <HAL_RTC_Init+0xf0>)
 800672e:	4313      	orrs	r3, r2
 8006730:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006732:	4b19      	ldr	r3, [pc, #100]	@ (8006798 <HAL_RTC_Init+0xf0>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	430b      	orrs	r3, r1
 8006744:	4914      	ldr	r1, [pc, #80]	@ (8006798 <HAL_RTC_Init+0xf0>)
 8006746:	4313      	orrs	r3, r2
 8006748:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa12 	bl	8006b74 <RTC_ExitInitMode>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10e      	bne.n	8006778 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800675a:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <HAL_RTC_Init+0xf0>)
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a19      	ldr	r1, [r3, #32]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	4319      	orrs	r1, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	430b      	orrs	r3, r1
 8006772:	4909      	ldr	r1, [pc, #36]	@ (8006798 <HAL_RTC_Init+0xf0>)
 8006774:	4313      	orrs	r3, r2
 8006776:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006778:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <HAL_RTC_Init+0xf0>)
 800677a:	22ff      	movs	r2, #255	@ 0xff
 800677c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40002800 	.word	0x40002800

0800679c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_RTC_SetAlarm_IT+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0f3      	b.n	80069a2 <HAL_RTC_SetAlarm_IT+0x206>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80067ca:	4b78      	ldr	r3, [pc, #480]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067da:	d06a      	beq.n	80068b2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d13a      	bne.n	8006858 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067e2:	4b72      	ldr	r3, [pc, #456]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 f9f5 	bl	8006bf0 <RTC_ByteToBcd2>
 8006806:	4603      	mov	r3, r0
 8006808:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f9ee 	bl	8006bf0 <RTC_ByteToBcd2>
 8006814:	4603      	mov	r3, r0
 8006816:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006818:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	789b      	ldrb	r3, [r3, #2]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9e6 	bl	8006bf0 <RTC_ByteToBcd2>
 8006824:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006826:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006830:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f9d8 	bl	8006bf0 <RTC_ByteToBcd2>
 8006840:	4603      	mov	r3, r0
 8006842:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006844:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800684c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e02c      	b.n	80068b2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006860:	d00d      	beq.n	800687e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800686a:	d008      	beq.n	800687e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800686c:	4b4f      	ldr	r3, [pc, #316]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800688a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006890:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006898:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80068a0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068a2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068a8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b2:	4b3e      	ldr	r3, [pc, #248]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068b4:	22ca      	movs	r2, #202	@ 0xca
 80068b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80068b8:	4b3c      	ldr	r3, [pc, #240]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068ba:	2253      	movs	r2, #83	@ 0x53
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c6:	d12c      	bne.n	8006922 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068c8:	4b38      	ldr	r3, [pc, #224]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	4a37      	ldr	r2, [pc, #220]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80068d2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068d4:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e0:	d107      	bne.n	80068f2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4930      	ldr	r1, [pc, #192]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	644b      	str	r3, [r1, #68]	@ 0x44
 80068f0:	e006      	b.n	8006900 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80068f2:	4a2e      	ldr	r2, [pc, #184]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80068f8:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006900:	4a2a      	ldr	r2, [pc, #168]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	f043 0201 	orr.w	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006914:	4b25      	ldr	r3, [pc, #148]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4a24      	ldr	r2, [pc, #144]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 800691a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800691e:	6193      	str	r3, [r2, #24]
 8006920:	e02b      	b.n	800697a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006922:	4b22      	ldr	r3, [pc, #136]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	4a21      	ldr	r2, [pc, #132]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006928:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800692c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800692e:	4b1f      	ldr	r3, [pc, #124]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006930:	2202      	movs	r2, #2
 8006932:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693a:	d107      	bne.n	800694c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	4919      	ldr	r1, [pc, #100]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006946:	4313      	orrs	r3, r2
 8006948:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800694a:	e006      	b.n	800695a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800694c:	4a17      	ldr	r2, [pc, #92]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006952:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800695a:	4a14      	ldr	r2, [pc, #80]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006966:	f043 0202 	orr.w	r2, r3, #2
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800696e:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	4a0e      	ldr	r2, [pc, #56]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006974:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006978:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <HAL_RTC_SetAlarm_IT+0x214>)
 800697c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006980:	4a0b      	ldr	r2, [pc, #44]	@ (80069b0 <HAL_RTC_SetAlarm_IT+0x214>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006986:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698a:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <HAL_RTC_SetAlarm_IT+0x210>)
 800698c:	22ff      	movs	r2, #255	@ 0xff
 800698e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40002800 	.word	0x40002800
 80069b0:	58000800 	.word	0x58000800

080069b4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_RTC_DeactivateAlarm+0x18>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e048      	b.n	8006a5e <HAL_RTC_DeactivateAlarm+0xaa>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069dc:	4b22      	ldr	r3, [pc, #136]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069de:	22ca      	movs	r2, #202	@ 0xca
 80069e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80069e2:	4b21      	ldr	r3, [pc, #132]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069e4:	2253      	movs	r2, #83	@ 0x53
 80069e6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d115      	bne.n	8006a1c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80069f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80069fa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80069fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a00:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a06:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	f023 0201 	bic.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a14:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a1a:	e014      	b.n	8006a46 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a1c:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	4a11      	ldr	r2, [pc, #68]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a22:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006a26:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006a28:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a32:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	f023 0202 	bic.w	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a40:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a42:	2202      	movs	r2, #2
 8006a44:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a46:	4b08      	ldr	r3, [pc, #32]	@ (8006a68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a48:	22ff      	movs	r2, #255	@ 0xff
 8006a4a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr
 8006a68:	40002800 	.word	0x40002800

08006a6c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006a74:	4b11      	ldr	r3, [pc, #68]	@ (8006abc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006abc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fb f8c2 	bl	8001c1a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006aa0:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <HAL_RTC_AlarmIRQHandler+0x50>)
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f94a 	bl	8006d40 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40002800 	.word	0x40002800

08006ac0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8006b08 <HAL_RTC_WaitForSynchro+0x48>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4a0e      	ldr	r2, [pc, #56]	@ (8006b08 <HAL_RTC_WaitForSynchro+0x48>)
 8006ace:	f023 0320 	bic.w	r3, r3, #32
 8006ad2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006ad4:	f7fa ff1e 	bl	8001914 <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ada:	e009      	b.n	8006af0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006adc:	f7fa ff1a 	bl	8001914 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aea:	d901      	bls.n	8006af0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e006      	b.n	8006afe <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006af0:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <HAL_RTC_WaitForSynchro+0x48>)
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0ef      	beq.n	8006adc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40002800 	.word	0x40002800

08006b0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006b18:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <RTC_EnterInitMode+0x64>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d120      	bne.n	8006b66 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b24:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <RTC_EnterInitMode+0x64>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4a11      	ldr	r2, [pc, #68]	@ (8006b70 <RTC_EnterInitMode+0x64>)
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006b30:	f7fa fef0 	bl	8001914 <HAL_GetTick>
 8006b34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b36:	e00d      	b.n	8006b54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b38:	f7fa feec 	bl	8001914 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b46:	d905      	bls.n	8006b54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b54:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <RTC_EnterInitMode+0x64>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <RTC_EnterInitMode+0x5a>
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d1e8      	bne.n	8006b38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40002800 	.word	0x40002800

08006b74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b80:	4b1a      	ldr	r3, [pc, #104]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a19      	ldr	r2, [pc, #100]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b8a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b8c:	4b17      	ldr	r3, [pc, #92]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff91 	bl	8006ac0 <HAL_RTC_WaitForSynchro>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01e      	beq.n	8006be2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	e017      	b.n	8006be2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006bb8:	f023 0320 	bic.w	r3, r3, #32
 8006bbc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff ff7e 	bl	8006ac0 <HAL_RTC_WaitForSynchro>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bd6:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	4a04      	ldr	r2, [pc, #16]	@ (8006bec <RTC_ExitInitMode+0x78>)
 8006bdc:	f043 0320 	orr.w	r3, r3, #32
 8006be0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40002800 	.word	0x40002800

08006bf0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006c02:	e005      	b.n	8006c10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	3b0a      	subs	r3, #10
 8006c0e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	2b09      	cmp	r3, #9
 8006c14:	d8f6      	bhi.n	8006c04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	b2db      	uxtb	r3, r3
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
	...

08006c30 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e01f      	b.n	8006c86 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c56:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c58:	22ca      	movs	r2, #202	@ 0xca
 8006c5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c5e:	2253      	movs	r2, #83	@ 0x53
 8006c60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c68:	f043 0320 	orr.w	r3, r3, #32
 8006c6c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6e:	4b08      	ldr	r3, [pc, #32]	@ (8006c90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c70:	22ff      	movs	r2, #255	@ 0xff
 8006c72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	40002800 	.word	0x40002800

08006c94 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_RTCEx_SetSSRU_IT+0x16>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e027      	b.n	8006cfa <HAL_RTCEx_SetSSRU_IT+0x66>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cba:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006cbc:	22ca      	movs	r2, #202	@ 0xca
 8006cbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cc0:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006cc2:	2253      	movs	r2, #83	@ 0x53
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	4a0e      	ldr	r2, [pc, #56]	@ (8006d04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006d08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006cda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cde:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ce2:	4b08      	ldr	r3, [pc, #32]	@ (8006d04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ce4:	22ff      	movs	r2, #255	@ 0xff
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	40002800 	.word	0x40002800
 8006d08:	58000800 	.word	0x58000800

08006d0c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006d14:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fa ff81 	bl	8001c2e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40002800 	.word	0x40002800

08006d40 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
	...

08006d54 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d60:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006d62:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	4000b100 	.word	0x4000b100

08006d84 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <HAL_RTCEx_BKUPRead+0x28>)
 8006d90:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	4000b100 	.word	0x4000b100

08006db0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006db8:	4b06      	ldr	r3, [pc, #24]	@ (8006dd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006dc0:	4904      	ldr	r1, [pc, #16]	@ (8006dd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	58000400 	.word	0x58000400

08006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ddc:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de2:	4a04      	ldr	r2, [pc, #16]	@ (8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	58000400 	.word	0x58000400

08006df8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dfc:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	4a04      	ldr	r2, [pc, #16]	@ (8006e14 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006e04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	58000400 	.word	0x58000400

08006e18 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e22:	619a      	str	r2, [r3, #24]
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	58000400 	.word	0x58000400

08006e30 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006e34:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d101      	bne.n	8006e44 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	58000400 	.word	0x58000400

08006e54 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006e58:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d101      	bne.n	8006e68 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	58000400 	.word	0x58000400

08006e78 <LL_RCC_RF_DisableReset>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006e90:	bf00      	nop
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <LL_RCC_IsRFUnderReset>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eac:	d101      	bne.n	8006eb2 <LL_RCC_IsRFUnderReset+0x1a>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <LL_RCC_IsRFUnderReset+0x1c>
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006eca:	4905      	ldr	r1, [pc, #20]	@ (8006ee0 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	58000800 	.word	0x58000800

08006ee4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
    return status;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	e04b      	b.n	8006f92 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	799b      	ldrb	r3, [r3, #6]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa fb5e 	bl	80015d0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006f1a:	f7ff ffad 	bl	8006e78 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <HAL_SUBGHZ_Init+0xb8>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	0cdb      	lsrs	r3, r3, #19
 8006f2c:	2264      	movs	r2, #100	@ 0x64
 8006f2e:	fb02 f303 	mul.w	r3, r2, r3
 8006f32:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	609a      	str	r2, [r3, #8]
      break;
 8006f44:	e007      	b.n	8006f56 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006f4c:	f7ff ffa4 	bl	8006e98 <LL_RCC_IsRFUnderReset>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1ee      	bne.n	8006f34 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f56:	f7ff ff3f 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006f5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006f5e:	f7ff ffad 	bl	8006ebc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006f62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006f66:	f7ff ff23 	bl	8006db0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006f6a:	f7ff ff55 	bl	8006e18 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 faa5 	bl	80074c8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	719a      	strb	r2, [r3, #6]

  return status;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000000 	.word	0x20000000

08006fa0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	461a      	mov	r2, r3
 8006fac:	460b      	mov	r3, r1
 8006fae:	817b      	strh	r3, [r7, #10]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	799b      	ldrb	r3, [r3, #6]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d14a      	bne.n	8007054 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	795b      	ldrb	r3, [r3, #5]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e045      	b.n	8007056 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fb44 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fdc:	f7ff ff0c 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006fe0:	210d      	movs	r1, #13
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fa90 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fa88 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ff8:	897b      	ldrh	r3, [r7, #10]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa82 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007004:	2300      	movs	r3, #0
 8007006:	82bb      	strh	r3, [r7, #20]
 8007008:	e00a      	b.n	8007020 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800700a:	8abb      	ldrh	r3, [r7, #20]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fa77 	bl	8007508 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800701a:	8abb      	ldrh	r3, [r7, #20]
 800701c:	3301      	adds	r3, #1
 800701e:	82bb      	strh	r3, [r7, #20]
 8007020:	8aba      	ldrh	r2, [r7, #20]
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d3f0      	bcc.n	800700a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007028:	f7ff fed6 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fb3d 	bl	80076ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
 800703e:	e001      	b.n	8007044 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	715a      	strb	r2, [r3, #5]

    return status;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	e000      	b.n	8007056 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007054:	2302      	movs	r3, #2
  }
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b088      	sub	sp, #32
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	461a      	mov	r2, r3
 800706a:	460b      	mov	r3, r1
 800706c:	817b      	strh	r3, [r7, #10]
 800706e:	4613      	mov	r3, r2
 8007070:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	799b      	ldrb	r3, [r3, #6]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d14a      	bne.n	8007116 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	795b      	ldrb	r3, [r3, #5]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007088:	2302      	movs	r3, #2
 800708a:	e045      	b.n	8007118 <HAL_SUBGHZ_ReadRegisters+0xba>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 fae6 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007098:	f7ff feae 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800709c:	211d      	movs	r1, #29
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fa32 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80070a4:	897b      	ldrh	r3, [r7, #10]
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	4619      	mov	r1, r3
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 fa2a 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80070b4:	897b      	ldrh	r3, [r7, #10]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fa24 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80070c0:	2100      	movs	r1, #0
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fa20 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	82fb      	strh	r3, [r7, #22]
 80070cc:	e009      	b.n	80070e2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070ce:	69b9      	ldr	r1, [r7, #24]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fa6f 	bl	80075b4 <SUBGHZSPI_Receive>
      pData++;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	3301      	adds	r3, #1
 80070da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80070dc:	8afb      	ldrh	r3, [r7, #22]
 80070de:	3301      	adds	r3, #1
 80070e0:	82fb      	strh	r3, [r7, #22]
 80070e2:	8afa      	ldrh	r2, [r7, #22]
 80070e4:	893b      	ldrh	r3, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d3f1      	bcc.n	80070ce <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070ea:	f7ff fe75 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fadc 	bl	80076ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e001      	b.n	8007106 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	715a      	strb	r2, [r3, #5]

    return status;
 8007112:	7ffb      	ldrb	r3, [r7, #31]
 8007114:	e000      	b.n	8007118 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007116:	2302      	movs	r3, #2
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3720      	adds	r7, #32
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	461a      	mov	r2, r3
 800712c:	460b      	mov	r3, r1
 800712e:	72fb      	strb	r3, [r7, #11]
 8007130:	4613      	mov	r3, r2
 8007132:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	799b      	ldrb	r3, [r3, #6]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d14a      	bne.n	80071d4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	795b      	ldrb	r3, [r3, #5]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007146:	2302      	movs	r3, #2
 8007148:	e045      	b.n	80071d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa87 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007156:	7afb      	ldrb	r3, [r7, #11]
 8007158:	2b84      	cmp	r3, #132	@ 0x84
 800715a:	d002      	beq.n	8007162 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	2b94      	cmp	r3, #148	@ 0x94
 8007160:	d103      	bne.n	800716a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	711a      	strb	r2, [r3, #4]
 8007168:	e002      	b.n	8007170 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007170:	f7ff fe42 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	4619      	mov	r1, r3
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f9c5 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800717e:	2300      	movs	r3, #0
 8007180:	82bb      	strh	r3, [r7, #20]
 8007182:	e00a      	b.n	800719a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007184:	8abb      	ldrh	r3, [r7, #20]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	4619      	mov	r1, r3
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f9ba 	bl	8007508 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007194:	8abb      	ldrh	r3, [r7, #20]
 8007196:	3301      	adds	r3, #1
 8007198:	82bb      	strh	r3, [r7, #20]
 800719a:	8aba      	ldrh	r2, [r7, #20]
 800719c:	893b      	ldrh	r3, [r7, #8]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3f0      	bcc.n	8007184 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071a2:	f7ff fe19 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80071a6:	7afb      	ldrb	r3, [r7, #11]
 80071a8:	2b84      	cmp	r3, #132	@ 0x84
 80071aa:	d002      	beq.n	80071b2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fa7d 	bl	80076ac <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	e001      	b.n	80071c4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	715a      	strb	r2, [r3, #5]

    return status;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	e000      	b.n	80071d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80071d4:	2302      	movs	r3, #2
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b088      	sub	sp, #32
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	461a      	mov	r2, r3
 80071ea:	460b      	mov	r3, r1
 80071ec:	72fb      	strb	r3, [r7, #11]
 80071ee:	4613      	mov	r3, r2
 80071f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	799b      	ldrb	r3, [r3, #6]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d13d      	bne.n	800727c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	795b      	ldrb	r3, [r3, #5]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007208:	2302      	movs	r3, #2
 800720a:	e038      	b.n	800727e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fa26 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007218:	f7ff fdee 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	4619      	mov	r1, r3
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f971 	bl	8007508 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007226:	2100      	movs	r1, #0
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f96d 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	82fb      	strh	r3, [r7, #22]
 8007232:	e009      	b.n	8007248 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 f9bc 	bl	80075b4 <SUBGHZSPI_Receive>
      pData++;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	3301      	adds	r3, #1
 8007240:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007242:	8afb      	ldrh	r3, [r7, #22]
 8007244:	3301      	adds	r3, #1
 8007246:	82fb      	strh	r3, [r7, #22]
 8007248:	8afa      	ldrh	r2, [r7, #22]
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	429a      	cmp	r2, r3
 800724e:	d3f1      	bcc.n	8007234 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007250:	f7ff fdc2 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fa29 	bl	80076ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e001      	b.n	800726c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	715a      	strb	r2, [r3, #5]

    return status;
 8007278:	7ffb      	ldrb	r3, [r7, #31]
 800727a:	e000      	b.n	800727e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	461a      	mov	r2, r3
 8007292:	460b      	mov	r3, r1
 8007294:	72fb      	strb	r3, [r7, #11]
 8007296:	4613      	mov	r3, r2
 8007298:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	799b      	ldrb	r3, [r3, #6]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d13e      	bne.n	8007322 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	795b      	ldrb	r3, [r3, #5]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e039      	b.n	8007324 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f9d4 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072bc:	f7ff fd9c 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80072c0:	210e      	movs	r1, #14
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f920 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f91b 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	82bb      	strh	r3, [r7, #20]
 80072d6:	e00a      	b.n	80072ee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072d8:	8abb      	ldrh	r3, [r7, #20]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	4619      	mov	r1, r3
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f910 	bl	8007508 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072e8:	8abb      	ldrh	r3, [r7, #20]
 80072ea:	3301      	adds	r3, #1
 80072ec:	82bb      	strh	r3, [r7, #20]
 80072ee:	8aba      	ldrh	r2, [r7, #20]
 80072f0:	893b      	ldrh	r3, [r7, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3f0      	bcc.n	80072d8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072f6:	f7ff fd6f 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f9d6 	bl	80076ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]
 800730c:	e001      	b.n	8007312 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	715a      	strb	r2, [r3, #5]

    return status;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	e000      	b.n	8007324 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007322:	2302      	movs	r3, #2
  }
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	461a      	mov	r2, r3
 8007338:	460b      	mov	r3, r1
 800733a:	72fb      	strb	r3, [r7, #11]
 800733c:	4613      	mov	r3, r2
 800733e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	799b      	ldrb	r3, [r3, #6]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d141      	bne.n	80073d2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	795b      	ldrb	r3, [r3, #5]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007356:	2302      	movs	r3, #2
 8007358:	e03c      	b.n	80073d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f97f 	bl	8007664 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007366:	f7ff fd47 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800736a:	211e      	movs	r1, #30
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f8cb 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	4619      	mov	r1, r3
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f8c6 	bl	8007508 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800737c:	2100      	movs	r1, #0
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f8c2 	bl	8007508 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	82fb      	strh	r3, [r7, #22]
 8007388:	e009      	b.n	800739e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800738a:	69b9      	ldr	r1, [r7, #24]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f911 	bl	80075b4 <SUBGHZSPI_Receive>
      pData++;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	3301      	adds	r3, #1
 8007396:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007398:	8afb      	ldrh	r3, [r7, #22]
 800739a:	3301      	adds	r3, #1
 800739c:	82fb      	strh	r3, [r7, #22]
 800739e:	8afa      	ldrh	r2, [r7, #22]
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d3f1      	bcc.n	800738a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073a6:	f7ff fd17 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f97e 	bl	80076ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e001      	b.n	80073c2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	715a      	strb	r2, [r3, #5]

    return status;
 80073ce:	7ffb      	ldrb	r3, [r7, #31]
 80073d0:	e000      	b.n	80073d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80073e4:	2300      	movs	r3, #0
 80073e6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80073e8:	f107 020c 	add.w	r2, r7, #12
 80073ec:	2302      	movs	r3, #2
 80073ee:	2112      	movs	r1, #18
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fef4 	bl	80071de <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80073f6:	7b3b      	ldrb	r3, [r7, #12]
 80073f8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80073fa:	89fb      	ldrh	r3, [r7, #14]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	b21a      	sxth	r2, r3
 8007400:	7b7b      	ldrb	r3, [r7, #13]
 8007402:	b21b      	sxth	r3, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	b21b      	sxth	r3, r3
 8007408:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800740a:	89fb      	ldrh	r3, [r7, #14]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f014 f9dd 	bl	801b7d4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f014 f9e3 	bl	801b7f0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800742a:	89fb      	ldrh	r3, [r7, #14]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f014 fa33 	bl	801b8a0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800743a:	89fb      	ldrh	r3, [r7, #14]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f014 fa39 	bl	801b8bc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f014 fa3f 	bl	801b8d8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f014 fa0d 	bl	801b884 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800746a:	89fb      	ldrh	r3, [r7, #14]
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f014 f9c9 	bl	801b80c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800747a:	89fb      	ldrh	r3, [r7, #14]
 800747c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007484:	89fb      	ldrh	r3, [r7, #14]
 8007486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800748e:	2101      	movs	r1, #1
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f014 f9c9 	bl	801b828 <HAL_SUBGHZ_CADStatusCallback>
 8007496:	e003      	b.n	80074a0 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f014 f9c4 	bl	801b828 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f014 f9da 	bl	801b864 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80074b0:	f107 020c 	add.w	r2, r7, #12
 80074b4:	2302      	movs	r3, #2
 80074b6:	2102      	movs	r1, #2
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff fe31 	bl	8007120 <HAL_SUBGHZ_ExecSetCmd>
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074da:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80074dc:	4a09      	ldr	r2, [pc, #36]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80074e4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80074e6:	4b07      	ldr	r3, [pc, #28]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074e8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80074ec:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074ee:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a04      	ldr	r2, [pc, #16]	@ (8007504 <SUBGHZSPI_Init+0x3c>)
 80074f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074f8:	6013      	str	r3, [r2, #0]
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	58010000 	.word	0x58010000

08007508 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007518:	4b23      	ldr	r3, [pc, #140]	@ (80075a8 <SUBGHZSPI_Transmit+0xa0>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	0cdb      	lsrs	r3, r3, #19
 8007526:	2264      	movs	r2, #100	@ 0x64
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	609a      	str	r2, [r3, #8]
      break;
 800753e:	e008      	b.n	8007552 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3b01      	subs	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007546:	4b19      	ldr	r3, [pc, #100]	@ (80075ac <SUBGHZSPI_Transmit+0xa4>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d1ed      	bne.n	800752e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007552:	4b17      	ldr	r3, [pc, #92]	@ (80075b0 <SUBGHZSPI_Transmit+0xa8>)
 8007554:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800755c:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <SUBGHZSPI_Transmit+0xa0>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	0cdb      	lsrs	r3, r3, #19
 800756a:	2264      	movs	r2, #100	@ 0x64
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	609a      	str	r2, [r3, #8]
      break;
 8007582:	e008      	b.n	8007596 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800758a:	4b08      	ldr	r3, [pc, #32]	@ (80075ac <SUBGHZSPI_Transmit+0xa4>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b01      	cmp	r3, #1
 8007594:	d1ed      	bne.n	8007572 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007596:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <SUBGHZSPI_Transmit+0xa4>)
 8007598:	68db      	ldr	r3, [r3, #12]

  return status;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000000 	.word	0x20000000
 80075ac:	58010000 	.word	0x58010000
 80075b0:	5801000c 	.word	0x5801000c

080075b4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075c2:	4b25      	ldr	r3, [pc, #148]	@ (8007658 <SUBGHZSPI_Receive+0xa4>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	0cdb      	lsrs	r3, r3, #19
 80075d0:	2264      	movs	r2, #100	@ 0x64
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	609a      	str	r2, [r3, #8]
      break;
 80075e8:	e008      	b.n	80075fc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80075f0:	4b1a      	ldr	r3, [pc, #104]	@ (800765c <SUBGHZSPI_Receive+0xa8>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d1ed      	bne.n	80075d8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80075fc:	4b18      	ldr	r3, [pc, #96]	@ (8007660 <SUBGHZSPI_Receive+0xac>)
 80075fe:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	22ff      	movs	r2, #255	@ 0xff
 8007604:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007606:	4b14      	ldr	r3, [pc, #80]	@ (8007658 <SUBGHZSPI_Receive+0xa4>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	0cdb      	lsrs	r3, r3, #19
 8007614:	2264      	movs	r2, #100	@ 0x64
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	609a      	str	r2, [r3, #8]
      break;
 800762c:	e008      	b.n	8007640 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b01      	subs	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007634:	4b09      	ldr	r3, [pc, #36]	@ (800765c <SUBGHZSPI_Receive+0xa8>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b01      	cmp	r3, #1
 800763e:	d1ed      	bne.n	800761c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007640:	4b06      	ldr	r3, [pc, #24]	@ (800765c <SUBGHZSPI_Receive+0xa8>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	b2da      	uxtb	r2, r3
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	701a      	strb	r2, [r3, #0]

  return status;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
}
 800764c:	4618      	mov	r0, r3
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000000 	.word	0x20000000
 800765c:	58010000 	.word	0x58010000
 8007660:	5801000c 	.word	0x5801000c

08007664 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	791b      	ldrb	r3, [r3, #4]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d111      	bne.n	8007698 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <SUBGHZ_CheckDeviceReady+0x44>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	4413      	add	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007684:	f7ff fbb8 	bl	8006df8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3b01      	subs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f9      	bne.n	8007688 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007694:	f7ff fba0 	bl	8006dd8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f807 	bl	80076ac <SUBGHZ_WaitOnBusy>
 800769e:	4603      	mov	r3, r0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000000 	.word	0x20000000

080076ac <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80076b8:	4b12      	ldr	r3, [pc, #72]	@ (8007704 <SUBGHZ_WaitOnBusy+0x58>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	0d1b      	lsrs	r3, r3, #20
 80076c6:	2264      	movs	r2, #100	@ 0x64
 80076c8:	fb02 f303 	mul.w	r3, r2, r3
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80076ce:	f7ff fbc1 	bl	8006e54 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80076d2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e009      	b.n	80076fa <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80076ec:	f7ff fba0 	bl	8006e30 <LL_PWR_IsActiveFlag_RFBUSYS>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d0e9      	beq.n	80076ce <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000000 	.word	0x20000000

08007708 <LL_RCC_GetUSARTClockSource>:
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007714:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	401a      	ands	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	4313      	orrs	r3, r2
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr

0800772c <LL_RCC_GetLPUARTClockSource>:
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007738:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4013      	ands	r3, r2
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e042      	b.n	80077e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fa fbdc 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2224      	movs	r2, #36	@ 0x24
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0201 	bic.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fc4b 	bl	8008028 <UART_SetConfig>
 8007792:	4603      	mov	r3, r0
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e022      	b.n	80077e2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 feb3 	bl	8008510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0201 	orr.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 ff39 	bl	8008652 <UART_CheckIdleState>
 80077e0:	4603      	mov	r3, r0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007800:	2b20      	cmp	r3, #32
 8007802:	d142      	bne.n	800788a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_UART_Receive_IT+0x24>
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e03b      	b.n	800788c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UART_Receive_IT+0x36>
 800781e:	2302      	movs	r3, #2
 8007820:	e034      	b.n	800788c <HAL_UART_Receive_IT+0xa0>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a17      	ldr	r2, [pc, #92]	@ (8007894 <HAL_UART_Receive_IT+0xa8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01f      	beq.n	800787a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d018      	beq.n	800787a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	613b      	str	r3, [r7, #16]
   return(result);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	623b      	str	r3, [r7, #32]
 8007868:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	69f9      	ldr	r1, [r7, #28]
 800786c:	6a3a      	ldr	r2, [r7, #32]
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	61bb      	str	r3, [r7, #24]
   return(result);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e6      	bne.n	8007848 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	461a      	mov	r2, r3
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fff9 	bl	8008878 <UART_Start_Receive_IT>
 8007886:	4603      	mov	r3, r0
 8007888:	e000      	b.n	800788c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800788a:	2302      	movs	r3, #2
  }
}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	@ 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40008000 	.word	0x40008000

08007898 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d17a      	bne.n	80079a6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <HAL_UART_Transmit_DMA+0x24>
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e073      	b.n	80079a8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_UART_Transmit_DMA+0x36>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e06c      	b.n	80079a8 <HAL_UART_Transmit_DMA+0x110>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2221      	movs	r2, #33	@ 0x21
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02c      	beq.n	800795e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007908:	4a29      	ldr	r2, [pc, #164]	@ (80079b0 <HAL_UART_Transmit_DMA+0x118>)
 800790a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007910:	4a28      	ldr	r2, [pc, #160]	@ (80079b4 <HAL_UART_Transmit_DMA+0x11c>)
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007918:	4a27      	ldr	r2, [pc, #156]	@ (80079b8 <HAL_UART_Transmit_DMA+0x120>)
 800791a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007920:	2200      	movs	r2, #0
 8007922:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792c:	4619      	mov	r1, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3328      	adds	r3, #40	@ 0x28
 8007934:	461a      	mov	r2, r3
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	f7fc f92c 	bl	8003b94 <HAL_DMA_Start_IT>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2210      	movs	r2, #16
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2220      	movs	r2, #32
 8007956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e024      	b.n	80079a8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2240      	movs	r2, #64	@ 0x40
 8007964:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	613b      	str	r3, [r7, #16]
   return(result);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007984:	627b      	str	r3, [r7, #36]	@ 0x24
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798e:	623a      	str	r2, [r7, #32]
 8007990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	61bb      	str	r3, [r7, #24]
   return(result);
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e5      	bne.n	800796e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e000      	b.n	80079a8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80079a6:	2302      	movs	r3, #2
  }
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3728      	adds	r7, #40	@ 0x28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	08008bc7 	.word	0x08008bc7
 80079b4:	08008c61 	.word	0x08008c61
 80079b8:	08008c7d 	.word	0x08008c7d

080079bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b0ba      	sub	sp, #232	@ 0xe8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80079e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80079ea:	4013      	ands	r3, r2
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80079f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11b      	bne.n	8007a30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 82d6 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      }
      return;
 8007a2e:	e2d0      	b.n	8007fd2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 811f 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8007c6c <HAL_UART_IRQHandler+0x2b0>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007a4a:	4b89      	ldr	r3, [pc, #548]	@ (8007c70 <HAL_UART_IRQHandler+0x2b4>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8112 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d011      	beq.n	8007a84 <HAL_UART_IRQHandler+0xc8>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2201      	movs	r2, #1
 8007a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7a:	f043 0201 	orr.w	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d011      	beq.n	8007ab4 <HAL_UART_IRQHandler+0xf8>
 8007a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aaa:	f043 0204 	orr.w	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d011      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x128>
 8007ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ada:	f043 0202 	orr.w	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d017      	beq.n	8007b20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d105      	bne.n	8007b08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007afc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b00:	4b5a      	ldr	r3, [pc, #360]	@ (8007c6c <HAL_UART_IRQHandler+0x2b0>)
 8007b02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d012      	beq.n	8007b52 <HAL_UART_IRQHandler+0x196>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00c      	beq.n	8007b52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b48:	f043 0220 	orr.w	r2, r3, #32
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 823c 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d005      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d04f      	beq.n	8007c56 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 ffa0 	bl	8008afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d141      	bne.n	8007c4e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d9      	bne.n	8007bca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d013      	beq.n	8007c46 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c22:	4a14      	ldr	r2, [pc, #80]	@ (8007c74 <HAL_UART_IRQHandler+0x2b8>)
 8007c24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fc f88e 	bl	8003d4c <HAL_DMA_Abort_IT>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d017      	beq.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	e00f      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9d9 	bl	8007ffe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	e00b      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9d5 	bl	8007ffe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c54:	e007      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9d1 	bl	8007ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007c64:	e1b7      	b.n	8007fd6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c66:	bf00      	nop
    return;
 8007c68:	e1b5      	b.n	8007fd6 <HAL_UART_IRQHandler+0x61a>
 8007c6a:	bf00      	nop
 8007c6c:	10000001 	.word	0x10000001
 8007c70:	04000120 	.word	0x04000120
 8007c74:	08008cfd 	.word	0x08008cfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 814a 	bne.w	8007f16 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8143 	beq.w	8007f16 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 813c 	beq.w	8007f16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	f040 80b5 	bne.w	8007e20 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007cc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8187 	beq.w	8007fda <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f080 817f 	bcs.w	8007fda <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ce2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 8086 	bne.w	8007e04 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1da      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e1      	bne.n	8007d42 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007da2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007da4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e3      	bne.n	8007d7e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007de8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e4      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fb ff46 	bl	8003c90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8f9 	bl	8008010 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e1e:	e0dc      	b.n	8007fda <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80ce 	beq.w	8007fde <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007e42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80c9 	beq.w	8007fde <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e70:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e4      	bne.n	8007e4c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	623b      	str	r3, [r7, #32]
   return(result);
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e98:	f023 0301 	bic.w	r3, r3, #1
 8007e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e1      	bne.n	8007e82 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f87e 	bl	8008010 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f14:	e063      	b.n	8007fde <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <HAL_UART_IRQHandler+0x584>
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007f36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fb7d 	bl	8009638 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f3e:	e051      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d014      	beq.n	8007f76 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d03a      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
    }
    return;
 8007f74:	e035      	b.n	8007fe2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <HAL_UART_IRQHandler+0x5da>
 8007f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 feca 	bl	8008d28 <UART_EndTransmit_IT>
    return;
 8007f94:	e026      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x5fa>
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fb54 	bl	800965c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fb4:	e016      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x628>
 8007fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da0c      	bge.n	8007fe4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fb3d 	bl	800964a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fd0:	e008      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e006      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
    return;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
    return;
 8007fe2:	bf00      	nop
  }
}
 8007fe4:	37e8      	adds	r7, #232	@ 0xe8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
	...

08008028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800802c:	b08c      	sub	sp, #48	@ 0x30
 800802e:	af00      	add	r7, sp, #0
 8008030:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	431a      	orrs	r2, r3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	431a      	orrs	r2, r3
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	4313      	orrs	r3, r2
 800804e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b94      	ldr	r3, [pc, #592]	@ (80082a8 <UART_SetConfig+0x280>)
 8008058:	4013      	ands	r3, r2
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008060:	430b      	orrs	r3, r1
 8008062:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a89      	ldr	r2, [pc, #548]	@ (80082ac <UART_SetConfig+0x284>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008090:	4313      	orrs	r3, r2
 8008092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800809e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b2:	f023 010f 	bic.w	r1, r3, #15
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a7a      	ldr	r2, [pc, #488]	@ (80082b0 <UART_SetConfig+0x288>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d127      	bne.n	800811c <UART_SetConfig+0xf4>
 80080cc:	2003      	movs	r0, #3
 80080ce:	f7ff fb1b 	bl	8007708 <LL_RCC_GetUSARTClockSource>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d81b      	bhi.n	8008114 <UART_SetConfig+0xec>
 80080dc:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <UART_SetConfig+0xbc>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	08008105 	.word	0x08008105
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e080      	b.n	80081fe <UART_SetConfig+0x1d6>
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e07c      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e078      	b.n	80081fe <UART_SetConfig+0x1d6>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e074      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e070      	b.n	80081fe <UART_SetConfig+0x1d6>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a64      	ldr	r2, [pc, #400]	@ (80082b4 <UART_SetConfig+0x28c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d138      	bne.n	8008198 <UART_SetConfig+0x170>
 8008126:	200c      	movs	r0, #12
 8008128:	f7ff faee 	bl	8007708 <LL_RCC_GetUSARTClockSource>
 800812c:	4603      	mov	r3, r0
 800812e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008132:	2b0c      	cmp	r3, #12
 8008134:	d82c      	bhi.n	8008190 <UART_SetConfig+0x168>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <UART_SetConfig+0x114>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008171 	.word	0x08008171
 8008140:	08008191 	.word	0x08008191
 8008144:	08008191 	.word	0x08008191
 8008148:	08008191 	.word	0x08008191
 800814c:	08008181 	.word	0x08008181
 8008150:	08008191 	.word	0x08008191
 8008154:	08008191 	.word	0x08008191
 8008158:	08008191 	.word	0x08008191
 800815c:	08008179 	.word	0x08008179
 8008160:	08008191 	.word	0x08008191
 8008164:	08008191 	.word	0x08008191
 8008168:	08008191 	.word	0x08008191
 800816c:	08008189 	.word	0x08008189
 8008170:	2300      	movs	r3, #0
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e042      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008178:	2302      	movs	r3, #2
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817e:	e03e      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008186:	e03a      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e036      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e032      	b.n	80081fe <UART_SetConfig+0x1d6>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a43      	ldr	r2, [pc, #268]	@ (80082ac <UART_SetConfig+0x284>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d12a      	bne.n	80081f8 <UART_SetConfig+0x1d0>
 80081a2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80081a6:	f7ff fac1 	bl	800772c <LL_RCC_GetLPUARTClockSource>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b0:	d01a      	beq.n	80081e8 <UART_SetConfig+0x1c0>
 80081b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081b6:	d81b      	bhi.n	80081f0 <UART_SetConfig+0x1c8>
 80081b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081bc:	d00c      	beq.n	80081d8 <UART_SetConfig+0x1b0>
 80081be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c2:	d815      	bhi.n	80081f0 <UART_SetConfig+0x1c8>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <UART_SetConfig+0x1a8>
 80081c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081cc:	d008      	beq.n	80081e0 <UART_SetConfig+0x1b8>
 80081ce:	e00f      	b.n	80081f0 <UART_SetConfig+0x1c8>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d6:	e012      	b.n	80081fe <UART_SetConfig+0x1d6>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081de:	e00e      	b.n	80081fe <UART_SetConfig+0x1d6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e6:	e00a      	b.n	80081fe <UART_SetConfig+0x1d6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ee:	e006      	b.n	80081fe <UART_SetConfig+0x1d6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f6:	e002      	b.n	80081fe <UART_SetConfig+0x1d6>
 80081f8:	2310      	movs	r3, #16
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2a      	ldr	r2, [pc, #168]	@ (80082ac <UART_SetConfig+0x284>)
 8008204:	4293      	cmp	r3, r2
 8008206:	f040 80a4 	bne.w	8008352 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800820a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800820e:	2b08      	cmp	r3, #8
 8008210:	d823      	bhi.n	800825a <UART_SetConfig+0x232>
 8008212:	a201      	add	r2, pc, #4	@ (adr r2, 8008218 <UART_SetConfig+0x1f0>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800823d 	.word	0x0800823d
 800821c:	0800825b 	.word	0x0800825b
 8008220:	08008245 	.word	0x08008245
 8008224:	0800825b 	.word	0x0800825b
 8008228:	0800824b 	.word	0x0800824b
 800822c:	0800825b 	.word	0x0800825b
 8008230:	0800825b 	.word	0x0800825b
 8008234:	0800825b 	.word	0x0800825b
 8008238:	08008253 	.word	0x08008253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800823c:	f7fd ff50 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8008240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008242:	e010      	b.n	8008266 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008244:	4b1c      	ldr	r3, [pc, #112]	@ (80082b8 <UART_SetConfig+0x290>)
 8008246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008248:	e00d      	b.n	8008266 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800824a:	f7fd fe95 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 800824e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008250:	e009      	b.n	8008266 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008258:	e005      	b.n	8008266 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 8137 	beq.w	80084dc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008272:	4a12      	ldr	r2, [pc, #72]	@ (80082bc <UART_SetConfig+0x294>)
 8008274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008278:	461a      	mov	r2, r3
 800827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008280:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4413      	add	r3, r2
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	429a      	cmp	r2, r3
 8008290:	d305      	bcc.n	800829e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d910      	bls.n	80082c0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082a4:	e11a      	b.n	80084dc <UART_SetConfig+0x4b4>
 80082a6:	bf00      	nop
 80082a8:	cfff69f3 	.word	0xcfff69f3
 80082ac:	40008000 	.word	0x40008000
 80082b0:	40013800 	.word	0x40013800
 80082b4:	40004400 	.word	0x40004400
 80082b8:	00f42400 	.word	0x00f42400
 80082bc:	0801dc2c 	.word	0x0801dc2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	2200      	movs	r2, #0
 80082c4:	60bb      	str	r3, [r7, #8]
 80082c6:	60fa      	str	r2, [r7, #12]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	4a8e      	ldr	r2, [pc, #568]	@ (8008508 <UART_SetConfig+0x4e0>)
 80082ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2200      	movs	r2, #0
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	607a      	str	r2, [r7, #4]
 80082da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082e2:	f7f8 facf 	bl	8000884 <__aeabi_uldivmod>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4610      	mov	r0, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	020b      	lsls	r3, r1, #8
 80082f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082fc:	0202      	lsls	r2, r0, #8
 80082fe:	6979      	ldr	r1, [r7, #20]
 8008300:	6849      	ldr	r1, [r1, #4]
 8008302:	0849      	lsrs	r1, r1, #1
 8008304:	2000      	movs	r0, #0
 8008306:	460c      	mov	r4, r1
 8008308:	4605      	mov	r5, r0
 800830a:	eb12 0804 	adds.w	r8, r2, r4
 800830e:	eb43 0905 	adc.w	r9, r3, r5
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	469a      	mov	sl, r3
 800831a:	4693      	mov	fp, r2
 800831c:	4652      	mov	r2, sl
 800831e:	465b      	mov	r3, fp
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f8 faae 	bl	8000884 <__aeabi_uldivmod>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4613      	mov	r3, r2
 800832e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008336:	d308      	bcc.n	800834a <UART_SetConfig+0x322>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800833e:	d204      	bcs.n	800834a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	60da      	str	r2, [r3, #12]
 8008348:	e0c8      	b.n	80084dc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008350:	e0c4      	b.n	80084dc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800835a:	d168      	bne.n	800842e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800835c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008360:	2b08      	cmp	r3, #8
 8008362:	d828      	bhi.n	80083b6 <UART_SetConfig+0x38e>
 8008364:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <UART_SetConfig+0x344>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	080083b7 	.word	0x080083b7
 800837c:	080083a7 	.word	0x080083a7
 8008380:	080083b7 	.word	0x080083b7
 8008384:	080083b7 	.word	0x080083b7
 8008388:	080083b7 	.word	0x080083b7
 800838c:	080083af 	.word	0x080083af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008390:	f7fd fea6 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008396:	e014      	b.n	80083c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008398:	f7fd feb4 	bl	8006104 <HAL_RCC_GetPCLK2Freq>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800839e:	e010      	b.n	80083c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a0:	4b5a      	ldr	r3, [pc, #360]	@ (800850c <UART_SetConfig+0x4e4>)
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083a4:	e00d      	b.n	80083c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a6:	f7fd fde7 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80083aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ac:	e009      	b.n	80083c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083b4:	e005      	b.n	80083c2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8089 	beq.w	80084dc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008508 <UART_SetConfig+0x4e0>)
 80083d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083dc:	005a      	lsls	r2, r3, #1
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	441a      	add	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	2b0f      	cmp	r3, #15
 80083f6:	d916      	bls.n	8008426 <UART_SetConfig+0x3fe>
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fe:	d212      	bcs.n	8008426 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f023 030f 	bic.w	r3, r3, #15
 8008408:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	b29b      	uxth	r3, r3
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	b29a      	uxth	r2, r3
 8008416:	8bfb      	ldrh	r3, [r7, #30]
 8008418:	4313      	orrs	r3, r2
 800841a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	8bfa      	ldrh	r2, [r7, #30]
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	e05a      	b.n	80084dc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800842c:	e056      	b.n	80084dc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800842e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008432:	2b08      	cmp	r3, #8
 8008434:	d827      	bhi.n	8008486 <UART_SetConfig+0x45e>
 8008436:	a201      	add	r2, pc, #4	@ (adr r2, 800843c <UART_SetConfig+0x414>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	08008461 	.word	0x08008461
 8008440:	08008469 	.word	0x08008469
 8008444:	08008471 	.word	0x08008471
 8008448:	08008487 	.word	0x08008487
 800844c:	08008477 	.word	0x08008477
 8008450:	08008487 	.word	0x08008487
 8008454:	08008487 	.word	0x08008487
 8008458:	08008487 	.word	0x08008487
 800845c:	0800847f 	.word	0x0800847f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008460:	f7fd fe3e 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8008464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008466:	e014      	b.n	8008492 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008468:	f7fd fe4c 	bl	8006104 <HAL_RCC_GetPCLK2Freq>
 800846c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800846e:	e010      	b.n	8008492 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008470:	4b26      	ldr	r3, [pc, #152]	@ (800850c <UART_SetConfig+0x4e4>)
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008474:	e00d      	b.n	8008492 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008476:	f7fd fd7f 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 800847a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800847c:	e009      	b.n	8008492 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008484:	e005      	b.n	8008492 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008490:	bf00      	nop
    }

    if (pclk != 0U)
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	2b00      	cmp	r3, #0
 8008496:	d021      	beq.n	80084dc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849c:	4a1a      	ldr	r2, [pc, #104]	@ (8008508 <UART_SetConfig+0x4e0>)
 800849e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	441a      	add	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	2b0f      	cmp	r3, #15
 80084c2:	d908      	bls.n	80084d6 <UART_SetConfig+0x4ae>
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ca:	d204      	bcs.n	80084d6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	60da      	str	r2, [r3, #12]
 80084d4:	e002      	b.n	80084dc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2200      	movs	r2, #0
 80084f0:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80084f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	@ 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008506:	bf00      	nop
 8008508:	0801dc2c 	.word	0x0801dc2c
 800850c:	00f42400 	.word	0x00f42400

08008510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00a      	beq.n	800853a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01a      	beq.n	8008626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800860e:	d10a      	bne.n	8008626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af02      	add	r7, sp, #8
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008662:	f7f9 f957 	bl	8001914 <HAL_GetTick>
 8008666:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0308 	and.w	r3, r3, #8
 8008672:	2b08      	cmp	r3, #8
 8008674:	d10e      	bne.n	8008694 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f82f 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e025      	b.n	80086e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d10e      	bne.n	80086c0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f819 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e00f      	b.n	80086e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b09c      	sub	sp, #112	@ 0x70
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f8:	e0a9      	b.n	800884e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008700:	f000 80a5 	beq.w	800884e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008704:	f7f9 f906 	bl	8001914 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008710:	429a      	cmp	r2, r3
 8008712:	d302      	bcc.n	800871a <UART_WaitOnFlagUntilTimeout+0x32>
 8008714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008716:	2b00      	cmp	r3, #0
 8008718:	d140      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800872a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800872e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800873a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800873e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e6      	bne.n	800871a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	f023 0301 	bic.w	r3, r3, #1
 8008762:	663b      	str	r3, [r7, #96]	@ 0x60
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800876c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800876e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800877a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e5      	bne.n	800874c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2220      	movs	r2, #32
 8008784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e069      	b.n	8008870 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d051      	beq.n	800884e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b8:	d149      	bne.n	800884e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80087d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80087f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e6      	bne.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	613b      	str	r3, [r7, #16]
   return(result);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008816:	623a      	str	r2, [r7, #32]
 8008818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	69f9      	ldr	r1, [r7, #28]
 800881c:	6a3a      	ldr	r2, [r7, #32]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	61bb      	str	r3, [r7, #24]
   return(result);
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e010      	b.n	8008870 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4013      	ands	r3, r2
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	429a      	cmp	r2, r3
 800886a:	f43f af46 	beq.w	80086fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3770      	adds	r7, #112	@ 0x70
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008878:	b480      	push	{r7}
 800887a:	b09d      	sub	sp, #116	@ 0x74
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	88fa      	ldrh	r2, [r7, #6]
 8008890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	88fa      	ldrh	r2, [r7, #6]
 8008898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088aa:	d10e      	bne.n	80088ca <UART_Start_Receive_IT+0x52>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d105      	bne.n	80088c0 <UART_Start_Receive_IT+0x48>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088be:	e02d      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	22ff      	movs	r2, #255	@ 0xff
 80088c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088c8:	e028      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10d      	bne.n	80088ee <UART_Start_Receive_IT+0x76>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <UART_Start_Receive_IT+0x6c>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	22ff      	movs	r2, #255	@ 0xff
 80088de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088e2:	e01b      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	227f      	movs	r2, #127	@ 0x7f
 80088e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088ec:	e016      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088f6:	d10d      	bne.n	8008914 <UART_Start_Receive_IT+0x9c>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <UART_Start_Receive_IT+0x92>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	227f      	movs	r2, #127	@ 0x7f
 8008904:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008908:	e008      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	223f      	movs	r2, #63	@ 0x3f
 800890e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008912:	e003      	b.n	800891c <UART_Start_Receive_IT+0xa4>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2222      	movs	r2, #34	@ 0x22
 8008928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800893c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3308      	adds	r3, #8
 800894a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800894c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800894e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008952:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800895a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e5      	bne.n	800892c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008968:	d14d      	bne.n	8008a06 <UART_Start_Receive_IT+0x18e>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	429a      	cmp	r2, r3
 8008974:	d347      	bcc.n	8008a06 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800897e:	d107      	bne.n	8008990 <UART_Start_Receive_IT+0x118>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a38      	ldr	r2, [pc, #224]	@ (8008a6c <UART_Start_Receive_IT+0x1f4>)
 800898c:	671a      	str	r2, [r3, #112]	@ 0x70
 800898e:	e002      	b.n	8008996 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4a37      	ldr	r2, [pc, #220]	@ (8008a70 <UART_Start_Receive_IT+0x1f8>)
 8008994:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3308      	adds	r3, #8
 80089d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80089f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80089f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e5      	bne.n	80089d0 <UART_Start_Receive_IT+0x158>
 8008a04:	e02c      	b.n	8008a60 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0e:	d107      	bne.n	8008a20 <UART_Start_Receive_IT+0x1a8>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a16      	ldr	r2, [pc, #88]	@ (8008a74 <UART_Start_Receive_IT+0x1fc>)
 8008a1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8008a1e:	e002      	b.n	8008a26 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a15      	ldr	r2, [pc, #84]	@ (8008a78 <UART_Start_Receive_IT+0x200>)
 8008a24:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a42:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e6      	bne.n	8008a2e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3774      	adds	r7, #116	@ 0x74
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bc80      	pop	{r7}
 8008a6a:	4770      	bx	lr
 8008a6c:	08009339 	.word	0x08009339
 8008a70:	08009041 	.word	0x08009041
 8008a74:	08008edf 	.word	0x08008edf
 8008a78:	08008d7f 	.word	0x08008d7f

08008a7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b08f      	sub	sp, #60	@ 0x3c
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aa4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad6:	61ba      	str	r2, [r7, #24]
 8008ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6979      	ldr	r1, [r7, #20]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e5      	bne.n	8008ab6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8008af2:	bf00      	nop
 8008af4:	373c      	adds	r7, #60	@ 0x3c
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bc80      	pop	{r7}
 8008afa:	4770      	bx	lr

08008afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b095      	sub	sp, #84	@ 0x54
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b4c:	f023 0301 	bic.w	r3, r3, #1
 8008b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d118      	bne.n	8008ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	e841 2300 	strex	r3, r2, [r1]
 8008ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e6      	bne.n	8008b76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008bbc:	bf00      	nop
 8008bbe:	3754      	adds	r7, #84	@ 0x54
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b090      	sub	sp, #64	@ 0x40
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d137      	bne.n	8008c52 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e6      	bne.n	8008c1e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c50:	e002      	b.n	8008c58 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c54:	f7f9 fb3a 	bl	80022cc <HAL_UART_TxCpltCallback>
}
 8008c58:	bf00      	nop
 8008c5a:	3740      	adds	r7, #64	@ 0x40
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f7ff f9bc 	bl	8007fec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c74:	bf00      	nop
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca4:	2b80      	cmp	r3, #128	@ 0x80
 8008ca6:	d109      	bne.n	8008cbc <UART_DMAError+0x40>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b21      	cmp	r3, #33	@ 0x21
 8008cac:	d106      	bne.n	8008cbc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008cb6:	6978      	ldr	r0, [r7, #20]
 8008cb8:	f7ff fee0 	bl	8008a7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc6:	2b40      	cmp	r3, #64	@ 0x40
 8008cc8:	d109      	bne.n	8008cde <UART_DMAError+0x62>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b22      	cmp	r3, #34	@ 0x22
 8008cce:	d106      	bne.n	8008cde <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008cd8:	6978      	ldr	r0, [r7, #20]
 8008cda:	f7ff ff0f 	bl	8008afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ce4:	f043 0210 	orr.w	r2, r3, #16
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7ff f985 	bl	8007ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf4:	bf00      	nop
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7ff f96f 	bl	8007ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d44:	61fb      	str	r3, [r7, #28]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6979      	ldr	r1, [r7, #20]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e6      	bne.n	8008d30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7f9 faab 	bl	80022cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d76:	bf00      	nop
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b096      	sub	sp, #88	@ 0x58
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d8c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d96:	2b22      	cmp	r3, #34	@ 0x22
 8008d98:	f040 8095 	bne.w	8008ec6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008da6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008daa:	b2d9      	uxtb	r1, r3
 8008dac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db6:	400a      	ands	r2, r1
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d178      	bne.n	8008ed6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e6      	bne.n	8008de4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	623b      	str	r3, [r7, #32]
   return(result);
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d12e      	bne.n	8008ebe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 0310 	bic.w	r3, r3, #16
 8008e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e84:	61fb      	str	r3, [r7, #28]
 8008e86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	69b9      	ldr	r1, [r7, #24]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	617b      	str	r3, [r7, #20]
   return(result);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b10      	cmp	r3, #16
 8008ea4:	d103      	bne.n	8008eae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2210      	movs	r2, #16
 8008eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff f8aa 	bl	8008010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ebc:	e00b      	b.n	8008ed6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7f9 fa12 	bl	80022e8 <HAL_UART_RxCpltCallback>
}
 8008ec4:	e007      	b.n	8008ed6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	619a      	str	r2, [r3, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	3758      	adds	r7, #88	@ 0x58
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b096      	sub	sp, #88	@ 0x58
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ef6:	2b22      	cmp	r3, #34	@ 0x22
 8008ef8:	f040 8095 	bne.w	8009026 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f02:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f0c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008f10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008f14:	4013      	ands	r3, r2
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f20:	1c9a      	adds	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d178      	bne.n	8009036 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e6      	bne.n	8008f44 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3308      	adds	r3, #8
 8008f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d12e      	bne.n	800901e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f023 0310 	bic.w	r3, r3, #16
 8008fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6979      	ldr	r1, [r7, #20]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	2b10      	cmp	r3, #16
 8009004:	d103      	bne.n	800900e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2210      	movs	r2, #16
 800900c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe fffa 	bl	8008010 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800901c:	e00b      	b.n	8009036 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7f9 f962 	bl	80022e8 <HAL_UART_RxCpltCallback>
}
 8009024:	e007      	b.n	8009036 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699a      	ldr	r2, [r3, #24]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f042 0208 	orr.w	r2, r2, #8
 8009034:	619a      	str	r2, [r3, #24]
}
 8009036:	bf00      	nop
 8009038:	3758      	adds	r7, #88	@ 0x58
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b0a6      	sub	sp, #152	@ 0x98
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800904e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009076:	2b22      	cmp	r3, #34	@ 0x22
 8009078:	f040 814f 	bne.w	800931a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009082:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009086:	e0f6      	b.n	8009276 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009092:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009096:	b2d9      	uxtb	r1, r3
 8009098:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090a2:	400a      	ands	r2, r1
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80090ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d053      	beq.n	8009182 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <UART_RxISR_8BIT_FIFOEN+0xca>
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2201      	movs	r2, #1
 80090f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009100:	f043 0201 	orr.w	r2, r3, #1
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800910a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d011      	beq.n	800913a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009116:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00b      	beq.n	800913a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2202      	movs	r2, #2
 8009128:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009130:	f043 0204 	orr.w	r2, r3, #4
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800913a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d011      	beq.n	800916a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009146:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2204      	movs	r2, #4
 8009158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009160:	f043 0202 	orr.w	r2, r3, #2
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d006      	beq.n	8009182 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7fe ff42 	bl	8007ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d173      	bne.n	8009276 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009196:	e853 3f00 	ldrex	r3, [r3]
 800919a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800919c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800919e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091b2:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80091b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e4      	bne.n	800918e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80091e8:	657a      	str	r2, [r7, #84]	@ 0x54
 80091ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e3      	bne.n	80091c4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d12e      	bne.n	8009270 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	f023 0310 	bic.w	r3, r3, #16
 800922c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009236:	643b      	str	r3, [r7, #64]	@ 0x40
 8009238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800923c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b10      	cmp	r3, #16
 8009256:	d103      	bne.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2210      	movs	r2, #16
 800925e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fe fed1 	bl	8008010 <HAL_UARTEx_RxEventCallback>
 800926e:	e002      	b.n	8009276 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f9 f839 	bl	80022e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009276:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800927a:	2b00      	cmp	r3, #0
 800927c:	d006      	beq.n	800928c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800927e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f aefe 	bne.w	8009088 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009292:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009296:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800929a:	2b00      	cmp	r3, #0
 800929c:	d045      	beq.n	800932a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d23e      	bcs.n	800932a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3308      	adds	r3, #8
 80092b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80092cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e5      	bne.n	80092ac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a14      	ldr	r2, [pc, #80]	@ (8009334 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80092e4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f043 0320 	orr.w	r3, r3, #32
 80092fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6979      	ldr	r1, [r7, #20]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	613b      	str	r3, [r7, #16]
   return(result);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009318:	e007      	b.n	800932a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	619a      	str	r2, [r3, #24]
}
 800932a:	bf00      	nop
 800932c:	3798      	adds	r7, #152	@ 0x98
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	08008d7f 	.word	0x08008d7f

08009338 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b0a8      	sub	sp, #160	@ 0xa0
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009346:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936e:	2b22      	cmp	r3, #34	@ 0x22
 8009370:	f040 8153 	bne.w	800961a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800937a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937e:	e0fa      	b.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800938e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009392:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009396:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800939a:	4013      	ands	r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a8:	1c9a      	adds	r2, r3, #2
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d053      	beq.n	800947e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d011      	beq.n	8009406 <UART_RxISR_16BIT_FIFOEN+0xce>
 80093e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00b      	beq.n	8009406 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2201      	movs	r2, #1
 80093f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093fc:	f043 0201 	orr.w	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009406:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d011      	beq.n	8009436 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009412:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2202      	movs	r2, #2
 8009424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800942c:	f043 0204 	orr.w	r2, r3, #4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009436:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d011      	beq.n	8009466 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009442:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2204      	movs	r2, #4
 8009454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800945c:	f043 0202 	orr.w	r2, r3, #2
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7fe fdc4 	bl	8007ffe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d175      	bne.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800949a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800949e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094ae:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e4      	bne.n	800948a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3308      	adds	r3, #8
 80094c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094d6:	f023 0301 	bic.w	r3, r3, #1
 80094da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e1      	bne.n	80094c0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d12e      	bne.n	8009570 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009528:	f023 0310 	bic.w	r3, r3, #16
 800952c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009536:	647b      	str	r3, [r7, #68]	@ 0x44
 8009538:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800953c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e6      	bne.n	8009518 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69db      	ldr	r3, [r3, #28]
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b10      	cmp	r3, #16
 8009556:	d103      	bne.n	8009560 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2210      	movs	r2, #16
 800955e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7fe fd51 	bl	8008010 <HAL_UARTEx_RxEventCallback>
 800956e:	e002      	b.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7f8 feb9 	bl	80022e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009576:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800957a:	2b00      	cmp	r3, #0
 800957c:	d006      	beq.n	800958c <UART_RxISR_16BIT_FIFOEN+0x254>
 800957e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	f47f aefa 	bne.w	8009380 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009592:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009596:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800959a:	2b00      	cmp	r3, #0
 800959c:	d045      	beq.n	800962a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d23e      	bcs.n	800962a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3308      	adds	r3, #8
 80095b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b6:	e853 3f00 	ldrex	r3, [r3]
 80095ba:	623b      	str	r3, [r7, #32]
   return(result);
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3308      	adds	r3, #8
 80095ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80095cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d4:	e841 2300 	strex	r3, r2, [r1]
 80095d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e5      	bne.n	80095ac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a14      	ldr	r2, [pc, #80]	@ (8009634 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80095e4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f043 0320 	orr.w	r3, r3, #32
 80095fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e6      	bne.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009618:	e007      	b.n	800962a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f042 0208 	orr.w	r2, r2, #8
 8009628:	619a      	str	r2, [r3, #24]
}
 800962a:	bf00      	nop
 800962c:	37a0      	adds	r7, #160	@ 0xa0
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	08008edf 	.word	0x08008edf

08009638 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b088      	sub	sp, #32
 8009672:	af02      	add	r7, sp, #8
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	1d3b      	adds	r3, r7, #4
 8009678:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009686:	2b01      	cmp	r3, #1
 8009688:	d101      	bne.n	800968e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800968a:	2302      	movs	r3, #2
 800968c:	e046      	b.n	800971c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2224      	movs	r2, #36	@ 0x24
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0201 	bic.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d105      	bne.n	80096d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f911 	bl	80098f6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096e4:	f7f8 f916 	bl	8001914 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7fe fff5 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	75fb      	strb	r3, [r7, #23]
 8009708:	e003      	b.n	8009712 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b089      	sub	sp, #36	@ 0x24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UARTEx_EnableStopMode+0x16>
 8009736:	2302      	movs	r3, #2
 8009738:	e021      	b.n	800977e <HAL_UARTEx_EnableStopMode+0x5a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f043 0302 	orr.w	r3, r3, #2
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	61bb      	str	r3, [r7, #24]
 8009762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6979      	ldr	r1, [r7, #20]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	613b      	str	r3, [r7, #16]
   return(result);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e6      	bne.n	8009742 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3724      	adds	r7, #36	@ 0x24
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr

08009788 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_UARTEx_EnableFifoMode+0x16>
 800979a:	2302      	movs	r3, #2
 800979c:	e02b      	b.n	80097f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2224      	movs	r2, #36	@ 0x24
 80097aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0201 	bic.w	r2, r2, #1
 80097c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80097cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80097d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f8ac 	bl	800993c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800980e:	2b01      	cmp	r3, #1
 8009810:	d101      	bne.n	8009816 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009812:	2302      	movs	r3, #2
 8009814:	e02d      	b.n	8009872 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2224      	movs	r2, #36	@ 0x24
 8009822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0201 	bic.w	r2, r2, #1
 800983c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f872 	bl	800993c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2220      	movs	r2, #32
 8009864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800988e:	2302      	movs	r3, #2
 8009890:	e02d      	b.n	80098ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2224      	movs	r2, #36	@ 0x24
 800989e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 0201 	bic.w	r2, r2, #1
 80098b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f834 	bl	800993c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	1d3b      	adds	r3, r7, #4
 8009900:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f023 0210 	bic.w	r2, r3, #16
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	4619      	mov	r1, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009924:	7abb      	ldrb	r3, [r7, #10]
 8009926:	061a      	lsls	r2, r3, #24
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	605a      	str	r2, [r3, #4]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	bc80      	pop	{r7}
 8009938:	4770      	bx	lr
	...

0800993c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009948:	2b00      	cmp	r3, #0
 800994a:	d108      	bne.n	800995e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800995c:	e031      	b.n	80099c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800995e:	2308      	movs	r3, #8
 8009960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009962:	2308      	movs	r3, #8
 8009964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	0e5b      	lsrs	r3, r3, #25
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	0f5b      	lsrs	r3, r3, #29
 800997e:	b2db      	uxtb	r3, r3
 8009980:	f003 0307 	and.w	r3, r3, #7
 8009984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	7b3a      	ldrb	r2, [r7, #12]
 800998a:	4910      	ldr	r1, [pc, #64]	@ (80099cc <UARTEx_SetNbDataToProcess+0x90>)
 800998c:	5c8a      	ldrb	r2, [r1, r2]
 800998e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009992:	7b3a      	ldrb	r2, [r7, #12]
 8009994:	490e      	ldr	r1, [pc, #56]	@ (80099d0 <UARTEx_SetNbDataToProcess+0x94>)
 8009996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009998:	fb93 f3f2 	sdiv	r3, r3, r2
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	7b7a      	ldrb	r2, [r7, #13]
 80099a8:	4908      	ldr	r1, [pc, #32]	@ (80099cc <UARTEx_SetNbDataToProcess+0x90>)
 80099aa:	5c8a      	ldrb	r2, [r1, r2]
 80099ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099b0:	7b7a      	ldrb	r2, [r7, #13]
 80099b2:	4907      	ldr	r1, [pc, #28]	@ (80099d0 <UARTEx_SetNbDataToProcess+0x94>)
 80099b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr
 80099cc:	0801dc44 	.word	0x0801dc44
 80099d0:	0801dc4c 	.word	0x0801dc4c

080099d4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80099d8:	f7f7 fe42 	bl	8001660 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80099dc:	f000 f80a 	bl	80099f4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80099e0:	bf00      	nop
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099ec:	f012 fc0e 	bl	801c20c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_RED);
 80099fa:	2000      	movs	r0, #0
 80099fc:	f7f8 fcd6 	bl	80023ac <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009a00:	2101      	movs	r1, #1
 8009a02:	2000      	movs	r0, #0
 8009a04:	f7f8 fd30 	bl	8002468 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9302      	str	r3, [sp, #8]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	2301      	movs	r3, #1
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac4 <LoRaWAN_Init+0xd0>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2002      	movs	r0, #2
 8009a1c:	f012 f8d4 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009a20:	2300      	movs	r3, #0
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	2303      	movs	r3, #3
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4b26      	ldr	r3, [pc, #152]	@ (8009ac8 <LoRaWAN_Init+0xd4>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	2002      	movs	r0, #2
 8009a34:	f012 f8c8 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9302      	str	r3, [sp, #8]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	2301      	movs	r3, #1
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	4b21      	ldr	r3, [pc, #132]	@ (8009acc <LoRaWAN_Init+0xd8>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	2100      	movs	r1, #0
 8009a4a:	2002      	movs	r0, #2
 8009a4c:	f012 f8bc 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n\r\n\r\n----------LoRaWAN_End_Node_FreeRTOS----------\r\n\r\n\r\n");
 8009a50:	4b1f      	ldr	r3, [pc, #124]	@ (8009ad0 <LoRaWAN_Init+0xdc>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	2002      	movs	r0, #2
 8009a58:	f012 f8b6 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad4 <LoRaWAN_Init+0xe0>)
 8009a5e:	2100      	movs	r1, #0
 8009a60:	2001      	movs	r0, #1
 8009a62:	f012 fcb7 	bl	801c3d4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009a66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <LoRaWAN_Init+0xe4>)
 8009a68:	2100      	movs	r1, #0
 8009a6a:	2002      	movs	r0, #2
 8009a6c:	f012 fcb2 	bl	801c3d4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009a70:	f000 f9fc 	bl	8009e6c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009a74:	4819      	ldr	r0, [pc, #100]	@ (8009adc <LoRaWAN_Init+0xe8>)
 8009a76:	f003 fa45 	bl	800cf04 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009a7a:	4819      	ldr	r0, [pc, #100]	@ (8009ae0 <LoRaWAN_Init+0xec>)
 8009a7c:	f003 fa8e 	bl	800cf9c <LmHandlerConfigure>


  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009a80:	4b18      	ldr	r3, [pc, #96]	@ (8009ae4 <LoRaWAN_Init+0xf0>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f003 fbbf 	bl	800d208 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009a8a:	4b17      	ldr	r3, [pc, #92]	@ (8009ae8 <LoRaWAN_Init+0xf4>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d111      	bne.n	8009ab6 <LoRaWAN_Init+0xc2>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4b15      	ldr	r3, [pc, #84]	@ (8009aec <LoRaWAN_Init+0xf8>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009a9e:	4814      	ldr	r0, [pc, #80]	@ (8009af0 <LoRaWAN_Init+0xfc>)
 8009aa0:	f012 fe96 	bl	801c7d0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8009aa4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009aa8:	4811      	ldr	r0, [pc, #68]	@ (8009af0 <LoRaWAN_Init+0xfc>)
 8009aaa:	f012 ffa5 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009aae:	4810      	ldr	r0, [pc, #64]	@ (8009af0 <LoRaWAN_Init+0xfc>)
 8009ab0:	f012 fec4 	bl	801c83c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009ab4:	e003      	b.n	8009abe <LoRaWAN_Init+0xca>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f7f8 fcd5 	bl	8002468 <BSP_PB_Init>
}
 8009abe:	bf00      	nop
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	0801d3a4 	.word	0x0801d3a4
 8009ac8:	0801d3c4 	.word	0x0801d3c4
 8009acc:	0801d3e4 	.word	0x0801d3e4
 8009ad0:	0801d404 	.word	0x0801d404
 8009ad4:	0800d1f5 	.word	0x0800d1f5
 8009ad8:	08009c41 	.word	0x08009c41
 8009adc:	2000001c 	.word	0x2000001c
 8009ae0:	20000050 	.word	0x20000050
 8009ae4:	20000019 	.word	0x20000019
 8009ae8:	20000c78 	.word	0x20000c78
 8009aec:	08009d1d 	.word	0x08009d1d
 8009af0:	20000c7c 	.word	0x20000c7c

08009af4 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b04:	d104      	bne.n	8009b10 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUTTON_SW1_PIN:
      /* Note: when "EventType == TX_ON_TIMER" this GPIO is not initialized */
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009b06:	2100      	movs	r1, #0
 8009b08:	2002      	movs	r0, #2
 8009b0a:	f012 fc85 	bl	801c418 <UTIL_SEQ_SetTask>
      break;
 8009b0e:	e000      	b.n	8009b12 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009b10:	bf00      	nop
  }
}
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009b1c:	b5b0      	push	{r4, r5, r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af06      	add	r7, sp, #24
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <OnRxData+0x16>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d075      	beq.n	8009c1e <OnRxData+0x102>
  {
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009b32:	4b3d      	ldr	r3, [pc, #244]	@ (8009c28 <OnRxData+0x10c>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	2100      	movs	r1, #0
 8009b38:	2002      	movs	r0, #2
 8009b3a:	f012 f845 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4a38      	ldr	r2, [pc, #224]	@ (8009c2c <OnRxData+0x110>)
 8009b4c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	7809      	ldrb	r1, [r1, #0]
 8009b54:	4608      	mov	r0, r1
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009b64:	460d      	mov	r5, r1
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8009b6c:	9105      	str	r1, [sp, #20]
 8009b6e:	9504      	str	r5, [sp, #16]
 8009b70:	9403      	str	r4, [sp, #12]
 8009b72:	9002      	str	r0, [sp, #8]
 8009b74:	9201      	str	r2, [sp, #4]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	4b2d      	ldr	r3, [pc, #180]	@ (8009c30 <OnRxData+0x114>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	2003      	movs	r0, #3
 8009b80:	f012 f822 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d01f      	beq.n	8009bcc <OnRxData+0xb0>
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d141      	bne.n	8009c14 <OnRxData+0xf8>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d13f      	bne.n	8009c18 <OnRxData+0xfc>
        {
          switch (appData->Buffer[0])
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d00e      	beq.n	8009bc0 <OnRxData+0xa4>
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	dc10      	bgt.n	8009bc8 <OnRxData+0xac>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <OnRxData+0x94>
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d004      	beq.n	8009bb8 <OnRxData+0x9c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8009bae:	e00b      	b.n	8009bc8 <OnRxData+0xac>
              LmHandlerRequestClass(CLASS_A);
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f003 fc8b 	bl	800d4cc <LmHandlerRequestClass>
              break;
 8009bb6:	e008      	b.n	8009bca <OnRxData+0xae>
              LmHandlerRequestClass(CLASS_B);
 8009bb8:	2001      	movs	r0, #1
 8009bba:	f003 fc87 	bl	800d4cc <LmHandlerRequestClass>
              break;
 8009bbe:	e004      	b.n	8009bca <OnRxData+0xae>
              LmHandlerRequestClass(CLASS_C);
 8009bc0:	2002      	movs	r0, #2
 8009bc2:	f003 fc83 	bl	800d4cc <LmHandlerRequestClass>
              break;
 8009bc6:	e000      	b.n	8009bca <OnRxData+0xae>
              break;
 8009bc8:	bf00      	nop
          }
        }
        break;
 8009bca:	e025      	b.n	8009c18 <OnRxData+0xfc>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d123      	bne.n	8009c1c <OnRxData+0x100>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <OnRxData+0x118>)
 8009be2:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8009be4:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <OnRxData+0x118>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d109      	bne.n	8009c00 <OnRxData+0xe4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8009bec:	4b12      	ldr	r3, [pc, #72]	@ (8009c38 <OnRxData+0x11c>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	2003      	movs	r0, #3
 8009bf4:	f011 ffe8 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	f7f8 fc1f 	bl	800243c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 8009bfe:	e00d      	b.n	8009c1c <OnRxData+0x100>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009c00:	4b0e      	ldr	r3, [pc, #56]	@ (8009c3c <OnRxData+0x120>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	2100      	movs	r1, #0
 8009c06:	2003      	movs	r0, #3
 8009c08:	f011 ffde 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	f7f8 fbff 	bl	8002410 <BSP_LED_On>
        break;
 8009c12:	e003      	b.n	8009c1c <OnRxData+0x100>

      default:

        break;
 8009c14:	bf00      	nop
 8009c16:	e002      	b.n	8009c1e <OnRxData+0x102>
        break;
 8009c18:	bf00      	nop
 8009c1a:	e000      	b.n	8009c1e <OnRxData+0x102>
        break;
 8009c1c:	bf00      	nop
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bdb0      	pop	{r4, r5, r7, pc}
 8009c26:	bf00      	nop
 8009c28:	0801d440 	.word	0x0801d440
 8009c2c:	20000068 	.word	0x20000068
 8009c30:	0801d474 	.word	0x0801d474
 8009c34:	20000d86 	.word	0x20000d86
 8009c38:	0801d4bc 	.word	0x0801d4bc
 8009c3c:	0801d4c8 	.word	0x0801d4c8

08009c40 <SendTxData>:

static void SendTxData(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	603b      	str	r3, [r7, #0]
  int i = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	607b      	str	r3, [r7, #4]

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8009d08 <SendTxData+0xc8>)
 8009c50:	2202      	movs	r2, #2
 8009c52:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (uint8_t)'B';
 8009c54:	4b2c      	ldr	r3, [pc, #176]	@ (8009d08 <SendTxData+0xc8>)
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	1c59      	adds	r1, r3, #1
 8009c5c:	6079      	str	r1, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	2242      	movs	r2, #66	@ 0x42
 8009c62:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)'U';
 8009c64:	4b28      	ldr	r3, [pc, #160]	@ (8009d08 <SendTxData+0xc8>)
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	1c59      	adds	r1, r3, #1
 8009c6c:	6079      	str	r1, [r7, #4]
 8009c6e:	4413      	add	r3, r2
 8009c70:	2255      	movs	r2, #85	@ 0x55
 8009c72:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)'N';
 8009c74:	4b24      	ldr	r3, [pc, #144]	@ (8009d08 <SendTxData+0xc8>)
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	1c59      	adds	r1, r3, #1
 8009c7c:	6079      	str	r1, [r7, #4]
 8009c7e:	4413      	add	r3, r2
 8009c80:	224e      	movs	r2, #78	@ 0x4e
 8009c82:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)'D';
 8009c84:	4b20      	ldr	r3, [pc, #128]	@ (8009d08 <SendTxData+0xc8>)
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	6079      	str	r1, [r7, #4]
 8009c8e:	4413      	add	r3, r2
 8009c90:	2244      	movs	r2, #68	@ 0x44
 8009c92:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)'A';
 8009c94:	4b1c      	ldr	r3, [pc, #112]	@ (8009d08 <SendTxData+0xc8>)
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	1c59      	adds	r1, r3, #1
 8009c9c:	6079      	str	r1, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	2241      	movs	r2, #65	@ 0x41
 8009ca2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)testeValue;
 8009ca4:	4b19      	ldr	r3, [pc, #100]	@ (8009d0c <SendTxData+0xcc>)
 8009ca6:	6818      	ldr	r0, [r3, #0]
 8009ca8:	4b17      	ldr	r3, [pc, #92]	@ (8009d08 <SendTxData+0xc8>)
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	1c59      	adds	r1, r3, #1
 8009cb0:	6079      	str	r1, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	b2c2      	uxtb	r2, r0
 8009cb6:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	4b12      	ldr	r3, [pc, #72]	@ (8009d08 <SendTxData+0xc8>)
 8009cbe:	705a      	strb	r2, [r3, #1]

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8009cc0:	463a      	mov	r2, r7
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	4810      	ldr	r0, [pc, #64]	@ (8009d08 <SendTxData+0xc8>)
 8009cc8:	f003 fb14 	bl	800d2f4 <LmHandlerSend>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d106      	bne.n	8009ce0 <SendTxData+0xa0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8009cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009d10 <SendTxData+0xd0>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f011 ff75 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 8009cde:	e00e      	b.n	8009cfe <SendTxData+0xbe>
  else if (nextTxIn > 0)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00b      	beq.n	8009cfe <SendTxData+0xbe>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8009d14 <SendTxData+0xd4>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	099b      	lsrs	r3, r3, #6
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	4b09      	ldr	r3, [pc, #36]	@ (8009d18 <SendTxData+0xd8>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f011 ff65 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000060 	.word	0x20000060
 8009d0c:	20000c74 	.word	0x20000c74
 8009d10:	0801d4d4 	.word	0x0801d4d4
 8009d14:	10624dd3 	.word	0x10624dd3
 8009d18:	0801d4e4 	.word	0x0801d4e4

08009d1c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009d24:	2100      	movs	r1, #0
 8009d26:	2002      	movs	r0, #2
 8009d28:	f012 fb76 	bl	801c418 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8009d2c:	4803      	ldr	r0, [pc, #12]	@ (8009d3c <OnTxTimerEvent+0x20>)
 8009d2e:	f012 fd85 	bl	801c83c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000c7c 	.word	0x20000c7c

08009d40 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d03e      	beq.n	8009dcc <OnTxData+0x8c>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d03a      	beq.n	8009dcc <OnTxData+0x8c>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8009d56:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd4 <OnTxData+0x94>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	2002      	movs	r0, #2
 8009d5e:	f011 ff33 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	7b12      	ldrb	r2, [r2, #12]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009d72:	4610      	mov	r0, r2
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	f992 2014 	ldrsb.w	r2, [r2, #20]
 8009d7a:	9203      	str	r2, [sp, #12]
 8009d7c:	9002      	str	r0, [sp, #8]
 8009d7e:	9101      	str	r1, [sp, #4]
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4b15      	ldr	r3, [pc, #84]	@ (8009dd8 <OnTxData+0x98>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	2100      	movs	r1, #0
 8009d88:	2003      	movs	r0, #3
 8009d8a:	f011 ff1d 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8009d8e:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <OnTxData+0x9c>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	2100      	movs	r1, #0
 8009d94:	2003      	movs	r0, #3
 8009d96:	f011 ff17 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	789b      	ldrb	r3, [r3, #2]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d10e      	bne.n	8009dc0 <OnTxData+0x80>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <OnTxData+0x6e>
 8009daa:	4b0d      	ldr	r3, [pc, #52]	@ (8009de0 <OnTxData+0xa0>)
 8009dac:	e000      	b.n	8009db0 <OnTxData+0x70>
 8009dae:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <OnTxData+0xa4>)
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4b0d      	ldr	r3, [pc, #52]	@ (8009de8 <OnTxData+0xa8>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	2003      	movs	r0, #3
 8009dba:	f011 ff05 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8009dbe:	e005      	b.n	8009dcc <OnTxData+0x8c>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <OnTxData+0xac>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	2003      	movs	r0, #3
 8009dc8:	f011 fefe 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	0801d504 	.word	0x0801d504
 8009dd8:	0801d538 	.word	0x0801d538
 8009ddc:	0801d56c 	.word	0x0801d56c
 8009de0:	0801d57c 	.word	0x0801d57c
 8009de4:	0801d580 	.word	0x0801d580
 8009de8:	0801d588 	.word	0x0801d588
 8009dec:	0801d59c 	.word	0x0801d59c

08009df0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d022      	beq.n	8009e44 <OnJoinRequest+0x54>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d117      	bne.n	8009e38 <OnJoinRequest+0x48>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8009e08:	4b10      	ldr	r3, [pc, #64]	@ (8009e4c <OnJoinRequest+0x5c>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2002      	movs	r0, #2
 8009e10:	f011 feda 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d106      	bne.n	8009e2a <OnJoinRequest+0x3a>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <OnJoinRequest+0x60>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	2002      	movs	r0, #2
 8009e24:	f011 fed0 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 8009e28:	e00c      	b.n	8009e44 <OnJoinRequest+0x54>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8009e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e54 <OnJoinRequest+0x64>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	2002      	movs	r0, #2
 8009e32:	f011 fec9 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e36:	e005      	b.n	8009e44 <OnJoinRequest+0x54>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8009e38:	4b07      	ldr	r3, [pc, #28]	@ (8009e58 <OnJoinRequest+0x68>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	2002      	movs	r0, #2
 8009e40:	f011 fec2 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	0801d5ac 	.word	0x0801d5ac
 8009e50:	0801d5c4 	.word	0x0801d5c4
 8009e54:	0801d5e4 	.word	0x0801d5e4
 8009e58:	0801d604 	.word	0x0801d604

08009e5c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009e60:	2100      	movs	r1, #0
 8009e62:	2001      	movs	r0, #1
 8009e64:	f012 fad8 	bl	801c418 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009e68:	bf00      	nop
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8009e70:	4b18      	ldr	r3, [pc, #96]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009e76:	4b17      	ldr	r3, [pc, #92]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009e7c:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009e82:	4b14      	ldr	r3, [pc, #80]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8009e88:	4b12      	ldr	r3, [pc, #72]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f043 0320 	orr.w	r3, r3, #32
 8009e90:	4a10      	ldr	r2, [pc, #64]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e92:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 8009e94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009e9e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10d      	bne.n	8009ec4 <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed8 <LoraInfo_Init+0x6c>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2100      	movs	r1, #0
 8009eae:	2000      	movs	r0, #0
 8009eb0:	f011 fe8a 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009eb4:	bf00      	nop
 8009eb6:	f011 fe75 	bl	801bba4 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d1fa      	bne.n	8009eb6 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009ec0:	bf00      	nop
 8009ec2:	e7fd      	b.n	8009ec0 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009ec4:	4b03      	ldr	r3, [pc, #12]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8009eca:	4b02      	ldr	r3, [pc, #8]	@ (8009ed4 <LoraInfo_Init+0x68>)
 8009ecc:	2203      	movs	r2, #3
 8009ece:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009ed0:	bf00      	nop
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000d88 	.word	0x20000d88
 8009ed8:	0801d65c 	.word	0x0801d65c

08009edc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009ee0:	4b02      	ldr	r3, [pc, #8]	@ (8009eec <LoraInfo_GetPtr+0x10>)
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	20000d88 	.word	0x20000d88

08009ef0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8009ef4:	f7f8 fb4d 	bl	8002592 <BSP_RADIO_Init>
 8009ef8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	bd80      	pop	{r7, pc}

08009efe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	4603      	mov	r3, r0
 8009f06:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f8 fb76 	bl	80025fc <BSP_RADIO_ConfigRFSwitch>
 8009f10:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8009f1e:	f7f8 fbbb 	bl	8002698 <BSP_RADIO_GetTxConfig>
 8009f22:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8009f2c:	f7f8 fbbb 	bl	80026a6 <BSP_RADIO_IsTCXO>
 8009f30:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8009f3a:	f7f8 fbbb 	bl	80026b4 <BSP_RADIO_IsDCDC>
 8009f3e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f56:	2b84      	cmp	r3, #132	@ 0x84
 8009f58:	d005      	beq.n	8009f66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4413      	add	r3, r2
 8009f62:	3303      	adds	r3, #3
 8009f64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009f66:	68fb      	ldr	r3, [r7, #12]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr

08009f72 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009f76:	f000 fadf 	bl	800a538 <vTaskStartScheduler>
  
  return osOK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f82:	b089      	sub	sp, #36	@ 0x24
 8009f84:	af04      	add	r7, sp, #16
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d020      	beq.n	8009fd4 <osThreadCreate+0x54>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01c      	beq.n	8009fd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685c      	ldr	r4, [r3, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691e      	ldr	r6, [r3, #16]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff ffc9 	bl	8009f44 <makeFreeRtosPriority>
 8009fb2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fbc:	9202      	str	r2, [sp, #8]
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	9100      	str	r1, [sp, #0]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 f8e8 	bl	800a19e <xTaskCreateStatic>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	e01c      	b.n	800a00e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685c      	ldr	r4, [r3, #4]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fe0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff ffab 	bl	8009f44 <makeFreeRtosPriority>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	9200      	str	r2, [sp, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 f92d 	bl	800a25e <xTaskCreate>
 800a004:	4603      	mov	r3, r0
 800a006:	2b01      	cmp	r3, #1
 800a008:	d001      	beq.n	800a00e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e000      	b.n	800a010 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a00e:	68fb      	ldr	r3, [r7, #12]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a018 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <osDelay+0x16>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	e000      	b.n	800a030 <osDelay+0x18>
 800a02e:	2301      	movs	r3, #1
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fa4b 	bl	800a4cc <vTaskDelay>
  
  return osOK;
 800a036:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f103 0208 	add.w	r2, r3, #8
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a058:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f103 0208 	add.w	r2, r3, #8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f103 0208 	add.w	r2, r3, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	bc80      	pop	{r7}
 800a07c:	4770      	bx	lr

0800a07e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	bc80      	pop	{r7}
 800a094:	4770      	bx	lr

0800a096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a096:	b480      	push	{r7}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
}
 800a0d2:	bf00      	nop
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr

0800a0dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0f2:	d103      	bne.n	800a0fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	e00c      	b.n	800a116 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3308      	adds	r3, #8
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e002      	b.n	800a10a <vListInsert+0x2e>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	429a      	cmp	r2, r3
 800a114:	d2f6      	bcs.n	800a104 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	601a      	str	r2, [r3, #0]
}
 800a142:	bf00      	nop
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	6892      	ldr	r2, [r2, #8]
 800a162:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	6852      	ldr	r2, [r2, #4]
 800a16c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d103      	bne.n	800a180 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr

0800a19e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b08e      	sub	sp, #56	@ 0x38
 800a1a2:	af04      	add	r7, sp, #16
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10b      	bne.n	800a1ca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10b      	bne.n	800a1e8 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	61fb      	str	r3, [r7, #28]
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1e8:	2354      	movs	r3, #84	@ 0x54
 800a1ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2b54      	cmp	r3, #84	@ 0x54
 800a1f0:	d00b      	beq.n	800a20a <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	61bb      	str	r3, [r7, #24]
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	e7fd      	b.n	800a206 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a20a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01e      	beq.n	800a250 <xTaskCreateStatic+0xb2>
 800a212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01b      	beq.n	800a250 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a220:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	2202      	movs	r2, #2
 800a226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a22a:	2300      	movs	r3, #0
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	9302      	str	r3, [sp, #8]
 800a232:	f107 0314 	add.w	r3, r7, #20
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f850 	bl	800a2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a24a:	f000 f8d5 	bl	800a3f8 <prvAddNewTaskToReadyList>
 800a24e:	e001      	b.n	800a254 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a254:	697b      	ldr	r3, [r7, #20]
	}
 800a256:	4618      	mov	r0, r3
 800a258:	3728      	adds	r7, #40	@ 0x28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b08c      	sub	sp, #48	@ 0x30
 800a262:	af04      	add	r7, sp, #16
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	603b      	str	r3, [r7, #0]
 800a26a:	4613      	mov	r3, r2
 800a26c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4618      	mov	r0, r3
 800a274:	f001 f832 	bl	800b2dc <pvPortMalloc>
 800a278:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00e      	beq.n	800a29e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a280:	2054      	movs	r0, #84	@ 0x54
 800a282:	f001 f82b 	bl	800b2dc <pvPortMalloc>
 800a286:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	631a      	str	r2, [r3, #48]	@ 0x30
 800a294:	e005      	b.n	800a2a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f001 f8e8 	bl	800b46c <vPortFree>
 800a29c:	e001      	b.n	800a2a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d017      	beq.n	800a2d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2b0:	88fa      	ldrh	r2, [r7, #6]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9303      	str	r3, [sp, #12]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	9302      	str	r3, [sp, #8]
 800a2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 f80e 	bl	800a2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2cc:	69f8      	ldr	r0, [r7, #28]
 800a2ce:	f000 f893 	bl	800a3f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	61bb      	str	r3, [r7, #24]
 800a2d6:	e002      	b.n	800a2de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2de:	69bb      	ldr	r3, [r7, #24]
	}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a300:	3b01      	subs	r3, #1
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	617b      	str	r3, [r7, #20]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01f      	beq.n	800a378 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a338:	2300      	movs	r3, #0
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	e012      	b.n	800a364 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	7819      	ldrb	r1, [r3, #0]
 800a346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	3334      	adds	r3, #52	@ 0x34
 800a34e:	460a      	mov	r2, r1
 800a350:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	4413      	add	r3, r2
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d006      	beq.n	800a36c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	3301      	adds	r3, #1
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	2b0f      	cmp	r3, #15
 800a368:	d9e9      	bls.n	800a33e <prvInitialiseNewTask+0x56>
 800a36a:	e000      	b.n	800a36e <prvInitialiseNewTask+0x86>
			{
				break;
 800a36c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a376:	e003      	b.n	800a380 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a382:	2b06      	cmp	r3, #6
 800a384:	d901      	bls.n	800a38a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a386:	2306      	movs	r3, #6
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a38e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a394:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fe6c 	bl	800a07e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a8:	3318      	adds	r3, #24
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff fe67 	bl	800a07e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	f1c3 0207 	rsb	r2, r3, #7
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	69b8      	ldr	r0, [r7, #24]
 800a3da:	f000 fce3 	bl	800ada4 <pxPortInitialiseStack>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f0:	bf00      	nop
 800a3f2:	3720      	adds	r7, #32
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a400:	f000 fdc4 	bl	800af8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a404:	4b2a      	ldr	r3, [pc, #168]	@ (800a4b0 <prvAddNewTaskToReadyList+0xb8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3301      	adds	r3, #1
 800a40a:	4a29      	ldr	r2, [pc, #164]	@ (800a4b0 <prvAddNewTaskToReadyList+0xb8>)
 800a40c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a40e:	4b29      	ldr	r3, [pc, #164]	@ (800a4b4 <prvAddNewTaskToReadyList+0xbc>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a416:	4a27      	ldr	r2, [pc, #156]	@ (800a4b4 <prvAddNewTaskToReadyList+0xbc>)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a41c:	4b24      	ldr	r3, [pc, #144]	@ (800a4b0 <prvAddNewTaskToReadyList+0xb8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d110      	bne.n	800a446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a424:	f000 fb7c 	bl	800ab20 <prvInitialiseTaskLists>
 800a428:	e00d      	b.n	800a446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a42a:	4b23      	ldr	r3, [pc, #140]	@ (800a4b8 <prvAddNewTaskToReadyList+0xc0>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a432:	4b20      	ldr	r3, [pc, #128]	@ (800a4b4 <prvAddNewTaskToReadyList+0xbc>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d802      	bhi.n	800a446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a440:	4a1c      	ldr	r2, [pc, #112]	@ (800a4b4 <prvAddNewTaskToReadyList+0xbc>)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a446:	4b1d      	ldr	r3, [pc, #116]	@ (800a4bc <prvAddNewTaskToReadyList+0xc4>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3301      	adds	r3, #1
 800a44c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4bc <prvAddNewTaskToReadyList+0xc4>)
 800a44e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	2201      	movs	r2, #1
 800a456:	409a      	lsls	r2, r3
 800a458:	4b19      	ldr	r3, [pc, #100]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	4a18      	ldr	r2, [pc, #96]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc8>)
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4a15      	ldr	r2, [pc, #84]	@ (800a4c4 <prvAddNewTaskToReadyList+0xcc>)
 800a470:	441a      	add	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3304      	adds	r3, #4
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f7ff fe0c 	bl	800a096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a47e:	f000 fdb5 	bl	800afec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a482:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b8 <prvAddNewTaskToReadyList+0xc0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00e      	beq.n	800a4a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a48a:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b4 <prvAddNewTaskToReadyList+0xbc>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	429a      	cmp	r2, r3
 800a496:	d207      	bcs.n	800a4a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a498:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c8 <prvAddNewTaskToReadyList+0xd0>)
 800a49a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000e98 	.word	0x20000e98
 800a4b4:	20000d98 	.word	0x20000d98
 800a4b8:	20000ea4 	.word	0x20000ea4
 800a4bc:	20000eb4 	.word	0x20000eb4
 800a4c0:	20000ea0 	.word	0x20000ea0
 800a4c4:	20000d9c 	.word	0x20000d9c
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d018      	beq.n	800a510 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4de:	4b14      	ldr	r3, [pc, #80]	@ (800a530 <vTaskDelay+0x64>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <vTaskDelay+0x32>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60bb      	str	r3, [r7, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4fe:	f000 f87d 	bl	800a5fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a502:	2100      	movs	r1, #0
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fbe7 	bl	800acd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a50a:	f000 f8bf 	bl	800a68c <xTaskResumeAll>
 800a50e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d107      	bne.n	800a526 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a516:	4b07      	ldr	r3, [pc, #28]	@ (800a534 <vTaskDelay+0x68>)
 800a518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20000ec0 	.word	0x20000ec0
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	@ 0x28
 800a53c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a546:	463a      	mov	r2, r7
 800a548:	1d39      	adds	r1, r7, #4
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 fce0 	bl	8000f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	9202      	str	r2, [sp, #8]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	2300      	movs	r3, #0
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	2300      	movs	r3, #0
 800a564:	460a      	mov	r2, r1
 800a566:	491f      	ldr	r1, [pc, #124]	@ (800a5e4 <vTaskStartScheduler+0xac>)
 800a568:	481f      	ldr	r0, [pc, #124]	@ (800a5e8 <vTaskStartScheduler+0xb0>)
 800a56a:	f7ff fe18 	bl	800a19e <xTaskCreateStatic>
 800a56e:	4603      	mov	r3, r0
 800a570:	4a1e      	ldr	r2, [pc, #120]	@ (800a5ec <vTaskStartScheduler+0xb4>)
 800a572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a574:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ec <vTaskStartScheduler+0xb4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a57c:	2301      	movs	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	e001      	b.n	800a586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d116      	bne.n	800a5ba <vTaskStartScheduler+0x82>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	613b      	str	r3, [r7, #16]
}
 800a59e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5a0:	4b13      	ldr	r3, [pc, #76]	@ (800a5f0 <vTaskStartScheduler+0xb8>)
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5a8:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <vTaskStartScheduler+0xbc>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5ae:	4b12      	ldr	r3, [pc, #72]	@ (800a5f8 <vTaskStartScheduler+0xc0>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5b4:	f000 fc78 	bl	800aea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5b8:	e00f      	b.n	800a5da <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5c0:	d10b      	bne.n	800a5da <vTaskStartScheduler+0xa2>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	60fb      	str	r3, [r7, #12]
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	e7fd      	b.n	800a5d6 <vTaskStartScheduler+0x9e>
}
 800a5da:	bf00      	nop
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0801d6ac 	.word	0x0801d6ac
 800a5e8:	0800aa45 	.word	0x0800aa45
 800a5ec:	20000ebc 	.word	0x20000ebc
 800a5f0:	20000eb8 	.word	0x20000eb8
 800a5f4:	20000ea4 	.word	0x20000ea4
 800a5f8:	20000e9c 	.word	0x20000e9c

0800a5fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <vTaskSuspendAll+0x18>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a03      	ldr	r2, [pc, #12]	@ (800a614 <vTaskSuspendAll+0x18>)
 800a608:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a60a:	bf00      	nop
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	20000ec0 	.word	0x20000ec0

0800a618 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800a622:	2301      	movs	r3, #1
 800a624:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800a626:	4b14      	ldr	r3, [pc, #80]	@ (800a678 <prvGetExpectedIdleTime+0x60>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d201      	bcs.n	800a634 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a634:	4b11      	ldr	r3, [pc, #68]	@ (800a67c <prvGetExpectedIdleTime+0x64>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	e012      	b.n	800a66a <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a644:	4b0e      	ldr	r3, [pc, #56]	@ (800a680 <prvGetExpectedIdleTime+0x68>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d902      	bls.n	800a652 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	e00b      	b.n	800a66a <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	e005      	b.n	800a66a <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a65e:	4b09      	ldr	r3, [pc, #36]	@ (800a684 <prvGetExpectedIdleTime+0x6c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b09      	ldr	r3, [pc, #36]	@ (800a688 <prvGetExpectedIdleTime+0x70>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800a66a:	68fb      	ldr	r3, [r7, #12]
	}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	bc80      	pop	{r7}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000ea0 	.word	0x20000ea0
 800a67c:	20000d98 	.word	0x20000d98
 800a680:	20000d9c 	.word	0x20000d9c
 800a684:	20000eb8 	.word	0x20000eb8
 800a688:	20000e9c 	.word	0x20000e9c

0800a68c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a696:	2300      	movs	r3, #0
 800a698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a69a:	4b42      	ldr	r3, [pc, #264]	@ (800a7a4 <xTaskResumeAll+0x118>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10b      	bne.n	800a6ba <xTaskResumeAll+0x2e>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	603b      	str	r3, [r7, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop
 800a6b8:	e7fd      	b.n	800a6b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6ba:	f000 fc67 	bl	800af8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6be:	4b39      	ldr	r3, [pc, #228]	@ (800a7a4 <xTaskResumeAll+0x118>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	4a37      	ldr	r2, [pc, #220]	@ (800a7a4 <xTaskResumeAll+0x118>)
 800a6c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c8:	4b36      	ldr	r3, [pc, #216]	@ (800a7a4 <xTaskResumeAll+0x118>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d161      	bne.n	800a794 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6d0:	4b35      	ldr	r3, [pc, #212]	@ (800a7a8 <xTaskResumeAll+0x11c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d05d      	beq.n	800a794 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6d8:	e02e      	b.n	800a738 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6da:	4b34      	ldr	r3, [pc, #208]	@ (800a7ac <xTaskResumeAll+0x120>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3318      	adds	r3, #24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7ff fd30 	bl	800a14c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff fd2b 	bl	800a14c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	409a      	lsls	r2, r3
 800a6fe:	4b2c      	ldr	r3, [pc, #176]	@ (800a7b0 <xTaskResumeAll+0x124>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4313      	orrs	r3, r2
 800a704:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b0 <xTaskResumeAll+0x124>)
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4a27      	ldr	r2, [pc, #156]	@ (800a7b4 <xTaskResumeAll+0x128>)
 800a716:	441a      	add	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3304      	adds	r3, #4
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7ff fcb9 	bl	800a096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a728:	4b23      	ldr	r3, [pc, #140]	@ (800a7b8 <xTaskResumeAll+0x12c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72e:	429a      	cmp	r2, r3
 800a730:	d302      	bcc.n	800a738 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a732:	4b22      	ldr	r3, [pc, #136]	@ (800a7bc <xTaskResumeAll+0x130>)
 800a734:	2201      	movs	r2, #1
 800a736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a738:	4b1c      	ldr	r3, [pc, #112]	@ (800a7ac <xTaskResumeAll+0x120>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1cc      	bne.n	800a6da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a746:	f000 fa89 	bl	800ac5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a74a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c0 <xTaskResumeAll+0x134>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d010      	beq.n	800a778 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a756:	f000 f85f 	bl	800a818 <xTaskIncrementTick>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a760:	4b16      	ldr	r3, [pc, #88]	@ (800a7bc <xTaskResumeAll+0x130>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3b01      	subs	r3, #1
 800a76a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f1      	bne.n	800a756 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a772:	4b13      	ldr	r3, [pc, #76]	@ (800a7c0 <xTaskResumeAll+0x134>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a778:	4b10      	ldr	r3, [pc, #64]	@ (800a7bc <xTaskResumeAll+0x130>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d009      	beq.n	800a794 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a784:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c4 <xTaskResumeAll+0x138>)
 800a786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a794:	f000 fc2a 	bl	800afec <vPortExitCritical>

	return xAlreadyYielded;
 800a798:	68bb      	ldr	r3, [r7, #8]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000ec0 	.word	0x20000ec0
 800a7a8:	20000e98 	.word	0x20000e98
 800a7ac:	20000e58 	.word	0x20000e58
 800a7b0:	20000ea0 	.word	0x20000ea0
 800a7b4:	20000d9c 	.word	0x20000d9c
 800a7b8:	20000d98 	.word	0x20000d98
 800a7bc:	20000eac 	.word	0x20000eac
 800a7c0:	20000ea8 	.word	0x20000ea8
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <vTaskStepTick+0x48>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	441a      	add	r2, r3
 800a7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a814 <vTaskStepTick+0x4c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d90b      	bls.n	800a7f8 <vTaskStepTick+0x30>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	e7fd      	b.n	800a7f4 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800a7f8:	4b05      	ldr	r3, [pc, #20]	@ (800a810 <vTaskStepTick+0x48>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4413      	add	r3, r2
 800a800:	4a03      	ldr	r2, [pc, #12]	@ (800a810 <vTaskStepTick+0x48>)
 800a802:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	bc80      	pop	{r7}
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	20000e9c 	.word	0x20000e9c
 800a814:	20000eb8 	.word	0x20000eb8

0800a818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a822:	4b4f      	ldr	r3, [pc, #316]	@ (800a960 <xTaskIncrementTick+0x148>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 8089 	bne.w	800a93e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a82c:	4b4d      	ldr	r3, [pc, #308]	@ (800a964 <xTaskIncrementTick+0x14c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a834:	4a4b      	ldr	r2, [pc, #300]	@ (800a964 <xTaskIncrementTick+0x14c>)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d121      	bne.n	800a884 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a840:	4b49      	ldr	r3, [pc, #292]	@ (800a968 <xTaskIncrementTick+0x150>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	603b      	str	r3, [r7, #0]
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	e7fd      	b.n	800a85e <xTaskIncrementTick+0x46>
 800a862:	4b41      	ldr	r3, [pc, #260]	@ (800a968 <xTaskIncrementTick+0x150>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	4b40      	ldr	r3, [pc, #256]	@ (800a96c <xTaskIncrementTick+0x154>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a3e      	ldr	r2, [pc, #248]	@ (800a968 <xTaskIncrementTick+0x150>)
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	4a3e      	ldr	r2, [pc, #248]	@ (800a96c <xTaskIncrementTick+0x154>)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	4b3e      	ldr	r3, [pc, #248]	@ (800a970 <xTaskIncrementTick+0x158>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3301      	adds	r3, #1
 800a87c:	4a3c      	ldr	r2, [pc, #240]	@ (800a970 <xTaskIncrementTick+0x158>)
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	f000 f9ec 	bl	800ac5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a884:	4b3b      	ldr	r3, [pc, #236]	@ (800a974 <xTaskIncrementTick+0x15c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d348      	bcc.n	800a920 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a88e:	4b36      	ldr	r3, [pc, #216]	@ (800a968 <xTaskIncrementTick+0x150>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a898:	4b36      	ldr	r3, [pc, #216]	@ (800a974 <xTaskIncrementTick+0x15c>)
 800a89a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a89e:	601a      	str	r2, [r3, #0]
					break;
 800a8a0:	e03e      	b.n	800a920 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a2:	4b31      	ldr	r3, [pc, #196]	@ (800a968 <xTaskIncrementTick+0x150>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d203      	bcs.n	800a8c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800a974 <xTaskIncrementTick+0x15c>)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8c0:	e02e      	b.n	800a920 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fc40 	bl	800a14c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d004      	beq.n	800a8de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	3318      	adds	r3, #24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff fc37 	bl	800a14c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	409a      	lsls	r2, r3
 800a8e6:	4b24      	ldr	r3, [pc, #144]	@ (800a978 <xTaskIncrementTick+0x160>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	4a22      	ldr	r2, [pc, #136]	@ (800a978 <xTaskIncrementTick+0x160>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <xTaskIncrementTick+0x164>)
 800a8fe:	441a      	add	r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7ff fbc5 	bl	800a096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a910:	4b1b      	ldr	r3, [pc, #108]	@ (800a980 <xTaskIncrementTick+0x168>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a916:	429a      	cmp	r2, r3
 800a918:	d3b9      	bcc.n	800a88e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a91a:	2301      	movs	r3, #1
 800a91c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a91e:	e7b6      	b.n	800a88e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a920:	4b17      	ldr	r3, [pc, #92]	@ (800a980 <xTaskIncrementTick+0x168>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a926:	4915      	ldr	r1, [pc, #84]	@ (800a97c <xTaskIncrementTick+0x164>)
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d907      	bls.n	800a948 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a938:	2301      	movs	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	e004      	b.n	800a948 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a93e:	4b11      	ldr	r3, [pc, #68]	@ (800a984 <xTaskIncrementTick+0x16c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	4a0f      	ldr	r2, [pc, #60]	@ (800a984 <xTaskIncrementTick+0x16c>)
 800a946:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a948:	4b0f      	ldr	r3, [pc, #60]	@ (800a988 <xTaskIncrementTick+0x170>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a950:	2301      	movs	r3, #1
 800a952:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a954:	697b      	ldr	r3, [r7, #20]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000ec0 	.word	0x20000ec0
 800a964:	20000e9c 	.word	0x20000e9c
 800a968:	20000e50 	.word	0x20000e50
 800a96c:	20000e54 	.word	0x20000e54
 800a970:	20000eb0 	.word	0x20000eb0
 800a974:	20000eb8 	.word	0x20000eb8
 800a978:	20000ea0 	.word	0x20000ea0
 800a97c:	20000d9c 	.word	0x20000d9c
 800a980:	20000d98 	.word	0x20000d98
 800a984:	20000ea8 	.word	0x20000ea8
 800a988:	20000eac 	.word	0x20000eac

0800a98c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a992:	4b27      	ldr	r3, [pc, #156]	@ (800aa30 <vTaskSwitchContext+0xa4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a99a:	4b26      	ldr	r3, [pc, #152]	@ (800aa34 <vTaskSwitchContext+0xa8>)
 800a99c:	2201      	movs	r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9a0:	e040      	b.n	800aa24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a9a2:	4b24      	ldr	r3, [pc, #144]	@ (800aa34 <vTaskSwitchContext+0xa8>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a8:	4b23      	ldr	r3, [pc, #140]	@ (800aa38 <vTaskSwitchContext+0xac>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	fab3 f383 	clz	r3, r3
 800a9b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9b6:	7afb      	ldrb	r3, [r7, #11]
 800a9b8:	f1c3 031f 	rsb	r3, r3, #31
 800a9bc:	617b      	str	r3, [r7, #20]
 800a9be:	491f      	ldr	r1, [pc, #124]	@ (800aa3c <vTaskSwitchContext+0xb0>)
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <vTaskSwitchContext+0x5e>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	e7fd      	b.n	800a9e6 <vTaskSwitchContext+0x5a>
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4a11      	ldr	r2, [pc, #68]	@ (800aa3c <vTaskSwitchContext+0xb0>)
 800a9f6:	4413      	add	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	605a      	str	r2, [r3, #4]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d104      	bne.n	800aa1a <vTaskSwitchContext+0x8e>
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	605a      	str	r2, [r3, #4]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	4a07      	ldr	r2, [pc, #28]	@ (800aa40 <vTaskSwitchContext+0xb4>)
 800aa22:	6013      	str	r3, [r2, #0]
}
 800aa24:	bf00      	nop
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20000ec0 	.word	0x20000ec0
 800aa34:	20000eac 	.word	0x20000eac
 800aa38:	20000ea0 	.word	0x20000ea0
 800aa3c:	20000d9c 	.word	0x20000d9c
 800aa40:	20000d98 	.word	0x20000d98

0800aa44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa4c:	f000 f8a8 	bl	800aba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa50:	4b18      	ldr	r3, [pc, #96]	@ (800aab4 <prvIdleTask+0x70>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d907      	bls.n	800aa68 <prvIdleTask+0x24>
			{
				taskYIELD();
 800aa58:	4b17      	ldr	r3, [pc, #92]	@ (800aab8 <prvIdleTask+0x74>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800aa68:	f7ff fdd6 	bl	800a618 <prvGetExpectedIdleTime>
 800aa6c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d9eb      	bls.n	800aa4c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800aa74:	f7ff fdc2 	bl	800a5fc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800aa78:	4b10      	ldr	r3, [pc, #64]	@ (800aabc <prvIdleTask+0x78>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	4b10      	ldr	r3, [pc, #64]	@ (800aac0 <prvIdleTask+0x7c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d20b      	bcs.n	800aa9c <prvIdleTask+0x58>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	60bb      	str	r3, [r7, #8]
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800aa9c:	f7ff fdbc 	bl	800a618 <prvGetExpectedIdleTime>
 800aaa0:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d902      	bls.n	800aaae <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fb0f 	bl	800b0cc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800aaae:	f7ff fded 	bl	800a68c <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800aab2:	e7cb      	b.n	800aa4c <prvIdleTask+0x8>
 800aab4:	20000d9c 	.word	0x20000d9c
 800aab8:	e000ed04 	.word	0xe000ed04
 800aabc:	20000eb8 	.word	0x20000eb8
 800aac0:	20000e9c 	.word	0x20000e9c

0800aac4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800aace:	2301      	movs	r3, #1
 800aad0:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800aad2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab10 <eTaskConfirmSleepModeStatus+0x4c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800aada:	2300      	movs	r3, #0
 800aadc:	71fb      	strb	r3, [r7, #7]
 800aade:	e010      	b.n	800ab02 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800aae0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab14 <eTaskConfirmSleepModeStatus+0x50>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800aae8:	2300      	movs	r3, #0
 800aaea:	71fb      	strb	r3, [r7, #7]
 800aaec:	e009      	b.n	800ab02 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800aaee:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <eTaskConfirmSleepModeStatus+0x54>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab1c <eTaskConfirmSleepModeStatus+0x58>)
 800aaf4:	6819      	ldr	r1, [r3, #0]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	1acb      	subs	r3, r1, r3
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d101      	bne.n	800ab02 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800aafe:	2302      	movs	r3, #2
 800ab00:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800ab02:	79fb      	ldrb	r3, [r7, #7]
	}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bc80      	pop	{r7}
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	20000e58 	.word	0x20000e58
 800ab14:	20000eac 	.word	0x20000eac
 800ab18:	20000e84 	.word	0x20000e84
 800ab1c:	20000e98 	.word	0x20000e98

0800ab20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
 800ab2a:	e00c      	b.n	800ab46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4a12      	ldr	r2, [pc, #72]	@ (800ab80 <prvInitialiseTaskLists+0x60>)
 800ab38:	4413      	add	r3, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff fa80 	bl	800a040 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3301      	adds	r3, #1
 800ab44:	607b      	str	r3, [r7, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b06      	cmp	r3, #6
 800ab4a:	d9ef      	bls.n	800ab2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab4c:	480d      	ldr	r0, [pc, #52]	@ (800ab84 <prvInitialiseTaskLists+0x64>)
 800ab4e:	f7ff fa77 	bl	800a040 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab52:	480d      	ldr	r0, [pc, #52]	@ (800ab88 <prvInitialiseTaskLists+0x68>)
 800ab54:	f7ff fa74 	bl	800a040 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab58:	480c      	ldr	r0, [pc, #48]	@ (800ab8c <prvInitialiseTaskLists+0x6c>)
 800ab5a:	f7ff fa71 	bl	800a040 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab5e:	480c      	ldr	r0, [pc, #48]	@ (800ab90 <prvInitialiseTaskLists+0x70>)
 800ab60:	f7ff fa6e 	bl	800a040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab64:	480b      	ldr	r0, [pc, #44]	@ (800ab94 <prvInitialiseTaskLists+0x74>)
 800ab66:	f7ff fa6b 	bl	800a040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab98 <prvInitialiseTaskLists+0x78>)
 800ab6c:	4a05      	ldr	r2, [pc, #20]	@ (800ab84 <prvInitialiseTaskLists+0x64>)
 800ab6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab70:	4b0a      	ldr	r3, [pc, #40]	@ (800ab9c <prvInitialiseTaskLists+0x7c>)
 800ab72:	4a05      	ldr	r2, [pc, #20]	@ (800ab88 <prvInitialiseTaskLists+0x68>)
 800ab74:	601a      	str	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000d9c 	.word	0x20000d9c
 800ab84:	20000e28 	.word	0x20000e28
 800ab88:	20000e3c 	.word	0x20000e3c
 800ab8c:	20000e58 	.word	0x20000e58
 800ab90:	20000e6c 	.word	0x20000e6c
 800ab94:	20000e84 	.word	0x20000e84
 800ab98:	20000e50 	.word	0x20000e50
 800ab9c:	20000e54 	.word	0x20000e54

0800aba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aba6:	e019      	b.n	800abdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aba8:	f000 f9f0 	bl	800af8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abac:	4b10      	ldr	r3, [pc, #64]	@ (800abf0 <prvCheckTasksWaitingTermination+0x50>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3304      	adds	r3, #4
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff fac7 	bl	800a14c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800abbe:	4b0d      	ldr	r3, [pc, #52]	@ (800abf4 <prvCheckTasksWaitingTermination+0x54>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	4a0b      	ldr	r2, [pc, #44]	@ (800abf4 <prvCheckTasksWaitingTermination+0x54>)
 800abc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abc8:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <prvCheckTasksWaitingTermination+0x58>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3b01      	subs	r3, #1
 800abce:	4a0a      	ldr	r2, [pc, #40]	@ (800abf8 <prvCheckTasksWaitingTermination+0x58>)
 800abd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abd2:	f000 fa0b 	bl	800afec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f810 	bl	800abfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abdc:	4b06      	ldr	r3, [pc, #24]	@ (800abf8 <prvCheckTasksWaitingTermination+0x58>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1e1      	bne.n	800aba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000e6c 	.word	0x20000e6c
 800abf4:	20000e98 	.word	0x20000e98
 800abf8:	20000e80 	.word	0x20000e80

0800abfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d108      	bne.n	800ac20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fc2a 	bl	800b46c <vPortFree>
				vPortFree( pxTCB );
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fc27 	bl	800b46c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac1e:	e019      	b.n	800ac54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d103      	bne.n	800ac32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fc1e 	bl	800b46c <vPortFree>
	}
 800ac30:	e010      	b.n	800ac54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d00b      	beq.n	800ac54 <prvDeleteTCB+0x58>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60fb      	str	r3, [r7, #12]
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	e7fd      	b.n	800ac50 <prvDeleteTCB+0x54>
	}
 800ac54:	bf00      	nop
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac62:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <prvResetNextTaskUnblockTime+0x38>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d104      	bne.n	800ac76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <prvResetNextTaskUnblockTime+0x3c>)
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac74:	e008      	b.n	800ac88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac76:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <prvResetNextTaskUnblockTime+0x38>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	4a04      	ldr	r2, [pc, #16]	@ (800ac98 <prvResetNextTaskUnblockTime+0x3c>)
 800ac86:	6013      	str	r3, [r2, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000e50 	.word	0x20000e50
 800ac98:	20000eb8 	.word	0x20000eb8

0800ac9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aca2:	4b0b      	ldr	r3, [pc, #44]	@ (800acd0 <xTaskGetSchedulerState+0x34>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800acaa:	2301      	movs	r3, #1
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	e008      	b.n	800acc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acb0:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <xTaskGetSchedulerState+0x38>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800acb8:	2302      	movs	r3, #2
 800acba:	607b      	str	r3, [r7, #4]
 800acbc:	e001      	b.n	800acc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800acbe:	2300      	movs	r3, #0
 800acc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800acc2:	687b      	ldr	r3, [r7, #4]
	}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	bc80      	pop	{r7}
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000ea4 	.word	0x20000ea4
 800acd4:	20000ec0 	.word	0x20000ec0

0800acd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ace2:	4b29      	ldr	r3, [pc, #164]	@ (800ad88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ace8:	4b28      	ldr	r3, [pc, #160]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3304      	adds	r3, #4
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fa2c 	bl	800a14c <uxListRemove>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10b      	bne.n	800ad12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800acfa:	4b24      	ldr	r3, [pc, #144]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad00:	2201      	movs	r2, #1
 800ad02:	fa02 f303 	lsl.w	r3, r2, r3
 800ad06:	43da      	mvns	r2, r3
 800ad08:	4b21      	ldr	r3, [pc, #132]	@ (800ad90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	4a20      	ldr	r2, [pc, #128]	@ (800ad90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad18:	d10a      	bne.n	800ad30 <prvAddCurrentTaskToDelayedList+0x58>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d007      	beq.n	800ad30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad20:	4b1a      	ldr	r3, [pc, #104]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4619      	mov	r1, r3
 800ad28:	481a      	ldr	r0, [pc, #104]	@ (800ad94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad2a:	f7ff f9b4 	bl	800a096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad2e:	e026      	b.n	800ad7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4413      	add	r3, r2
 800ad36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad38:	4b14      	ldr	r3, [pc, #80]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d209      	bcs.n	800ad5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad48:	4b13      	ldr	r3, [pc, #76]	@ (800ad98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3304      	adds	r3, #4
 800ad52:	4619      	mov	r1, r3
 800ad54:	4610      	mov	r0, r2
 800ad56:	f7ff f9c1 	bl	800a0dc <vListInsert>
}
 800ad5a:	e010      	b.n	800ad7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	4b0a      	ldr	r3, [pc, #40]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7ff f9b7 	bl	800a0dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad6e:	4b0c      	ldr	r3, [pc, #48]	@ (800ada0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d202      	bcs.n	800ad7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ad78:	4a09      	ldr	r2, [pc, #36]	@ (800ada0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	6013      	str	r3, [r2, #0]
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20000e9c 	.word	0x20000e9c
 800ad8c:	20000d98 	.word	0x20000d98
 800ad90:	20000ea0 	.word	0x20000ea0
 800ad94:	20000e84 	.word	0x20000e84
 800ad98:	20000e54 	.word	0x20000e54
 800ad9c:	20000e50 	.word	0x20000e50
 800ada0:	20000eb8 	.word	0x20000eb8

0800ada4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3b04      	subs	r3, #4
 800adb4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800adbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3b04      	subs	r3, #4
 800adc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	3b04      	subs	r3, #4
 800add2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800add4:	4a08      	ldr	r2, [pc, #32]	@ (800adf8 <pxPortInitialiseStack+0x54>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3b14      	subs	r3, #20
 800adde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3b20      	subs	r3, #32
 800adea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800adec:	68fb      	ldr	r3, [r7, #12]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr
 800adf8:	0800adfd 	.word	0x0800adfd

0800adfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ae06:	4b12      	ldr	r3, [pc, #72]	@ (800ae50 <prvTaskExitError+0x54>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae0e:	d00b      	beq.n	800ae28 <prvTaskExitError+0x2c>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	60fb      	str	r3, [r7, #12]
}
 800ae22:	bf00      	nop
 800ae24:	bf00      	nop
 800ae26:	e7fd      	b.n	800ae24 <prvTaskExitError+0x28>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	60bb      	str	r3, [r7, #8]
}
 800ae3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ae3c:	bf00      	nop
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d0fc      	beq.n	800ae3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr
 800ae50:	20000080 	.word	0x20000080
	...

0800ae60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <pxCurrentTCBConst2>)
 800ae62:	6819      	ldr	r1, [r3, #0]
 800ae64:	6808      	ldr	r0, [r1, #0]
 800ae66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ae6a:	f380 8809 	msr	PSP, r0
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f04f 0000 	mov.w	r0, #0
 800ae76:	f380 8811 	msr	BASEPRI, r0
 800ae7a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ae7e:	4770      	bx	lr

0800ae80 <pxCurrentTCBConst2>:
 800ae80:	20000d98 	.word	0x20000d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop

0800ae88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ae88:	4806      	ldr	r0, [pc, #24]	@ (800aea4 <prvPortStartFirstTask+0x1c>)
 800ae8a:	6800      	ldr	r0, [r0, #0]
 800ae8c:	6800      	ldr	r0, [r0, #0]
 800ae8e:	f380 8808 	msr	MSP, r0
 800ae92:	b662      	cpsie	i
 800ae94:	b661      	cpsie	f
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	df00      	svc	0
 800aea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aea2:	bf00      	nop
 800aea4:	e000ed08 	.word	0xe000ed08

0800aea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aeae:	4b32      	ldr	r3, [pc, #200]	@ (800af78 <xPortStartScheduler+0xd0>)
 800aeb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	22ff      	movs	r2, #255	@ 0xff
 800aebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	4b2a      	ldr	r3, [pc, #168]	@ (800af7c <xPortStartScheduler+0xd4>)
 800aed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aed6:	4b2a      	ldr	r3, [pc, #168]	@ (800af80 <xPortStartScheduler+0xd8>)
 800aed8:	2207      	movs	r2, #7
 800aeda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aedc:	e009      	b.n	800aef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aede:	4b28      	ldr	r3, [pc, #160]	@ (800af80 <xPortStartScheduler+0xd8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	4a26      	ldr	r2, [pc, #152]	@ (800af80 <xPortStartScheduler+0xd8>)
 800aee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aef2:	78fb      	ldrb	r3, [r7, #3]
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aefa:	2b80      	cmp	r3, #128	@ 0x80
 800aefc:	d0ef      	beq.n	800aede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aefe:	4b20      	ldr	r3, [pc, #128]	@ (800af80 <xPortStartScheduler+0xd8>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1c3 0307 	rsb	r3, r3, #7
 800af06:	2b04      	cmp	r3, #4
 800af08:	d00b      	beq.n	800af22 <xPortStartScheduler+0x7a>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	60bb      	str	r3, [r7, #8]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af22:	4b17      	ldr	r3, [pc, #92]	@ (800af80 <xPortStartScheduler+0xd8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	021b      	lsls	r3, r3, #8
 800af28:	4a15      	ldr	r2, [pc, #84]	@ (800af80 <xPortStartScheduler+0xd8>)
 800af2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af2c:	4b14      	ldr	r3, [pc, #80]	@ (800af80 <xPortStartScheduler+0xd8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af34:	4a12      	ldr	r2, [pc, #72]	@ (800af80 <xPortStartScheduler+0xd8>)
 800af36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af40:	4b10      	ldr	r3, [pc, #64]	@ (800af84 <xPortStartScheduler+0xdc>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a0f      	ldr	r2, [pc, #60]	@ (800af84 <xPortStartScheduler+0xdc>)
 800af46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800af4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af4c:	4b0d      	ldr	r3, [pc, #52]	@ (800af84 <xPortStartScheduler+0xdc>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0c      	ldr	r2, [pc, #48]	@ (800af84 <xPortStartScheduler+0xdc>)
 800af52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800af56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af58:	f000 f984 	bl	800b264 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <xPortStartScheduler+0xe0>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af62:	f7ff ff91 	bl	800ae88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af66:	f7ff fd11 	bl	800a98c <vTaskSwitchContext>
	prvTaskExitError();
 800af6a:	f7ff ff47 	bl	800adfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	e000e400 	.word	0xe000e400
 800af7c:	20000ed0 	.word	0x20000ed0
 800af80:	20000ed4 	.word	0x20000ed4
 800af84:	e000ed20 	.word	0xe000ed20
 800af88:	20000080 	.word	0x20000080

0800af8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	607b      	str	r3, [r7, #4]
}
 800afa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afa6:	4b0f      	ldr	r3, [pc, #60]	@ (800afe4 <vPortEnterCritical+0x58>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a0d      	ldr	r2, [pc, #52]	@ (800afe4 <vPortEnterCritical+0x58>)
 800afae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afb0:	4b0c      	ldr	r3, [pc, #48]	@ (800afe4 <vPortEnterCritical+0x58>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d110      	bne.n	800afda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afb8:	4b0b      	ldr	r3, [pc, #44]	@ (800afe8 <vPortEnterCritical+0x5c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <vPortEnterCritical+0x4e>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	603b      	str	r3, [r7, #0]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <vPortEnterCritical+0x4a>
	}
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr
 800afe4:	20000080 	.word	0x20000080
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aff2:	4b12      	ldr	r3, [pc, #72]	@ (800b03c <vPortExitCritical+0x50>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10b      	bne.n	800b012 <vPortExitCritical+0x26>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	607b      	str	r3, [r7, #4]
}
 800b00c:	bf00      	nop
 800b00e:	bf00      	nop
 800b010:	e7fd      	b.n	800b00e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b012:	4b0a      	ldr	r3, [pc, #40]	@ (800b03c <vPortExitCritical+0x50>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3b01      	subs	r3, #1
 800b018:	4a08      	ldr	r2, [pc, #32]	@ (800b03c <vPortExitCritical+0x50>)
 800b01a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b01c:	4b07      	ldr	r3, [pc, #28]	@ (800b03c <vPortExitCritical+0x50>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d105      	bne.n	800b030 <vPortExitCritical+0x44>
 800b024:	2300      	movs	r3, #0
 800b026:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b02e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	20000080 	.word	0x20000080

0800b040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b040:	f3ef 8009 	mrs	r0, PSP
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	4b0d      	ldr	r3, [pc, #52]	@ (800b080 <pxCurrentTCBConst>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b050:	6010      	str	r0, [r2, #0]
 800b052:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b056:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b05a:	f380 8811 	msr	BASEPRI, r0
 800b05e:	f7ff fc95 	bl	800a98c <vTaskSwitchContext>
 800b062:	f04f 0000 	mov.w	r0, #0
 800b066:	f380 8811 	msr	BASEPRI, r0
 800b06a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	6808      	ldr	r0, [r1, #0]
 800b072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b076:	f380 8809 	msr	PSP, r0
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	4770      	bx	lr

0800b080 <pxCurrentTCBConst>:
 800b080:	20000d98 	.word	0x20000d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop

0800b088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	607b      	str	r3, [r7, #4]
}
 800b0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0a2:	f7ff fbb9 	bl	800a818 <xTaskIncrementTick>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0ac:	4b06      	ldr	r3, [pc, #24]	@ (800b0c8 <xPortSysTickHandler+0x40>)
 800b0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	f383 8811 	msr	BASEPRI, r3
}
 800b0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b088      	sub	sp, #32
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	4b5d      	ldr	r3, [pc, #372]	@ (800b24c <vPortSuppressTicksAndSleep+0x180>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d902      	bls.n	800b0e4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b0de:	4b5b      	ldr	r3, [pc, #364]	@ (800b24c <vPortSuppressTicksAndSleep+0x180>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b0e4:	4b5a      	ldr	r3, [pc, #360]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a59      	ldr	r2, [pc, #356]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b0ea:	f023 0301 	bic.w	r3, r3, #1
 800b0ee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b0f0:	4b58      	ldr	r3, [pc, #352]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	4957      	ldr	r1, [pc, #348]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b0fa:	6809      	ldr	r1, [r1, #0]
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b104:	4b55      	ldr	r3, [pc, #340]	@ (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d904      	bls.n	800b118 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b10e:	4b53      	ldr	r3, [pc, #332]	@ (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b118:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b11a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b11e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b122:	f7ff fccf 	bl	800aac4 <eTaskConfirmSleepModeStatus>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d110      	bne.n	800b14e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b12c:	4b49      	ldr	r3, [pc, #292]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b12e:	4a4c      	ldr	r2, [pc, #304]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b134:	4b46      	ldr	r3, [pc, #280]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a45      	ldr	r2, [pc, #276]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b13a:	f043 0301 	orr.w	r3, r3, #1
 800b13e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b140:	4b45      	ldr	r3, [pc, #276]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a46      	ldr	r2, [pc, #280]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b146:	3b01      	subs	r3, #1
 800b148:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b14a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b14c:	e07a      	b.n	800b244 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b14e:	4a44      	ldr	r2, [pc, #272]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b154:	4b3f      	ldr	r3, [pc, #252]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b156:	2200      	movs	r2, #0
 800b158:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b15a:	4b3d      	ldr	r3, [pc, #244]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a3c      	ldr	r2, [pc, #240]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b160:	f043 0301 	orr.w	r3, r3, #1
 800b164:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b16a:	f107 030c 	add.w	r3, r7, #12
 800b16e:	4618      	mov	r0, r3
 800b170:	f7f5 fea2 	bl	8000eb8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b17a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b17e:	bf30      	wfi
				__asm volatile( "isb" );
 800b180:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b184:	1d3b      	adds	r3, r7, #4
 800b186:	4618      	mov	r0, r3
 800b188:	f7f5 feb4 	bl	8000ef4 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b18c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b18e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b192:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b196:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b198:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b19c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b1a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b1a2:	2206      	movs	r2, #6
 800b1a4:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b1a6:	4b2a      	ldr	r3, [pc, #168]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01d      	beq.n	800b1ee <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b1b2:	4b29      	ldr	r3, [pc, #164]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	4b27      	ldr	r3, [pc, #156]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b1b8:	6819      	ldr	r1, [r3, #0]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	1acb      	subs	r3, r1, r3
 800b1be:	4413      	add	r3, r2
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b1c4:	4b25      	ldr	r3, [pc, #148]	@ (800b25c <vPortSuppressTicksAndSleep+0x190>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d304      	bcc.n	800b1d8 <vPortSuppressTicksAndSleep+0x10c>
 800b1ce:	4b22      	ldr	r3, [pc, #136]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d903      	bls.n	800b1e0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b1e0:	4a1f      	ldr	r2, [pc, #124]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	61bb      	str	r3, [r7, #24]
 800b1ec:	e018      	b.n	800b220 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a19      	ldr	r2, [pc, #100]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	fb03 f202 	mul.w	r2, r3, r2
 800b1f8:	4b16      	ldr	r3, [pc, #88]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b200:	4b15      	ldr	r3, [pc, #84]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	fbb2 f3f3 	udiv	r3, r2, r3
 800b20a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	3301      	adds	r3, #1
 800b210:	4a11      	ldr	r2, [pc, #68]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b212:	6812      	ldr	r2, [r2, #0]
 800b214:	fb03 f202 	mul.w	r2, r3, r2
 800b218:	4911      	ldr	r1, [pc, #68]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b220:	4b0c      	ldr	r3, [pc, #48]	@ (800b254 <vPortSuppressTicksAndSleep+0x188>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b226:	4b0a      	ldr	r3, [pc, #40]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a09      	ldr	r2, [pc, #36]	@ (800b250 <vPortSuppressTicksAndSleep+0x184>)
 800b22c:	f043 0301 	orr.w	r3, r3, #1
 800b230:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b232:	69b8      	ldr	r0, [r7, #24]
 800b234:	f7ff fac8 	bl	800a7c8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b238:	4b07      	ldr	r3, [pc, #28]	@ (800b258 <vPortSuppressTicksAndSleep+0x18c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a08      	ldr	r2, [pc, #32]	@ (800b260 <vPortSuppressTicksAndSleep+0x194>)
 800b23e:	3b01      	subs	r3, #1
 800b240:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b242:	b662      	cpsie	i
	}
 800b244:	bf00      	nop
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20000ec8 	.word	0x20000ec8
 800b250:	e000e010 	.word	0xe000e010
 800b254:	e000e018 	.word	0xe000e018
 800b258:	20000ec4 	.word	0x20000ec4
 800b25c:	20000ecc 	.word	0x20000ecc
 800b260:	e000e014 	.word	0xe000e014

0800b264 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b268:	4b14      	ldr	r3, [pc, #80]	@ (800b2bc <vPortSetupTimerInterrupt+0x58>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a14      	ldr	r2, [pc, #80]	@ (800b2c0 <vPortSetupTimerInterrupt+0x5c>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	099b      	lsrs	r3, r3, #6
 800b274:	4a13      	ldr	r2, [pc, #76]	@ (800b2c4 <vPortSetupTimerInterrupt+0x60>)
 800b276:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b278:	4b12      	ldr	r3, [pc, #72]	@ (800b2c4 <vPortSetupTimerInterrupt+0x60>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	4a10      	ldr	r2, [pc, #64]	@ (800b2c8 <vPortSetupTimerInterrupt+0x64>)
 800b286:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b288:	4b10      	ldr	r3, [pc, #64]	@ (800b2cc <vPortSetupTimerInterrupt+0x68>)
 800b28a:	222d      	movs	r2, #45	@ 0x2d
 800b28c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b28e:	4b10      	ldr	r3, [pc, #64]	@ (800b2d0 <vPortSetupTimerInterrupt+0x6c>)
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b294:	4b0f      	ldr	r3, [pc, #60]	@ (800b2d4 <vPortSetupTimerInterrupt+0x70>)
 800b296:	2200      	movs	r2, #0
 800b298:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29a:	4b08      	ldr	r3, [pc, #32]	@ (800b2bc <vPortSetupTimerInterrupt+0x58>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a08      	ldr	r2, [pc, #32]	@ (800b2c0 <vPortSetupTimerInterrupt+0x5c>)
 800b2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a4:	099b      	lsrs	r3, r3, #6
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d8 <vPortSetupTimerInterrupt+0x74>)
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ac:	4b08      	ldr	r3, [pc, #32]	@ (800b2d0 <vPortSetupTimerInterrupt+0x6c>)
 800b2ae:	2207      	movs	r2, #7
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bc80      	pop	{r7}
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000000 	.word	0x20000000
 800b2c0:	10624dd3 	.word	0x10624dd3
 800b2c4:	20000ec4 	.word	0x20000ec4
 800b2c8:	20000ec8 	.word	0x20000ec8
 800b2cc:	20000ecc 	.word	0x20000ecc
 800b2d0:	e000e010 	.word	0xe000e010
 800b2d4:	e000e018 	.word	0xe000e018
 800b2d8:	e000e014 	.word	0xe000e014

0800b2dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08a      	sub	sp, #40	@ 0x28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2e8:	f7ff f988 	bl	800a5fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b458 <pvPortMalloc+0x17c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2f4:	f000 f916 	bl	800b524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2f8:	4b58      	ldr	r3, [pc, #352]	@ (800b45c <pvPortMalloc+0x180>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	f040 8090 	bne.w	800b426 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01e      	beq.n	800b34a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b30c:	2208      	movs	r2, #8
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4413      	add	r3, r2
 800b312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d015      	beq.n	800b34a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f023 0307 	bic.w	r3, r3, #7
 800b324:	3308      	adds	r3, #8
 800b326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f003 0307 	and.w	r3, r3, #7
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00b      	beq.n	800b34a <pvPortMalloc+0x6e>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	617b      	str	r3, [r7, #20]
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop
 800b348:	e7fd      	b.n	800b346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d06a      	beq.n	800b426 <pvPortMalloc+0x14a>
 800b350:	4b43      	ldr	r3, [pc, #268]	@ (800b460 <pvPortMalloc+0x184>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	429a      	cmp	r2, r3
 800b358:	d865      	bhi.n	800b426 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b35a:	4b42      	ldr	r3, [pc, #264]	@ (800b464 <pvPortMalloc+0x188>)
 800b35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b35e:	4b41      	ldr	r3, [pc, #260]	@ (800b464 <pvPortMalloc+0x188>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b364:	e004      	b.n	800b370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d903      	bls.n	800b382 <pvPortMalloc+0xa6>
 800b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1f1      	bne.n	800b366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b382:	4b35      	ldr	r3, [pc, #212]	@ (800b458 <pvPortMalloc+0x17c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b388:	429a      	cmp	r2, r3
 800b38a:	d04c      	beq.n	800b426 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2208      	movs	r2, #8
 800b392:	4413      	add	r3, r2
 800b394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	1ad2      	subs	r2, r2, r3
 800b3a6:	2308      	movs	r3, #8
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d920      	bls.n	800b3f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	f003 0307 	and.w	r3, r3, #7
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <pvPortMalloc+0xfc>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	613b      	str	r3, [r7, #16]
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3ea:	69b8      	ldr	r0, [r7, #24]
 800b3ec:	f000 f8fc 	bl	800b5e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3f0:	4b1b      	ldr	r3, [pc, #108]	@ (800b460 <pvPortMalloc+0x184>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	4a19      	ldr	r2, [pc, #100]	@ (800b460 <pvPortMalloc+0x184>)
 800b3fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3fe:	4b18      	ldr	r3, [pc, #96]	@ (800b460 <pvPortMalloc+0x184>)
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4b19      	ldr	r3, [pc, #100]	@ (800b468 <pvPortMalloc+0x18c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	429a      	cmp	r2, r3
 800b408:	d203      	bcs.n	800b412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b40a:	4b15      	ldr	r3, [pc, #84]	@ (800b460 <pvPortMalloc+0x184>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a16      	ldr	r2, [pc, #88]	@ (800b468 <pvPortMalloc+0x18c>)
 800b410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b414:	685a      	ldr	r2, [r3, #4]
 800b416:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <pvPortMalloc+0x180>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	431a      	orrs	r2, r3
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b426:	f7ff f931 	bl	800a68c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	f003 0307 	and.w	r3, r3, #7
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00b      	beq.n	800b44c <pvPortMalloc+0x170>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	60fb      	str	r3, [r7, #12]
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	e7fd      	b.n	800b448 <pvPortMalloc+0x16c>
	return pvReturn;
 800b44c:	69fb      	ldr	r3, [r7, #28]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3728      	adds	r7, #40	@ 0x28
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20002e98 	.word	0x20002e98
 800b45c:	20002ea4 	.word	0x20002ea4
 800b460:	20002e9c 	.word	0x20002e9c
 800b464:	20002e90 	.word	0x20002e90
 800b468:	20002ea0 	.word	0x20002ea0

0800b46c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d04a      	beq.n	800b514 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b47e:	2308      	movs	r3, #8
 800b480:	425b      	negs	r3, r3
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	4413      	add	r3, r2
 800b486:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	685a      	ldr	r2, [r3, #4]
 800b490:	4b22      	ldr	r3, [pc, #136]	@ (800b51c <vPortFree+0xb0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4013      	ands	r3, r2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10b      	bne.n	800b4b2 <vPortFree+0x46>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	60fb      	str	r3, [r7, #12]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00b      	beq.n	800b4d2 <vPortFree+0x66>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	60bb      	str	r3, [r7, #8]
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	e7fd      	b.n	800b4ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	4b11      	ldr	r3, [pc, #68]	@ (800b51c <vPortFree+0xb0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4013      	ands	r3, r2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d019      	beq.n	800b514 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d115      	bne.n	800b514 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b51c <vPortFree+0xb0>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	43db      	mvns	r3, r3
 800b4f2:	401a      	ands	r2, r3
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4f8:	f7ff f880 	bl	800a5fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <vPortFree+0xb4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4413      	add	r3, r2
 800b506:	4a06      	ldr	r2, [pc, #24]	@ (800b520 <vPortFree+0xb4>)
 800b508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b50a:	6938      	ldr	r0, [r7, #16]
 800b50c:	f000 f86c 	bl	800b5e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b510:	f7ff f8bc 	bl	800a68c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b514:	bf00      	nop
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	20002ea4 	.word	0x20002ea4
 800b520:	20002e9c 	.word	0x20002e9c

0800b524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b52a:	f641 73b8 	movw	r3, #8120	@ 0x1fb8
 800b52e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b530:	4b27      	ldr	r3, [pc, #156]	@ (800b5d0 <prvHeapInit+0xac>)
 800b532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f003 0307 	and.w	r3, r3, #7
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00c      	beq.n	800b558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3307      	adds	r3, #7
 800b542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f023 0307 	bic.w	r3, r3, #7
 800b54a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d0 <prvHeapInit+0xac>)
 800b554:	4413      	add	r3, r2
 800b556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b55c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d4 <prvHeapInit+0xb0>)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b562:	4b1c      	ldr	r3, [pc, #112]	@ (800b5d4 <prvHeapInit+0xb0>)
 800b564:	2200      	movs	r2, #0
 800b566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	4413      	add	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b570:	2208      	movs	r2, #8
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	1a9b      	subs	r3, r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f023 0307 	bic.w	r3, r3, #7
 800b57e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	4a15      	ldr	r2, [pc, #84]	@ (800b5d8 <prvHeapInit+0xb4>)
 800b584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b586:	4b14      	ldr	r3, [pc, #80]	@ (800b5d8 <prvHeapInit+0xb4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2200      	movs	r2, #0
 800b58c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b58e:	4b12      	ldr	r3, [pc, #72]	@ (800b5d8 <prvHeapInit+0xb4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	1ad2      	subs	r2, r2, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d8 <prvHeapInit+0xb4>)
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b5dc <prvHeapInit+0xb8>)
 800b5b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4a09      	ldr	r2, [pc, #36]	@ (800b5e0 <prvHeapInit+0xbc>)
 800b5ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5bc:	4b09      	ldr	r3, [pc, #36]	@ (800b5e4 <prvHeapInit+0xc0>)
 800b5be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b5c2:	601a      	str	r2, [r3, #0]
}
 800b5c4:	bf00      	nop
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bc80      	pop	{r7}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20000ed8 	.word	0x20000ed8
 800b5d4:	20002e90 	.word	0x20002e90
 800b5d8:	20002e98 	.word	0x20002e98
 800b5dc:	20002ea0 	.word	0x20002ea0
 800b5e0:	20002e9c 	.word	0x20002e9c
 800b5e4:	20002ea4 	.word	0x20002ea4

0800b5e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5f0:	4b27      	ldr	r3, [pc, #156]	@ (800b690 <prvInsertBlockIntoFreeList+0xa8>)
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	e002      	b.n	800b5fc <prvInsertBlockIntoFreeList+0x14>
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d8f7      	bhi.n	800b5f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	4413      	add	r3, r2
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	429a      	cmp	r2, r3
 800b616:	d108      	bne.n	800b62a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	441a      	add	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	441a      	add	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d118      	bne.n	800b670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b14      	ldr	r3, [pc, #80]	@ (800b694 <prvInsertBlockIntoFreeList+0xac>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d00d      	beq.n	800b666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	e008      	b.n	800b678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b666:	4b0b      	ldr	r3, [pc, #44]	@ (800b694 <prvInsertBlockIntoFreeList+0xac>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	e003      	b.n	800b678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d002      	beq.n	800b686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bc80      	pop	{r7}
 800b68e:	4770      	bx	lr
 800b690:	20002e90 	.word	0x20002e90
 800b694:	20002e98 	.word	0x20002e98

0800b698 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	33f1      	adds	r3, #241	@ 0xf1
 800b6a4:	2210      	movs	r2, #16
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f00d f973 	bl	8018994 <memset1>
    ctx->M_n = 0;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	22f0      	movs	r2, #240	@ 0xf0
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f00d f969 	bl	8018994 <memset1>
}
 800b6c2:	bf00      	nop
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2110      	movs	r1, #16
 800b6da:	6838      	ldr	r0, [r7, #0]
 800b6dc:	f000 fe5c 	bl	800c398 <lorawan_aes_set_key>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08c      	sub	sp, #48	@ 0x30
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80a1 	beq.w	800b842 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b706:	f1c3 0310 	rsb	r3, r3, #16
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	4293      	cmp	r3, r2
 800b70e:	bf28      	it	cs
 800b710:	4613      	movcs	r3, r2
 800b712:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b720:	4413      	add	r3, r2
 800b722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b724:	b292      	uxth	r2, r2
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	4618      	mov	r0, r3
 800b72a:	f00d f8f8 	bl	801891e <memcpy1>
        ctx->M_n += mlen;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	441a      	add	r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b744:	2b0f      	cmp	r3, #15
 800b746:	f240 808d 	bls.w	800b864 <AES_CMAC_Update+0x17c>
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	429a      	cmp	r2, r3
 800b750:	f000 8088 	beq.w	800b864 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b754:	2300      	movs	r3, #0
 800b756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b758:	e015      	b.n	800b786 <AES_CMAC_Update+0x9e>
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75e:	4413      	add	r3, r2
 800b760:	33f1      	adds	r3, #241	@ 0xf1
 800b762:	781a      	ldrb	r2, [r3, #0]
 800b764:	68f9      	ldr	r1, [r7, #12]
 800b766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b768:	440b      	add	r3, r1
 800b76a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	4053      	eors	r3, r2
 800b772:	b2d9      	uxtb	r1, r3
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b778:	4413      	add	r3, r2
 800b77a:	33f1      	adds	r3, #241	@ 0xf1
 800b77c:	460a      	mov	r2, r1
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b782:	3301      	adds	r3, #1
 800b784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	2b0f      	cmp	r3, #15
 800b78a:	dde6      	ble.n	800b75a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	2210      	movs	r2, #16
 800b798:	4618      	mov	r0, r3
 800b79a:	f00d f8c0 	bl	801891e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	f107 0114 	add.w	r1, r7, #20
 800b7a4:	f107 0314 	add.w	r3, r7, #20
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 fed3 	bl	800c554 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	33f1      	adds	r3, #241	@ 0xf1
 800b7b2:	f107 0114 	add.w	r1, r7, #20
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f00d f8b0 	bl	801891e <memcpy1>

        data += mlen;
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	4413      	add	r3, r2
 800b7c4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b7ce:	e038      	b.n	800b842 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7d4:	e013      	b.n	800b7fe <AES_CMAC_Update+0x116>
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	4413      	add	r3, r2
 800b7dc:	33f1      	adds	r3, #241	@ 0xf1
 800b7de:	781a      	ldrb	r2, [r3, #0]
 800b7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	440b      	add	r3, r1
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	4053      	eors	r3, r2
 800b7ea:	b2d9      	uxtb	r1, r3
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	4413      	add	r3, r2
 800b7f2:	33f1      	adds	r3, #241	@ 0xf1
 800b7f4:	460a      	mov	r2, r1
 800b7f6:	701a      	strb	r2, [r3, #0]
 800b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b800:	2b0f      	cmp	r3, #15
 800b802:	dde8      	ble.n	800b7d6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b80a:	f107 0314 	add.w	r3, r7, #20
 800b80e:	2210      	movs	r2, #16
 800b810:	4618      	mov	r0, r3
 800b812:	f00d f884 	bl	801891e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	f107 0114 	add.w	r1, r7, #20
 800b81c:	f107 0314 	add.w	r3, r7, #20
 800b820:	4618      	mov	r0, r3
 800b822:	f000 fe97 	bl	800c554 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	33f1      	adds	r3, #241	@ 0xf1
 800b82a:	f107 0114 	add.w	r1, r7, #20
 800b82e:	2210      	movs	r2, #16
 800b830:	4618      	mov	r0, r3
 800b832:	f00d f874 	bl	801891e <memcpy1>

        data += 16;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	3310      	adds	r3, #16
 800b83a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3b10      	subs	r3, #16
 800b840:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b10      	cmp	r3, #16
 800b846:	d8c3      	bhi.n	800b7d0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	b292      	uxth	r2, r2
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	4618      	mov	r0, r3
 800b856:	f00d f862 	bl	801891e <memcpy1>
    ctx->M_n = len;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b862:	e000      	b.n	800b866 <AES_CMAC_Update+0x17e>
            return;
 800b864:	bf00      	nop
}
 800b866:	3730      	adds	r7, #48	@ 0x30
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b092      	sub	sp, #72	@ 0x48
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b876:	f107 031c 	add.w	r3, r7, #28
 800b87a:	2210      	movs	r2, #16
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f00d f888 	bl	8018994 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	f107 011c 	add.w	r1, r7, #28
 800b88a:	f107 031c 	add.w	r3, r7, #28
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fe60 	bl	800c554 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b894:	7f3b      	ldrb	r3, [r7, #28]
 800b896:	b25b      	sxtb	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	da30      	bge.n	800b8fe <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b89c:	2300      	movs	r3, #0
 800b89e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8a0:	e01b      	b.n	800b8da <AES_CMAC_Final+0x6e>
 800b8a2:	f107 021c 	add.w	r2, r7, #28
 800b8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8a8:	4413      	add	r3, r2
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	b25a      	sxtb	r2, r3
 800b8b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	3348      	adds	r3, #72	@ 0x48
 800b8b6:	443b      	add	r3, r7
 800b8b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b8bc:	09db      	lsrs	r3, r3, #7
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	b2d9      	uxtb	r1, r3
 800b8c8:	f107 021c 	add.w	r2, r7, #28
 800b8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ce:	4413      	add	r3, r2
 800b8d0:	460a      	mov	r2, r1
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8dc:	2b0e      	cmp	r3, #14
 800b8de:	dde0      	ble.n	800b8a2 <AES_CMAC_Final+0x36>
 800b8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800b8ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8f0:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b8f4:	43db      	mvns	r3, r3
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8fc:	e027      	b.n	800b94e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b8fe:	2300      	movs	r3, #0
 800b900:	643b      	str	r3, [r7, #64]	@ 0x40
 800b902:	e01b      	b.n	800b93c <AES_CMAC_Final+0xd0>
 800b904:	f107 021c 	add.w	r2, r7, #28
 800b908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b90a:	4413      	add	r3, r2
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	b25a      	sxtb	r2, r3
 800b912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b914:	3301      	adds	r3, #1
 800b916:	3348      	adds	r3, #72	@ 0x48
 800b918:	443b      	add	r3, r7
 800b91a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b91e:	09db      	lsrs	r3, r3, #7
 800b920:	b2db      	uxtb	r3, r3
 800b922:	b25b      	sxtb	r3, r3
 800b924:	4313      	orrs	r3, r2
 800b926:	b25b      	sxtb	r3, r3
 800b928:	b2d9      	uxtb	r1, r3
 800b92a:	f107 021c 	add.w	r2, r7, #28
 800b92e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b930:	4413      	add	r3, r2
 800b932:	460a      	mov	r2, r1
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b938:	3301      	adds	r3, #1
 800b93a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b93e:	2b0e      	cmp	r3, #14
 800b940:	dde0      	ble.n	800b904 <AES_CMAC_Final+0x98>
 800b942:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b954:	2b10      	cmp	r3, #16
 800b956:	d11d      	bne.n	800b994 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b958:	2300      	movs	r3, #0
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b95c:	e016      	b.n	800b98c <AES_CMAC_Final+0x120>
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b962:	4413      	add	r3, r2
 800b964:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	f107 011c 	add.w	r1, r7, #28
 800b96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b970:	440b      	add	r3, r1
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	4053      	eors	r3, r2
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97c:	4413      	add	r3, r2
 800b97e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b982:	460a      	mov	r2, r1
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b988:	3301      	adds	r3, #1
 800b98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	2b0f      	cmp	r3, #15
 800b990:	dde5      	ble.n	800b95e <AES_CMAC_Final+0xf2>
 800b992:	e096      	b.n	800bac2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b994:	7f3b      	ldrb	r3, [r7, #28]
 800b996:	b25b      	sxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	da30      	bge.n	800b9fe <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b99c:	2300      	movs	r3, #0
 800b99e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9a0:	e01b      	b.n	800b9da <AES_CMAC_Final+0x16e>
 800b9a2:	f107 021c 	add.w	r2, r7, #28
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a8:	4413      	add	r3, r2
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	b25a      	sxtb	r2, r3
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	3348      	adds	r3, #72	@ 0x48
 800b9b6:	443b      	add	r3, r7
 800b9b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b9bc:	09db      	lsrs	r3, r3, #7
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	b25b      	sxtb	r3, r3
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	b2d9      	uxtb	r1, r3
 800b9c8:	f107 021c 	add.w	r2, r7, #28
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ce:	4413      	add	r3, r2
 800b9d0:	460a      	mov	r2, r1
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9dc:	2b0e      	cmp	r3, #14
 800b9de:	dde0      	ble.n	800b9a2 <AES_CMAC_Final+0x136>
 800b9e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b9ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9f0:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b9f4:	43db      	mvns	r3, r3
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9fc:	e027      	b.n	800ba4e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b9fe:	2300      	movs	r3, #0
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba02:	e01b      	b.n	800ba3c <AES_CMAC_Final+0x1d0>
 800ba04:	f107 021c 	add.w	r2, r7, #28
 800ba08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0a:	4413      	add	r3, r2
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	b25a      	sxtb	r2, r3
 800ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba14:	3301      	adds	r3, #1
 800ba16:	3348      	adds	r3, #72	@ 0x48
 800ba18:	443b      	add	r3, r7
 800ba1a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ba1e:	09db      	lsrs	r3, r3, #7
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	4313      	orrs	r3, r2
 800ba26:	b25b      	sxtb	r3, r3
 800ba28:	b2d9      	uxtb	r1, r3
 800ba2a:	f107 021c 	add.w	r2, r7, #28
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba30:	4413      	add	r3, r2
 800ba32:	460a      	mov	r2, r1
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba38:	3301      	adds	r3, #1
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3e:	2b0e      	cmp	r3, #14
 800ba40:	dde0      	ble.n	800ba04 <AES_CMAC_Final+0x198>
 800ba42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	4413      	add	r3, r2
 800ba58:	2280      	movs	r2, #128	@ 0x80
 800ba5a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ba5e:	e007      	b.n	800ba70 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4413      	add	r3, r2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ba84:	2b0f      	cmp	r3, #15
 800ba86:	d9eb      	bls.n	800ba60 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800ba88:	2300      	movs	r3, #0
 800ba8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba8c:	e016      	b.n	800babc <AES_CMAC_Final+0x250>
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	4413      	add	r3, r2
 800ba94:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ba98:	781a      	ldrb	r2, [r3, #0]
 800ba9a:	f107 011c 	add.w	r1, r7, #28
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa0:	440b      	add	r3, r1
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	4053      	eors	r3, r2
 800baa6:	b2d9      	uxtb	r1, r3
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baac:	4413      	add	r3, r2
 800baae:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bab2:	460a      	mov	r2, r1
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab8:	3301      	adds	r3, #1
 800baba:	633b      	str	r3, [r7, #48]	@ 0x30
 800babc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800babe:	2b0f      	cmp	r3, #15
 800bac0:	dde5      	ble.n	800ba8e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800bac2:	2300      	movs	r3, #0
 800bac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bac6:	e015      	b.n	800baf4 <AES_CMAC_Final+0x288>
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bacc:	4413      	add	r3, r2
 800bace:	33f1      	adds	r3, #241	@ 0xf1
 800bad0:	781a      	ldrb	r2, [r3, #0]
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad6:	440b      	add	r3, r1
 800bad8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	4053      	eors	r3, r2
 800bae0:	b2d9      	uxtb	r1, r3
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae6:	4413      	add	r3, r2
 800bae8:	33f1      	adds	r3, #241	@ 0xf1
 800baea:	460a      	mov	r2, r1
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf0:	3301      	adds	r3, #1
 800baf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	2b0f      	cmp	r3, #15
 800baf8:	dde6      	ble.n	800bac8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bb00:	f107 030c 	add.w	r3, r7, #12
 800bb04:	2210      	movs	r2, #16
 800bb06:	4618      	mov	r0, r3
 800bb08:	f00c ff09 	bl	801891e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	f107 030c 	add.w	r3, r7, #12
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 fd1d 	bl	800c554 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bb1a:	f107 031c 	add.w	r3, r7, #28
 800bb1e:	2210      	movs	r2, #16
 800bb20:	2100      	movs	r1, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f00c ff36 	bl	8018994 <memset1>
}
 800bb28:	bf00      	nop
 800bb2a:	3748      	adds	r7, #72	@ 0x48
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781a      	ldrb	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	3301      	adds	r3, #1
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	7852      	ldrb	r2, [r2, #1]
 800bb4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3302      	adds	r3, #2
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	7892      	ldrb	r2, [r2, #2]
 800bb54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3303      	adds	r3, #3
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	78d2      	ldrb	r2, [r2, #3]
 800bb5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3304      	adds	r3, #4
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	7912      	ldrb	r2, [r2, #4]
 800bb68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	3305      	adds	r3, #5
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	7952      	ldrb	r2, [r2, #5]
 800bb72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3306      	adds	r3, #6
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	7992      	ldrb	r2, [r2, #6]
 800bb7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	3307      	adds	r3, #7
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	79d2      	ldrb	r2, [r2, #7]
 800bb86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	7a12      	ldrb	r2, [r2, #8]
 800bb90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3309      	adds	r3, #9
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	7a52      	ldrb	r2, [r2, #9]
 800bb9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	330a      	adds	r3, #10
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	7a92      	ldrb	r2, [r2, #10]
 800bba4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	330b      	adds	r3, #11
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	7ad2      	ldrb	r2, [r2, #11]
 800bbae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	7b12      	ldrb	r2, [r2, #12]
 800bbb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	330d      	adds	r3, #13
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	7b52      	ldrb	r2, [r2, #13]
 800bbc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	330e      	adds	r3, #14
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	7b92      	ldrb	r2, [r2, #14]
 800bbcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	330f      	adds	r3, #15
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	7bd2      	ldrb	r2, [r2, #15]
 800bbd6:	701a      	strb	r2, [r3, #0]
#endif
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bc80      	pop	{r7}
 800bbe0:	4770      	bx	lr

0800bbe2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	4613      	mov	r3, r2
 800bbee:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bbf0:	e007      	b.n	800bc02 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	1c53      	adds	r3, r2, #1
 800bbf6:	60bb      	str	r3, [r7, #8]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	1c59      	adds	r1, r3, #1
 800bbfc:	60f9      	str	r1, [r7, #12]
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bc02:	79fb      	ldrb	r3, [r7, #7]
 800bc04:	1e5a      	subs	r2, r3, #1
 800bc06:	71fa      	strb	r2, [r7, #7]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1f2      	bne.n	800bbf2 <copy_block_nn+0x10>
}
 800bc0c:	bf00      	nop
 800bc0e:	bf00      	nop
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bc80      	pop	{r7}
 800bc16:	4770      	bx	lr

0800bc18 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	781a      	ldrb	r2, [r3, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	4053      	eors	r3, r2
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3301      	adds	r3, #1
 800bc36:	7819      	ldrb	r1, [r3, #0]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	781a      	ldrb	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3301      	adds	r3, #1
 800bc42:	404a      	eors	r2, r1
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3302      	adds	r3, #2
 800bc4c:	7819      	ldrb	r1, [r3, #0]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	3302      	adds	r3, #2
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3302      	adds	r3, #2
 800bc58:	404a      	eors	r2, r1
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3303      	adds	r3, #3
 800bc62:	7819      	ldrb	r1, [r3, #0]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3303      	adds	r3, #3
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3303      	adds	r3, #3
 800bc6e:	404a      	eors	r2, r1
 800bc70:	b2d2      	uxtb	r2, r2
 800bc72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3304      	adds	r3, #4
 800bc78:	7819      	ldrb	r1, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	781a      	ldrb	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3304      	adds	r3, #4
 800bc84:	404a      	eors	r2, r1
 800bc86:	b2d2      	uxtb	r2, r2
 800bc88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3305      	adds	r3, #5
 800bc8e:	7819      	ldrb	r1, [r3, #0]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	3305      	adds	r3, #5
 800bc94:	781a      	ldrb	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	3305      	adds	r3, #5
 800bc9a:	404a      	eors	r2, r1
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3306      	adds	r3, #6
 800bca4:	7819      	ldrb	r1, [r3, #0]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	3306      	adds	r3, #6
 800bcaa:	781a      	ldrb	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3306      	adds	r3, #6
 800bcb0:	404a      	eors	r2, r1
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3307      	adds	r3, #7
 800bcba:	7819      	ldrb	r1, [r3, #0]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	3307      	adds	r3, #7
 800bcc0:	781a      	ldrb	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	3307      	adds	r3, #7
 800bcc6:	404a      	eors	r2, r1
 800bcc8:	b2d2      	uxtb	r2, r2
 800bcca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	7819      	ldrb	r1, [r3, #0]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	404a      	eors	r2, r1
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3309      	adds	r3, #9
 800bce6:	7819      	ldrb	r1, [r3, #0]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	3309      	adds	r3, #9
 800bcec:	781a      	ldrb	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3309      	adds	r3, #9
 800bcf2:	404a      	eors	r2, r1
 800bcf4:	b2d2      	uxtb	r2, r2
 800bcf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	330a      	adds	r3, #10
 800bcfc:	7819      	ldrb	r1, [r3, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	330a      	adds	r3, #10
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	330a      	adds	r3, #10
 800bd08:	404a      	eors	r2, r1
 800bd0a:	b2d2      	uxtb	r2, r2
 800bd0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	330b      	adds	r3, #11
 800bd12:	7819      	ldrb	r1, [r3, #0]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	330b      	adds	r3, #11
 800bd18:	781a      	ldrb	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	330b      	adds	r3, #11
 800bd1e:	404a      	eors	r2, r1
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	330c      	adds	r3, #12
 800bd28:	7819      	ldrb	r1, [r3, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	330c      	adds	r3, #12
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	330c      	adds	r3, #12
 800bd34:	404a      	eors	r2, r1
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	330d      	adds	r3, #13
 800bd3e:	7819      	ldrb	r1, [r3, #0]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	330d      	adds	r3, #13
 800bd44:	781a      	ldrb	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	330d      	adds	r3, #13
 800bd4a:	404a      	eors	r2, r1
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	330e      	adds	r3, #14
 800bd54:	7819      	ldrb	r1, [r3, #0]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	330e      	adds	r3, #14
 800bd5a:	781a      	ldrb	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	330e      	adds	r3, #14
 800bd60:	404a      	eors	r2, r1
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	330f      	adds	r3, #15
 800bd6a:	7819      	ldrb	r1, [r3, #0]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	330f      	adds	r3, #15
 800bd70:	781a      	ldrb	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	330f      	adds	r3, #15
 800bd76:	404a      	eors	r2, r1
 800bd78:	b2d2      	uxtb	r2, r2
 800bd7a:	701a      	strb	r2, [r3, #0]
#endif
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr

0800bd86 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bd86:	b480      	push	{r7}
 800bd88:	b085      	sub	sp, #20
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	781a      	ldrb	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	4053      	eors	r3, r2
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	3301      	adds	r3, #1
 800bda6:	7819      	ldrb	r1, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	781a      	ldrb	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	404a      	eors	r2, r1
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	3302      	adds	r3, #2
 800bdbc:	7819      	ldrb	r1, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	781a      	ldrb	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3302      	adds	r3, #2
 800bdc8:	404a      	eors	r2, r1
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	3303      	adds	r3, #3
 800bdd2:	7819      	ldrb	r1, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3303      	adds	r3, #3
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3303      	adds	r3, #3
 800bdde:	404a      	eors	r2, r1
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	3304      	adds	r3, #4
 800bde8:	7819      	ldrb	r1, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3304      	adds	r3, #4
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	404a      	eors	r2, r1
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3305      	adds	r3, #5
 800bdfe:	7819      	ldrb	r1, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	3305      	adds	r3, #5
 800be04:	781a      	ldrb	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3305      	adds	r3, #5
 800be0a:	404a      	eors	r2, r1
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	3306      	adds	r3, #6
 800be14:	7819      	ldrb	r1, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	3306      	adds	r3, #6
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3306      	adds	r3, #6
 800be20:	404a      	eors	r2, r1
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	3307      	adds	r3, #7
 800be2a:	7819      	ldrb	r1, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3307      	adds	r3, #7
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3307      	adds	r3, #7
 800be36:	404a      	eors	r2, r1
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	3308      	adds	r3, #8
 800be40:	7819      	ldrb	r1, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3308      	adds	r3, #8
 800be46:	781a      	ldrb	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3308      	adds	r3, #8
 800be4c:	404a      	eors	r2, r1
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3309      	adds	r3, #9
 800be56:	7819      	ldrb	r1, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3309      	adds	r3, #9
 800be5c:	781a      	ldrb	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3309      	adds	r3, #9
 800be62:	404a      	eors	r2, r1
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	330a      	adds	r3, #10
 800be6c:	7819      	ldrb	r1, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	330a      	adds	r3, #10
 800be72:	781a      	ldrb	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	330a      	adds	r3, #10
 800be78:	404a      	eors	r2, r1
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	330b      	adds	r3, #11
 800be82:	7819      	ldrb	r1, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	330b      	adds	r3, #11
 800be88:	781a      	ldrb	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	330b      	adds	r3, #11
 800be8e:	404a      	eors	r2, r1
 800be90:	b2d2      	uxtb	r2, r2
 800be92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	330c      	adds	r3, #12
 800be98:	7819      	ldrb	r1, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	330c      	adds	r3, #12
 800be9e:	781a      	ldrb	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	330c      	adds	r3, #12
 800bea4:	404a      	eors	r2, r1
 800bea6:	b2d2      	uxtb	r2, r2
 800bea8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	330d      	adds	r3, #13
 800beae:	7819      	ldrb	r1, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	330d      	adds	r3, #13
 800beb4:	781a      	ldrb	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	330d      	adds	r3, #13
 800beba:	404a      	eors	r2, r1
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	330e      	adds	r3, #14
 800bec4:	7819      	ldrb	r1, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	330e      	adds	r3, #14
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	330e      	adds	r3, #14
 800bed0:	404a      	eors	r2, r1
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	330f      	adds	r3, #15
 800beda:	7819      	ldrb	r1, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	330f      	adds	r3, #15
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	330f      	adds	r3, #15
 800bee6:	404a      	eors	r2, r1
 800bee8:	b2d2      	uxtb	r2, r2
 800beea:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bc80      	pop	{r7}
 800bef4:	4770      	bx	lr

0800bef6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff fe88 	bl	800bc18 <xor_block>
}
 800bf08:	bf00      	nop
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4b48      	ldr	r3, [pc, #288]	@ (800c040 <shift_sub_rows+0x130>)
 800bf20:	5c9a      	ldrb	r2, [r3, r2]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3304      	adds	r3, #4
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4a43      	ldr	r2, [pc, #268]	@ (800c040 <shift_sub_rows+0x130>)
 800bf34:	5c52      	ldrb	r2, [r2, r1]
 800bf36:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3308      	adds	r3, #8
 800bf44:	4a3e      	ldr	r2, [pc, #248]	@ (800c040 <shift_sub_rows+0x130>)
 800bf46:	5c52      	ldrb	r2, [r2, r1]
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	330c      	adds	r3, #12
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	4619      	mov	r1, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	330c      	adds	r3, #12
 800bf56:	4a3a      	ldr	r2, [pc, #232]	@ (800c040 <shift_sub_rows+0x130>)
 800bf58:	5c52      	ldrb	r2, [r2, r1]
 800bf5a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	785b      	ldrb	r3, [r3, #1]
 800bf60:	73fb      	strb	r3, [r7, #15]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3305      	adds	r3, #5
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	4a34      	ldr	r2, [pc, #208]	@ (800c040 <shift_sub_rows+0x130>)
 800bf70:	5c52      	ldrb	r2, [r2, r1]
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3309      	adds	r3, #9
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3305      	adds	r3, #5
 800bf80:	4a2f      	ldr	r2, [pc, #188]	@ (800c040 <shift_sub_rows+0x130>)
 800bf82:	5c52      	ldrb	r2, [r2, r1]
 800bf84:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	330d      	adds	r3, #13
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3309      	adds	r3, #9
 800bf92:	4a2b      	ldr	r2, [pc, #172]	@ (800c040 <shift_sub_rows+0x130>)
 800bf94:	5c52      	ldrb	r2, [r2, r1]
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	7bfa      	ldrb	r2, [r7, #15]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330d      	adds	r3, #13
 800bf9e:	4928      	ldr	r1, [pc, #160]	@ (800c040 <shift_sub_rows+0x130>)
 800bfa0:	5c8a      	ldrb	r2, [r1, r2]
 800bfa2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	789b      	ldrb	r3, [r3, #2]
 800bfa8:	73fb      	strb	r3, [r7, #15]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	330a      	adds	r3, #10
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	4a22      	ldr	r2, [pc, #136]	@ (800c040 <shift_sub_rows+0x130>)
 800bfb8:	5c52      	ldrb	r2, [r2, r1]
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	7bfa      	ldrb	r2, [r7, #15]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	330a      	adds	r3, #10
 800bfc2:	491f      	ldr	r1, [pc, #124]	@ (800c040 <shift_sub_rows+0x130>)
 800bfc4:	5c8a      	ldrb	r2, [r1, r2]
 800bfc6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	799b      	ldrb	r3, [r3, #6]
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	330e      	adds	r3, #14
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3306      	adds	r3, #6
 800bfda:	4a19      	ldr	r2, [pc, #100]	@ (800c040 <shift_sub_rows+0x130>)
 800bfdc:	5c52      	ldrb	r2, [r2, r1]
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	7bfa      	ldrb	r2, [r7, #15]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	330e      	adds	r3, #14
 800bfe6:	4916      	ldr	r1, [pc, #88]	@ (800c040 <shift_sub_rows+0x130>)
 800bfe8:	5c8a      	ldrb	r2, [r1, r2]
 800bfea:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	7bdb      	ldrb	r3, [r3, #15]
 800bff0:	73fb      	strb	r3, [r7, #15]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	330b      	adds	r3, #11
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	4619      	mov	r1, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	330f      	adds	r3, #15
 800bffe:	4a10      	ldr	r2, [pc, #64]	@ (800c040 <shift_sub_rows+0x130>)
 800c000:	5c52      	ldrb	r2, [r2, r1]
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3307      	adds	r3, #7
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	330b      	adds	r3, #11
 800c010:	4a0b      	ldr	r2, [pc, #44]	@ (800c040 <shift_sub_rows+0x130>)
 800c012:	5c52      	ldrb	r2, [r2, r1]
 800c014:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3303      	adds	r3, #3
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	4619      	mov	r1, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3307      	adds	r3, #7
 800c022:	4a07      	ldr	r2, [pc, #28]	@ (800c040 <shift_sub_rows+0x130>)
 800c024:	5c52      	ldrb	r2, [r2, r1]
 800c026:	701a      	strb	r2, [r3, #0]
 800c028:	7bfa      	ldrb	r2, [r7, #15]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3303      	adds	r3, #3
 800c02e:	4904      	ldr	r1, [pc, #16]	@ (800c040 <shift_sub_rows+0x130>)
 800c030:	5c8a      	ldrb	r2, [r1, r2]
 800c032:	701a      	strb	r2, [r3, #0]
}
 800c034:	bf00      	nop
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	0801dc54 	.word	0x0801dc54

0800c044 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c04c:	f107 0308 	add.w	r3, r7, #8
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff fd6c 	bl	800bb30 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c058:	7a3b      	ldrb	r3, [r7, #8]
 800c05a:	461a      	mov	r2, r3
 800c05c:	4b9a      	ldr	r3, [pc, #616]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c05e:	5c9a      	ldrb	r2, [r3, r2]
 800c060:	7b7b      	ldrb	r3, [r7, #13]
 800c062:	4619      	mov	r1, r3
 800c064:	4b99      	ldr	r3, [pc, #612]	@ (800c2cc <mix_sub_columns+0x288>)
 800c066:	5c5b      	ldrb	r3, [r3, r1]
 800c068:	4053      	eors	r3, r2
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	7cbb      	ldrb	r3, [r7, #18]
 800c06e:	4619      	mov	r1, r3
 800c070:	4b97      	ldr	r3, [pc, #604]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c072:	5c5b      	ldrb	r3, [r3, r1]
 800c074:	4053      	eors	r3, r2
 800c076:	b2da      	uxtb	r2, r3
 800c078:	7dfb      	ldrb	r3, [r7, #23]
 800c07a:	4619      	mov	r1, r3
 800c07c:	4b94      	ldr	r3, [pc, #592]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c07e:	5c5b      	ldrb	r3, [r3, r1]
 800c080:	4053      	eors	r3, r2
 800c082:	b2da      	uxtb	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c088:	7a3b      	ldrb	r3, [r7, #8]
 800c08a:	461a      	mov	r2, r3
 800c08c:	4b90      	ldr	r3, [pc, #576]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c08e:	5c9a      	ldrb	r2, [r3, r2]
 800c090:	7b7b      	ldrb	r3, [r7, #13]
 800c092:	4619      	mov	r1, r3
 800c094:	4b8c      	ldr	r3, [pc, #560]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c096:	5c5b      	ldrb	r3, [r3, r1]
 800c098:	4053      	eors	r3, r2
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	7cbb      	ldrb	r3, [r7, #18]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4b8a      	ldr	r3, [pc, #552]	@ (800c2cc <mix_sub_columns+0x288>)
 800c0a2:	5c5b      	ldrb	r3, [r3, r1]
 800c0a4:	4053      	eors	r3, r2
 800c0a6:	b2d9      	uxtb	r1, r3
 800c0a8:	7dfb      	ldrb	r3, [r7, #23]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	4b88      	ldr	r3, [pc, #544]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c0ae:	5c9a      	ldrb	r2, [r3, r2]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	404a      	eors	r2, r1
 800c0b6:	b2d2      	uxtb	r2, r2
 800c0b8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c0ba:	7a3b      	ldrb	r3, [r7, #8]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	4b84      	ldr	r3, [pc, #528]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c0c0:	5c9a      	ldrb	r2, [r3, r2]
 800c0c2:	7b7b      	ldrb	r3, [r7, #13]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4b82      	ldr	r3, [pc, #520]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c0c8:	5c5b      	ldrb	r3, [r3, r1]
 800c0ca:	4053      	eors	r3, r2
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	7cbb      	ldrb	r3, [r7, #18]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4b7d      	ldr	r3, [pc, #500]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c0d4:	5c5b      	ldrb	r3, [r3, r1]
 800c0d6:	4053      	eors	r3, r2
 800c0d8:	b2d9      	uxtb	r1, r3
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b7b      	ldr	r3, [pc, #492]	@ (800c2cc <mix_sub_columns+0x288>)
 800c0e0:	5c9a      	ldrb	r2, [r3, r2]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	3302      	adds	r3, #2
 800c0e6:	404a      	eors	r2, r1
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c0ec:	7a3b      	ldrb	r3, [r7, #8]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4b76      	ldr	r3, [pc, #472]	@ (800c2cc <mix_sub_columns+0x288>)
 800c0f2:	5c9a      	ldrb	r2, [r3, r2]
 800c0f4:	7b7b      	ldrb	r3, [r7, #13]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4b75      	ldr	r3, [pc, #468]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c0fa:	5c5b      	ldrb	r3, [r3, r1]
 800c0fc:	4053      	eors	r3, r2
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	7cbb      	ldrb	r3, [r7, #18]
 800c102:	4619      	mov	r1, r3
 800c104:	4b72      	ldr	r3, [pc, #456]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c106:	5c5b      	ldrb	r3, [r3, r1]
 800c108:	4053      	eors	r3, r2
 800c10a:	b2d9      	uxtb	r1, r3
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	461a      	mov	r2, r3
 800c110:	4b6d      	ldr	r3, [pc, #436]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c112:	5c9a      	ldrb	r2, [r3, r2]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3303      	adds	r3, #3
 800c118:	404a      	eors	r2, r1
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c11e:	7b3b      	ldrb	r3, [r7, #12]
 800c120:	461a      	mov	r2, r3
 800c122:	4b69      	ldr	r3, [pc, #420]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c124:	5c9a      	ldrb	r2, [r3, r2]
 800c126:	7c7b      	ldrb	r3, [r7, #17]
 800c128:	4619      	mov	r1, r3
 800c12a:	4b68      	ldr	r3, [pc, #416]	@ (800c2cc <mix_sub_columns+0x288>)
 800c12c:	5c5b      	ldrb	r3, [r3, r1]
 800c12e:	4053      	eors	r3, r2
 800c130:	b2da      	uxtb	r2, r3
 800c132:	7dbb      	ldrb	r3, [r7, #22]
 800c134:	4619      	mov	r1, r3
 800c136:	4b66      	ldr	r3, [pc, #408]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c138:	5c5b      	ldrb	r3, [r3, r1]
 800c13a:	4053      	eors	r3, r2
 800c13c:	b2d9      	uxtb	r1, r3
 800c13e:	7afb      	ldrb	r3, [r7, #11]
 800c140:	461a      	mov	r2, r3
 800c142:	4b63      	ldr	r3, [pc, #396]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c144:	5c9a      	ldrb	r2, [r3, r2]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3304      	adds	r3, #4
 800c14a:	404a      	eors	r2, r1
 800c14c:	b2d2      	uxtb	r2, r2
 800c14e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c150:	7b3b      	ldrb	r3, [r7, #12]
 800c152:	461a      	mov	r2, r3
 800c154:	4b5e      	ldr	r3, [pc, #376]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c156:	5c9a      	ldrb	r2, [r3, r2]
 800c158:	7c7b      	ldrb	r3, [r7, #17]
 800c15a:	4619      	mov	r1, r3
 800c15c:	4b5a      	ldr	r3, [pc, #360]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c15e:	5c5b      	ldrb	r3, [r3, r1]
 800c160:	4053      	eors	r3, r2
 800c162:	b2da      	uxtb	r2, r3
 800c164:	7dbb      	ldrb	r3, [r7, #22]
 800c166:	4619      	mov	r1, r3
 800c168:	4b58      	ldr	r3, [pc, #352]	@ (800c2cc <mix_sub_columns+0x288>)
 800c16a:	5c5b      	ldrb	r3, [r3, r1]
 800c16c:	4053      	eors	r3, r2
 800c16e:	b2d9      	uxtb	r1, r3
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	461a      	mov	r2, r3
 800c174:	4b56      	ldr	r3, [pc, #344]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c176:	5c9a      	ldrb	r2, [r3, r2]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3305      	adds	r3, #5
 800c17c:	404a      	eors	r2, r1
 800c17e:	b2d2      	uxtb	r2, r2
 800c180:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c182:	7b3b      	ldrb	r3, [r7, #12]
 800c184:	461a      	mov	r2, r3
 800c186:	4b52      	ldr	r3, [pc, #328]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c188:	5c9a      	ldrb	r2, [r3, r2]
 800c18a:	7c7b      	ldrb	r3, [r7, #17]
 800c18c:	4619      	mov	r1, r3
 800c18e:	4b50      	ldr	r3, [pc, #320]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c190:	5c5b      	ldrb	r3, [r3, r1]
 800c192:	4053      	eors	r3, r2
 800c194:	b2da      	uxtb	r2, r3
 800c196:	7dbb      	ldrb	r3, [r7, #22]
 800c198:	4619      	mov	r1, r3
 800c19a:	4b4b      	ldr	r3, [pc, #300]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c19c:	5c5b      	ldrb	r3, [r3, r1]
 800c19e:	4053      	eors	r3, r2
 800c1a0:	b2d9      	uxtb	r1, r3
 800c1a2:	7afb      	ldrb	r3, [r7, #11]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	4b49      	ldr	r3, [pc, #292]	@ (800c2cc <mix_sub_columns+0x288>)
 800c1a8:	5c9a      	ldrb	r2, [r3, r2]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3306      	adds	r3, #6
 800c1ae:	404a      	eors	r2, r1
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c1b4:	7b3b      	ldrb	r3, [r7, #12]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4b44      	ldr	r3, [pc, #272]	@ (800c2cc <mix_sub_columns+0x288>)
 800c1ba:	5c9a      	ldrb	r2, [r3, r2]
 800c1bc:	7c7b      	ldrb	r3, [r7, #17]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4b43      	ldr	r3, [pc, #268]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c1c2:	5c5b      	ldrb	r3, [r3, r1]
 800c1c4:	4053      	eors	r3, r2
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	7dbb      	ldrb	r3, [r7, #22]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4b40      	ldr	r3, [pc, #256]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c1ce:	5c5b      	ldrb	r3, [r3, r1]
 800c1d0:	4053      	eors	r3, r2
 800c1d2:	b2d9      	uxtb	r1, r3
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4b3b      	ldr	r3, [pc, #236]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c1da:	5c9a      	ldrb	r2, [r3, r2]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3307      	adds	r3, #7
 800c1e0:	404a      	eors	r2, r1
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c1e6:	7c3b      	ldrb	r3, [r7, #16]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b37      	ldr	r3, [pc, #220]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c1ec:	5c9a      	ldrb	r2, [r3, r2]
 800c1ee:	7d7b      	ldrb	r3, [r7, #21]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4b36      	ldr	r3, [pc, #216]	@ (800c2cc <mix_sub_columns+0x288>)
 800c1f4:	5c5b      	ldrb	r3, [r3, r1]
 800c1f6:	4053      	eors	r3, r2
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	7abb      	ldrb	r3, [r7, #10]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4b34      	ldr	r3, [pc, #208]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c200:	5c5b      	ldrb	r3, [r3, r1]
 800c202:	4053      	eors	r3, r2
 800c204:	b2d9      	uxtb	r1, r3
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	461a      	mov	r2, r3
 800c20a:	4b31      	ldr	r3, [pc, #196]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c20c:	5c9a      	ldrb	r2, [r3, r2]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3308      	adds	r3, #8
 800c212:	404a      	eors	r2, r1
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c218:	7c3b      	ldrb	r3, [r7, #16]
 800c21a:	461a      	mov	r2, r3
 800c21c:	4b2c      	ldr	r3, [pc, #176]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c21e:	5c9a      	ldrb	r2, [r3, r2]
 800c220:	7d7b      	ldrb	r3, [r7, #21]
 800c222:	4619      	mov	r1, r3
 800c224:	4b28      	ldr	r3, [pc, #160]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c226:	5c5b      	ldrb	r3, [r3, r1]
 800c228:	4053      	eors	r3, r2
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	7abb      	ldrb	r3, [r7, #10]
 800c22e:	4619      	mov	r1, r3
 800c230:	4b26      	ldr	r3, [pc, #152]	@ (800c2cc <mix_sub_columns+0x288>)
 800c232:	5c5b      	ldrb	r3, [r3, r1]
 800c234:	4053      	eors	r3, r2
 800c236:	b2d9      	uxtb	r1, r3
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	461a      	mov	r2, r3
 800c23c:	4b24      	ldr	r3, [pc, #144]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c23e:	5c9a      	ldrb	r2, [r3, r2]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3309      	adds	r3, #9
 800c244:	404a      	eors	r2, r1
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c24a:	7c3b      	ldrb	r3, [r7, #16]
 800c24c:	461a      	mov	r2, r3
 800c24e:	4b20      	ldr	r3, [pc, #128]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c250:	5c9a      	ldrb	r2, [r3, r2]
 800c252:	7d7b      	ldrb	r3, [r7, #21]
 800c254:	4619      	mov	r1, r3
 800c256:	4b1e      	ldr	r3, [pc, #120]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c258:	5c5b      	ldrb	r3, [r3, r1]
 800c25a:	4053      	eors	r3, r2
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	7abb      	ldrb	r3, [r7, #10]
 800c260:	4619      	mov	r1, r3
 800c262:	4b19      	ldr	r3, [pc, #100]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c264:	5c5b      	ldrb	r3, [r3, r1]
 800c266:	4053      	eors	r3, r2
 800c268:	b2d9      	uxtb	r1, r3
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	461a      	mov	r2, r3
 800c26e:	4b17      	ldr	r3, [pc, #92]	@ (800c2cc <mix_sub_columns+0x288>)
 800c270:	5c9a      	ldrb	r2, [r3, r2]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	330a      	adds	r3, #10
 800c276:	404a      	eors	r2, r1
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c27c:	7c3b      	ldrb	r3, [r7, #16]
 800c27e:	461a      	mov	r2, r3
 800c280:	4b12      	ldr	r3, [pc, #72]	@ (800c2cc <mix_sub_columns+0x288>)
 800c282:	5c9a      	ldrb	r2, [r3, r2]
 800c284:	7d7b      	ldrb	r3, [r7, #21]
 800c286:	4619      	mov	r1, r3
 800c288:	4b11      	ldr	r3, [pc, #68]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c28a:	5c5b      	ldrb	r3, [r3, r1]
 800c28c:	4053      	eors	r3, r2
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	7abb      	ldrb	r3, [r7, #10]
 800c292:	4619      	mov	r1, r3
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <mix_sub_columns+0x28c>)
 800c296:	5c5b      	ldrb	r3, [r3, r1]
 800c298:	4053      	eors	r3, r2
 800c29a:	b2d9      	uxtb	r1, r3
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	4b09      	ldr	r3, [pc, #36]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c2a2:	5c9a      	ldrb	r2, [r3, r2]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	330b      	adds	r3, #11
 800c2a8:	404a      	eors	r2, r1
 800c2aa:	b2d2      	uxtb	r2, r2
 800c2ac:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c2ae:	7d3b      	ldrb	r3, [r7, #20]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <mix_sub_columns+0x284>)
 800c2b4:	5c9a      	ldrb	r2, [r3, r2]
 800c2b6:	7a7b      	ldrb	r3, [r7, #9]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4b04      	ldr	r3, [pc, #16]	@ (800c2cc <mix_sub_columns+0x288>)
 800c2bc:	5c5b      	ldrb	r3, [r3, r1]
 800c2be:	4053      	eors	r3, r2
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	e005      	b.n	800c2d4 <mix_sub_columns+0x290>
 800c2c8:	0801dd54 	.word	0x0801dd54
 800c2cc:	0801de54 	.word	0x0801de54
 800c2d0:	0801dc54 	.word	0x0801dc54
 800c2d4:	4b2d      	ldr	r3, [pc, #180]	@ (800c38c <mix_sub_columns+0x348>)
 800c2d6:	5c5b      	ldrb	r3, [r3, r1]
 800c2d8:	4053      	eors	r3, r2
 800c2da:	b2d9      	uxtb	r1, r3
 800c2dc:	7cfb      	ldrb	r3, [r7, #19]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4b2a      	ldr	r3, [pc, #168]	@ (800c38c <mix_sub_columns+0x348>)
 800c2e2:	5c9a      	ldrb	r2, [r3, r2]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	330c      	adds	r3, #12
 800c2e8:	404a      	eors	r2, r1
 800c2ea:	b2d2      	uxtb	r2, r2
 800c2ec:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c2ee:	7d3b      	ldrb	r3, [r7, #20]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b26      	ldr	r3, [pc, #152]	@ (800c38c <mix_sub_columns+0x348>)
 800c2f4:	5c9a      	ldrb	r2, [r3, r2]
 800c2f6:	7a7b      	ldrb	r3, [r7, #9]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4b25      	ldr	r3, [pc, #148]	@ (800c390 <mix_sub_columns+0x34c>)
 800c2fc:	5c5b      	ldrb	r3, [r3, r1]
 800c2fe:	4053      	eors	r3, r2
 800c300:	b2da      	uxtb	r2, r3
 800c302:	7bbb      	ldrb	r3, [r7, #14]
 800c304:	4619      	mov	r1, r3
 800c306:	4b23      	ldr	r3, [pc, #140]	@ (800c394 <mix_sub_columns+0x350>)
 800c308:	5c5b      	ldrb	r3, [r3, r1]
 800c30a:	4053      	eors	r3, r2
 800c30c:	b2d9      	uxtb	r1, r3
 800c30e:	7cfb      	ldrb	r3, [r7, #19]
 800c310:	461a      	mov	r2, r3
 800c312:	4b1e      	ldr	r3, [pc, #120]	@ (800c38c <mix_sub_columns+0x348>)
 800c314:	5c9a      	ldrb	r2, [r3, r2]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	330d      	adds	r3, #13
 800c31a:	404a      	eors	r2, r1
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c320:	7d3b      	ldrb	r3, [r7, #20]
 800c322:	461a      	mov	r2, r3
 800c324:	4b19      	ldr	r3, [pc, #100]	@ (800c38c <mix_sub_columns+0x348>)
 800c326:	5c9a      	ldrb	r2, [r3, r2]
 800c328:	7a7b      	ldrb	r3, [r7, #9]
 800c32a:	4619      	mov	r1, r3
 800c32c:	4b17      	ldr	r3, [pc, #92]	@ (800c38c <mix_sub_columns+0x348>)
 800c32e:	5c5b      	ldrb	r3, [r3, r1]
 800c330:	4053      	eors	r3, r2
 800c332:	b2da      	uxtb	r2, r3
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	4619      	mov	r1, r3
 800c338:	4b15      	ldr	r3, [pc, #84]	@ (800c390 <mix_sub_columns+0x34c>)
 800c33a:	5c5b      	ldrb	r3, [r3, r1]
 800c33c:	4053      	eors	r3, r2
 800c33e:	b2d9      	uxtb	r1, r3
 800c340:	7cfb      	ldrb	r3, [r7, #19]
 800c342:	461a      	mov	r2, r3
 800c344:	4b13      	ldr	r3, [pc, #76]	@ (800c394 <mix_sub_columns+0x350>)
 800c346:	5c9a      	ldrb	r2, [r3, r2]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	330e      	adds	r3, #14
 800c34c:	404a      	eors	r2, r1
 800c34e:	b2d2      	uxtb	r2, r2
 800c350:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c352:	7d3b      	ldrb	r3, [r7, #20]
 800c354:	461a      	mov	r2, r3
 800c356:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <mix_sub_columns+0x350>)
 800c358:	5c9a      	ldrb	r2, [r3, r2]
 800c35a:	7a7b      	ldrb	r3, [r7, #9]
 800c35c:	4619      	mov	r1, r3
 800c35e:	4b0b      	ldr	r3, [pc, #44]	@ (800c38c <mix_sub_columns+0x348>)
 800c360:	5c5b      	ldrb	r3, [r3, r1]
 800c362:	4053      	eors	r3, r2
 800c364:	b2da      	uxtb	r2, r3
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	4619      	mov	r1, r3
 800c36a:	4b08      	ldr	r3, [pc, #32]	@ (800c38c <mix_sub_columns+0x348>)
 800c36c:	5c5b      	ldrb	r3, [r3, r1]
 800c36e:	4053      	eors	r3, r2
 800c370:	b2d9      	uxtb	r1, r3
 800c372:	7cfb      	ldrb	r3, [r7, #19]
 800c374:	461a      	mov	r2, r3
 800c376:	4b06      	ldr	r3, [pc, #24]	@ (800c390 <mix_sub_columns+0x34c>)
 800c378:	5c9a      	ldrb	r2, [r3, r2]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	330f      	adds	r3, #15
 800c37e:	404a      	eors	r2, r1
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	701a      	strb	r2, [r3, #0]
  }
 800c384:	bf00      	nop
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	0801dc54 	.word	0x0801dc54
 800c390:	0801dd54 	.word	0x0801dd54
 800c394:	0801de54 	.word	0x0801de54

0800c398 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c3a6:	7afb      	ldrb	r3, [r7, #11]
 800c3a8:	3b10      	subs	r3, #16
 800c3aa:	2b10      	cmp	r3, #16
 800c3ac:	bf8c      	ite	hi
 800c3ae:	2201      	movhi	r2, #1
 800c3b0:	2200      	movls	r2, #0
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	d10b      	bne.n	800c3d0 <lorawan_aes_set_key+0x38>
 800c3b8:	4a64      	ldr	r2, [pc, #400]	@ (800c54c <lorawan_aes_set_key+0x1b4>)
 800c3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	bf14      	ite	ne
 800c3c6:	2301      	movne	r3, #1
 800c3c8:	2300      	moveq	r3, #0
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d105      	bne.n	800c3dc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c3d8:	23ff      	movs	r3, #255	@ 0xff
 800c3da:	e0b2      	b.n	800c542 <lorawan_aes_set_key+0x1aa>
        break;
 800c3dc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7afa      	ldrb	r2, [r7, #11]
 800c3e2:	68f9      	ldr	r1, [r7, #12]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fbfc 	bl	800bbe2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
 800c3ec:	331c      	adds	r3, #28
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c3f4:	7c7b      	ldrb	r3, [r7, #17]
 800c3f6:	091b      	lsrs	r3, r3, #4
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	75fb      	strb	r3, [r7, #23]
 800c408:	2301      	movs	r3, #1
 800c40a:	75bb      	strb	r3, [r7, #22]
 800c40c:	e093      	b.n	800c536 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	3b04      	subs	r3, #4
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	5cd3      	ldrb	r3, [r2, r3]
 800c416:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	3b03      	subs	r3, #3
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	5cd3      	ldrb	r3, [r2, r3]
 800c420:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	3b02      	subs	r3, #2
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	5cd3      	ldrb	r3, [r2, r3]
 800c42a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	3b01      	subs	r3, #1
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	5cd3      	ldrb	r3, [r2, r3]
 800c434:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	7afa      	ldrb	r2, [r7, #11]
 800c43a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c43e:	fb01 f202 	mul.w	r2, r1, r2
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d127      	bne.n	800c49a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800c44a:	7d7b      	ldrb	r3, [r7, #21]
 800c44c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c44e:	7d3b      	ldrb	r3, [r7, #20]
 800c450:	4a3f      	ldr	r2, [pc, #252]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c452:	5cd2      	ldrb	r2, [r2, r3]
 800c454:	7dbb      	ldrb	r3, [r7, #22]
 800c456:	4053      	eors	r3, r2
 800c458:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c45a:	7cfb      	ldrb	r3, [r7, #19]
 800c45c:	4a3c      	ldr	r2, [pc, #240]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c45e:	5cd3      	ldrb	r3, [r2, r3]
 800c460:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c462:	7cbb      	ldrb	r3, [r7, #18]
 800c464:	4a3a      	ldr	r2, [pc, #232]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c466:	5cd3      	ldrb	r3, [r2, r3]
 800c468:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c46a:	7c3b      	ldrb	r3, [r7, #16]
 800c46c:	4a38      	ldr	r2, [pc, #224]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c46e:	5cd3      	ldrb	r3, [r2, r3]
 800c470:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c472:	7dbb      	ldrb	r3, [r7, #22]
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	b25a      	sxtb	r2, r3
 800c478:	7dbb      	ldrb	r3, [r7, #22]
 800c47a:	09db      	lsrs	r3, r3, #7
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	4619      	mov	r1, r3
 800c480:	0049      	lsls	r1, r1, #1
 800c482:	440b      	add	r3, r1
 800c484:	4619      	mov	r1, r3
 800c486:	00c8      	lsls	r0, r1, #3
 800c488:	4619      	mov	r1, r3
 800c48a:	4603      	mov	r3, r0
 800c48c:	440b      	add	r3, r1
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	b25b      	sxtb	r3, r3
 800c492:	4053      	eors	r3, r2
 800c494:	b25b      	sxtb	r3, r3
 800c496:	75bb      	strb	r3, [r7, #22]
 800c498:	e01c      	b.n	800c4d4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	2b18      	cmp	r3, #24
 800c49e:	d919      	bls.n	800c4d4 <lorawan_aes_set_key+0x13c>
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	7afa      	ldrb	r2, [r7, #11]
 800c4a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a8:	fb01 f202 	mul.w	r2, r1, r2
 800c4ac:	1a9b      	subs	r3, r3, r2
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d10f      	bne.n	800c4d4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800c4b4:	7d7b      	ldrb	r3, [r7, #21]
 800c4b6:	4a26      	ldr	r2, [pc, #152]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c4b8:	5cd3      	ldrb	r3, [r2, r3]
 800c4ba:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c4bc:	7d3b      	ldrb	r3, [r7, #20]
 800c4be:	4a24      	ldr	r2, [pc, #144]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c4c0:	5cd3      	ldrb	r3, [r2, r3]
 800c4c2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c4c4:	7cfb      	ldrb	r3, [r7, #19]
 800c4c6:	4a22      	ldr	r2, [pc, #136]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c4c8:	5cd3      	ldrb	r3, [r2, r3]
 800c4ca:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c4cc:	7cbb      	ldrb	r3, [r7, #18]
 800c4ce:	4a20      	ldr	r2, [pc, #128]	@ (800c550 <lorawan_aes_set_key+0x1b8>)
 800c4d0:	5cd3      	ldrb	r3, [r2, r3]
 800c4d2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c4d4:	7dfa      	ldrb	r2, [r7, #23]
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c4dc:	7c3b      	ldrb	r3, [r7, #16]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	5cd1      	ldrb	r1, [r2, r3]
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	7d7a      	ldrb	r2, [r7, #21]
 800c4e6:	404a      	eors	r2, r1
 800c4e8:	b2d1      	uxtb	r1, r2
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c4ee:	7c3b      	ldrb	r3, [r7, #16]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	5cd1      	ldrb	r1, [r2, r3]
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	7d3a      	ldrb	r2, [r7, #20]
 800c4fc:	404a      	eors	r2, r1
 800c4fe:	b2d1      	uxtb	r1, r2
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c504:	7c3b      	ldrb	r3, [r7, #16]
 800c506:	3302      	adds	r3, #2
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	5cd1      	ldrb	r1, [r2, r3]
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	3302      	adds	r3, #2
 800c510:	7cfa      	ldrb	r2, [r7, #19]
 800c512:	404a      	eors	r2, r1
 800c514:	b2d1      	uxtb	r1, r2
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c51a:	7c3b      	ldrb	r3, [r7, #16]
 800c51c:	3303      	adds	r3, #3
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	5cd1      	ldrb	r1, [r2, r3]
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	3303      	adds	r3, #3
 800c526:	7cba      	ldrb	r2, [r7, #18]
 800c528:	404a      	eors	r2, r1
 800c52a:	b2d1      	uxtb	r1, r2
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c530:	7dfb      	ldrb	r3, [r7, #23]
 800c532:	3304      	adds	r3, #4
 800c534:	75fb      	strb	r3, [r7, #23]
 800c536:	7dfa      	ldrb	r2, [r7, #23]
 800c538:	7c7b      	ldrb	r3, [r7, #17]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	f4ff af67 	bcc.w	800c40e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	00010101 	.word	0x00010101
 800c550:	0801dc54 	.word	0x0801dc54

0800c554 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08a      	sub	sp, #40	@ 0x28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d038      	beq.n	800c5dc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	f107 0314 	add.w	r3, r7, #20
 800c570:	68f9      	ldr	r1, [r7, #12]
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff fc07 	bl	800bd86 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c578:	2301      	movs	r3, #1
 800c57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c57e:	e014      	b.n	800c5aa <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c580:	f107 0314 	add.w	r3, r7, #20
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff fd5d 	bl	800c044 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c590:	0112      	lsls	r2, r2, #4
 800c592:	441a      	add	r2, r3
 800c594:	f107 0314 	add.w	r3, r7, #20
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff fcab 	bl	800bef6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c5b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d3e3      	bcc.n	800c580 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c5b8:	f107 0314 	add.w	r3, r7, #20
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fca7 	bl	800bf10 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c5c8:	0112      	lsls	r2, r2, #4
 800c5ca:	441a      	add	r2, r3
 800c5cc:	f107 0314 	add.w	r3, r7, #20
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	68b8      	ldr	r0, [r7, #8]
 800c5d4:	f7ff fbd7 	bl	800bd86 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e000      	b.n	800c5de <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c5dc:	23ff      	movs	r3, #255	@ 0xff
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3728      	adds	r7, #40	@ 0x28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800c5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ea:	b09d      	sub	sp, #116	@ 0x74
 800c5ec:	af10      	add	r7, sp, #64	@ 0x40
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c5f4:	2306      	movs	r3, #6
 800c5f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800c5fa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f000 fa21 	bl	800ca4c <SecureElementGetKeyByID>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800c610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c614:	2b00      	cmp	r3, #0
 800c616:	f040 80b0 	bne.w	800c77a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800c61a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800c622:	4b58      	ldr	r3, [pc, #352]	@ (800c784 <PrintKey+0x19c>)
 800c624:	2200      	movs	r2, #0
 800c626:	2100      	movs	r1, #0
 800c628:	2002      	movs	r0, #2
 800c62a:	f00f facd 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c62e:	e056      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800c630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c634:	2b01      	cmp	r3, #1
 800c636:	d106      	bne.n	800c646 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800c638:	4b53      	ldr	r3, [pc, #332]	@ (800c788 <PrintKey+0x1a0>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	2100      	movs	r1, #0
 800c63e:	2002      	movs	r0, #2
 800c640:	f00f fac2 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c644:	e04b      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800c646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d106      	bne.n	800c65c <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800c64e:	4b4f      	ldr	r3, [pc, #316]	@ (800c78c <PrintKey+0x1a4>)
 800c650:	2200      	movs	r2, #0
 800c652:	2100      	movs	r1, #0
 800c654:	2002      	movs	r0, #2
 800c656:	f00f fab7 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c65a:	e040      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800c65c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c660:	2b02      	cmp	r3, #2
 800c662:	d106      	bne.n	800c672 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800c664:	4b4a      	ldr	r3, [pc, #296]	@ (800c790 <PrintKey+0x1a8>)
 800c666:	2200      	movs	r2, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	2002      	movs	r0, #2
 800c66c:	f00f faac 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c670:	e035      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800c672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c676:	2b04      	cmp	r3, #4
 800c678:	d106      	bne.n	800c688 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800c67a:	4b46      	ldr	r3, [pc, #280]	@ (800c794 <PrintKey+0x1ac>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	2100      	movs	r1, #0
 800c680:	2002      	movs	r0, #2
 800c682:	f00f faa1 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c686:	e02a      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800c688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c68c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c68e:	d106      	bne.n	800c69e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800c690:	4b41      	ldr	r3, [pc, #260]	@ (800c798 <PrintKey+0x1b0>)
 800c692:	2200      	movs	r2, #0
 800c694:	2100      	movs	r1, #0
 800c696:	2002      	movs	r0, #2
 800c698:	f00f fa96 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c69c:	e01f      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800c69e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6a2:	2b80      	cmp	r3, #128	@ 0x80
 800c6a4:	d106      	bne.n	800c6b4 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800c6a6:	4b3d      	ldr	r3, [pc, #244]	@ (800c79c <PrintKey+0x1b4>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	2002      	movs	r0, #2
 800c6ae:	f00f fa8b 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c6b2:	e014      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800c6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6b8:	2b81      	cmp	r3, #129	@ 0x81
 800c6ba:	d106      	bne.n	800c6ca <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800c6bc:	4b38      	ldr	r3, [pc, #224]	@ (800c7a0 <PrintKey+0x1b8>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	2002      	movs	r0, #2
 800c6c4:	f00f fa80 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 800c6c8:	e009      	b.n	800c6de <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800c6ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6ce:	2b82      	cmp	r3, #130	@ 0x82
 800c6d0:	d105      	bne.n	800c6de <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800c6d2:	4b34      	ldr	r3, [pc, #208]	@ (800c7a4 <PrintKey+0x1bc>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	2002      	movs	r0, #2
 800c6da:	f00f fa75 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e0:	785b      	ldrb	r3, [r3, #1]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e6:	789b      	ldrb	r3, [r3, #2]
 800c6e8:	461c      	mov	r4, r3
 800c6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ec:	78db      	ldrb	r3, [r3, #3]
 800c6ee:	461d      	mov	r5, r3
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	791b      	ldrb	r3, [r3, #4]
 800c6f4:	461e      	mov	r6, r3
 800c6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f8:	795b      	ldrb	r3, [r3, #5]
 800c6fa:	623b      	str	r3, [r7, #32]
 800c6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fe:	799b      	ldrb	r3, [r3, #6]
 800c700:	61fb      	str	r3, [r7, #28]
 800c702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c704:	79db      	ldrb	r3, [r3, #7]
 800c706:	61bb      	str	r3, [r7, #24]
 800c708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70a:	7a1b      	ldrb	r3, [r3, #8]
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c710:	7a5b      	ldrb	r3, [r3, #9]
 800c712:	613b      	str	r3, [r7, #16]
 800c714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c716:	7a9b      	ldrb	r3, [r3, #10]
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	7adb      	ldrb	r3, [r3, #11]
 800c71e:	60bb      	str	r3, [r7, #8]
 800c720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c722:	7b1b      	ldrb	r3, [r3, #12]
 800c724:	607b      	str	r3, [r7, #4]
 800c726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c728:	7b5b      	ldrb	r3, [r3, #13]
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72e:	7b9b      	ldrb	r3, [r3, #14]
 800c730:	4619      	mov	r1, r3
 800c732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c734:	7bdb      	ldrb	r3, [r3, #15]
 800c736:	461a      	mov	r2, r3
 800c738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73a:	7c1b      	ldrb	r3, [r3, #16]
 800c73c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c73e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c740:	910d      	str	r1, [sp, #52]	@ 0x34
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	920c      	str	r2, [sp, #48]	@ 0x30
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	920a      	str	r2, [sp, #40]	@ 0x28
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	9209      	str	r2, [sp, #36]	@ 0x24
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	9208      	str	r2, [sp, #32]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	9207      	str	r2, [sp, #28]
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	9206      	str	r2, [sp, #24]
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	9205      	str	r2, [sp, #20]
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9603      	str	r6, [sp, #12]
 800c768:	9502      	str	r5, [sp, #8]
 800c76a:	9401      	str	r4, [sp, #4]
 800c76c:	9000      	str	r0, [sp, #0]
 800c76e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a8 <PrintKey+0x1c0>)
 800c770:	2200      	movs	r2, #0
 800c772:	2100      	movs	r1, #0
 800c774:	2002      	movs	r0, #2
 800c776:	f00f fa27 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800c77a:	bf00      	nop
 800c77c:	3734      	adds	r7, #52	@ 0x34
 800c77e:	46bd      	mov	sp, r7
 800c780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c782:	bf00      	nop
 800c784:	0801d6b4 	.word	0x0801d6b4
 800c788:	0801d6cc 	.word	0x0801d6cc
 800c78c:	0801d6e4 	.word	0x0801d6e4
 800c790:	0801d6fc 	.word	0x0801d6fc
 800c794:	0801d714 	.word	0x0801d714
 800c798:	0801d72c 	.word	0x0801d72c
 800c79c:	0801d744 	.word	0x0801d744
 800c7a0:	0801d75c 	.word	0x0801d75c
 800c7a4:	0801d774 	.word	0x0801d774
 800c7a8:	0801d78c 	.word	0x0801d78c

0800c7ac <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	6039      	str	r1, [r7, #0]
 800c7b6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]
 800c7bc:	e01a      	b.n	800c7f4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c7be:	4b12      	ldr	r3, [pc, #72]	@ (800c808 <GetKeyByID+0x5c>)
 800c7c0:	6819      	ldr	r1, [r3, #0]
 800c7c2:	7bfa      	ldrb	r2, [r7, #15]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	4413      	add	r3, r2
 800c7ca:	440b      	add	r3, r1
 800c7cc:	3310      	adds	r3, #16
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	79fa      	ldrb	r2, [r7, #7]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d10b      	bne.n	800c7ee <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c808 <GetKeyByID+0x5c>)
 800c7d8:	6819      	ldr	r1, [r3, #0]
 800c7da:	7bfa      	ldrb	r2, [r7, #15]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	011b      	lsls	r3, r3, #4
 800c7e0:	4413      	add	r3, r2
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	18ca      	adds	r2, r1, r3
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e006      	b.n	800c7fc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	73fb      	strb	r3, [r7, #15]
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	d9e1      	bls.n	800c7be <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c7fa:	2303      	movs	r3, #3
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	bc80      	pop	{r7}
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20002ea8 	.word	0x20002ea8

0800c80c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b0d1      	sub	sp, #324	@ 0x144
 800c810:	af00      	add	r7, sp, #0
 800c812:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800c816:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800c81a:	6020      	str	r0, [r4, #0]
 800c81c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c820:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c824:	6001      	str	r1, [r0, #0]
 800c826:	4619      	mov	r1, r3
 800c828:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c82c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c830:	801a      	strh	r2, [r3, #0]
 800c832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c836:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c83a:	460a      	mov	r2, r1
 800c83c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c83e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c842:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <ComputeCmac+0x48>
 800c84c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c854:	2302      	movs	r3, #2
 800c856:	e05c      	b.n	800c912 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c858:	f107 0314 	add.w	r3, r7, #20
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe ff1b 	bl	800b698 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c862:	f107 0210 	add.w	r2, r7, #16
 800c866:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c86a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff ff9a 	bl	800c7ac <GetKeyByID>
 800c878:	4603      	mov	r3, r0
 800c87a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c87e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c882:	2b00      	cmp	r3, #0
 800c884:	d143      	bne.n	800c90e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c886:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c88a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	f107 0314 	add.w	r3, r7, #20
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe ff16 	bl	800b6ca <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c89e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d009      	beq.n	800c8c0 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800c8ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c8b4:	f107 0014 	add.w	r0, r7, #20
 800c8b8:	2210      	movs	r2, #16
 800c8ba:	6819      	ldr	r1, [r3, #0]
 800c8bc:	f7fe ff14 	bl	800b6e8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c8c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8c4:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c8c8:	881a      	ldrh	r2, [r3, #0]
 800c8ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c8d2:	f107 0014 	add.w	r0, r7, #20
 800c8d6:	6819      	ldr	r1, [r3, #0]
 800c8d8:	f7fe ff06 	bl	800b6e8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c8dc:	f107 0214 	add.w	r2, r7, #20
 800c8e0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe ffc0 	bl	800b86c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c8ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c8f0:	061a      	lsls	r2, r3, #24
 800c8f2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c8f6:	041b      	lsls	r3, r3, #16
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c8fe:	021b      	lsls	r3, r3, #8
 800c900:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800c902:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c906:	431a      	orrs	r2, r3
 800c908:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c90c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c90e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c912:	4618      	mov	r0, r3
 800c914:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd90      	pop	{r4, r7, pc}

0800c91c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800c91c:	b5b0      	push	{r4, r5, r7, lr}
 800c91e:	b0b2      	sub	sp, #200	@ 0xc8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800c926:	f107 0308 	add.w	r3, r7, #8
 800c92a:	22c0      	movs	r2, #192	@ 0xc0
 800c92c:	2100      	movs	r1, #0
 800c92e:	4618      	mov	r0, r3
 800c930:	f010 fc34 	bl	801d19c <memset>
 800c934:	4a3f      	ldr	r2, [pc, #252]	@ (800ca34 <SecureElementInit+0x118>)
 800c936:	f107 0308 	add.w	r3, r7, #8
 800c93a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c93e:	e883 0003 	stmia.w	r3, {r0, r1}
 800c942:	4a3d      	ldr	r2, [pc, #244]	@ (800ca38 <SecureElementInit+0x11c>)
 800c944:	f107 0310 	add.w	r3, r7, #16
 800c948:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c94c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c950:	4b3a      	ldr	r3, [pc, #232]	@ (800ca3c <SecureElementInit+0x120>)
 800c952:	f107 0419 	add.w	r4, r7, #25
 800c956:	461d      	mov	r5, r3
 800c958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c95a:	6020      	str	r0, [r4, #0]
 800c95c:	6061      	str	r1, [r4, #4]
 800c95e:	60a2      	str	r2, [r4, #8]
 800c960:	60e3      	str	r3, [r4, #12]
 800c962:	2301      	movs	r3, #1
 800c964:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800c968:	4b34      	ldr	r3, [pc, #208]	@ (800ca3c <SecureElementInit+0x120>)
 800c96a:	f107 042a 	add.w	r4, r7, #42	@ 0x2a
 800c96e:	461d      	mov	r5, r3
 800c970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c972:	6020      	str	r0, [r4, #0]
 800c974:	6061      	str	r1, [r4, #4]
 800c976:	60a2      	str	r2, [r4, #8]
 800c978:	60e3      	str	r3, [r4, #12]
 800c97a:	2302      	movs	r3, #2
 800c97c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800c980:	4b2e      	ldr	r3, [pc, #184]	@ (800ca3c <SecureElementInit+0x120>)
 800c982:	f107 043b 	add.w	r4, r7, #59	@ 0x3b
 800c986:	461d      	mov	r5, r3
 800c988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c98a:	6020      	str	r0, [r4, #0]
 800c98c:	6061      	str	r1, [r4, #4]
 800c98e:	60a2      	str	r2, [r4, #8]
 800c990:	60e3      	str	r3, [r4, #12]
 800c992:	2303      	movs	r3, #3
 800c994:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800c998:	4b28      	ldr	r3, [pc, #160]	@ (800ca3c <SecureElementInit+0x120>)
 800c99a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800c99e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c9a4:	2304      	movs	r3, #4
 800c9a6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 800c9aa:	237f      	movs	r3, #127	@ 0x7f
 800c9ac:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800c9b0:	2380      	movs	r3, #128	@ 0x80
 800c9b2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800c9b6:	2381      	movs	r3, #129	@ 0x81
 800c9b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800c9bc:	2382      	movs	r3, #130	@ 0x82
 800c9be:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
 800c9c2:	2383      	movs	r3, #131	@ 0x83
 800c9c4:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	e02c      	b.n	800ca2c <SecureElementInit+0x110>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800c9d2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca40 <SecureElementInit+0x124>)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800c9d8:	4b19      	ldr	r3, [pc, #100]	@ (800ca40 <SecureElementInit+0x124>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f107 0108 	add.w	r1, r7, #8
 800c9e0:	22c0      	movs	r2, #192	@ 0xc0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f00b ff9b 	bl	801891e <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c9e8:	4b16      	ldr	r3, [pc, #88]	@ (800ca44 <SecureElementInit+0x128>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	2002      	movs	r0, #2
 800c9f0:	f00f f8ea 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f7ff fdf7 	bl	800c5e8 <PrintKey>
    PrintKey(NWK_KEY);
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	f7ff fdf4 	bl	800c5e8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ca00:	4b11      	ldr	r3, [pc, #68]	@ (800ca48 <SecureElementInit+0x12c>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	2100      	movs	r1, #0
 800ca06:	2002      	movs	r0, #2
 800ca08:	f00f f8de 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ca0c:	2003      	movs	r0, #3
 800ca0e:	f7ff fdeb 	bl	800c5e8 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ca12:	2002      	movs	r0, #2
 800ca14:	f7ff fde8 	bl	800c5e8 <PrintKey>
#endif /* KEY_EXTRACTABLE */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <SecureElementInit+0x10e>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800ca1e:	4b08      	ldr	r3, [pc, #32]	@ (800ca40 <SecureElementInit+0x124>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	4610      	mov	r0, r2
 800ca28:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	37c8      	adds	r7, #200	@ 0xc8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bdb0      	pop	{r4, r5, r7, pc}
 800ca34:	0801d810 	.word	0x0801d810
 800ca38:	0801d818 	.word	0x0801d818
 800ca3c:	0801d820 	.word	0x0801d820
 800ca40:	20002ea8 	.word	0x20002ea8
 800ca44:	0801d7e0 	.word	0x0801d7e0
 800ca48:	0801d7f8 	.word	0x0801d7f8

0800ca4c <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	4603      	mov	r3, r0
 800ca54:	6039      	str	r1, [r7, #0]
 800ca56:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
 800ca5c:	e01a      	b.n	800ca94 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ca5e:	4b12      	ldr	r3, [pc, #72]	@ (800caa8 <SecureElementGetKeyByID+0x5c>)
 800ca60:	6819      	ldr	r1, [r3, #0]
 800ca62:	7bfa      	ldrb	r2, [r7, #15]
 800ca64:	4613      	mov	r3, r2
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	4413      	add	r3, r2
 800ca6a:	440b      	add	r3, r1
 800ca6c:	3310      	adds	r3, #16
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	79fa      	ldrb	r2, [r7, #7]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d10b      	bne.n	800ca8e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ca76:	4b0c      	ldr	r3, [pc, #48]	@ (800caa8 <SecureElementGetKeyByID+0x5c>)
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	7bfa      	ldrb	r2, [r7, #15]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	011b      	lsls	r3, r3, #4
 800ca80:	4413      	add	r3, r2
 800ca82:	3310      	adds	r3, #16
 800ca84:	18ca      	adds	r2, r1, r3
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e006      	b.n	800ca9c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	3301      	adds	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
 800ca96:	2b09      	cmp	r3, #9
 800ca98:	d9e1      	bls.n	800ca5e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ca9a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bc80      	pop	{r7}
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20002ea8 	.word	0x20002ea8

0800caac <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	6039      	str	r1, [r7, #0]
 800cab6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cabe:	2302      	movs	r3, #2
 800cac0:	e04c      	b.n	800cb5c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cac2:	2300      	movs	r3, #0
 800cac4:	77fb      	strb	r3, [r7, #31]
 800cac6:	e045      	b.n	800cb54 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cac8:	4b26      	ldr	r3, [pc, #152]	@ (800cb64 <SecureElementSetKey+0xb8>)
 800caca:	6819      	ldr	r1, [r3, #0]
 800cacc:	7ffa      	ldrb	r2, [r7, #31]
 800cace:	4613      	mov	r3, r2
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	4413      	add	r3, r2
 800cad4:	440b      	add	r3, r1
 800cad6:	3310      	adds	r3, #16
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	79fa      	ldrb	r2, [r7, #7]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d136      	bne.n	800cb4e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	2b80      	cmp	r3, #128	@ 0x80
 800cae4:	d123      	bne.n	800cb2e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800cae6:	2306      	movs	r3, #6
 800cae8:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	f107 0310 	add.w	r3, r7, #16
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	605a      	str	r2, [r3, #4]
 800caf8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800cafa:	f107 030c 	add.w	r3, r7, #12
 800cafe:	227f      	movs	r2, #127	@ 0x7f
 800cb00:	2110      	movs	r1, #16
 800cb02:	6838      	ldr	r0, [r7, #0]
 800cb04:	f000 f87d 	bl	800cc02 <SecureElementAesEncrypt>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cb0c:	4b15      	ldr	r3, [pc, #84]	@ (800cb64 <SecureElementSetKey+0xb8>)
 800cb0e:	6819      	ldr	r1, [r3, #0]
 800cb10:	7ffa      	ldrb	r2, [r7, #31]
 800cb12:	4613      	mov	r3, r2
 800cb14:	011b      	lsls	r3, r3, #4
 800cb16:	4413      	add	r3, r2
 800cb18:	3310      	adds	r3, #16
 800cb1a:	440b      	add	r3, r1
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	f107 010c 	add.w	r1, r7, #12
 800cb22:	2210      	movs	r2, #16
 800cb24:	4618      	mov	r0, r3
 800cb26:	f00b fefa 	bl	801891e <memcpy1>
                return retval;
 800cb2a:	7fbb      	ldrb	r3, [r7, #30]
 800cb2c:	e016      	b.n	800cb5c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <SecureElementSetKey+0xb8>)
 800cb30:	6819      	ldr	r1, [r3, #0]
 800cb32:	7ffa      	ldrb	r2, [r7, #31]
 800cb34:	4613      	mov	r3, r2
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	4413      	add	r3, r2
 800cb3a:	3310      	adds	r3, #16
 800cb3c:	440b      	add	r3, r1
 800cb3e:	3301      	adds	r3, #1
 800cb40:	2210      	movs	r2, #16
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f00b feea 	bl	801891e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e006      	b.n	800cb5c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cb4e:	7ffb      	ldrb	r3, [r7, #31]
 800cb50:	3301      	adds	r3, #1
 800cb52:	77fb      	strb	r3, [r7, #31]
 800cb54:	7ffb      	ldrb	r3, [r7, #31]
 800cb56:	2b09      	cmp	r3, #9
 800cb58:	d9b6      	bls.n	800cac8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cb5a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20002ea8 	.word	0x20002ea8

0800cb68 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	4611      	mov	r1, r2
 800cb74:	461a      	mov	r2, r3
 800cb76:	460b      	mov	r3, r1
 800cb78:	80fb      	strh	r3, [r7, #6]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800cb7e:	797b      	ldrb	r3, [r7, #5]
 800cb80:	2b7e      	cmp	r3, #126	@ 0x7e
 800cb82:	d901      	bls.n	800cb88 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e009      	b.n	800cb9c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800cb88:	7979      	ldrb	r1, [r7, #5]
 800cb8a:	88fa      	ldrh	r2, [r7, #6]
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	460b      	mov	r3, r1
 800cb92:	68b9      	ldr	r1, [r7, #8]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fe39 	bl	800c80c <ComputeCmac>
 800cb9a:	4603      	mov	r3, r0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b088      	sub	sp, #32
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	607a      	str	r2, [r7, #4]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	817b      	strh	r3, [r7, #10]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e01b      	b.n	800cbfa <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cbc2:	2306      	movs	r3, #6
 800cbc4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800cbca:	7a79      	ldrb	r1, [r7, #9]
 800cbcc:	897a      	ldrh	r2, [r7, #10]
 800cbce:	f107 0310 	add.w	r3, r7, #16
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	68f9      	ldr	r1, [r7, #12]
 800cbd8:	2000      	movs	r0, #0
 800cbda:	f7ff fe17 	bl	800c80c <ComputeCmac>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	e006      	b.n	800cbfa <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d001      	beq.n	800cbf8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b0c2      	sub	sp, #264	@ 0x108
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cc12:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	4603      	mov	r3, r0
 800cc1a:	817b      	strh	r3, [r7, #10]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d006      	beq.n	800cc34 <SecureElementAesEncrypt+0x32>
 800cc26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc34:	2302      	movs	r3, #2
 800cc36:	e046      	b.n	800ccc6 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800cc38:	897b      	ldrh	r3, [r7, #10]
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cc44:	2305      	movs	r3, #5
 800cc46:	e03e      	b.n	800ccc6 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	22f0      	movs	r2, #240	@ 0xf0
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f00b fe9f 	bl	8018994 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800cc56:	f107 0210 	add.w	r2, r7, #16
 800cc5a:	7a7b      	ldrb	r3, [r7, #9]
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fda4 	bl	800c7ac <GetKeyByID>
 800cc64:	4603      	mov	r3, r0
 800cc66:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cc6a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d127      	bne.n	800ccc2 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	3301      	adds	r3, #1
 800cc76:	f107 0214 	add.w	r2, r7, #20
 800cc7a:	2110      	movs	r1, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fb8b 	bl	800c398 <lorawan_aes_set_key>

        uint8_t block = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800cc88:	e018      	b.n	800ccbc <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cc8a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	18d0      	adds	r0, r2, r3
 800cc92:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cc96:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cc9a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800cc9e:	6812      	ldr	r2, [r2, #0]
 800cca0:	4413      	add	r3, r2
 800cca2:	f107 0214 	add.w	r2, r7, #20
 800cca6:	4619      	mov	r1, r3
 800cca8:	f7ff fc54 	bl	800c554 <lorawan_aes_encrypt>
            block = block + 16;
 800ccac:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800ccb0:	3310      	adds	r3, #16
 800ccb2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800ccb6:	897b      	ldrh	r3, [r7, #10]
 800ccb8:	3b10      	subs	r3, #16
 800ccba:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800ccbc:	897b      	ldrh	r3, [r7, #10]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e3      	bne.n	800cc8a <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800ccc2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cce6:	2302      	movs	r3, #2
 800cce8:	e02e      	b.n	800cd48 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ccea:	2306      	movs	r3, #6
 800ccec:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800ccee:	78bb      	ldrb	r3, [r7, #2]
 800ccf0:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccf2:	d104      	bne.n	800ccfe <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	2b04      	cmp	r3, #4
 800ccf8:	d001      	beq.n	800ccfe <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e024      	b.n	800cd48 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	f107 0310 	add.w	r3, r7, #16
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	605a      	str	r2, [r3, #4]
 800cd0c:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	78fa      	ldrb	r2, [r7, #3]
 800cd14:	2110      	movs	r1, #16
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff ff73 	bl	800cc02 <SecureElementAesEncrypt>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cd20:	7ffb      	ldrb	r3, [r7, #31]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800cd26:	7ffb      	ldrb	r3, [r7, #31]
 800cd28:	e00e      	b.n	800cd48 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800cd2a:	f107 020c 	add.w	r2, r7, #12
 800cd2e:	78bb      	ldrb	r3, [r7, #2]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff feba 	bl	800caac <SecureElementSetKey>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cd3c:	7ffb      	ldrb	r3, [r7, #31]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800cd42:	7ffb      	ldrb	r3, [r7, #31]
 800cd44:	e000      	b.n	800cd48 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cd46:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3720      	adds	r7, #32
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	607b      	str	r3, [r7, #4]
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	73fb      	strb	r3, [r7, #15]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d005      	beq.n	800cd74 <SecureElementProcessJoinAccept+0x24>
 800cd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <SecureElementProcessJoinAccept+0x24>
 800cd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d101      	bne.n	800cd78 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd74:	2302      	movs	r3, #2
 800cd76:	e064      	b.n	800ce42 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800cd78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd7c:	2b21      	cmp	r3, #33	@ 0x21
 800cd7e:	d901      	bls.n	800cd84 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cd80:	2305      	movs	r3, #5
 800cd82:	e05e      	b.n	800ce42 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800cd84:	2301      	movs	r3, #1
 800cd86:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800cd88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6879      	ldr	r1, [r7, #4]
 800cd92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd94:	f00b fdc3 	bl	801891e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	1c58      	adds	r0, r3, #1
 800cd9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	3b01      	subs	r3, #1
 800cda4:	b299      	uxth	r1, r3
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	3301      	adds	r3, #1
 800cdaa:	7dfa      	ldrb	r2, [r7, #23]
 800cdac:	f7ff ff29 	bl	800cc02 <SecureElementAesEncrypt>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800cdb6:	2307      	movs	r3, #7
 800cdb8:	e043      	b.n	800ce42 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	330b      	adds	r3, #11
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	09db      	lsrs	r3, r3, #7
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800cdcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdd0:	3b04      	subs	r3, #4
 800cdd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdd4:	4413      	add	r3, r2
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800cdda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdde:	3b03      	subs	r3, #3
 800cde0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cde2:	4413      	add	r3, r2
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	021b      	lsls	r3, r3, #8
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	4313      	orrs	r3, r2
 800cdec:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800cdee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdf2:	3b02      	subs	r3, #2
 800cdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf6:	4413      	add	r3, r2
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	041b      	lsls	r3, r3, #16
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800ce02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce0a:	4413      	add	r3, r2
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	061b      	lsls	r3, r3, #24
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800ce16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10e      	bne.n	800ce3c <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ce1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	3b04      	subs	r3, #4
 800ce26:	b299      	uxth	r1, r3
 800ce28:	2301      	movs	r3, #1
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce2e:	f7ff feb9 	bl	800cba4 <SecureElementVerifyAesCmac>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d003      	beq.n	800ce40 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e002      	b.n	800ce42 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ce3c:	2304      	movs	r3, #4
 800ce3e:	e000      	b.n	800ce42 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
	...

0800ce4c <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	e006      	b.n	800ce6c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800ce5e:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <SecureElementRandomNumber+0x28>)
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	4798      	blx	r3
 800ce64:	4602      	mov	r2, r0
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	0801e020 	.word	0x0801e020

0800ce78 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d101      	bne.n	800ce8a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce86:	2302      	movs	r3, #2
 800ce88:	e007      	b.n	800ce9a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800ce8a:	4b06      	ldr	r3, [pc, #24]	@ (800cea4 <SecureElementSetDevEui+0x2c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2208      	movs	r2, #8
 800ce90:	6879      	ldr	r1, [r7, #4]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f00b fd43 	bl	801891e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20002ea8 	.word	0x20002ea8

0800cea8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800ceac:	4b02      	ldr	r3, [pc, #8]	@ (800ceb8 <SecureElementGetDevEui+0x10>)
 800ceae:	681b      	ldr	r3, [r3, #0]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bc80      	pop	{r7}
 800ceb6:	4770      	bx	lr
 800ceb8:	20002ea8 	.word	0x20002ea8

0800cebc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ceca:	2302      	movs	r3, #2
 800cecc:	e008      	b.n	800cee0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800cece:	4b06      	ldr	r3, [pc, #24]	@ (800cee8 <SecureElementSetJoinEui+0x2c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3308      	adds	r3, #8
 800ced4:	2208      	movs	r2, #8
 800ced6:	6879      	ldr	r1, [r7, #4]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f00b fd20 	bl	801891e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20002ea8 	.word	0x20002ea8

0800ceec <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800cef0:	4b03      	ldr	r3, [pc, #12]	@ (800cf00 <SecureElementGetJoinEui+0x14>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3308      	adds	r3, #8
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bc80      	pop	{r7}
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	20002ea8 	.word	0x20002ea8

0800cf04 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800cf0c:	4a1a      	ldr	r2, [pc, #104]	@ (800cf78 <LmHandlerInit+0x74>)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800cf12:	4b1a      	ldr	r3, [pc, #104]	@ (800cf7c <LmHandlerInit+0x78>)
 800cf14:	4a1a      	ldr	r2, [pc, #104]	@ (800cf80 <LmHandlerInit+0x7c>)
 800cf16:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800cf18:	4b18      	ldr	r3, [pc, #96]	@ (800cf7c <LmHandlerInit+0x78>)
 800cf1a:	4a1a      	ldr	r2, [pc, #104]	@ (800cf84 <LmHandlerInit+0x80>)
 800cf1c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800cf1e:	4b17      	ldr	r3, [pc, #92]	@ (800cf7c <LmHandlerInit+0x78>)
 800cf20:	4a19      	ldr	r2, [pc, #100]	@ (800cf88 <LmHandlerInit+0x84>)
 800cf22:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800cf24:	4b15      	ldr	r3, [pc, #84]	@ (800cf7c <LmHandlerInit+0x78>)
 800cf26:	4a19      	ldr	r2, [pc, #100]	@ (800cf8c <LmHandlerInit+0x88>)
 800cf28:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800cf2a:	4b13      	ldr	r3, [pc, #76]	@ (800cf78 <LmHandlerInit+0x74>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a17      	ldr	r2, [pc, #92]	@ (800cf90 <LmHandlerInit+0x8c>)
 800cf32:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800cf34:	4b10      	ldr	r3, [pc, #64]	@ (800cf78 <LmHandlerInit+0x74>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	4a15      	ldr	r2, [pc, #84]	@ (800cf90 <LmHandlerInit+0x8c>)
 800cf3c:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800cf3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf78 <LmHandlerInit+0x74>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	4a12      	ldr	r2, [pc, #72]	@ (800cf90 <LmHandlerInit+0x8c>)
 800cf46:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800cf48:	4b11      	ldr	r3, [pc, #68]	@ (800cf90 <LmHandlerInit+0x8c>)
 800cf4a:	4a12      	ldr	r2, [pc, #72]	@ (800cf94 <LmHandlerInit+0x90>)
 800cf4c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800cf4e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf78 <LmHandlerInit+0x74>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	4a0e      	ldr	r2, [pc, #56]	@ (800cf90 <LmHandlerInit+0x8c>)
 800cf56:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800cf58:	490f      	ldr	r1, [pc, #60]	@ (800cf98 <LmHandlerInit+0x94>)
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	f000 fcfc 	bl	800d958 <LmHandlerPackageRegister>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf6a:	e000      	b.n	800cf6e <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20002ed0 	.word	0x20002ed0
 800cf7c:	20002ed4 	.word	0x20002ed4
 800cf80:	0800d6ad 	.word	0x0800d6ad
 800cf84:	0800d715 	.word	0x0800d715
 800cf88:	0800d7f5 	.word	0x0800d7f5
 800cf8c:	0800d8b9 	.word	0x0800d8b9
 800cf90:	20002ee4 	.word	0x20002ee4
 800cf94:	0800dbc5 	.word	0x0800dbc5
 800cf98:	2000009c 	.word	0x2000009c

0800cf9c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800cf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf9e:	b099      	sub	sp, #100	@ 0x64
 800cfa0:	af08      	add	r7, sp, #32
 800cfa2:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800cfa8:	2210      	movs	r2, #16
 800cfaa:	6879      	ldr	r1, [r7, #4]
 800cfac:	4882      	ldr	r0, [pc, #520]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800cfae:	f00f f8f3 	bl	801c198 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800cfb2:	f7fc ff93 	bl	8009edc <LoraInfo_GetPtr>
 800cfb6:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800cfb8:	4b7f      	ldr	r3, [pc, #508]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	4093      	lsls	r3, r2
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	4013      	ands	r3, r2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00c      	beq.n	800cfe8 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800cfce:	4b7a      	ldr	r3, [pc, #488]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	4979      	ldr	r1, [pc, #484]	@ (800d1bc <LmHandlerConfigure+0x220>)
 800cfd6:	487a      	ldr	r0, [pc, #488]	@ (800d1c0 <LmHandlerConfigure+0x224>)
 800cfd8:	f004 fb24 	bl	8011624 <LoRaMacInitialization>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00a      	beq.n	800cff8 <LmHandlerConfigure+0x5c>
        {
            return LORAMAC_HANDLER_ERROR;
 800cfe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfe6:	e0e3      	b.n	800d1b0 <LmHandlerConfigure+0x214>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800cfe8:	4b76      	ldr	r3, [pc, #472]	@ (800d1c4 <LmHandlerConfigure+0x228>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	2100      	movs	r1, #0
 800cfee:	2000      	movs	r0, #0
 800cff0:	f00e fdea 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800cff4:	bf00      	nop
 800cff6:	e7fd      	b.n	800cff4 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800cff8:	f000 fdf5 	bl	800dbe6 <NvmDataMgmtRestore>
 800cffc:	4603      	mov	r3, r0
 800cffe:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800d000:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <LmHandlerConfigure+0x72>
    {
        CtxRestoreDone = true;
 800d006:	4b70      	ldr	r3, [pc, #448]	@ (800d1c8 <LmHandlerConfigure+0x22c>)
 800d008:	2201      	movs	r2, #1
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e002      	b.n	800d014 <LmHandlerConfigure+0x78>
    }
    else
    {
        CtxRestoreDone = false;
 800d00e:	4b6e      	ldr	r3, [pc, #440]	@ (800d1c8 <LmHandlerConfigure+0x22c>)
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d014:	2302      	movs	r3, #2
 800d016:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d018:	f107 0314 	add.w	r3, r7, #20
 800d01c:	4618      	mov	r0, r3
 800d01e:	f004 fe4b 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2208      	movs	r2, #8
 800d026:	4619      	mov	r1, r3
 800d028:	4868      	ldr	r0, [pc, #416]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d02a:	f00b fc78 	bl	801891e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d02e:	2303      	movs	r3, #3
 800d030:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d032:	f107 0314 	add.w	r3, r7, #20
 800d036:	4618      	mov	r0, r3
 800d038:	f004 fe3e 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	2208      	movs	r2, #8
 800d040:	4619      	mov	r1, r3
 800d042:	4863      	ldr	r0, [pc, #396]	@ (800d1d0 <LmHandlerConfigure+0x234>)
 800d044:	f00b fc6b 	bl	801891e <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d048:	4b62      	ldr	r3, [pc, #392]	@ (800d1d4 <LmHandlerConfigure+0x238>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	4798      	blx	r3
 800d050:	4603      	mov	r3, r0
 800d052:	4a5e      	ldr	r2, [pc, #376]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d054:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800d056:	2306      	movs	r3, #6
 800d058:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d05a:	4b5c      	ldr	r3, [pc, #368]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d060:	f107 0314 	add.w	r3, r7, #20
 800d064:	4618      	mov	r0, r3
 800d066:	f004 ff85 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d06a:	4b58      	ldr	r3, [pc, #352]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	4b56      	ldr	r3, [pc, #344]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	4619      	mov	r1, r3
 800d076:	4b55      	ldr	r3, [pc, #340]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d078:	789b      	ldrb	r3, [r3, #2]
 800d07a:	4618      	mov	r0, r3
 800d07c:	4b53      	ldr	r3, [pc, #332]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d07e:	78db      	ldrb	r3, [r3, #3]
 800d080:	461c      	mov	r4, r3
 800d082:	4b52      	ldr	r3, [pc, #328]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d084:	791b      	ldrb	r3, [r3, #4]
 800d086:	461d      	mov	r5, r3
 800d088:	4b50      	ldr	r3, [pc, #320]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d08a:	795b      	ldrb	r3, [r3, #5]
 800d08c:	461e      	mov	r6, r3
 800d08e:	4b4f      	ldr	r3, [pc, #316]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d090:	799b      	ldrb	r3, [r3, #6]
 800d092:	603b      	str	r3, [r7, #0]
 800d094:	4b4d      	ldr	r3, [pc, #308]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d096:	79db      	ldrb	r3, [r3, #7]
 800d098:	9307      	str	r3, [sp, #28]
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	9306      	str	r3, [sp, #24]
 800d09e:	9605      	str	r6, [sp, #20]
 800d0a0:	9504      	str	r5, [sp, #16]
 800d0a2:	9403      	str	r4, [sp, #12]
 800d0a4:	9002      	str	r0, [sp, #8]
 800d0a6:	9101      	str	r1, [sp, #4]
 800d0a8:	9200      	str	r2, [sp, #0]
 800d0aa:	4b4b      	ldr	r3, [pc, #300]	@ (800d1d8 <LmHandlerConfigure+0x23c>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	2002      	movs	r0, #2
 800d0b2:	f00e fd89 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800d0b6:	4b45      	ldr	r3, [pc, #276]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0b8:	7a1b      	ldrb	r3, [r3, #8]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4b43      	ldr	r3, [pc, #268]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0be:	7a5b      	ldrb	r3, [r3, #9]
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4b42      	ldr	r3, [pc, #264]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0c4:	7a9b      	ldrb	r3, [r3, #10]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	4b40      	ldr	r3, [pc, #256]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0ca:	7adb      	ldrb	r3, [r3, #11]
 800d0cc:	461c      	mov	r4, r3
 800d0ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0d0:	7b1b      	ldrb	r3, [r3, #12]
 800d0d2:	461d      	mov	r5, r3
 800d0d4:	4b3d      	ldr	r3, [pc, #244]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0d6:	7b5b      	ldrb	r3, [r3, #13]
 800d0d8:	461e      	mov	r6, r3
 800d0da:	4b3c      	ldr	r3, [pc, #240]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0dc:	7b9b      	ldrb	r3, [r3, #14]
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	4b3a      	ldr	r3, [pc, #232]	@ (800d1cc <LmHandlerConfigure+0x230>)
 800d0e2:	7bdb      	ldrb	r3, [r3, #15]
 800d0e4:	9307      	str	r3, [sp, #28]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	9306      	str	r3, [sp, #24]
 800d0ea:	9605      	str	r6, [sp, #20]
 800d0ec:	9504      	str	r5, [sp, #16]
 800d0ee:	9403      	str	r4, [sp, #12]
 800d0f0:	9002      	str	r0, [sp, #8]
 800d0f2:	9101      	str	r1, [sp, #4]
 800d0f4:	9200      	str	r2, [sp, #0]
 800d0f6:	4b39      	ldr	r3, [pc, #228]	@ (800d1dc <LmHandlerConfigure+0x240>)
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	2002      	movs	r0, #2
 800d0fe:	f00e fd63 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800d102:	4b37      	ldr	r3, [pc, #220]	@ (800d1e0 <LmHandlerConfigure+0x244>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	4b36      	ldr	r3, [pc, #216]	@ (800d1e4 <LmHandlerConfigure+0x248>)
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	4619      	mov	r1, r3
 800d10e:	4b36      	ldr	r3, [pc, #216]	@ (800d1e8 <LmHandlerConfigure+0x24c>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	4b35      	ldr	r3, [pc, #212]	@ (800d1ec <LmHandlerConfigure+0x250>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	9303      	str	r3, [sp, #12]
 800d11a:	9002      	str	r0, [sp, #8]
 800d11c:	9101      	str	r1, [sp, #4]
 800d11e:	9200      	str	r2, [sp, #0]
 800d120:	4b33      	ldr	r3, [pc, #204]	@ (800d1f0 <LmHandlerConfigure+0x254>)
 800d122:	2200      	movs	r2, #0
 800d124:	2100      	movs	r1, #0
 800d126:	2002      	movs	r0, #2
 800d128:	f00e fd4e 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d12c:	230f      	movs	r3, #15
 800d12e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d130:	2301      	movs	r3, #1
 800d132:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d134:	f107 0314 	add.w	r3, r7, #20
 800d138:	4618      	mov	r0, r3
 800d13a:	f004 ff1b 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800d13e:	2305      	movs	r3, #5
 800d140:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d142:	2300      	movs	r3, #0
 800d144:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d146:	f107 0314 	add.w	r3, r7, #20
 800d14a:	4618      	mov	r0, r3
 800d14c:	f004 ff12 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d150:	2310      	movs	r3, #16
 800d152:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d154:	2300      	movs	r3, #0
 800d156:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d158:	f107 0314 	add.w	r3, r7, #20
 800d15c:	4618      	mov	r0, r3
 800d15e:	f004 ff09 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d162:	2304      	movs	r3, #4
 800d164:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d166:	4b14      	ldr	r3, [pc, #80]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800d168:	789b      	ldrb	r3, [r3, #2]
 800d16a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d16c:	f107 0314 	add.w	r3, r7, #20
 800d170:	4618      	mov	r0, r3
 800d172:	f004 feff 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d176:	230f      	movs	r3, #15
 800d178:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d17a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	f107 020c 	add.w	r2, r7, #12
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f007 fd00 	bl	8014b8a <RegionGetPhyParam>
 800d18a:	4603      	mov	r3, r0
 800d18c:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	bf14      	ite	ne
 800d194:	2301      	movne	r3, #1
 800d196:	2300      	moveq	r3, #0
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	4b07      	ldr	r3, [pc, #28]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800d19c:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800d19e:	2014      	movs	r0, #20
 800d1a0:	f000 fa6c 	bl	800d67c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d1a4:	4b04      	ldr	r3, [pc, #16]	@ (800d1b8 <LmHandlerConfigure+0x21c>)
 800d1a6:	795b      	ldrb	r3, [r3, #5]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f005 fc57 	bl	8012a5c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3744      	adds	r7, #68	@ 0x44
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1b8:	20002ec0 	.word	0x20002ec0
 800d1bc:	20002ee4 	.word	0x20002ee4
 800d1c0:	20002ed4 	.word	0x20002ed4
 800d1c4:	0801d830 	.word	0x0801d830
 800d1c8:	20003002 	.word	0x20003002
 800d1cc:	20000084 	.word	0x20000084
 800d1d0:	2000008c 	.word	0x2000008c
 800d1d4:	20002ed0 	.word	0x20002ed0
 800d1d8:	0801d87c 	.word	0x0801d87c
 800d1dc:	0801d8b8 	.word	0x0801d8b8
 800d1e0:	2000009b 	.word	0x2000009b
 800d1e4:	2000009a 	.word	0x2000009a
 800d1e8:	20000099 	.word	0x20000099
 800d1ec:	20000098 	.word	0x20000098
 800d1f0:	0801d8f4 	.word	0x0801d8f4

0800d1f4 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d1f8:	f002 f9b4 	bl	800f564 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d1fc:	f000 fc96 	bl	800db2c <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800d200:	f000 fcea 	bl	800dbd8 <NvmDataMgmtStore>
}
 800d204:	bf00      	nop
 800d206:	bd80      	pop	{r7, pc}

0800d208 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b090      	sub	sp, #64	@ 0x40
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d111      	bne.n	800d23c <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d218:	4b23      	ldr	r3, [pc, #140]	@ (800d2a8 <LmHandlerJoin+0xa0>)
 800d21a:	2202      	movs	r2, #2
 800d21c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800d21e:	f004 fcb5 	bl	8011b8c <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800d222:	2301      	movs	r3, #1
 800d224:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d226:	4b21      	ldr	r3, [pc, #132]	@ (800d2ac <LmHandlerJoin+0xa4>)
 800d228:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4618      	mov	r0, r3
 800d236:	f005 f9db 	bl	80125f0 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800d23a:	e030      	b.n	800d29e <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d23c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2a8 <LmHandlerJoin+0xa0>)
 800d23e:	2201      	movs	r2, #1
 800d240:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d242:	4b1a      	ldr	r3, [pc, #104]	@ (800d2ac <LmHandlerJoin+0xa4>)
 800d244:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d248:	4b17      	ldr	r3, [pc, #92]	@ (800d2a8 <LmHandlerJoin+0xa0>)
 800d24a:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d24c:	4b16      	ldr	r3, [pc, #88]	@ (800d2a8 <LmHandlerJoin+0xa0>)
 800d24e:	2200      	movs	r2, #0
 800d250:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800d252:	4b17      	ldr	r3, [pc, #92]	@ (800d2b0 <LmHandlerJoin+0xa8>)
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	f083 0301 	eor.w	r3, r3, #1
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d008      	beq.n	800d272 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d260:	2327      	movs	r3, #39	@ 0x27
 800d262:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d264:	4b13      	ldr	r3, [pc, #76]	@ (800d2b4 <LmHandlerJoin+0xac>)
 800d266:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d268:	f107 031c 	add.w	r3, r7, #28
 800d26c:	4618      	mov	r0, r3
 800d26e:	f004 fe81 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d272:	f004 fc8b 	bl	8011b8c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d276:	2301      	movs	r3, #1
 800d278:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d27a:	2301      	movs	r3, #1
 800d27c:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d280:	f107 031c 	add.w	r3, r7, #28
 800d284:	4618      	mov	r0, r3
 800d286:	f004 fe75 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d28a:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b8 <LmHandlerJoin+0xb0>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	69db      	ldr	r3, [r3, #28]
 800d290:	4805      	ldr	r0, [pc, #20]	@ (800d2a8 <LmHandlerJoin+0xa0>)
 800d292:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d294:	4b05      	ldr	r3, [pc, #20]	@ (800d2ac <LmHandlerJoin+0xa4>)
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f917 	bl	800d4cc <LmHandlerRequestClass>
}
 800d29e:	bf00      	nop
 800d2a0:	3740      	adds	r7, #64	@ 0x40
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	200000a8 	.word	0x200000a8
 800d2ac:	20002ec0 	.word	0x20002ec0
 800d2b0:	20003002 	.word	0x20003002
 800d2b4:	01000300 	.word	0x01000300
 800d2b8:	20002ed0 	.word	0x20002ed0

0800d2bc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	@ 0x28
 800d2c0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d2c6:	463b      	mov	r3, r7
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f004 fcf5 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800d2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d106      	bne.n	800d2ea <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d2dc:	793b      	ldrb	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	e002      	b.n	800d2ec <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e000      	b.n	800d2ec <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d2ea:	2300      	movs	r3, #0
    }
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3728      	adds	r7, #40	@ 0x28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08c      	sub	sp, #48	@ 0x30
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	461a      	mov	r2, r3
 800d300:	460b      	mov	r3, r1
 800d302:	72fb      	strb	r3, [r7, #11]
 800d304:	4613      	mov	r3, r2
 800d306:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d308:	23ff      	movs	r3, #255	@ 0xff
 800d30a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d30e:	f001 fe93 	bl	800f038 <LoRaMacIsBusy>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d318:	f06f 0301 	mvn.w	r3, #1
 800d31c:	e0b4      	b.n	800d488 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d31e:	f7ff ffcd 	bl	800d2bc <LmHandlerJoinStatus>
 800d322:	4603      	mov	r3, r0
 800d324:	2b01      	cmp	r3, #1
 800d326:	d007      	beq.n	800d338 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800d328:	4b59      	ldr	r3, [pc, #356]	@ (800d490 <LmHandlerSend+0x19c>)
 800d32a:	789b      	ldrb	r3, [r3, #2]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff ff6b 	bl	800d208 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d332:	f06f 0302 	mvn.w	r3, #2
 800d336:	e0a7      	b.n	800d488 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800d338:	4b56      	ldr	r3, [pc, #344]	@ (800d494 <LmHandlerSend+0x1a0>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	4798      	blx	r3
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00d      	beq.n	800d362 <LmHandlerSend+0x6e>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	781a      	ldrb	r2, [r3, #0]
 800d34a:	4b52      	ldr	r3, [pc, #328]	@ (800d494 <LmHandlerSend+0x1a0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d006      	beq.n	800d362 <LmHandlerSend+0x6e>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d35c:	f06f 0303 	mvn.w	r3, #3
 800d360:	e092      	b.n	800d488 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d362:	4b4d      	ldr	r3, [pc, #308]	@ (800d498 <LmHandlerSend+0x1a4>)
 800d364:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	785b      	ldrb	r3, [r3, #1]
 800d370:	f107 0214 	add.w	r2, r7, #20
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f004 fc16 	bl	8011ba8 <LoRaMacQueryTxPossible>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d009      	beq.n	800d396 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d382:	4b46      	ldr	r3, [pc, #280]	@ (800d49c <LmHandlerSend+0x1a8>)
 800d384:	2200      	movs	r2, #0
 800d386:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d388:	2300      	movs	r3, #0
 800d38a:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d38c:	2300      	movs	r3, #0
 800d38e:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d394:	e016      	b.n	800d3c4 <LmHandlerSend+0xd0>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800d396:	4a41      	ldr	r2, [pc, #260]	@ (800d49c <LmHandlerSend+0x1a8>)
 800d398:	7afb      	ldrb	r3, [r7, #11]
 800d39a:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	785b      	ldrb	r3, [r3, #1]
 800d3a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800d3ae:	7afb      	ldrb	r3, [r7, #11]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d102      	bne.n	800d3ba <LmHandlerSend+0xc6>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	763b      	strb	r3, [r7, #24]
 800d3b8:	e004      	b.n	800d3c4 <LmHandlerSend+0xd0>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800d3be:	2308      	movs	r3, #8
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    TxParams.AppData = *appData;
 800d3c4:	4b35      	ldr	r3, [pc, #212]	@ (800d49c <LmHandlerSend+0x1a8>)
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	330c      	adds	r3, #12
 800d3ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3ce:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d3d2:	4b31      	ldr	r3, [pc, #196]	@ (800d498 <LmHandlerSend+0x1a4>)
 800d3d4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d3d8:	4b30      	ldr	r3, [pc, #192]	@ (800d49c <LmHandlerSend+0x1a8>)
 800d3da:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d3dc:	7aba      	ldrb	r2, [r7, #10]
 800d3de:	f107 0318 	add.w	r3, r7, #24
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f005 fa43 	bl	8012870 <LoRaMacMcpsRequest>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (nextTxIn != NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <LmHandlerSend+0x108>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d3f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800d3fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d400:	2b11      	cmp	r3, #17
 800d402:	d83b      	bhi.n	800d47c <LmHandlerSend+0x188>
 800d404:	a201      	add	r2, pc, #4	@ (adr r2, 800d40c <LmHandlerSend+0x118>)
 800d406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40a:	bf00      	nop
 800d40c:	0800d455 	.word	0x0800d455
 800d410:	0800d45d 	.word	0x0800d45d
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d47d 	.word	0x0800d47d
 800d41c:	0800d47d 	.word	0x0800d47d
 800d420:	0800d47d 	.word	0x0800d47d
 800d424:	0800d47d 	.word	0x0800d47d
 800d428:	0800d465 	.word	0x0800d465
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d47d 	.word	0x0800d47d
 800d434:	0800d47d 	.word	0x0800d47d
 800d438:	0800d475 	.word	0x0800d475
 800d43c:	0800d47d 	.word	0x0800d47d
 800d440:	0800d47d 	.word	0x0800d47d
 800d444:	0800d45d 	.word	0x0800d45d
 800d448:	0800d45d 	.word	0x0800d45d
 800d44c:	0800d45d 	.word	0x0800d45d
 800d450:	0800d46d 	.word	0x0800d46d
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d454:	2300      	movs	r3, #0
 800d456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d45a:	e013      	b.n	800d484 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d45c:	23fe      	movs	r3, #254	@ 0xfe
 800d45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d462:	e00f      	b.n	800d484 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d464:	23fd      	movs	r3, #253	@ 0xfd
 800d466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d46a:	e00b      	b.n	800d484 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d46c:	23fb      	movs	r3, #251	@ 0xfb
 800d46e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d472:	e007      	b.n	800d484 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d474:	23fa      	movs	r3, #250	@ 0xfa
 800d476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d47a:	e003      	b.n	800d484 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d47c:	23ff      	movs	r3, #255	@ 0xff
 800d47e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d482:	bf00      	nop
    }

    return lmhStatus;
 800d484:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3730      	adds	r7, #48	@ 0x30
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	200000a8 	.word	0x200000a8
 800d494:	20002eac 	.word	0x20002eac
 800d498:	20002ec0 	.word	0x20002ec0
 800d49c:	20002ef8 	.word	0x20002ef8

0800d4a0 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d4a6:	230a      	movs	r3, #10
 800d4a8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f005 f89f 	bl	80125f0 <LoRaMacMlmeRequest>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e001      	b.n	800d4c4 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d4c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08c      	sub	sp, #48	@ 0x30
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800d4dc:	f001 fdac 	bl	800f038 <LoRaMacIsBusy>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d002      	beq.n	800d4ec <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d4e6:	f06f 0301 	mvn.w	r3, #1
 800d4ea:	e079      	b.n	800d5e0 <LmHandlerRequestClass+0x114>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d4ec:	f7ff fee6 	bl	800d2bc <LmHandlerJoinStatus>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d002      	beq.n	800d4fc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d4f6:	f06f 0302 	mvn.w	r3, #2
 800d4fa:	e071      	b.n	800d5e0 <LmHandlerRequestClass+0x114>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d500:	f107 0308 	add.w	r3, r7, #8
 800d504:	4618      	mov	r0, r3
 800d506:	f004 fbd7 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d514:	e064      	b.n	800d5e0 <LmHandlerRequestClass+0x114>
    }
    currentClass = mibReq.Param.Class;
 800d516:	7b3b      	ldrb	r3, [r7, #12]
 800d518:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800d51c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	429a      	cmp	r2, r3
 800d524:	d05a      	beq.n	800d5dc <LmHandlerRequestClass+0x110>
    {
        switch( newClass )
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d02c      	beq.n	800d586 <LmHandlerRequestClass+0xba>
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	dc50      	bgt.n	800d5d2 <LmHandlerRequestClass+0x106>
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <LmHandlerRequestClass+0x6e>
 800d534:	2b01      	cmp	r3, #1
 800d536:	d022      	beq.n	800d57e <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800d538:	e04b      	b.n	800d5d2 <LmHandlerRequestClass+0x106>
                if( currentClass != CLASS_A )
 800d53a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d049      	beq.n	800d5d6 <LmHandlerRequestClass+0x10a>
                    mibReq.Param.Class = newClass;
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d546:	f107 0308 	add.w	r3, r7, #8
 800d54a:	4618      	mov	r0, r3
 800d54c:	f004 fd12 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10f      	bne.n	800d576 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 fb1b 	bl	800db94 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d55e:	4b22      	ldr	r3, [pc, #136]	@ (800d5e8 <LmHandlerRequestClass+0x11c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d564:	2b00      	cmp	r3, #0
 800d566:	d036      	beq.n	800d5d6 <LmHandlerRequestClass+0x10a>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d568:	4b1f      	ldr	r3, [pc, #124]	@ (800d5e8 <LmHandlerRequestClass+0x11c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56e:	79fa      	ldrb	r2, [r7, #7]
 800d570:	4610      	mov	r0, r2
 800d572:	4798      	blx	r3
            break;
 800d574:	e02f      	b.n	800d5d6 <LmHandlerRequestClass+0x10a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d576:	23ff      	movs	r3, #255	@ 0xff
 800d578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d57c:	e02b      	b.n	800d5d6 <LmHandlerRequestClass+0x10a>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d57e:	23ff      	movs	r3, #255	@ 0xff
 800d580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d584:	e02a      	b.n	800d5dc <LmHandlerRequestClass+0x110>
                if( currentClass != CLASS_A )
 800d586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d58e:	23ff      	movs	r3, #255	@ 0xff
 800d590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d594:	e021      	b.n	800d5da <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d59a:	f107 0308 	add.w	r3, r7, #8
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f004 fce8 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10f      	bne.n	800d5ca <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 faf1 	bl	800db94 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d5e8 <LmHandlerRequestClass+0x11c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00e      	beq.n	800d5da <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e8 <LmHandlerRequestClass+0x11c>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c2:	79fa      	ldrb	r2, [r7, #7]
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4798      	blx	r3
            break;
 800d5c8:	e007      	b.n	800d5da <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d5ca:	23ff      	movs	r3, #255	@ 0xff
 800d5cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d5d0:	e003      	b.n	800d5da <LmHandlerRequestClass+0x10e>
            break;
 800d5d2:	bf00      	nop
 800d5d4:	e002      	b.n	800d5dc <LmHandlerRequestClass+0x110>
            break;
 800d5d6:	bf00      	nop
 800d5d8:	e000      	b.n	800d5dc <LmHandlerRequestClass+0x110>
            break;
 800d5da:	bf00      	nop
        }
    }
    return errorStatus;
 800d5dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3730      	adds	r7, #48	@ 0x30
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	20002ed0 	.word	0x20002ed0

0800d5ec <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08c      	sub	sp, #48	@ 0x30
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d102      	bne.n	800d600 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d5fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5fe:	e010      	b.n	800d622 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d600:	2300      	movs	r3, #0
 800d602:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d604:	f107 030c 	add.w	r3, r7, #12
 800d608:	4618      	mov	r0, r3
 800d60a:	f004 fb55 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d618:	e003      	b.n	800d622 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d61a:	7c3a      	ldrb	r2, [r7, #16]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3730      	adds	r7, #48	@ 0x30
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
	...

0800d62c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08c      	sub	sp, #48	@ 0x30
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d63a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d63e:	e016      	b.n	800d66e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d640:	231f      	movs	r3, #31
 800d642:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d644:	f107 030c 	add.w	r3, r7, #12
 800d648:	4618      	mov	r0, r3
 800d64a:	f004 fb35 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d658:	e009      	b.n	800d66e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d65a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f993 2000 	ldrsb.w	r2, [r3]
 800d668:	4b03      	ldr	r3, [pc, #12]	@ (800d678 <LmHandlerGetTxDatarate+0x4c>)
 800d66a:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3730      	adds	r7, #48	@ 0x30
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20002ec0 	.word	0x20002ec0

0800d67c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08c      	sub	sp, #48	@ 0x30
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d684:	2322      	movs	r3, #34	@ 0x22
 800d686:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d68c:	f107 030c 	add.w	r3, r7, #12
 800d690:	4618      	mov	r0, r3
 800d692:	f004 fc6f 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6a0:	e000      	b.n	800d6a4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3730      	adds	r7, #48	@ 0x30
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d6b4:	4b15      	ldr	r3, [pc, #84]	@ (800d70c <McpsConfirm+0x60>)
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	785a      	ldrb	r2, [r3, #1]
 800d6be:	4b13      	ldr	r3, [pc, #76]	@ (800d70c <McpsConfirm+0x60>)
 800d6c0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	789b      	ldrb	r3, [r3, #2]
 800d6c6:	b25a      	sxtb	r2, r3
 800d6c8:	4b10      	ldr	r3, [pc, #64]	@ (800d70c <McpsConfirm+0x60>)
 800d6ca:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	4a0e      	ldr	r2, [pc, #56]	@ (800d70c <McpsConfirm+0x60>)
 800d6d2:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d6da:	4b0c      	ldr	r3, [pc, #48]	@ (800d70c <McpsConfirm+0x60>)
 800d6dc:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	4b09      	ldr	r3, [pc, #36]	@ (800d70c <McpsConfirm+0x60>)
 800d6e6:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	791b      	ldrb	r3, [r3, #4]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b07      	ldr	r3, [pc, #28]	@ (800d70c <McpsConfirm+0x60>)
 800d6f0:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800d6f2:	4b07      	ldr	r3, [pc, #28]	@ (800d710 <McpsConfirm+0x64>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	4804      	ldr	r0, [pc, #16]	@ (800d70c <McpsConfirm+0x60>)
 800d6fa:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d6fc:	6879      	ldr	r1, [r7, #4]
 800d6fe:	2000      	movs	r0, #0
 800d700:	f000 f99a 	bl	800da38 <LmHandlerPackagesNotify>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20002ef8 	.word	0x20002ef8
 800d710:	20002ed0 	.word	0x20002ed0

0800d714 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b088      	sub	sp, #32
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d71e:	2300      	movs	r3, #0
 800d720:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800d722:	4b32      	ldr	r3, [pc, #200]	@ (800d7ec <McpsIndication+0xd8>)
 800d724:	2201      	movs	r2, #1
 800d726:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	785a      	ldrb	r2, [r3, #1]
 800d72c:	4b2f      	ldr	r3, [pc, #188]	@ (800d7ec <McpsIndication+0xd8>)
 800d72e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d730:	4b2e      	ldr	r3, [pc, #184]	@ (800d7ec <McpsIndication+0xd8>)
 800d732:	785b      	ldrb	r3, [r3, #1]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d154      	bne.n	800d7e2 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	791b      	ldrb	r3, [r3, #4]
 800d73c:	b25a      	sxtb	r2, r3
 800d73e:	4b2b      	ldr	r3, [pc, #172]	@ (800d7ec <McpsIndication+0xd8>)
 800d740:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d748:	b25a      	sxtb	r2, r3
 800d74a:	4b28      	ldr	r3, [pc, #160]	@ (800d7ec <McpsIndication+0xd8>)
 800d74c:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d754:	4b25      	ldr	r3, [pc, #148]	@ (800d7ec <McpsIndication+0xd8>)
 800d756:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	78db      	ldrb	r3, [r3, #3]
 800d75c:	b25a      	sxtb	r2, r3
 800d75e:	4b23      	ldr	r3, [pc, #140]	@ (800d7ec <McpsIndication+0xd8>)
 800d760:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	4a21      	ldr	r2, [pc, #132]	@ (800d7ec <McpsIndication+0xd8>)
 800d768:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	78db      	ldrb	r3, [r3, #3]
 800d76e:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	7b1b      	ldrb	r3, [r3, #12]
 800d774:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800d77c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7f0 <McpsIndication+0xdc>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d782:	f107 0218 	add.w	r2, r7, #24
 800d786:	4919      	ldr	r1, [pc, #100]	@ (800d7ec <McpsIndication+0xd8>)
 800d788:	4610      	mov	r0, r2
 800d78a:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d78c:	4b18      	ldr	r3, [pc, #96]	@ (800d7f0 <McpsIndication+0xdc>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d792:	2b00      	cmp	r3, #0
 800d794:	d007      	beq.n	800d7a6 <McpsIndication+0x92>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	7e1b      	ldrb	r3, [r3, #24]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d003      	beq.n	800d7a6 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d79e:	4b14      	ldr	r3, [pc, #80]	@ (800d7f0 <McpsIndication+0xdc>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a4:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f000 f945 	bl	800da38 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800d7ae:	f107 0317 	add.w	r3, r7, #23
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff ff1a 	bl	800d5ec <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	795b      	ldrb	r3, [r3, #5]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d111      	bne.n	800d7e4 <McpsIndication+0xd0>
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10e      	bne.n	800d7e4 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	733b      	strb	r3, [r7, #12]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	737b      	strb	r3, [r7, #13]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800d7d2:	f107 000c 	add.w	r0, r7, #12
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2100      	movs	r1, #0
 800d7dc:	f7ff fd8a 	bl	800d2f4 <LmHandlerSend>
 800d7e0:	e000      	b.n	800d7e4 <McpsIndication+0xd0>
        return;
 800d7e2:	bf00      	nop
    }
}
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	200000ac 	.word	0x200000ac
 800d7f0:	20002ed0 	.word	0x20002ed0

0800d7f4 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b08c      	sub	sp, #48	@ 0x30
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d7fc:	4b28      	ldr	r3, [pc, #160]	@ (800d8a0 <MlmeConfirm+0xac>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	785a      	ldrb	r2, [r3, #1]
 800d806:	4b26      	ldr	r3, [pc, #152]	@ (800d8a0 <MlmeConfirm+0xac>)
 800d808:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d80a:	4b26      	ldr	r3, [pc, #152]	@ (800d8a4 <MlmeConfirm+0xb0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	4823      	ldr	r0, [pc, #140]	@ (800d8a0 <MlmeConfirm+0xac>)
 800d812:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d814:	6879      	ldr	r1, [r7, #4]
 800d816:	2002      	movs	r0, #2
 800d818:	f000 f90e 	bl	800da38 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b0a      	cmp	r3, #10
 800d822:	d035      	beq.n	800d890 <MlmeConfirm+0x9c>
 800d824:	2b0a      	cmp	r3, #10
 800d826:	dc35      	bgt.n	800d894 <MlmeConfirm+0xa0>
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d002      	beq.n	800d832 <MlmeConfirm+0x3e>
 800d82c:	2b04      	cmp	r3, #4
 800d82e:	d023      	beq.n	800d878 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800d830:	e030      	b.n	800d894 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800d832:	2306      	movs	r3, #6
 800d834:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d836:	f107 030c 	add.w	r3, r7, #12
 800d83a:	4618      	mov	r0, r3
 800d83c:	f004 fa3c 	bl	8011cb8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	4a19      	ldr	r2, [pc, #100]	@ (800d8a8 <MlmeConfirm+0xb4>)
 800d844:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d846:	4819      	ldr	r0, [pc, #100]	@ (800d8ac <MlmeConfirm+0xb8>)
 800d848:	f7ff fef0 	bl	800d62c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	785b      	ldrb	r3, [r3, #1]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d108      	bne.n	800d866 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d854:	4b15      	ldr	r3, [pc, #84]	@ (800d8ac <MlmeConfirm+0xb8>)
 800d856:	2200      	movs	r2, #0
 800d858:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d85a:	4b15      	ldr	r3, [pc, #84]	@ (800d8b0 <MlmeConfirm+0xbc>)
 800d85c:	785b      	ldrb	r3, [r3, #1]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff fe34 	bl	800d4cc <LmHandlerRequestClass>
 800d864:	e002      	b.n	800d86c <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d866:	4b11      	ldr	r3, [pc, #68]	@ (800d8ac <MlmeConfirm+0xb8>)
 800d868:	22ff      	movs	r2, #255	@ 0xff
 800d86a:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d86c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a4 <MlmeConfirm+0xb0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	480e      	ldr	r0, [pc, #56]	@ (800d8ac <MlmeConfirm+0xb8>)
 800d874:	4798      	blx	r3
        break;
 800d876:	e00e      	b.n	800d896 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800d878:	4b0e      	ldr	r3, [pc, #56]	@ (800d8b4 <MlmeConfirm+0xc0>)
 800d87a:	2201      	movs	r2, #1
 800d87c:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	7a1a      	ldrb	r2, [r3, #8]
 800d882:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b4 <MlmeConfirm+0xc0>)
 800d884:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7a5a      	ldrb	r2, [r3, #9]
 800d88a:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <MlmeConfirm+0xc0>)
 800d88c:	73da      	strb	r2, [r3, #15]
        break;
 800d88e:	e002      	b.n	800d896 <MlmeConfirm+0xa2>
        break;
 800d890:	bf00      	nop
 800d892:	e000      	b.n	800d896 <MlmeConfirm+0xa2>
        break;
 800d894:	bf00      	nop
    }
}
 800d896:	bf00      	nop
 800d898:	3730      	adds	r7, #48	@ 0x30
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20002ef8 	.word	0x20002ef8
 800d8a4:	20002ed0 	.word	0x20002ed0
 800d8a8:	20000084 	.word	0x20000084
 800d8ac:	200000a8 	.word	0x200000a8
 800d8b0:	20002ec0 	.word	0x20002ec0
 800d8b4:	200000ac 	.word	0x200000ac

0800d8b8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d8c2:	4b22      	ldr	r3, [pc, #136]	@ (800d94c <MlmeIndication+0x94>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	785a      	ldrb	r2, [r3, #1]
 800d8cc:	4b1f      	ldr	r3, [pc, #124]	@ (800d94c <MlmeIndication+0x94>)
 800d8ce:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d8d6:	b25a      	sxtb	r2, r3
 800d8d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d94c <MlmeIndication+0x94>)
 800d8da:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d8e2:	4b1a      	ldr	r3, [pc, #104]	@ (800d94c <MlmeIndication+0x94>)
 800d8e4:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	78db      	ldrb	r3, [r3, #3]
 800d8ea:	b25a      	sxtb	r2, r3
 800d8ec:	4b17      	ldr	r3, [pc, #92]	@ (800d94c <MlmeIndication+0x94>)
 800d8ee:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800d8f0:	4b16      	ldr	r3, [pc, #88]	@ (800d94c <MlmeIndication+0x94>)
 800d8f2:	785b      	ldrb	r3, [r3, #1]
 800d8f4:	2b0e      	cmp	r3, #14
 800d8f6:	d005      	beq.n	800d904 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d8f8:	4b15      	ldr	r3, [pc, #84]	@ (800d950 <MlmeIndication+0x98>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fe:	4913      	ldr	r1, [pc, #76]	@ (800d94c <MlmeIndication+0x94>)
 800d900:	2000      	movs	r0, #0
 800d902:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b07      	cmp	r3, #7
 800d90a:	d117      	bne.n	800d93c <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800d90c:	2300      	movs	r3, #0
 800d90e:	723b      	strb	r3, [r7, #8]
 800d910:	2300      	movs	r3, #0
 800d912:	727b      	strb	r3, [r7, #9]
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800d918:	4b0e      	ldr	r3, [pc, #56]	@ (800d954 <MlmeIndication+0x9c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	4798      	blx	r3
 800d920:	4603      	mov	r3, r0
 800d922:	f083 0301 	eor.w	r3, r3, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d009      	beq.n	800d940 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800d92c:	f107 0008 	add.w	r0, r7, #8
 800d930:	2301      	movs	r3, #1
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	f7ff fcdd 	bl	800d2f4 <LmHandlerSend>
            }
        }
        break;
 800d93a:	e001      	b.n	800d940 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800d93c:	bf00      	nop
 800d93e:	e000      	b.n	800d942 <MlmeIndication+0x8a>
        break;
 800d940:	bf00      	nop
    }
}
 800d942:	bf00      	nop
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	200000ac 	.word	0x200000ac
 800d950:	20002ed0 	.word	0x20002ed0
 800d954:	20002eac 	.word	0x20002eac

0800d958 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	6039      	str	r1, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d964:	2300      	movs	r3, #0
 800d966:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d968:	79fb      	ldrb	r3, [r7, #7]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d103      	bne.n	800d976 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d96e:	f000 f941 	bl	800dbf4 <LmhpCompliancePackageFactory>
 800d972:	60f8      	str	r0, [r7, #12]
            break;
 800d974:	e000      	b.n	800d978 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d976:	bf00      	nop
        }
    }
    if( package != NULL )
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d02b      	beq.n	800d9d6 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	4918      	ldr	r1, [pc, #96]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d982:	68fa      	ldr	r2, [r7, #12]
 800d984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d988:	79fb      	ldrb	r3, [r7, #7]
 800d98a:	4a16      	ldr	r2, [pc, #88]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d990:	4a15      	ldr	r2, [pc, #84]	@ (800d9e8 <LmHandlerPackageRegister+0x90>)
 800d992:	625a      	str	r2, [r3, #36]	@ 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d994:	79fb      	ldrb	r3, [r7, #7]
 800d996:	4a13      	ldr	r2, [pc, #76]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d99c:	4a13      	ldr	r2, [pc, #76]	@ (800d9ec <LmHandlerPackageRegister+0x94>)
 800d99e:	629a      	str	r2, [r3, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	4a10      	ldr	r2, [pc, #64]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9a8:	4a11      	ldr	r2, [pc, #68]	@ (800d9f0 <LmHandlerPackageRegister+0x98>)
 800d9aa:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d9ac:	4b11      	ldr	r3, [pc, #68]	@ (800d9f4 <LmHandlerPackageRegister+0x9c>)
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	490c      	ldr	r1, [pc, #48]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d9b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d9b8:	6912      	ldr	r2, [r2, #16]
 800d9ba:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	4a09      	ldr	r2, [pc, #36]	@ (800d9e4 <LmHandlerPackageRegister+0x8c>)
 800d9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d9f8 <LmHandlerPackageRegister+0xa0>)
 800d9c8:	6851      	ldr	r1, [r2, #4]
 800d9ca:	4a0b      	ldr	r2, [pc, #44]	@ (800d9f8 <LmHandlerPackageRegister+0xa0>)
 800d9cc:	7852      	ldrb	r2, [r2, #1]
 800d9ce:	6838      	ldr	r0, [r7, #0]
 800d9d0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e001      	b.n	800d9da <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d9d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    }
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	20002eac 	.word	0x20002eac
 800d9e8:	0800d209 	.word	0x0800d209
 800d9ec:	0800d2f5 	.word	0x0800d2f5
 800d9f0:	0800d4a1 	.word	0x0800d4a1
 800d9f4:	20002ed0 	.word	0x20002ed0
 800d9f8:	200000bc 	.word	0x200000bc

0800d9fc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d80e      	bhi.n	800da2a <LmHandlerPackageIsInitialized+0x2e>
 800da0c:	79fb      	ldrb	r3, [r7, #7]
 800da0e:	4a09      	ldr	r2, [pc, #36]	@ (800da34 <LmHandlerPackageIsInitialized+0x38>)
 800da10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d007      	beq.n	800da2a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	4a05      	ldr	r2, [pc, #20]	@ (800da34 <LmHandlerPackageIsInitialized+0x38>)
 800da1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	4798      	blx	r3
 800da26:	4603      	mov	r3, r0
 800da28:	e000      	b.n	800da2c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800da2a:	2300      	movs	r3, #0
    }
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20002eac 	.word	0x20002eac

0800da38 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]
 800da48:	e065      	b.n	800db16 <LmHandlerPackagesNotify+0xde>
    {
        if( LmHandlerPackages[i] != NULL )
 800da4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da4e:	4a36      	ldr	r2, [pc, #216]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800da50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d058      	beq.n	800db0a <LmHandlerPackagesNotify+0xd2>
        {
            switch( notifyType )
 800da58:	79fb      	ldrb	r3, [r7, #7]
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d03d      	beq.n	800dada <LmHandlerPackagesNotify+0xa2>
 800da5e:	2b02      	cmp	r3, #2
 800da60:	dc4c      	bgt.n	800dafc <LmHandlerPackagesNotify+0xc4>
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <LmHandlerPackagesNotify+0x34>
 800da66:	2b01      	cmp	r3, #1
 800da68:	d011      	beq.n	800da8e <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800da6a:	e047      	b.n	800dafc <LmHandlerPackagesNotify+0xc4>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800da6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da70:	4a2d      	ldr	r2, [pc, #180]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800da72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d041      	beq.n	800db00 <LmHandlerPackagesNotify+0xc8>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800da7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da80:	4a29      	ldr	r2, [pc, #164]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800da82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	6838      	ldr	r0, [r7, #0]
 800da8a:	4798      	blx	r3
                    break;
 800da8c:	e038      	b.n	800db00 <LmHandlerPackagesNotify+0xc8>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800da8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da92:	4a25      	ldr	r2, [pc, #148]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800da94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da98:	69db      	ldr	r3, [r3, #28]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d032      	beq.n	800db04 <LmHandlerPackagesNotify+0xcc>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800da9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa2:	4a21      	ldr	r2, [pc, #132]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800daae:	429a      	cmp	r2, r3
 800dab0:	d00a      	beq.n	800dac8 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800dab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d124      	bne.n	800db04 <LmHandlerPackagesNotify+0xcc>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800daba:	4b1b      	ldr	r3, [pc, #108]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	4798      	blx	r3
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01d      	beq.n	800db04 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800dac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dacc:	4a16      	ldr	r2, [pc, #88]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800dace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	6838      	ldr	r0, [r7, #0]
 800dad6:	4798      	blx	r3
                    break;
 800dad8:	e014      	b.n	800db04 <LmHandlerPackagesNotify+0xcc>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800dada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dade:	4a12      	ldr	r2, [pc, #72]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800dae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00e      	beq.n	800db08 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800daea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daee:	4a0e      	ldr	r2, [pc, #56]	@ (800db28 <LmHandlerPackagesNotify+0xf0>)
 800daf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daf4:	6a1b      	ldr	r3, [r3, #32]
 800daf6:	6838      	ldr	r0, [r7, #0]
 800daf8:	4798      	blx	r3
                    break;
 800dafa:	e005      	b.n	800db08 <LmHandlerPackagesNotify+0xd0>
                    break;
 800dafc:	bf00      	nop
 800dafe:	e004      	b.n	800db0a <LmHandlerPackagesNotify+0xd2>
                    break;
 800db00:	bf00      	nop
 800db02:	e002      	b.n	800db0a <LmHandlerPackagesNotify+0xd2>
                    break;
 800db04:	bf00      	nop
 800db06:	e000      	b.n	800db0a <LmHandlerPackagesNotify+0xd2>
                    break;
 800db08:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	3301      	adds	r3, #1
 800db12:	b2db      	uxtb	r3, r3
 800db14:	73fb      	strb	r3, [r7, #15]
 800db16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1a:	2b04      	cmp	r3, #4
 800db1c:	dd95      	ble.n	800da4a <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800db1e:	bf00      	nop
 800db20:	bf00      	nop
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20002eac 	.word	0x20002eac

0800db2c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800db32:	2300      	movs	r3, #0
 800db34:	71fb      	strb	r3, [r7, #7]
 800db36:	e022      	b.n	800db7e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800db38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db3c:	4a14      	ldr	r2, [pc, #80]	@ (800db90 <LmHandlerPackagesProcess+0x64>)
 800db3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d015      	beq.n	800db72 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800db46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db4a:	4a11      	ldr	r2, [pc, #68]	@ (800db90 <LmHandlerPackagesProcess+0x64>)
 800db4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db50:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00d      	beq.n	800db72 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff ff4f 	bl	800d9fc <LmHandlerPackageIsInitialized>
 800db5e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800db64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db68:	4a09      	ldr	r2, [pc, #36]	@ (800db90 <LmHandlerPackagesProcess+0x64>)
 800db6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800db72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	3301      	adds	r3, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	71fb      	strb	r3, [r7, #7]
 800db7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db82:	2b04      	cmp	r3, #4
 800db84:	ddd8      	ble.n	800db38 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20002eac 	.word	0x20002eac

0800db94 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af02      	add	r7, sp, #8
 800db9a:	4603      	mov	r3, r0
 800db9c:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	4a06      	ldr	r2, [pc, #24]	@ (800dbbc <DisplayClassUpdate+0x28>)
 800dba2:	5cd3      	ldrb	r3, [r2, r3]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	4b06      	ldr	r3, [pc, #24]	@ (800dbc0 <DisplayClassUpdate+0x2c>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2100      	movs	r1, #0
 800dbac:	2002      	movs	r0, #2
 800dbae:	f00e f80b 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	0801d938 	.word	0x0801d938
 800dbc0:	0801d91c 	.word	0x0801d91c

0800dbc4 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dbce:	bf00      	nop
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bc80      	pop	{r7}
 800dbd6:	4770      	bx	lr

0800dbd8 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800dbdc:	2300      	movs	r3, #0
#endif
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bc80      	pop	{r7}
 800dbe4:	4770      	bx	lr

0800dbe6 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bc80      	pop	{r7}
 800dbf2:	4770      	bx	lr

0800dbf4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800dbf8:	4b02      	ldr	r3, [pc, #8]	@ (800dc04 <LmhpCompliancePackageFactory+0x10>)
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bc80      	pop	{r7}
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	200000c4 	.word	0x200000c4

0800dc08 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	4613      	mov	r3, r2
 800dc14:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00f      	beq.n	800dc3c <LmhpComplianceInit+0x34>
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00c      	beq.n	800dc3c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800dc22:	4a0c      	ldr	r2, [pc, #48]	@ (800dc54 <LmhpComplianceInit+0x4c>)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800dc28:	4a0b      	ldr	r2, [pc, #44]	@ (800dc58 <LmhpComplianceInit+0x50>)
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800dc2e:	4a0a      	ldr	r2, [pc, #40]	@ (800dc58 <LmhpComplianceInit+0x50>)
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800dc34:	4b08      	ldr	r3, [pc, #32]	@ (800dc58 <LmhpComplianceInit+0x50>)
 800dc36:	2201      	movs	r2, #1
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	e006      	b.n	800dc4a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800dc3c:	4b05      	ldr	r3, [pc, #20]	@ (800dc54 <LmhpComplianceInit+0x4c>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800dc42:	4b05      	ldr	r3, [pc, #20]	@ (800dc58 <LmhpComplianceInit+0x50>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
    }
}
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bc80      	pop	{r7}
 800dc52:	4770      	bx	lr
 800dc54:	20003030 	.word	0x20003030
 800dc58:	2000301c 	.word	0x2000301c

0800dc5c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800dc60:	4b02      	ldr	r3, [pc, #8]	@ (800dc6c <LmhpComplianceIsInitialized+0x10>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bc80      	pop	{r7}
 800dc6a:	4770      	bx	lr
 800dc6c:	2000301c 	.word	0x2000301c

0800dc70 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800dc74:	4b07      	ldr	r3, [pc, #28]	@ (800dc94 <LmhpComplianceIsRunning+0x24>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	f083 0301 	eor.w	r3, r3, #1
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800dc82:	2300      	movs	r3, #0
 800dc84:	e001      	b.n	800dc8a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800dc86:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <LmhpComplianceIsRunning+0x24>)
 800dc88:	785b      	ldrb	r3, [r3, #1]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bc80      	pop	{r7}
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	2000301c 	.word	0x2000301c

0800dc98 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800dca0:	4b0f      	ldr	r3, [pc, #60]	@ (800dce0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f083 0301 	eor.w	r3, r3, #1
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d112      	bne.n	800dcd4 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800dcae:	4b0c      	ldr	r3, [pc, #48]	@ (800dce0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800dcb0:	785b      	ldrb	r3, [r3, #1]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00f      	beq.n	800dcd6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d10b      	bne.n	800dcd6 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d007      	beq.n	800dcd6 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800dcc6:	4b06      	ldr	r3, [pc, #24]	@ (800dce0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800dcc8:	899b      	ldrh	r3, [r3, #12]
 800dcca:	3301      	adds	r3, #1
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	4b04      	ldr	r3, [pc, #16]	@ (800dce0 <LmhpComplianceOnMcpsConfirm+0x48>)
 800dcd0:	819a      	strh	r2, [r3, #12]
 800dcd2:	e000      	b.n	800dcd6 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800dcd4:	bf00      	nop
    }
}
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bc80      	pop	{r7}
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	2000301c 	.word	0x2000301c

0800dce4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800dcec:	4b12      	ldr	r3, [pc, #72]	@ (800dd38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	f083 0301 	eor.w	r3, r3, #1
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d116      	bne.n	800dd28 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800dcfa:	4b0f      	ldr	r3, [pc, #60]	@ (800dd38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800dcfc:	785b      	ldrb	r3, [r3, #1]
 800dcfe:	f083 0301 	eor.w	r3, r3, #1
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d111      	bne.n	800dd2c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b04      	cmp	r3, #4
 800dd0e:	d10e      	bne.n	800dd2e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800dd10:	4b09      	ldr	r3, [pc, #36]	@ (800dd38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800dd12:	2201      	movs	r2, #1
 800dd14:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	7a1a      	ldrb	r2, [r3, #8]
 800dd1a:	4b07      	ldr	r3, [pc, #28]	@ (800dd38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800dd1c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	7a5a      	ldrb	r2, [r3, #9]
 800dd22:	4b05      	ldr	r3, [pc, #20]	@ (800dd38 <LmhpComplianceOnMlmeConfirm+0x54>)
 800dd24:	741a      	strb	r2, [r3, #16]
 800dd26:	e002      	b.n	800dd2e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800dd28:	bf00      	nop
 800dd2a:	e000      	b.n	800dd2e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800dd2c:	bf00      	nop
    }
}
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bc80      	pop	{r7}
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	2000301c 	.word	0x2000301c

0800dd3c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800dd42:	4b33      	ldr	r3, [pc, #204]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	f083 0301 	eor.w	r3, r3, #1
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd54:	e058      	b.n	800de08 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800dd56:	4b2e      	ldr	r3, [pc, #184]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd58:	785b      	ldrb	r3, [r3, #1]
 800dd5a:	f083 0301 	eor.w	r3, r3, #1
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dd64:	2300      	movs	r3, #0
 800dd66:	e04f      	b.n	800de08 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800dd68:	4b29      	ldr	r3, [pc, #164]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd6a:	7b9b      	ldrb	r3, [r3, #14]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d019      	beq.n	800dda4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800dd70:	4b27      	ldr	r3, [pc, #156]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800dd76:	4b26      	ldr	r3, [pc, #152]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd78:	2203      	movs	r2, #3
 800dd7a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800dd7c:	4b24      	ldr	r3, [pc, #144]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	2205      	movs	r2, #5
 800dd82:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800dd84:	4b22      	ldr	r3, [pc, #136]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	4a21      	ldr	r2, [pc, #132]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd8c:	7bd2      	ldrb	r2, [r2, #15]
 800dd8e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800dd90:	4b1f      	ldr	r3, [pc, #124]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	3302      	adds	r3, #2
 800dd96:	4a1e      	ldr	r2, [pc, #120]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd98:	7c12      	ldrb	r2, [r2, #16]
 800dd9a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800dd9c:	4b1c      	ldr	r3, [pc, #112]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dd9e:	2201      	movs	r2, #1
 800dda0:	709a      	strb	r2, [r3, #2]
 800dda2:	e01c      	b.n	800ddde <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800dda4:	4b1a      	ldr	r3, [pc, #104]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dda6:	789b      	ldrb	r3, [r3, #2]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d005      	beq.n	800ddb8 <LmhpComplianceTxProcess+0x7c>
 800ddac:	2b04      	cmp	r3, #4
 800ddae:	d116      	bne.n	800ddde <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800ddb0:	4b17      	ldr	r3, [pc, #92]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	709a      	strb	r2, [r3, #2]
            break;
 800ddb6:	e012      	b.n	800ddde <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800ddb8:	4b15      	ldr	r3, [pc, #84]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddba:	2202      	movs	r2, #2
 800ddbc:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800ddbe:	4b14      	ldr	r3, [pc, #80]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	0a1b      	lsrs	r3, r3, #8
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	4b12      	ldr	r3, [pc, #72]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	b2d2      	uxtb	r2, r2
 800ddcc:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800ddce:	4b10      	ldr	r3, [pc, #64]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddd0:	899a      	ldrh	r2, [r3, #12]
 800ddd2:	4b0f      	ldr	r3, [pc, #60]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	b2d2      	uxtb	r2, r2
 800ddda:	701a      	strb	r2, [r3, #0]
            break;
 800dddc:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800ddde:	23e0      	movs	r3, #224	@ 0xe0
 800dde0:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800dde2:	4b0b      	ldr	r3, [pc, #44]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800dde4:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800dde6:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800dde8:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddea:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800ddec:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800ddee:	4809      	ldr	r0, [pc, #36]	@ (800de14 <LmhpComplianceTxProcess+0xd8>)
 800ddf0:	f00e fd24 	bl	801c83c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800ddf4:	4b08      	ldr	r3, [pc, #32]	@ (800de18 <LmhpComplianceTxProcess+0xdc>)
 800ddf6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ddf8:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <LmhpComplianceTxProcess+0xd4>)
 800ddfa:	78db      	ldrb	r3, [r3, #3]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4638      	mov	r0, r7
 800de00:	2301      	movs	r3, #1
 800de02:	2200      	movs	r2, #0
 800de04:	47a0      	blx	r4
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd90      	pop	{r4, r7, pc}
 800de10:	2000301c 	.word	0x2000301c
 800de14:	20003004 	.word	0x20003004
 800de18:	200000c4 	.word	0x200000c4

0800de1c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b0a2      	sub	sp, #136	@ 0x88
 800de20:	af02      	add	r7, sp, #8
 800de22:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800de24:	4ba2      	ldr	r3, [pc, #648]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f083 0301 	eor.w	r3, r3, #1
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f040 81c0 	bne.w	800e1b4 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7b5b      	ldrb	r3, [r3, #13]
 800de38:	f083 0301 	eor.w	r3, r3, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f040 81ba 	bne.w	800e1b8 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800de44:	4b9a      	ldr	r3, [pc, #616]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800de46:	785b      	ldrb	r3, [r3, #1]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7b9b      	ldrb	r3, [r3, #14]
 800de50:	f083 0301 	eor.w	r3, r3, #1
 800de54:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800de56:	2b00      	cmp	r3, #0
 800de58:	d005      	beq.n	800de66 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800de5a:	4b95      	ldr	r3, [pc, #596]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800de5c:	899b      	ldrh	r3, [r3, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	b29a      	uxth	r2, r3
 800de62:	4b93      	ldr	r3, [pc, #588]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800de64:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	78db      	ldrb	r3, [r3, #3]
 800de6a:	2be0      	cmp	r3, #224	@ 0xe0
 800de6c:	f040 81a6 	bne.w	800e1bc <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800de70:	4b8f      	ldr	r3, [pc, #572]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800de72:	785b      	ldrb	r3, [r3, #1]
 800de74:	f083 0301 	eor.w	r3, r3, #1
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d060      	beq.n	800df40 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7b1b      	ldrb	r3, [r3, #12]
 800de82:	2b04      	cmp	r3, #4
 800de84:	f040 819f 	bne.w	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800de8e:	2b01      	cmp	r3, #1
 800de90:	f040 8199 	bne.w	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	3301      	adds	r3, #1
 800de9a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	f040 8192 	bne.w	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	3302      	adds	r3, #2
 800dea8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800deaa:	2b01      	cmp	r3, #1
 800deac:	f040 818b 	bne.w	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	3303      	adds	r3, #3
 800deb6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800deb8:	2b01      	cmp	r3, #1
 800deba:	f040 8184 	bne.w	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800debe:	4b7c      	ldr	r3, [pc, #496]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800dec4:	4b7a      	ldr	r3, [pc, #488]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dec6:	22e0      	movs	r2, #224	@ 0xe0
 800dec8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800deca:	4b79      	ldr	r3, [pc, #484]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800decc:	2202      	movs	r2, #2
 800dece:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800ded0:	4b77      	ldr	r3, [pc, #476]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800ded6:	4b76      	ldr	r3, [pc, #472]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800ded8:	2200      	movs	r2, #0
 800deda:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800dedc:	4b74      	ldr	r3, [pc, #464]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dede:	2200      	movs	r2, #0
 800dee0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800dee2:	4b73      	ldr	r3, [pc, #460]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800dee8:	4b71      	ldr	r3, [pc, #452]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800deea:	2201      	movs	r2, #1
 800deec:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800deee:	4b70      	ldr	r3, [pc, #448]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800def0:	2201      	movs	r2, #1
 800def2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800def4:	2304      	movs	r3, #4
 800def6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800def8:	2301      	movs	r3, #1
 800defa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4618      	mov	r0, r3
 800df02:	f004 f837 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800df06:	2000      	movs	r0, #0
 800df08:	f004 fda8 	bl	8012a5c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800df0c:	4b69      	ldr	r3, [pc, #420]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d003      	beq.n	800df1e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800df16:	4b67      	ldr	r3, [pc, #412]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800df1e:	2300      	movs	r3, #0
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	4b65      	ldr	r3, [pc, #404]	@ (800e0b8 <LmhpComplianceOnMcpsIndication+0x29c>)
 800df24:	2200      	movs	r2, #0
 800df26:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800df2a:	4864      	ldr	r0, [pc, #400]	@ (800e0bc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800df2c:	f00e fc50 	bl	801c7d0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800df30:	f241 3188 	movw	r1, #5000	@ 0x1388
 800df34:	4861      	ldr	r0, [pc, #388]	@ (800e0bc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800df36:	f00e fd5f 	bl	801c9f8 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800df3a:	f7ff feff 	bl	800dd3c <LmhpComplianceTxProcess>
 800df3e:	e142      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	4b5a      	ldr	r3, [pc, #360]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800df48:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800df4a:	4b59      	ldr	r3, [pc, #356]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800df4c:	789b      	ldrb	r3, [r3, #2]
 800df4e:	2b0a      	cmp	r3, #10
 800df50:	f200 8136 	bhi.w	800e1c0 <LmhpComplianceOnMcpsIndication+0x3a4>
 800df54:	a201      	add	r2, pc, #4	@ (adr r2, 800df5c <LmhpComplianceOnMcpsIndication+0x140>)
 800df56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5a:	bf00      	nop
 800df5c:	0800df89 	.word	0x0800df89
 800df60:	0800dfd3 	.word	0x0800dfd3
 800df64:	0800dfdb 	.word	0x0800dfdb
 800df68:	0800dfe9 	.word	0x0800dfe9
 800df6c:	0800dff7 	.word	0x0800dff7
 800df70:	0800e04f 	.word	0x0800e04f
 800df74:	0800e061 	.word	0x0800e061
 800df78:	0800e0c5 	.word	0x0800e0c5
 800df7c:	0800e16d 	.word	0x0800e16d
 800df80:	0800e17f 	.word	0x0800e17f
 800df84:	0800e199 	.word	0x0800e199
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800df88:	484c      	ldr	r0, [pc, #304]	@ (800e0bc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800df8a:	f00e fcc5 	bl	801c918 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800df8e:	4b48      	ldr	r3, [pc, #288]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800df90:	2200      	movs	r2, #0
 800df92:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800df94:	4b46      	ldr	r3, [pc, #280]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800df96:	2200      	movs	r2, #0
 800df98:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800df9a:	2304      	movs	r3, #4
 800df9c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800df9e:	4b45      	ldr	r3, [pc, #276]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800dfa6:	f107 0308 	add.w	r3, r7, #8
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f003 ffe2 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800dfb0:	4b40      	ldr	r3, [pc, #256]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f004 fd50 	bl	8012a5c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800dfbc:	4b3d      	ldr	r3, [pc, #244]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 80fe 	beq.w	800e1c4 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800dfc8:	4b3a      	ldr	r3, [pc, #232]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	689b      	ldr	r3, [r3, #8]
 800dfce:	4798      	blx	r3
                }
            }
            break;
 800dfd0:	e0f8      	b.n	800e1c4 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800dfd2:	4b37      	ldr	r3, [pc, #220]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	719a      	strb	r2, [r3, #6]
            break;
 800dfd8:	e0f5      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800dfda:	4b35      	ldr	r3, [pc, #212]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800dfe0:	4b33      	ldr	r3, [pc, #204]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	709a      	strb	r2, [r3, #2]
            break;
 800dfe6:	e0ee      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800dfe8:	4b31      	ldr	r3, [pc, #196]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800dfee:	4b30      	ldr	r3, [pc, #192]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dff0:	2201      	movs	r2, #1
 800dff2:	709a      	strb	r2, [r3, #2]
            break;
 800dff4:	e0e7      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7b1a      	ldrb	r2, [r3, #12]
 800dffa:	4b2d      	ldr	r3, [pc, #180]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800dffc:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800dffe:	4b2c      	ldr	r3, [pc, #176]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	2204      	movs	r2, #4
 800e004:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e006:	2301      	movs	r3, #1
 800e008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800e00c:	e012      	b.n	800e034 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689a      	ldr	r2, [r3, #8]
 800e012:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e016:	4413      	add	r3, r2
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	4b25      	ldr	r3, [pc, #148]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e01c:	6899      	ldr	r1, [r3, #8]
 800e01e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e022:	440b      	add	r3, r1
 800e024:	3201      	adds	r2, #1
 800e026:	b2d2      	uxtb	r2, r2
 800e028:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e02a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e02e:	3301      	adds	r3, #1
 800e030:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800e034:	4b1e      	ldr	r3, [pc, #120]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e036:	795a      	ldrb	r2, [r3, #5]
 800e038:	4b1d      	ldr	r3, [pc, #116]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e03a:	799b      	ldrb	r3, [r3, #6]
 800e03c:	4293      	cmp	r3, r2
 800e03e:	bf28      	it	cs
 800e040:	4613      	movcs	r3, r2
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800e048:	429a      	cmp	r2, r3
 800e04a:	d3e0      	bcc.n	800e00e <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800e04c:	e0bb      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800e04e:	2304      	movs	r3, #4
 800e050:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800e054:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e058:	4618      	mov	r0, r3
 800e05a:	f004 fac9 	bl	80125f0 <LoRaMacMlmeRequest>
            }
            break;
 800e05e:	e0b2      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800e060:	4816      	ldr	r0, [pc, #88]	@ (800e0bc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800e062:	f00e fc59 	bl	801c918 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800e066:	4b12      	ldr	r3, [pc, #72]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e068:	2200      	movs	r2, #0
 800e06a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800e06c:	4b10      	ldr	r3, [pc, #64]	@ (800e0b0 <LmhpComplianceOnMcpsIndication+0x294>)
 800e06e:	2200      	movs	r2, #0
 800e070:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800e072:	2304      	movs	r3, #4
 800e074:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e076:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e07e:	f107 0308 	add.w	r3, r7, #8
 800e082:	4618      	mov	r0, r3
 800e084:	f003 ff76 	bl	8011f74 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e088:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	785b      	ldrb	r3, [r3, #1]
 800e08e:	4618      	mov	r0, r3
 800e090:	f004 fce4 	bl	8012a5c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800e094:	4b07      	ldr	r3, [pc, #28]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d003      	beq.n	800e0a6 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800e09e:	4b05      	ldr	r3, [pc, #20]	@ (800e0b4 <LmhpComplianceOnMcpsIndication+0x298>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800e0a6:	4b06      	ldr	r3, [pc, #24]	@ (800e0c0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800e0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0aa:	2002      	movs	r0, #2
 800e0ac:	4798      	blx	r3
            }
            break;
 800e0ae:	e08a      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
 800e0b0:	2000301c 	.word	0x2000301c
 800e0b4:	20003030 	.word	0x20003030
 800e0b8:	0800e1dd 	.word	0x0800e1dd
 800e0bc:	20003004 	.word	0x20003004
 800e0c0:	200000c4 	.word	0x200000c4
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7b1b      	ldrb	r3, [r3, #12]
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d113      	bne.n	800e0f4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800e0cc:	2305      	movs	r3, #5
 800e0ce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	021b      	lsls	r3, r3, #8
 800e0dc:	b21a      	sxth	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	3302      	adds	r3, #2
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	b21b      	sxth	r3, r3
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	b21b      	sxth	r3, r3
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800e0f2:	e032      	b.n	800e15a <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7b1b      	ldrb	r3, [r3, #12]
 800e0f8:	2b07      	cmp	r3, #7
 800e0fa:	d12e      	bne.n	800e15a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800e0fc:	2306      	movs	r3, #6
 800e0fe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	3301      	adds	r3, #1
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	021b      	lsls	r3, r3, #8
 800e10c:	b21a      	sxth	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	3302      	adds	r3, #2
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	b21b      	sxth	r3, r3
 800e118:	4313      	orrs	r3, r2
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	3303      	adds	r3, #3
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	041a      	lsls	r2, r3, #16
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	3304      	adds	r3, #4
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	021b      	lsls	r3, r3, #8
 800e136:	4313      	orrs	r3, r2
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	6892      	ldr	r2, [r2, #8]
 800e13c:	3205      	adds	r2, #5
 800e13e:	7812      	ldrb	r2, [r2, #0]
 800e140:	4313      	orrs	r3, r2
 800e142:	461a      	mov	r2, r3
 800e144:	2364      	movs	r3, #100	@ 0x64
 800e146:	fb02 f303 	mul.w	r3, r2, r3
 800e14a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	3306      	adds	r3, #6
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	b25b      	sxtb	r3, r3
 800e156:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800e15a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e15e:	4618      	mov	r0, r3
 800e160:	f004 fa46 	bl	80125f0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800e164:	4b19      	ldr	r3, [pc, #100]	@ (800e1cc <LmhpComplianceOnMcpsIndication+0x3b0>)
 800e166:	2201      	movs	r2, #1
 800e168:	709a      	strb	r2, [r3, #2]
            }
            break;
 800e16a:	e02c      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800e16c:	230a      	movs	r3, #10
 800e16e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800e172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e176:	4618      	mov	r0, r3
 800e178:	f004 fa3a 	bl	80125f0 <LoRaMacMlmeRequest>
            }
            break;
 800e17c:	e023      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800e17e:	2300      	movs	r3, #0
 800e180:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	3301      	adds	r3, #1
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800e18c:	f107 0308 	add.w	r3, r7, #8
 800e190:	4618      	mov	r0, r3
 800e192:	f003 feef 	bl	8011f74 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800e196:	e016      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e198:	230d      	movs	r3, #13
 800e19a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	785b      	ldrb	r3, [r3, #1]
 800e1a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800e1a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f004 fa1f 	bl	80125f0 <LoRaMacMlmeRequest>
            }
            break;
 800e1b2:	e008      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e1b4:	bf00      	nop
 800e1b6:	e006      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e1b8:	bf00      	nop
 800e1ba:	e004      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800e1bc:	bf00      	nop
 800e1be:	e002      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800e1c0:	bf00      	nop
 800e1c2:	e000      	b.n	800e1c6 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800e1c4:	bf00      	nop
        }
    }
}
 800e1c6:	3780      	adds	r7, #128	@ 0x80
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	2000301c 	.word	0x2000301c

0800e1d0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e1d4:	bf00      	nop
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bc80      	pop	{r7}
 800e1da:	4770      	bx	lr

0800e1dc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e1e4:	f7ff fdaa 	bl	800dd3c <LmhpComplianceTxProcess>
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e1f0:	b590      	push	{r4, r7, lr}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e1f6:	f00e fca9 	bl	801cb4c <UTIL_TIMER_GetCurrentTime>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	4a16      	ldr	r2, [pc, #88]	@ (800e258 <OnRadioTxDone+0x68>)
 800e1fe:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e200:	4c16      	ldr	r4, [pc, #88]	@ (800e25c <OnRadioTxDone+0x6c>)
 800e202:	463b      	mov	r3, r7
 800e204:	4618      	mov	r0, r3
 800e206:	f00e fa15 	bl	801c634 <SysTimeGet>
 800e20a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800e20e:	463a      	mov	r2, r7
 800e210:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e214:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e218:	4a11      	ldr	r2, [pc, #68]	@ (800e260 <OnRadioTxDone+0x70>)
 800e21a:	7813      	ldrb	r3, [r2, #0]
 800e21c:	f043 0310 	orr.w	r3, r3, #16
 800e220:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e222:	4b0e      	ldr	r3, [pc, #56]	@ (800e25c <OnRadioTxDone+0x6c>)
 800e224:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00a      	beq.n	800e242 <OnRadioTxDone+0x52>
 800e22c:	4b0b      	ldr	r3, [pc, #44]	@ (800e25c <OnRadioTxDone+0x6c>)
 800e22e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e232:	691b      	ldr	r3, [r3, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e238:	4b08      	ldr	r3, [pc, #32]	@ (800e25c <OnRadioTxDone+0x6c>)
 800e23a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e242:	4b08      	ldr	r3, [pc, #32]	@ (800e264 <OnRadioTxDone+0x74>)
 800e244:	2201      	movs	r2, #1
 800e246:	2100      	movs	r1, #0
 800e248:	2002      	movs	r0, #2
 800e24a:	f00d fcbd 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e24e:	bf00      	nop
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	bd90      	pop	{r4, r7, pc}
 800e256:	bf00      	nop
 800e258:	20003b50 	.word	0x20003b50
 800e25c:	20003034 	.word	0x20003034
 800e260:	20003b4c 	.word	0x20003b4c
 800e264:	0801d93c 	.word	0x0801d93c

0800e268 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	461a      	mov	r2, r3
 800e276:	4603      	mov	r3, r0
 800e278:	817b      	strh	r3, [r7, #10]
 800e27a:	460b      	mov	r3, r1
 800e27c:	813b      	strh	r3, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e282:	f00e fc63 	bl	801cb4c <UTIL_TIMER_GetCurrentTime>
 800e286:	4603      	mov	r3, r0
 800e288:	4a16      	ldr	r2, [pc, #88]	@ (800e2e4 <OnRadioRxDone+0x7c>)
 800e28a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e28c:	4a15      	ldr	r2, [pc, #84]	@ (800e2e4 <OnRadioRxDone+0x7c>)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e292:	4a14      	ldr	r2, [pc, #80]	@ (800e2e4 <OnRadioRxDone+0x7c>)
 800e294:	897b      	ldrh	r3, [r7, #10]
 800e296:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e298:	4a12      	ldr	r2, [pc, #72]	@ (800e2e4 <OnRadioRxDone+0x7c>)
 800e29a:	893b      	ldrh	r3, [r7, #8]
 800e29c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e29e:	4a11      	ldr	r2, [pc, #68]	@ (800e2e4 <OnRadioRxDone+0x7c>)
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e2a4:	4a10      	ldr	r2, [pc, #64]	@ (800e2e8 <OnRadioRxDone+0x80>)
 800e2a6:	7813      	ldrb	r3, [r2, #0]
 800e2a8:	f043 0308 	orr.w	r3, r3, #8
 800e2ac:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800e2ec <OnRadioRxDone+0x84>)
 800e2b0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00a      	beq.n	800e2ce <OnRadioRxDone+0x66>
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <OnRadioRxDone+0x84>)
 800e2ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e2be:	691b      	ldr	r3, [r3, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d004      	beq.n	800e2ce <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e2c4:	4b09      	ldr	r3, [pc, #36]	@ (800e2ec <OnRadioRxDone+0x84>)
 800e2c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e2ce:	4b08      	ldr	r3, [pc, #32]	@ (800e2f0 <OnRadioRxDone+0x88>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	2002      	movs	r0, #2
 800e2d6:	f00d fc77 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20003b54 	.word	0x20003b54
 800e2e8:	20003b4c 	.word	0x20003b4c
 800e2ec:	20003034 	.word	0x20003034
 800e2f0:	0801d94c 	.word	0x0801d94c

0800e2f4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800e334 <OnRadioTxTimeout+0x40>)
 800e2fa:	7813      	ldrb	r3, [r2, #0]
 800e2fc:	f043 0304 	orr.w	r3, r3, #4
 800e300:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e302:	4b0d      	ldr	r3, [pc, #52]	@ (800e338 <OnRadioTxTimeout+0x44>)
 800e304:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00a      	beq.n	800e322 <OnRadioTxTimeout+0x2e>
 800e30c:	4b0a      	ldr	r3, [pc, #40]	@ (800e338 <OnRadioTxTimeout+0x44>)
 800e30e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d004      	beq.n	800e322 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e318:	4b07      	ldr	r3, [pc, #28]	@ (800e338 <OnRadioTxTimeout+0x44>)
 800e31a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e322:	4b06      	ldr	r3, [pc, #24]	@ (800e33c <OnRadioTxTimeout+0x48>)
 800e324:	2201      	movs	r2, #1
 800e326:	2100      	movs	r1, #0
 800e328:	2002      	movs	r0, #2
 800e32a:	f00d fc4d 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e32e:	bf00      	nop
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	20003b4c 	.word	0x20003b4c
 800e338:	20003034 	.word	0x20003034
 800e33c:	0801d95c 	.word	0x0801d95c

0800e340 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e344:	4a0b      	ldr	r2, [pc, #44]	@ (800e374 <OnRadioRxError+0x34>)
 800e346:	7813      	ldrb	r3, [r2, #0]
 800e348:	f043 0302 	orr.w	r3, r3, #2
 800e34c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e34e:	4b0a      	ldr	r3, [pc, #40]	@ (800e378 <OnRadioRxError+0x38>)
 800e350:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <OnRadioRxError+0x2e>
 800e358:	4b07      	ldr	r3, [pc, #28]	@ (800e378 <OnRadioRxError+0x38>)
 800e35a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e364:	4b04      	ldr	r3, [pc, #16]	@ (800e378 <OnRadioRxError+0x38>)
 800e366:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	4798      	blx	r3
    }
}
 800e36e:	bf00      	nop
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	20003b4c 	.word	0x20003b4c
 800e378:	20003034 	.word	0x20003034

0800e37c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e380:	4a0e      	ldr	r2, [pc, #56]	@ (800e3bc <OnRadioRxTimeout+0x40>)
 800e382:	7813      	ldrb	r3, [r2, #0]
 800e384:	f043 0301 	orr.w	r3, r3, #1
 800e388:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e38a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <OnRadioRxTimeout+0x44>)
 800e38c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00a      	beq.n	800e3aa <OnRadioRxTimeout+0x2e>
 800e394:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c0 <OnRadioRxTimeout+0x44>)
 800e396:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d004      	beq.n	800e3aa <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e3a0:	4b07      	ldr	r3, [pc, #28]	@ (800e3c0 <OnRadioRxTimeout+0x44>)
 800e3a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e3aa:	4b06      	ldr	r3, [pc, #24]	@ (800e3c4 <OnRadioRxTimeout+0x48>)
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	2002      	movs	r0, #2
 800e3b2:	f00d fc09 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e3b6:	bf00      	nop
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20003b4c 	.word	0x20003b4c
 800e3c0:	20003034 	.word	0x20003034
 800e3c4:	0801d96c 	.word	0x0801d96c

0800e3c8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3cc:	4b08      	ldr	r3, [pc, #32]	@ (800e3f0 <UpdateRxSlotIdleState+0x28>)
 800e3ce:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d004      	beq.n	800e3e0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e3d6:	4b07      	ldr	r3, [pc, #28]	@ (800e3f4 <UpdateRxSlotIdleState+0x2c>)
 800e3d8:	2206      	movs	r2, #6
 800e3da:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e3de:	e003      	b.n	800e3e8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e3e0:	4b04      	ldr	r3, [pc, #16]	@ (800e3f4 <UpdateRxSlotIdleState+0x2c>)
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800e3e8:	bf00      	nop
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bc80      	pop	{r7}
 800e3ee:	4770      	bx	lr
 800e3f0:	2000353c 	.word	0x2000353c
 800e3f4:	20003034 	.word	0x20003034

0800e3f8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08e      	sub	sp, #56	@ 0x38
 800e3fc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3fe:	4b44      	ldr	r3, [pc, #272]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e400:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800e404:	2b02      	cmp	r3, #2
 800e406:	d002      	beq.n	800e40e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e408:	4b42      	ldr	r3, [pc, #264]	@ (800e514 <ProcessRadioTxDone+0x11c>)
 800e40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e40c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e40e:	4b42      	ldr	r3, [pc, #264]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e410:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e414:	4619      	mov	r1, r3
 800e416:	4841      	ldr	r0, [pc, #260]	@ (800e51c <ProcessRadioTxDone+0x124>)
 800e418:	f00e faee 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e41c:	483f      	ldr	r0, [pc, #252]	@ (800e51c <ProcessRadioTxDone+0x124>)
 800e41e:	f00e fa0d 	bl	801c83c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e422:	4b3d      	ldr	r3, [pc, #244]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e424:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e428:	4619      	mov	r1, r3
 800e42a:	483d      	ldr	r0, [pc, #244]	@ (800e520 <ProcessRadioTxDone+0x128>)
 800e42c:	f00e fae4 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e430:	483b      	ldr	r0, [pc, #236]	@ (800e520 <ProcessRadioTxDone+0x128>)
 800e432:	f00e fa03 	bl	801c83c <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e436:	4b36      	ldr	r3, [pc, #216]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e438:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d004      	beq.n	800e44a <ProcessRadioTxDone+0x52>
 800e440:	4b35      	ldr	r3, [pc, #212]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e442:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800e446:	2b00      	cmp	r3, #0
 800e448:	d019      	beq.n	800e47e <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e44a:	2316      	movs	r3, #22
 800e44c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e450:	4b2f      	ldr	r3, [pc, #188]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e452:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e456:	f107 0220 	add.w	r2, r7, #32
 800e45a:	4611      	mov	r1, r2
 800e45c:	4618      	mov	r0, r3
 800e45e:	f006 fb94 	bl	8014b8a <RegionGetPhyParam>
 800e462:	4603      	mov	r3, r0
 800e464:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e466:	4b2c      	ldr	r3, [pc, #176]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e468:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	4413      	add	r3, r2
 800e470:	4619      	mov	r1, r3
 800e472:	482c      	ldr	r0, [pc, #176]	@ (800e524 <ProcessRadioTxDone+0x12c>)
 800e474:	f00e fac0 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e478:	482a      	ldr	r0, [pc, #168]	@ (800e524 <ProcessRadioTxDone+0x12c>)
 800e47a:	f00e f9df 	bl	801c83c <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e47e:	4b2a      	ldr	r3, [pc, #168]	@ (800e528 <ProcessRadioTxDone+0x130>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a23      	ldr	r2, [pc, #140]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e484:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e486:	4b24      	ldr	r3, [pc, #144]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e488:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 800e48c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e48e:	4b26      	ldr	r3, [pc, #152]	@ (800e528 <ProcessRadioTxDone+0x130>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e494:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e498:	4618      	mov	r0, r3
 800e49a:	f00e f903 	bl	801c6a4 <SysTimeGetMcuTime>
 800e49e:	4638      	mov	r0, r7
 800e4a0:	4b1b      	ldr	r3, [pc, #108]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e4a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800e4a6:	9200      	str	r2, [sp, #0]
 800e4a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800e4ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e4b0:	ca06      	ldmia	r2, {r1, r2}
 800e4b2:	f00e f858 	bl	801c566 <SysTimeSub>
 800e4b6:	f107 0314 	add.w	r3, r7, #20
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4c0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e4c4:	4b14      	ldr	r3, [pc, #80]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e4c6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800e4ca:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e4d2:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e4de:	4b0c      	ldr	r3, [pc, #48]	@ (800e510 <ProcessRadioTxDone+0x118>)
 800e4e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4e4:	f107 0208 	add.w	r2, r7, #8
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f006 fb6e 	bl	8014bcc <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800e4f0:	4b09      	ldr	r3, [pc, #36]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e4f2:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800e4f6:	f083 0301 	eor.w	r3, r3, #1
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d003      	beq.n	800e508 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e500:	4b05      	ldr	r3, [pc, #20]	@ (800e518 <ProcessRadioTxDone+0x120>)
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    }
}
 800e508:	bf00      	nop
 800e50a:	3730      	adds	r7, #48	@ 0x30
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	2000353c 	.word	0x2000353c
 800e514:	0801e020 	.word	0x0801e020
 800e518:	20003034 	.word	0x20003034
 800e51c:	200033b4 	.word	0x200033b4
 800e520:	200033cc 	.word	0x200033cc
 800e524:	2000342c 	.word	0x2000342c
 800e528:	20003b50 	.word	0x20003b50

0800e52c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e530:	4b10      	ldr	r3, [pc, #64]	@ (800e574 <PrepareRxDoneAbort+0x48>)
 800e532:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e53a:	4a0e      	ldr	r2, [pc, #56]	@ (800e574 <PrepareRxDoneAbort+0x48>)
 800e53c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e540:	4b0c      	ldr	r3, [pc, #48]	@ (800e574 <PrepareRxDoneAbort+0x48>)
 800e542:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800e54a:	2000      	movs	r0, #0
 800e54c:	f001 f8f8 	bl	800f740 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e550:	4a08      	ldr	r2, [pc, #32]	@ (800e574 <PrepareRxDoneAbort+0x48>)
 800e552:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e556:	f043 0302 	orr.w	r3, r3, #2
 800e55a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e55e:	4a05      	ldr	r2, [pc, #20]	@ (800e574 <PrepareRxDoneAbort+0x48>)
 800e560:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e564:	f043 0320 	orr.w	r3, r3, #32
 800e568:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800e56c:	f7ff ff2c 	bl	800e3c8 <UpdateRxSlotIdleState>
}
 800e570:	bf00      	nop
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20003034 	.word	0x20003034

0800e578 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e578:	b5b0      	push	{r4, r5, r7, lr}
 800e57a:	b0a6      	sub	sp, #152	@ 0x98
 800e57c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e57e:	2313      	movs	r3, #19
 800e580:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e584:	4bb9      	ldr	r3, [pc, #740]	@ (800e86c <ProcessRadioRxDone+0x2f4>)
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint16_t size = RxDoneParams.Size;
 800e58a:	4bb8      	ldr	r3, [pc, #736]	@ (800e86c <ProcessRadioRxDone+0x2f4>)
 800e58c:	891b      	ldrh	r3, [r3, #8]
 800e58e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800e592:	4bb6      	ldr	r3, [pc, #728]	@ (800e86c <ProcessRadioRxDone+0x2f4>)
 800e594:	895b      	ldrh	r3, [r3, #10]
 800e596:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    int8_t snr = RxDoneParams.Snr;
 800e59a:	4bb4      	ldr	r3, [pc, #720]	@ (800e86c <ProcessRadioRxDone+0x2f4>)
 800e59c:	7b1b      	ldrb	r3, [r3, #12]
 800e59e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    uint8_t pktHeaderLen = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

    uint32_t downLinkCounter = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e5ac:	4bb0      	ldr	r3, [pc, #704]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e5ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e5b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint8_t multicast = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800e5c2:	4bac      	ldr	r3, [pc, #688]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800e5ca:	4aaa      	ldr	r2, [pc, #680]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5cc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800e5d0:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800e5d4:	4aa7      	ldr	r2, [pc, #668]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e5da:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e5de:	4ba5      	ldr	r3, [pc, #660]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5e0:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800e5e4:	4ba3      	ldr	r3, [pc, #652]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5e6:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800e5ea:	4ba2      	ldr	r3, [pc, #648]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800e5f2:	4ba0      	ldr	r3, [pc, #640]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800e5fa:	4b9e      	ldr	r3, [pc, #632]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800e602:	4b9c      	ldr	r3, [pc, #624]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e604:	2200      	movs	r2, #0
 800e606:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800e60a:	4b9a      	ldr	r3, [pc, #616]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.RxData = false;
 800e612:	4b98      	ldr	r3, [pc, #608]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800e61a:	4b96      	ldr	r3, [pc, #600]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 242a 	strb.w	r2, [r3, #1066]	@ 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e622:	4b94      	ldr	r3, [pc, #592]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e624:	2200      	movs	r2, #0
 800e626:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e62a:	4b92      	ldr	r3, [pc, #584]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800e632:	4b90      	ldr	r3, [pc, #576]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e634:	2200      	movs	r2, #0
 800e636:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e63a:	4b8e      	ldr	r3, [pc, #568]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434

    Radio.Sleep( );
 800e642:	4b8d      	ldr	r3, [pc, #564]	@ (800e878 <ProcessRadioRxDone+0x300>)
 800e644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e646:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e648:	488c      	ldr	r0, [pc, #560]	@ (800e87c <ProcessRadioRxDone+0x304>)
 800e64a:	f00e f965 	bl	801c918 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e64e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e652:	4619      	mov	r1, r3
 800e654:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800e656:	f004 fb36 	bl	8012cc6 <LoRaMacClassBRxBeacon>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00a      	beq.n	800e676 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e660:	4a84      	ldr	r2, [pc, #528]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e662:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800e666:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e66a:	4a82      	ldr	r2, [pc, #520]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e66c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e670:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800e674:	e3bf      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e676:	4b7e      	ldr	r3, [pc, #504]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e678:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800e67c:	2b01      	cmp	r3, #1
 800e67e:	d11e      	bne.n	800e6be <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e680:	f004 fb34 	bl	8012cec <LoRaMacClassBIsPingExpected>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00a      	beq.n	800e6a0 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e68a:	2000      	movs	r0, #0
 800e68c:	f004 fae5 	bl	8012c5a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e690:	2000      	movs	r0, #0
 800e692:	f004 fb06 	bl	8012ca2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e696:	4b77      	ldr	r3, [pc, #476]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e698:	2204      	movs	r2, #4
 800e69a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800e69e:	e00e      	b.n	800e6be <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e6a0:	f004 fb2b 	bl	8012cfa <LoRaMacClassBIsMulticastExpected>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d009      	beq.n	800e6be <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	f004 fadf 	bl	8012c6e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f004 faff 	bl	8012cb4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e6b6:	4b6f      	ldr	r3, [pc, #444]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e6b8:	2205      	movs	r2, #5
 800e6ba:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e6be:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	f887 2076 	strb.w	r2, [r7, #118]	@ 0x76
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6cc:	4413      	add	r3, r2
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

    switch( macHdr.Bits.MType )
 800e6d4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800e6d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	2b06      	cmp	r3, #6
 800e6e2:	f200 8362 	bhi.w	800edaa <ProcessRadioRxDone+0x832>
 800e6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6ec <ProcessRadioRxDone+0x174>)
 800e6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ec:	0800e709 	.word	0x0800e709
 800e6f0:	0800edab 	.word	0x0800edab
 800e6f4:	0800e889 	.word	0x0800e889
 800e6f8:	0800edab 	.word	0x0800edab
 800e6fc:	0800e881 	.word	0x0800e881
 800e700:	0800edab 	.word	0x0800edab
 800e704:	0800ed51 	.word	0x0800ed51
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e708:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e70c:	2b10      	cmp	r3, #16
 800e70e:	d806      	bhi.n	800e71e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e710:	4b58      	ldr	r3, [pc, #352]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e712:	2201      	movs	r2, #1
 800e714:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800e718:	f7ff ff08 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800e71c:	e36b      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800e71e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e720:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800e722:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e726:	b2db      	uxtb	r3, r3
 800e728:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e72a:	4b51      	ldr	r3, [pc, #324]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e72c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800e730:	2b00      	cmp	r3, #0
 800e732:	d006      	beq.n	800e742 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e734:	4b4f      	ldr	r3, [pc, #316]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e736:	2201      	movs	r2, #1
 800e738:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800e73c:	f7ff fef6 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800e740:	e359      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e742:	f7fe fbd3 	bl	800ceec <SecureElementGetJoinEui>
 800e746:	4601      	mov	r1, r0
 800e748:	f107 0308 	add.w	r3, r7, #8
 800e74c:	461a      	mov	r2, r3
 800e74e:	20ff      	movs	r0, #255	@ 0xff
 800e750:	f005 fca0 	bl	8014094 <LoRaMacCryptoHandleJoinAccept>
 800e754:	4603      	mov	r3, r0
 800e756:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e75a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d172      	bne.n	800e848 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e762:	7c7b      	ldrb	r3, [r7, #17]
 800e764:	461a      	mov	r2, r3
 800e766:	4b42      	ldr	r3, [pc, #264]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e768:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e76c:	4b40      	ldr	r3, [pc, #256]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e76e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800e772:	7cbb      	ldrb	r3, [r7, #18]
 800e774:	021b      	lsls	r3, r3, #8
 800e776:	4313      	orrs	r3, r2
 800e778:	4a3d      	ldr	r2, [pc, #244]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e77a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e77e:	4b3c      	ldr	r3, [pc, #240]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e780:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800e784:	7cfb      	ldrb	r3, [r7, #19]
 800e786:	041b      	lsls	r3, r3, #16
 800e788:	4313      	orrs	r3, r2
 800e78a:	4a39      	ldr	r2, [pc, #228]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e78c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	4a37      	ldr	r2, [pc, #220]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e794:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e798:	7e3b      	ldrb	r3, [r7, #24]
 800e79a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4b33      	ldr	r3, [pc, #204]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e7a8:	7e3b      	ldrb	r3, [r7, #24]
 800e7aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4b2f      	ldr	r3, [pc, #188]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e7b8:	7e3b      	ldrb	r3, [r7, #24]
 800e7ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	4b2b      	ldr	r3, [pc, #172]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7c4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e7c8:	7e7b      	ldrb	r3, [r7, #25]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	4b28      	ldr	r3, [pc, #160]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7ce:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e7d0:	4b27      	ldr	r3, [pc, #156]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e7d8:	4b25      	ldr	r3, [pc, #148]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7da:	2201      	movs	r2, #1
 800e7dc:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e7de:	4b24      	ldr	r3, [pc, #144]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e7e6:	fb02 f303 	mul.w	r3, r2, r3
 800e7ea:	4a21      	ldr	r2, [pc, #132]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7ec:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e7ee:	4b20      	ldr	r3, [pc, #128]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e7f6:	4a1e      	ldr	r2, [pc, #120]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7f8:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e7fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e802:	f107 0308 	add.w	r3, r7, #8
 800e806:	3312      	adds	r3, #18
 800e808:	66fb      	str	r3, [r7, #108]	@ 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e80a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	3b11      	subs	r3, #17
 800e812:	b2db      	uxtb	r3, r3
 800e814:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e818:	4b15      	ldr	r3, [pc, #84]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e81a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e81e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800e822:	4611      	mov	r1, r2
 800e824:	4618      	mov	r0, r3
 800e826:	f006 fa1f 	bl	8014c68 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e82a:	4b11      	ldr	r3, [pc, #68]	@ (800e870 <ProcessRadioRxDone+0x2f8>)
 800e82c:	2202      	movs	r2, #2
 800e82e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e832:	2001      	movs	r0, #1
 800e834:	f004 ff26 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00e      	beq.n	800e85c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e83e:	2101      	movs	r1, #1
 800e840:	2000      	movs	r0, #0
 800e842:	f004 fe93 	bl	801356c <LoRaMacConfirmQueueSetStatus>
 800e846:	e009      	b.n	800e85c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e848:	2001      	movs	r0, #1
 800e84a:	f004 ff1b 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d003      	beq.n	800e85c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e854:	2101      	movs	r1, #1
 800e856:	2007      	movs	r0, #7
 800e858:	f004 fe88 	bl	801356c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e85c:	4a05      	ldr	r2, [pc, #20]	@ (800e874 <ProcessRadioRxDone+0x2fc>)
 800e85e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e862:	f043 0308 	orr.w	r3, r3, #8
 800e866:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800e86a:	e2a5      	b.n	800edb8 <ProcessRadioRxDone+0x840>
 800e86c:	20003b54 	.word	0x20003b54
 800e870:	2000353c 	.word	0x2000353c
 800e874:	20003034 	.word	0x20003034
 800e878:	0801e020 	.word	0x0801e020
 800e87c:	200033cc 	.word	0x200033cc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e880:	4bae      	ldr	r3, [pc, #696]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e882:	2201      	movs	r2, #1
 800e884:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e888:	4bad      	ldr	r3, [pc, #692]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e88a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e88e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e892:	4baa      	ldr	r3, [pc, #680]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e894:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e89e:	230d      	movs	r3, #13
 800e8a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e8a4:	4ba6      	ldr	r3, [pc, #664]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e8a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e8ae:	230e      	movs	r3, #14
 800e8b0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e8b4:	4ba2      	ldr	r3, [pc, #648]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e8b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e8ba:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f006 f962 	bl	8014b8a <RegionGetPhyParam>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	663b      	str	r3, [r7, #96]	@ 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e8ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e8ce:	3b0d      	subs	r3, #13
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	b21b      	sxth	r3, r3
 800e8d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8d8:	b21a      	sxth	r2, r3
 800e8da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8dc:	b21b      	sxth	r3, r3
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	dc03      	bgt.n	800e8ea <ProcessRadioRxDone+0x372>
 800e8e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e8e6:	2b0b      	cmp	r3, #11
 800e8e8:	d806      	bhi.n	800e8f8 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8ea:	4b94      	ldr	r3, [pc, #592]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800e8f2:	f7ff fe1b 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800e8f6:	e27e      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800e8f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e8fa:	633b      	str	r3, [r7, #48]	@ 0x30
            macMsgData.BufSize = size;
 800e8fc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800e900:	b2db      	uxtb	r3, r3
 800e902:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e906:	4b8f      	ldr	r3, [pc, #572]	@ (800eb44 <ProcessRadioRxDone+0x5cc>)
 800e908:	657b      	str	r3, [r7, #84]	@ 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e90a:	23ff      	movs	r3, #255	@ 0xff
 800e90c:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e910:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e914:	4618      	mov	r0, r3
 800e916:	f005 feba 	bl	801468e <LoRaMacParserData>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d006      	beq.n	800e92e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e920:	4b86      	ldr	r3, [pc, #536]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e922:	2201      	movs	r2, #1
 800e924:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800e928:	f7ff fe00 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800e92c:	e263      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e930:	4a82      	ldr	r2, [pc, #520]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e932:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e936:	1cba      	adds	r2, r7, #2
 800e938:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e93c:	4611      	mov	r1, r2
 800e93e:	4618      	mov	r0, r3
 800e940:	f002 fcec 	bl	801131c <DetermineFrameType>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d006      	beq.n	800e958 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e94a:	4b7c      	ldr	r3, [pc, #496]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800e952:	f7ff fdeb 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800e956:	e24e      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e958:	2300      	movs	r3, #0
 800e95a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
            downLinkCounter = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e962:	2300      	movs	r3, #0
 800e964:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800e968:	e049      	b.n	800e9fe <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e96a:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e96e:	4a74      	ldr	r2, [pc, #464]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e970:	212c      	movs	r1, #44	@ 0x2c
 800e972:	fb01 f303 	mul.w	r3, r1, r3
 800e976:	4413      	add	r3, r2
 800e978:	33d4      	adds	r3, #212	@ 0xd4
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e97e:	429a      	cmp	r2, r3
 800e980:	d138      	bne.n	800e9f4 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e982:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e986:	4a6e      	ldr	r2, [pc, #440]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e988:	212c      	movs	r1, #44	@ 0x2c
 800e98a:	fb01 f303 	mul.w	r3, r1, r3
 800e98e:	4413      	add	r3, r2
 800e990:	33d2      	adds	r3, #210	@ 0xd2
 800e992:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e994:	2b00      	cmp	r3, #0
 800e996:	d02d      	beq.n	800e9f4 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800e998:	2301      	movs	r3, #1
 800e99a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e99e:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e9a2:	4a67      	ldr	r2, [pc, #412]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e9a4:	212c      	movs	r1, #44	@ 0x2c
 800e9a6:	fb01 f303 	mul.w	r3, r1, r3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	33d3      	adds	r3, #211	@ 0xd3
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e9b4:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e9b8:	4a61      	ldr	r2, [pc, #388]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e9ba:	212c      	movs	r1, #44	@ 0x2c
 800e9bc:	fb01 f303 	mul.w	r3, r1, r3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	33f0      	adds	r3, #240	@ 0xf0
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e9ca:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e9ce:	4a5c      	ldr	r2, [pc, #368]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e9d0:	212c      	movs	r1, #44	@ 0x2c
 800e9d2:	fb01 f303 	mul.w	r3, r1, r3
 800e9d6:	4413      	add	r3, r2
 800e9d8:	33d4      	adds	r3, #212	@ 0xd4
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e9e0:	4b57      	ldr	r3, [pc, #348]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800e9e2:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d10e      	bne.n	800ea08 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e9ea:	4b54      	ldr	r3, [pc, #336]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800e9f2:	e009      	b.n	800ea08 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e9f4:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 800e9fe:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0b1      	beq.n	800e96a <ProcessRadioRxDone+0x3f2>
 800ea06:	e000      	b.n	800ea0a <ProcessRadioRxDone+0x492>
                    break;
 800ea08:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ea0a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d117      	bne.n	800ea42 <ProcessRadioRxDone+0x4ca>
 800ea12:	78bb      	ldrb	r3, [r7, #2]
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d10d      	bne.n	800ea34 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ea18:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ea1c:	f003 0320 	and.w	r3, r3, #32
 800ea20:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ea26:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ea2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea2e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d006      	beq.n	800ea42 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea34:	4b41      	ldr	r3, [pc, #260]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                PrepareRxDoneAbort( );
 800ea3c:	f7ff fd76 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800ea40:	e1d9      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ea42:	2315      	movs	r3, #21
 800ea44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea48:	4b3d      	ldr	r3, [pc, #244]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800ea4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea4e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800ea52:	4611      	mov	r1, r2
 800ea54:	4618      	mov	r0, r3
 800ea56:	f006 f898 	bl	8014b8a <RegionGetPhyParam>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	663b      	str	r3, [r7, #96]	@ 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ea5e:	78b9      	ldrb	r1, [r7, #2]
 800ea60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4d36      	ldr	r5, [pc, #216]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800ea66:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800ea6a:	f897 0082 	ldrb.w	r0, [r7, #130]	@ 0x82
 800ea6e:	1d3a      	adds	r2, r7, #4
 800ea70:	9202      	str	r2, [sp, #8]
 800ea72:	1cfa      	adds	r2, r7, #3
 800ea74:	9201      	str	r2, [sp, #4]
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	f000 fe95 	bl	800f7ac <GetFCntDown>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ea88:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d031      	beq.n	800eaf4 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ea90:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800ea94:	2b07      	cmp	r3, #7
 800ea96:	d119      	bne.n	800eacc <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ea98:	4b28      	ldr	r3, [pc, #160]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800eaa0:	4b27      	ldr	r3, [pc, #156]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800eaa2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d11d      	bne.n	800eae6 <ProcessRadioRxDone+0x56e>
 800eaaa:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800eaae:	f023 031f 	bic.w	r3, r3, #31
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2ba0      	cmp	r3, #160	@ 0xa0
 800eab6:	d116      	bne.n	800eae6 <ProcessRadioRxDone+0x56e>
 800eab8:	4b21      	ldr	r3, [pc, #132]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800eaba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eabc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d111      	bne.n	800eae6 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800eac2:	4b1f      	ldr	r3, [pc, #124]	@ (800eb40 <ProcessRadioRxDone+0x5c8>)
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800eaca:	e00c      	b.n	800eae6 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800eacc:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800ead0:	2b08      	cmp	r3, #8
 800ead2:	d104      	bne.n	800eade <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ead4:	4b19      	ldr	r3, [pc, #100]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800ead6:	220a      	movs	r2, #10
 800ead8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
 800eadc:	e003      	b.n	800eae6 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eade:	4b17      	ldr	r3, [pc, #92]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	4a14      	ldr	r2, [pc, #80]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800eaea:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                PrepareRxDoneAbort( );
 800eaee:	f7ff fd1d 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800eaf2:	e180      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800eaf4:	78fa      	ldrb	r2, [r7, #3]
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	f897 0082 	ldrb.w	r0, [r7, #130]	@ 0x82
 800eafc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	460b      	mov	r3, r1
 800eb04:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800eb08:	f005 fc10 	bl	801432c <LoRaMacCryptoUnsecureMessage>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eb12:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d016      	beq.n	800eb48 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800eb1a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d104      	bne.n	800eb2c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800eb22:	4b06      	ldr	r3, [pc, #24]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800eb24:	220b      	movs	r2, #11
 800eb26:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
 800eb2a:	e003      	b.n	800eb34 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800eb2c:	4b03      	ldr	r3, [pc, #12]	@ (800eb3c <ProcessRadioRxDone+0x5c4>)
 800eb2e:	220c      	movs	r2, #12
 800eb30:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                }
                PrepareRxDoneAbort( );
 800eb34:	f7ff fcfa 	bl	800e52c <PrepareRxDoneAbort>
                return;
 800eb38:	e15d      	b.n	800edf6 <ProcessRadioRxDone+0x87e>
 800eb3a:	bf00      	nop
 800eb3c:	20003034 	.word	0x20003034
 800eb40:	2000353c 	.word	0x2000353c
 800eb44:	2000326c 	.word	0x2000326c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eb48:	4bac      	ldr	r3, [pc, #688]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800eb50:	4aaa      	ldr	r2, [pc, #680]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb52:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800eb56:	f882 341e 	strb.w	r3, [r2, #1054]	@ 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800eb5a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800eb5e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	461a      	mov	r2, r3
 800eb66:	4ba5      	ldr	r3, [pc, #660]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb68:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800eb6c:	4ba3      	ldr	r3, [pc, #652]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800eb74:	4ba1      	ldr	r3, [pc, #644]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a9f      	ldr	r2, [pc, #636]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb80:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eb84:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800eb88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bf14      	ite	ne
 800eb92:	2301      	movne	r3, #1
 800eb94:	2300      	moveq	r3, #0
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	4b98      	ldr	r3, [pc, #608]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eb9a:	f883 242a 	strb.w	r2, [r3, #1066]	@ 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eb9e:	4b97      	ldr	r3, [pc, #604]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eba6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ebaa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf14      	ite	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	4b90      	ldr	r3, [pc, #576]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ebbc:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ebc0:	4b8e      	ldr	r3, [pc, #568]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ebc2:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d004      	beq.n	800ebd4 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ebca:	4b8c      	ldr	r3, [pc, #560]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ebcc:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d102      	bne.n	800ebda <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ebd4:	4b8a      	ldr	r3, [pc, #552]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ebda:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d104      	bne.n	800ebec <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ebe2:	4b86      	ldr	r3, [pc, #536]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ebe4:	2202      	movs	r2, #2
 800ebe6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
 800ebea:	e01f      	b.n	800ec2c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ebec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800ebf0:	f023 031f 	bic.w	r3, r3, #31
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2ba0      	cmp	r3, #160	@ 0xa0
 800ebf8:	d110      	bne.n	800ec1c <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ebfa:	4b81      	ldr	r3, [pc, #516]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ec02:	4b7f      	ldr	r3, [pc, #508]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800ec04:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ec0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec0e:	4a7c      	ldr	r2, [pc, #496]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800ec10:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ec12:	4b7a      	ldr	r3, [pc, #488]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec14:	2201      	movs	r2, #1
 800ec16:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
 800ec1a:	e007      	b.n	800ec2c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ec1c:	4b78      	ldr	r3, [pc, #480]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ec24:	4b75      	ldr	r3, [pc, #468]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ec2c:	4b73      	ldr	r3, [pc, #460]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec2e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ec32:	4a72      	ldr	r2, [pc, #456]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec34:	f892 2438 	ldrb.w	r2, [r2, #1080]	@ 0x438
 800ec38:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f001 ff1d 	bl	8010a7c <RemoveMacCommands>

            switch( fType )
 800ec42:	78bb      	ldrb	r3, [r7, #2]
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d874      	bhi.n	800ed32 <ProcessRadioRxDone+0x7ba>
 800ec48:	a201      	add	r2, pc, #4	@ (adr r2, 800ec50 <ProcessRadioRxDone+0x6d8>)
 800ec4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4e:	bf00      	nop
 800ec50:	0800ec61 	.word	0x0800ec61
 800ec54:	0800ecb1 	.word	0x0800ecb1
 800ec58:	0800ece7 	.word	0x0800ece7
 800ec5c:	0800ed0d 	.word	0x0800ed0d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ec60:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ec64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	461c      	mov	r4, r3
 800ec6c:	4b63      	ldr	r3, [pc, #396]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec6e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ec72:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800ec76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ec7a:	f102 0010 	add.w	r0, r2, #16
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	460b      	mov	r3, r1
 800ec82:	4622      	mov	r2, r4
 800ec84:	2100      	movs	r1, #0
 800ec86:	f000 ff03 	bl	800fa90 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ec8a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800ec8e:	4b5b      	ldr	r3, [pc, #364]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec90:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ec94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec96:	4a59      	ldr	r2, [pc, #356]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ec98:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ec9c:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800eca0:	4b56      	ldr	r3, [pc, #344]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eca2:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.RxData = true;
 800eca6:	4b55      	ldr	r3, [pc, #340]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
                    break;
 800ecae:	e047      	b.n	800ed40 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ecb0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ecb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	461c      	mov	r4, r3
 800ecbc:	4b4f      	ldr	r3, [pc, #316]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ecbe:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ecc2:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800ecc6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ecca:	f102 0010 	add.w	r0, r2, #16
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	f000 fedb 	bl	800fa90 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ecda:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800ecde:	4b47      	ldr	r3, [pc, #284]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ece0:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
                    break;
 800ece4:	e02c      	b.n	800ed40 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ece6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ece8:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800ecec:	4b43      	ldr	r3, [pc, #268]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ecee:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ecf2:	f997 1077 	ldrsb.w	r1, [r7, #119]	@ 0x77
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	f000 fec8 	bl	800fa90 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ed00:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800ed04:	4b3d      	ldr	r3, [pc, #244]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed06:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
                    break;
 800ed0a:	e019      	b.n	800ed40 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ed0c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800ed10:	4b3a      	ldr	r3, [pc, #232]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed12:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ed16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed18:	4a38      	ldr	r2, [pc, #224]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed1a:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ed1e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800ed22:	4b36      	ldr	r3, [pc, #216]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed24:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428
                    MacCtx.McpsIndication.RxData = true;
 800ed28:	4b34      	ldr	r3, [pc, #208]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
                    break;
 800ed30:	e006      	b.n	800ed40 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed32:	4b32      	ldr	r3, [pc, #200]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
                    PrepareRxDoneAbort( );
 800ed3a:	f7ff fbf7 	bl	800e52c <PrepareRxDoneAbort>
                    break;
 800ed3e:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ed40:	4a2e      	ldr	r2, [pc, #184]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed42:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ed46:	f043 0302 	orr.w	r3, r3, #2
 800ed4a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800ed4e:	e033      	b.n	800edb8 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ed50:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ed54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ed56:	18d1      	adds	r1, r2, r3
 800ed58:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	461a      	mov	r2, r3
 800ed68:	4826      	ldr	r0, [pc, #152]	@ (800ee04 <ProcessRadioRxDone+0x88c>)
 800ed6a:	f009 fdd8 	bl	801891e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ed6e:	4b23      	ldr	r3, [pc, #140]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed70:	2203      	movs	r2, #3
 800ed72:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ed76:	4b21      	ldr	r3, [pc, #132]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ed7e:	4b1f      	ldr	r3, [pc, #124]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed80:	4a20      	ldr	r2, [pc, #128]	@ (800ee04 <ProcessRadioRxDone+0x88c>)
 800ed82:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ed86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	4b19      	ldr	r3, [pc, #100]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed96:	f883 2428 	strb.w	r2, [r3, #1064]	@ 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ed9a:	4a18      	ldr	r2, [pc, #96]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ed9c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eda0:	f043 0302 	orr.w	r3, r3, #2
 800eda4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800eda8:	e006      	b.n	800edb8 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edaa:	4b14      	ldr	r3, [pc, #80]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800edac:	2201      	movs	r2, #1
 800edae:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            PrepareRxDoneAbort( );
 800edb2:	f7ff fbbb 	bl	800e52c <PrepareRxDoneAbort>
            break;
 800edb6:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800edb8:	4b10      	ldr	r3, [pc, #64]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800edba:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d008      	beq.n	800edd4 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800edc2:	4b0e      	ldr	r3, [pc, #56]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800edc4:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800edcc:	2000      	movs	r0, #0
 800edce:	f000 fcb7 	bl	800f740 <OnAckTimeoutTimerEvent>
 800edd2:	e007      	b.n	800ede4 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800edd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ee00 <ProcessRadioRxDone+0x888>)
 800edd6:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d102      	bne.n	800ede4 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800edde:	2000      	movs	r0, #0
 800ede0:	f000 fcae 	bl	800f740 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ede4:	4a05      	ldr	r2, [pc, #20]	@ (800edfc <ProcessRadioRxDone+0x884>)
 800ede6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800edea:	f043 0320 	orr.w	r3, r3, #32
 800edee:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800edf2:	f7ff fae9 	bl	800e3c8 <UpdateRxSlotIdleState>
}
 800edf6:	3788      	adds	r7, #136	@ 0x88
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bdb0      	pop	{r4, r5, r7, pc}
 800edfc:	20003034 	.word	0x20003034
 800ee00:	2000353c 	.word	0x2000353c
 800ee04:	2000326c 	.word	0x2000326c

0800ee08 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ee0c:	4b11      	ldr	r3, [pc, #68]	@ (800ee54 <ProcessRadioTxTimeout+0x4c>)
 800ee0e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d002      	beq.n	800ee1c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800ee16:	4b10      	ldr	r3, [pc, #64]	@ (800ee58 <ProcessRadioTxTimeout+0x50>)
 800ee18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee1a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ee1c:	f7ff fad4 	bl	800e3c8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ee20:	4b0e      	ldr	r3, [pc, #56]	@ (800ee5c <ProcessRadioTxTimeout+0x54>)
 800ee22:	2202      	movs	r2, #2
 800ee24:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ee28:	2002      	movs	r0, #2
 800ee2a:	f004 fbf7 	bl	801361c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ee2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee5c <ProcessRadioTxTimeout+0x54>)
 800ee30:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d003      	beq.n	800ee40 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800ee38:	4b08      	ldr	r3, [pc, #32]	@ (800ee5c <ProcessRadioTxTimeout+0x54>)
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ee40:	4a06      	ldr	r2, [pc, #24]	@ (800ee5c <ProcessRadioTxTimeout+0x54>)
 800ee42:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ee46:	f043 0320 	orr.w	r3, r3, #32
 800ee4a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800ee4e:	bf00      	nop
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	2000353c 	.word	0x2000353c
 800ee58:	0801e020 	.word	0x0801e020
 800ee5c:	20003034 	.word	0x20003034

0800ee60 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	460a      	mov	r2, r1
 800ee6a:	71fb      	strb	r3, [r7, #7]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ee74:	4b40      	ldr	r3, [pc, #256]	@ (800ef78 <HandleRadioRxErrorTimeout+0x118>)
 800ee76:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d002      	beq.n	800ee84 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ee7e:	4b3f      	ldr	r3, [pc, #252]	@ (800ef7c <HandleRadioRxErrorTimeout+0x11c>)
 800ee80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee82:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ee84:	f003 ff2b 	bl	8012cde <LoRaMacClassBIsBeaconExpected>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ee8e:	2002      	movs	r0, #2
 800ee90:	f003 fed9 	bl	8012c46 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ee94:	2000      	movs	r0, #0
 800ee96:	f003 fefb 	bl	8012c90 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ee9e:	4b36      	ldr	r3, [pc, #216]	@ (800ef78 <HandleRadioRxErrorTimeout+0x118>)
 800eea0:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d119      	bne.n	800eedc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800eea8:	f003 ff20 	bl	8012cec <LoRaMacClassBIsPingExpected>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d007      	beq.n	800eec2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	f003 fed1 	bl	8012c5a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800eeb8:	2000      	movs	r0, #0
 800eeba:	f003 fef2 	bl	8012ca2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800eebe:	2301      	movs	r3, #1
 800eec0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eec2:	f003 ff1a 	bl	8012cfa <LoRaMacClassBIsMulticastExpected>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d007      	beq.n	800eedc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800eecc:	2000      	movs	r0, #0
 800eece:	f003 fece 	bl	8012c6e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eed2:	2000      	movs	r0, #0
 800eed4:	f003 feee 	bl	8012cb4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800eed8:	2301      	movs	r3, #1
 800eeda:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
 800eede:	f083 0301 	eor.w	r3, r3, #1
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d040      	beq.n	800ef6a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eee8:	4b25      	ldr	r3, [pc, #148]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800eeea:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d122      	bne.n	800ef38 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800eef2:	4b23      	ldr	r3, [pc, #140]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800eef4:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800eefc:	4a20      	ldr	r2, [pc, #128]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	f882 3439 	strb.w	r3, [r2, #1081]	@ 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f004 fb88 	bl	801361c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ef0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ef78 <HandleRadioRxErrorTimeout+0x118>)
 800ef0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef10:	4618      	mov	r0, r3
 800ef12:	f00d fe2d 	bl	801cb70 <UTIL_TIMER_GetElapsedTime>
 800ef16:	4602      	mov	r2, r0
 800ef18:	4b19      	ldr	r3, [pc, #100]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800ef1a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d323      	bcc.n	800ef6a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ef22:	4818      	ldr	r0, [pc, #96]	@ (800ef84 <HandleRadioRxErrorTimeout+0x124>)
 800ef24:	f00d fcf8 	bl	801c918 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ef28:	4a15      	ldr	r2, [pc, #84]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800ef2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ef2e:	f043 0320 	orr.w	r3, r3, #32
 800ef32:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800ef36:	e018      	b.n	800ef6a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ef38:	4b11      	ldr	r3, [pc, #68]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800ef3a:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ef42:	4a0f      	ldr	r2, [pc, #60]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800ef44:	79bb      	ldrb	r3, [r7, #6]
 800ef46:	f882 3439 	strb.w	r3, [r2, #1081]	@ 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ef4a:	79bb      	ldrb	r3, [r7, #6]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f004 fb65 	bl	801361c <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ef52:	4b09      	ldr	r3, [pc, #36]	@ (800ef78 <HandleRadioRxErrorTimeout+0x118>)
 800ef54:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d006      	beq.n	800ef6a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ef5c:	4a08      	ldr	r2, [pc, #32]	@ (800ef80 <HandleRadioRxErrorTimeout+0x120>)
 800ef5e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ef62:	f043 0320 	orr.w	r3, r3, #32
 800ef66:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800ef6a:	f7ff fa2d 	bl	800e3c8 <UpdateRxSlotIdleState>
}
 800ef6e:	bf00      	nop
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	2000353c 	.word	0x2000353c
 800ef7c:	0801e020 	.word	0x0801e020
 800ef80:	20003034 	.word	0x20003034
 800ef84:	200033cc 	.word	0x200033cc

0800ef88 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ef8c:	2106      	movs	r1, #6
 800ef8e:	2005      	movs	r0, #5
 800ef90:	f7ff ff66 	bl	800ee60 <HandleRadioRxErrorTimeout>
}
 800ef94:	bf00      	nop
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ef9c:	2104      	movs	r1, #4
 800ef9e:	2003      	movs	r0, #3
 800efa0:	f7ff ff5e 	bl	800ee60 <HandleRadioRxErrorTimeout>
}
 800efa4:	bf00      	nop
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efae:	f3ef 8310 	mrs	r3, PRIMASK
 800efb2:	607b      	str	r3, [r7, #4]
  return(result);
 800efb4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800efb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800efb8:	b672      	cpsid	i
}
 800efba:	bf00      	nop
    events = LoRaMacRadioEvents;
 800efbc:	4b1d      	ldr	r3, [pc, #116]	@ (800f034 <LoRaMacHandleIrqEvents+0x8c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800efc2:	4b1c      	ldr	r3, [pc, #112]	@ (800f034 <LoRaMacHandleIrqEvents+0x8c>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f383 8810 	msr	PRIMASK, r3
}
 800efd2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d027      	beq.n	800f02a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800efda:	783b      	ldrb	r3, [r7, #0]
 800efdc:	f003 0310 	and.w	r3, r3, #16
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d001      	beq.n	800efea <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800efe6:	f7ff fa07 	bl	800e3f8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800efea:	783b      	ldrb	r3, [r7, #0]
 800efec:	f003 0308 	and.w	r3, r3, #8
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d001      	beq.n	800effa <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800eff6:	f7ff fabf 	bl	800e578 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800effa:	783b      	ldrb	r3, [r7, #0]
 800effc:	f003 0304 	and.w	r3, r3, #4
 800f000:	b2db      	uxtb	r3, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f006:	f7ff feff 	bl	800ee08 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f00a:	783b      	ldrb	r3, [r7, #0]
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	b2db      	uxtb	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f016:	f7ff ffb7 	bl	800ef88 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f01a:	783b      	ldrb	r3, [r7, #0]
 800f01c:	f003 0301 	and.w	r3, r3, #1
 800f020:	b2db      	uxtb	r3, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	d001      	beq.n	800f02a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f026:	f7ff ffb7 	bl	800ef98 <ProcessRadioRxTimeout>
        }
    }
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	20003b4c 	.word	0x20003b4c

0800f038 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f03c:	4b08      	ldr	r3, [pc, #32]	@ (800f060 <LoRaMacIsBusy+0x28>)
 800f03e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f042:	2b00      	cmp	r3, #0
 800f044:	d106      	bne.n	800f054 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f046:	4b06      	ldr	r3, [pc, #24]	@ (800f060 <LoRaMacIsBusy+0x28>)
 800f048:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d101      	bne.n	800f054 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800f050:	2300      	movs	r3, #0
 800f052:	e000      	b.n	800f056 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800f054:	2301      	movs	r3, #1
}
 800f056:	4618      	mov	r0, r3
 800f058:	46bd      	mov	sp, r7
 800f05a:	bc80      	pop	{r7}
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	20003034 	.word	0x20003034

0800f064 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	4603      	mov	r3, r0
 800f06c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f06e:	4a04      	ldr	r2, [pc, #16]	@ (800f080 <LoRaMacEnableRequests+0x1c>)
 800f070:	79fb      	ldrb	r3, [r7, #7]
 800f072:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800f076:	bf00      	nop
 800f078:	370c      	adds	r7, #12
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bc80      	pop	{r7}
 800f07e:	4770      	bx	lr
 800f080:	20003034 	.word	0x20003034

0800f084 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f08a:	4b2c      	ldr	r3, [pc, #176]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f08c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f090:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f092:	4b2a      	ldr	r3, [pc, #168]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f094:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d14a      	bne.n	800f132 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f09c:	4b27      	ldr	r3, [pc, #156]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f09e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d006      	beq.n	800f0ba <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f0ac:	4a23      	ldr	r2, [pc, #140]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f0ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f0b2:	f36f 0300 	bfc	r3, #0, #1
 800f0b6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f0ba:	4b20      	ldr	r3, [pc, #128]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f0bc:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f0c0:	f003 0304 	and.w	r3, r3, #4
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d006      	beq.n	800f0d8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f0ca:	4a1c      	ldr	r2, [pc, #112]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f0cc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f0d0:	f36f 0382 	bfc	r3, #2, #1
 800f0d4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f0d8:	2001      	movs	r0, #1
 800f0da:	f7ff ffc3 	bl	800f064 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f0de:	793b      	ldrb	r3, [r7, #4]
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d005      	beq.n	800f0f6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f0ea:	4b14      	ldr	r3, [pc, #80]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f0ec:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4813      	ldr	r0, [pc, #76]	@ (800f140 <LoRaMacHandleRequestEvents+0xbc>)
 800f0f4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f0f6:	793b      	ldrb	r3, [r7, #4]
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00e      	beq.n	800f120 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f102:	4810      	ldr	r0, [pc, #64]	@ (800f144 <LoRaMacHandleRequestEvents+0xc0>)
 800f104:	f004 fad8 	bl	80136b8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f108:	f004 fb22 	bl	8013750 <LoRaMacConfirmQueueGetCnt>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d006      	beq.n	800f120 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f112:	4a0a      	ldr	r2, [pc, #40]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f114:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f118:	f043 0304 	orr.w	r3, r3, #4
 800f11c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f120:	f003 fe09 	bl	8012d36 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f124:	4a05      	ldr	r2, [pc, #20]	@ (800f13c <LoRaMacHandleRequestEvents+0xb8>)
 800f126:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f12a:	f36f 1345 	bfc	r3, #5, #1
 800f12e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20003034 	.word	0x20003034
 800f140:	2000346c 	.word	0x2000346c
 800f144:	20003480 	.word	0x20003480

0800f148 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f14e:	4b0a      	ldr	r3, [pc, #40]	@ (800f178 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800f150:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f158:	2300      	movs	r3, #0
 800f15a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f15c:	1dfb      	adds	r3, r7, #7
 800f15e:	4618      	mov	r0, r3
 800f160:	f004 f890 	bl	8013284 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f164:	79fb      	ldrb	r3, [r7, #7]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f16a:	f000 fc81 	bl	800fa70 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20003034 	.word	0x20003034

0800f17c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f182:	4b25      	ldr	r3, [pc, #148]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f184:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f188:	f003 0308 	and.w	r3, r3, #8
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00d      	beq.n	800f1ae <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f192:	4a21      	ldr	r2, [pc, #132]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f194:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f198:	f36f 03c3 	bfc	r3, #3, #1
 800f19c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f1a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1a2:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	491c      	ldr	r1, [pc, #112]	@ (800f21c <LoRaMacHandleIndicationEvents+0xa0>)
 800f1aa:	481d      	ldr	r0, [pc, #116]	@ (800f220 <LoRaMacHandleIndicationEvents+0xa4>)
 800f1ac:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1b0:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f1b4:	f003 0310 	and.w	r3, r3, #16
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d012      	beq.n	800f1e4 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f1be:	2307      	movs	r3, #7
 800f1c0:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800f1c6:	4b14      	ldr	r3, [pc, #80]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1c8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	1d3a      	adds	r2, r7, #4
 800f1d0:	4912      	ldr	r1, [pc, #72]	@ (800f21c <LoRaMacHandleIndicationEvents+0xa0>)
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f1d6:	4a10      	ldr	r2, [pc, #64]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1d8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f1dc:	f36f 1304 	bfc	r3, #4, #1
 800f1e0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1e6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f1ea:	f003 0302 	and.w	r3, r3, #2
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00d      	beq.n	800f210 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f1f4:	4a08      	ldr	r2, [pc, #32]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f1f6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f1fa:	f36f 0341 	bfc	r3, #1, #1
 800f1fe:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f202:	4b05      	ldr	r3, [pc, #20]	@ (800f218 <LoRaMacHandleIndicationEvents+0x9c>)
 800f204:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	4904      	ldr	r1, [pc, #16]	@ (800f21c <LoRaMacHandleIndicationEvents+0xa0>)
 800f20c:	4805      	ldr	r0, [pc, #20]	@ (800f224 <LoRaMacHandleIndicationEvents+0xa8>)
 800f20e:	4798      	blx	r3
    }
}
 800f210:	bf00      	nop
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20003034 	.word	0x20003034
 800f21c:	200034b0 	.word	0x200034b0
 800f220:	20003494 	.word	0x20003494
 800f224:	20003450 	.word	0x20003450

0800f228 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f22e:	4b32      	ldr	r3, [pc, #200]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f230:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f234:	f003 0301 	and.w	r3, r3, #1
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d058      	beq.n	800f2f0 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f23e:	2300      	movs	r3, #0
 800f240:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f242:	2300      	movs	r3, #0
 800f244:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f246:	4b2c      	ldr	r3, [pc, #176]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f248:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f250:	4b29      	ldr	r3, [pc, #164]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f252:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f256:	2b03      	cmp	r3, #3
 800f258:	d104      	bne.n	800f264 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f25a:	f002 f8ad 	bl	80113b8 <CheckRetransUnconfirmedUplink>
 800f25e:	4603      	mov	r3, r0
 800f260:	71fb      	strb	r3, [r7, #7]
 800f262:	e020      	b.n	800f2a6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f264:	4b24      	ldr	r3, [pc, #144]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f266:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d11b      	bne.n	800f2a6 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f26e:	4b22      	ldr	r3, [pc, #136]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f270:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 800f274:	2b00      	cmp	r3, #0
 800f276:	d014      	beq.n	800f2a2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f278:	f002 f8ca 	bl	8011410 <CheckRetransConfirmedUplink>
 800f27c:	4603      	mov	r3, r0
 800f27e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f280:	4b1e      	ldr	r3, [pc, #120]	@ (800f2fc <LoRaMacHandleMcpsRequest+0xd4>)
 800f282:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800f286:	2b00      	cmp	r3, #0
 800f288:	d10d      	bne.n	800f2a6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f28a:	79fb      	ldrb	r3, [r7, #7]
 800f28c:	f083 0301 	eor.w	r3, r3, #1
 800f290:	b2db      	uxtb	r3, r3
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f296:	f002 f937 	bl	8011508 <AckTimeoutRetriesProcess>
 800f29a:	e004      	b.n	800f2a6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f29c:	f002 f972 	bl	8011584 <AckTimeoutRetriesFinalize>
 800f2a0:	e001      	b.n	800f2a6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00d      	beq.n	800f2c8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f2ac:	4814      	ldr	r0, [pc, #80]	@ (800f300 <LoRaMacHandleMcpsRequest+0xd8>)
 800f2ae:	f00d fb33 	bl	801c918 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f2b2:	4b11      	ldr	r3, [pc, #68]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f2b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f2b8:	f023 0320 	bic.w	r3, r3, #32
 800f2bc:	4a0e      	ldr	r2, [pc, #56]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f2be:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f2c2:	f002 f8c7 	bl	8011454 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f2c6:	e013      	b.n	800f2f0 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800f2c8:	79bb      	ldrb	r3, [r7, #6]
 800f2ca:	f083 0301 	eor.w	r3, r3, #1
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00d      	beq.n	800f2f0 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f2d4:	4a08      	ldr	r2, [pc, #32]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f2d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f2da:	f36f 1345 	bfc	r3, #5, #1
 800f2de:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800f2e2:	4b05      	ldr	r3, [pc, #20]	@ (800f2f8 <LoRaMacHandleMcpsRequest+0xd0>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
            OnTxDelayedTimerEvent( NULL );
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	f000 f97e 	bl	800f5ec <OnTxDelayedTimerEvent>
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20003034 	.word	0x20003034
 800f2fc:	2000353c 	.word	0x2000353c
 800f300:	2000339c 	.word	0x2000339c

0800f304 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f308:	4b1b      	ldr	r3, [pc, #108]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f30a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f30e:	f003 0304 	and.w	r3, r3, #4
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b00      	cmp	r3, #0
 800f316:	d02c      	beq.n	800f372 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f318:	2001      	movs	r0, #1
 800f31a:	f004 f9b3 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d012      	beq.n	800f34a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f324:	2001      	movs	r0, #1
 800f326:	f004 f94f 	bl	80135c8 <LoRaMacConfirmQueueGetStatus>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d103      	bne.n	800f338 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f330:	4b11      	ldr	r3, [pc, #68]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f332:	2200      	movs	r2, #0
 800f334:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f338:	4b0f      	ldr	r3, [pc, #60]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f33a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f33e:	f023 0302 	bic.w	r3, r3, #2
 800f342:	4a0d      	ldr	r2, [pc, #52]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f344:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f348:	e013      	b.n	800f372 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f34a:	2005      	movs	r0, #5
 800f34c:	f004 f99a 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d105      	bne.n	800f362 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f356:	2006      	movs	r0, #6
 800f358:	f004 f994 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800f35c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d007      	beq.n	800f372 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f362:	4b05      	ldr	r3, [pc, #20]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f364:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f368:	f023 0302 	bic.w	r3, r3, #2
 800f36c:	4a02      	ldr	r2, [pc, #8]	@ (800f378 <LoRaMacHandleMlmeRequest+0x74>)
 800f36e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f372:	bf00      	nop
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	20003034 	.word	0x20003034

0800f37c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f380:	200c      	movs	r0, #12
 800f382:	f004 f97f 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d019      	beq.n	800f3c0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f38c:	4b0e      	ldr	r3, [pc, #56]	@ (800f3c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f38e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f392:	f003 0301 	and.w	r3, r3, #1
 800f396:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d111      	bne.n	800f3c0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f39c:	4b0a      	ldr	r3, [pc, #40]	@ (800f3c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f39e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f3a2:	f003 0304 	and.w	r3, r3, #4
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d009      	beq.n	800f3c0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f3ac:	4b06      	ldr	r3, [pc, #24]	@ (800f3c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f3ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3b2:	f023 0302 	bic.w	r3, r3, #2
 800f3b6:	4a04      	ldr	r2, [pc, #16]	@ (800f3c8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f3b8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e000      	b.n	800f3c2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	20003034 	.word	0x20003034

0800f3cc <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f3d0:	4b0d      	ldr	r3, [pc, #52]	@ (800f408 <LoRaMacCheckForRxAbort+0x3c>)
 800f3d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00f      	beq.n	800f3fe <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f3de:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <LoRaMacCheckForRxAbort+0x3c>)
 800f3e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3e8:	4a07      	ldr	r2, [pc, #28]	@ (800f408 <LoRaMacCheckForRxAbort+0x3c>)
 800f3ea:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f3ee:	4b06      	ldr	r3, [pc, #24]	@ (800f408 <LoRaMacCheckForRxAbort+0x3c>)
 800f3f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3f4:	f023 0302 	bic.w	r3, r3, #2
 800f3f8:	4a03      	ldr	r2, [pc, #12]	@ (800f408 <LoRaMacCheckForRxAbort+0x3c>)
 800f3fa:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f3fe:	bf00      	nop
 800f400:	46bd      	mov	sp, r7
 800f402:	bc80      	pop	{r7}
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20003034 	.word	0x20003034

0800f40c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f414:	2300      	movs	r3, #0
 800f416:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f418:	2300      	movs	r3, #0
 800f41a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f41c:	4b50      	ldr	r3, [pc, #320]	@ (800f560 <LoRaMacHandleNvm+0x154>)
 800f41e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f422:	2b00      	cmp	r3, #0
 800f424:	f040 8098 	bne.w	800f558 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2124      	movs	r1, #36	@ 0x24
 800f42c:	4618      	mov	r0, r3
 800f42e:	f009 facb 	bl	80189c8 <Crc32>
 800f432:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d006      	beq.n	800f44c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f444:	89fb      	ldrh	r3, [r7, #14]
 800f446:	f043 0301 	orr.w	r3, r3, #1
 800f44a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	3328      	adds	r3, #40	@ 0x28
 800f450:	2114      	movs	r1, #20
 800f452:	4618      	mov	r0, r3
 800f454:	f009 fab8 	bl	80189c8 <Crc32>
 800f458:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	429a      	cmp	r2, r3
 800f462:	d006      	beq.n	800f472 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f46a:	89fb      	ldrh	r3, [r7, #14]
 800f46c:	f043 0302 	orr.w	r3, r3, #2
 800f470:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3340      	adds	r3, #64	@ 0x40
 800f476:	21d4      	movs	r1, #212	@ 0xd4
 800f478:	4618      	mov	r0, r3
 800f47a:	f009 faa5 	bl	80189c8 <Crc32>
 800f47e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d007      	beq.n	800f49c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f494:	89fb      	ldrh	r3, [r7, #14]
 800f496:	f043 0304 	orr.w	r3, r3, #4
 800f49a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800f4a2:	21bc      	movs	r1, #188	@ 0xbc
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f009 fa8f 	bl	80189c8 <Crc32>
 800f4aa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d007      	beq.n	800f4c8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f4c0:	89fb      	ldrh	r3, [r7, #14]
 800f4c2:	f043 0308 	orr.w	r3, r3, #8
 800f4c6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800f4ce:	21a0      	movs	r1, #160	@ 0xa0
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f009 fa79 	bl	80189c8 <Crc32>
 800f4d6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d007      	beq.n	800f4f4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f4ec:	89fb      	ldrh	r3, [r7, #14]
 800f4ee:	f043 0310 	orr.w	r3, r3, #16
 800f4f2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800f4fa:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f4fe:	4618      	mov	r0, r3
 800f500:	f009 fa62 	bl	80189c8 <Crc32>
 800f504:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	@ 0x5f4
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d007      	beq.n	800f522 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	68ba      	ldr	r2, [r7, #8]
 800f516:	f8c3 25f4 	str.w	r2, [r3, #1524]	@ 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f51a:	89fb      	ldrh	r3, [r7, #14]
 800f51c:	f043 0320 	orr.w	r3, r3, #32
 800f520:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f503 63bf 	add.w	r3, r3, #1528	@ 0x5f8
 800f528:	2114      	movs	r1, #20
 800f52a:	4618      	mov	r0, r3
 800f52c:	f009 fa4c 	bl	80189c8 <Crc32>
 800f530:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 360c 	ldr.w	r3, [r3, #1548]	@ 0x60c
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d007      	beq.n	800f54e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	f8c3 260c 	str.w	r2, [r3, #1548]	@ 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f546:	89fb      	ldrh	r3, [r7, #14]
 800f548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f54c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f54e:	89fb      	ldrh	r3, [r7, #14]
 800f550:	4618      	mov	r0, r3
 800f552:	f001 ffbb 	bl	80114cc <CallNvmDataChangeCallback>
 800f556:	e000      	b.n	800f55a <LoRaMacHandleNvm+0x14e>
        return;
 800f558:	bf00      	nop
}
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20003034 	.word	0x20003034

0800f564 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f56a:	2300      	movs	r3, #0
 800f56c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f56e:	f7ff fd1b 	bl	800efa8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f572:	f003 fc44 	bl	8012dfe <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f576:	4b1b      	ldr	r3, [pc, #108]	@ (800f5e4 <LoRaMacProcess+0x80>)
 800f578:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800f57c:	f003 0320 	and.w	r3, r3, #32
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d021      	beq.n	800f5ca <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f586:	2000      	movs	r0, #0
 800f588:	f7ff fd6c 	bl	800f064 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f58c:	f7ff ff1e 	bl	800f3cc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f590:	f002 f82c 	bl	80115ec <IsRequestPending>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d006      	beq.n	800f5a8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f59a:	f7ff feef 	bl	800f37c <LoRaMacCheckForBeaconAcquisition>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	79fb      	ldrb	r3, [r7, #7]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d103      	bne.n	800f5b6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f5ae:	f7ff fea9 	bl	800f304 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f5b2:	f7ff fe39 	bl	800f228 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f5b6:	f7ff fd65 	bl	800f084 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f5ba:	f7ff fdc5 	bl	800f148 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800f5be:	480a      	ldr	r0, [pc, #40]	@ (800f5e8 <LoRaMacProcess+0x84>)
 800f5c0:	f7ff ff24 	bl	800f40c <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	f7ff fd4d 	bl	800f064 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800f5ca:	f7ff fdd7 	bl	800f17c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f5ce:	4b05      	ldr	r3, [pc, #20]	@ (800f5e4 <LoRaMacProcess+0x80>)
 800f5d0:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d101      	bne.n	800f5dc <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800f5d8:	f001 fb8c 	bl	8010cf4 <OpenContinuousRxCWindow>
    }
}
 800f5dc:	bf00      	nop
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	20003034 	.word	0x20003034
 800f5e8:	2000353c 	.word	0x2000353c

0800f5ec <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f5f4:	4817      	ldr	r0, [pc, #92]	@ (800f654 <OnTxDelayedTimerEvent+0x68>)
 800f5f6:	f00d f98f 	bl	801c918 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f5fa:	4b17      	ldr	r3, [pc, #92]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f5fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f600:	f023 0320 	bic.w	r3, r3, #32
 800f604:	4a14      	ldr	r2, [pc, #80]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f606:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f60a:	2001      	movs	r0, #1
 800f60c:	f001 f90c 	bl	8010828 <ScheduleTx>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d018      	beq.n	800f648 <OnTxDelayedTimerEvent+0x5c>
 800f616:	2b0b      	cmp	r3, #11
 800f618:	d016      	beq.n	800f648 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f61a:	4b10      	ldr	r3, [pc, #64]	@ (800f65c <OnTxDelayedTimerEvent+0x70>)
 800f61c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f620:	b2da      	uxtb	r2, r3
 800f622:	4b0d      	ldr	r3, [pc, #52]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f624:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f628:	4b0b      	ldr	r3, [pc, #44]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f62a:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800f62e:	4b0a      	ldr	r3, [pc, #40]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f630:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f634:	4b08      	ldr	r3, [pc, #32]	@ (800f658 <OnTxDelayedTimerEvent+0x6c>)
 800f636:	2209      	movs	r2, #9
 800f638:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f63c:	2009      	movs	r0, #9
 800f63e:	f003 ffed 	bl	801361c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f642:	f001 ff07 	bl	8011454 <StopRetransmission>
            break;
 800f646:	e000      	b.n	800f64a <OnTxDelayedTimerEvent+0x5e>
            break;
 800f648:	bf00      	nop
        }
    }
}
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	2000339c 	.word	0x2000339c
 800f658:	20003034 	.word	0x20003034
 800f65c:	2000353c 	.word	0x2000353c

0800f660 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f668:	4b14      	ldr	r3, [pc, #80]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f66a:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 800f66e:	4b13      	ldr	r3, [pc, #76]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f670:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f674:	4b12      	ldr	r3, [pc, #72]	@ (800f6c0 <OnRxWindow1TimerEvent+0x60>)
 800f676:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f67a:	b25a      	sxtb	r2, r3
 800f67c:	4b0f      	ldr	r3, [pc, #60]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f67e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f682:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c0 <OnRxWindow1TimerEvent+0x60>)
 800f684:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f688:	4b0c      	ldr	r3, [pc, #48]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f68a:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f68e:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c0 <OnRxWindow1TimerEvent+0x60>)
 800f690:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f694:	4b09      	ldr	r3, [pc, #36]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f696:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f69a:	4b08      	ldr	r3, [pc, #32]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f6a2:	4b06      	ldr	r3, [pc, #24]	@ (800f6bc <OnRxWindow1TimerEvent+0x5c>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f6aa:	4906      	ldr	r1, [pc, #24]	@ (800f6c4 <OnRxWindow1TimerEvent+0x64>)
 800f6ac:	4806      	ldr	r0, [pc, #24]	@ (800f6c8 <OnRxWindow1TimerEvent+0x68>)
 800f6ae:	f001 faf3 	bl	8010c98 <RxWindowSetup>
}
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20003034 	.word	0x20003034
 800f6c0:	2000353c 	.word	0x2000353c
 800f6c4:	200033ec 	.word	0x200033ec
 800f6c8:	200033b4 	.word	0x200033b4

0800f6cc <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f6d4:	4b16      	ldr	r3, [pc, #88]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f6d6:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d023      	beq.n	800f726 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f6de:	4b14      	ldr	r3, [pc, #80]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f6e0:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 800f6e4:	4b12      	ldr	r3, [pc, #72]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f6e6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f6ea:	4b12      	ldr	r3, [pc, #72]	@ (800f734 <OnRxWindow2TimerEvent+0x68>)
 800f6ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6ee:	4a10      	ldr	r2, [pc, #64]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f6f0:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f6f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f734 <OnRxWindow2TimerEvent+0x68>)
 800f6f6:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f6fc:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f700:	4b0c      	ldr	r3, [pc, #48]	@ (800f734 <OnRxWindow2TimerEvent+0x68>)
 800f702:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f706:	4b0a      	ldr	r3, [pc, #40]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f708:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f70c:	4b08      	ldr	r3, [pc, #32]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f70e:	2200      	movs	r2, #0
 800f710:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f714:	4b06      	ldr	r3, [pc, #24]	@ (800f730 <OnRxWindow2TimerEvent+0x64>)
 800f716:	2201      	movs	r2, #1
 800f718:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f71c:	4906      	ldr	r1, [pc, #24]	@ (800f738 <OnRxWindow2TimerEvent+0x6c>)
 800f71e:	4807      	ldr	r0, [pc, #28]	@ (800f73c <OnRxWindow2TimerEvent+0x70>)
 800f720:	f001 faba 	bl	8010c98 <RxWindowSetup>
 800f724:	e000      	b.n	800f728 <OnRxWindow2TimerEvent+0x5c>
        return;
 800f726:	bf00      	nop
}
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	20003034 	.word	0x20003034
 800f734:	2000353c 	.word	0x2000353c
 800f738:	20003400 	.word	0x20003400
 800f73c:	200033cc 	.word	0x200033cc

0800f740 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800f748:	4815      	ldr	r0, [pc, #84]	@ (800f7a0 <OnAckTimeoutTimerEvent+0x60>)
 800f74a:	f00d f8e5 	bl	801c918 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f74e:	4b15      	ldr	r3, [pc, #84]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f750:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 800f754:	2b00      	cmp	r3, #0
 800f756:	d003      	beq.n	800f760 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800f758:	4b12      	ldr	r3, [pc, #72]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f760:	4b11      	ldr	r3, [pc, #68]	@ (800f7a8 <OnAckTimeoutTimerEvent+0x68>)
 800f762:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800f766:	2b02      	cmp	r3, #2
 800f768:	d106      	bne.n	800f778 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f76a:	4a0e      	ldr	r2, [pc, #56]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f76c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f770:	f043 0320 	orr.w	r3, r3, #32
 800f774:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f778:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f77a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00a      	beq.n	800f798 <OnAckTimeoutTimerEvent+0x58>
 800f782:	4b08      	ldr	r3, [pc, #32]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f784:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d004      	beq.n	800f798 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f78e:	4b05      	ldr	r3, [pc, #20]	@ (800f7a4 <OnAckTimeoutTimerEvent+0x64>)
 800f790:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	4798      	blx	r3
    }
}
 800f798:	bf00      	nop
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	2000342c 	.word	0x2000342c
 800f7a4:	20003034 	.word	0x20003034
 800f7a8:	2000353c 	.word	0x2000353c

0800f7ac <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60ba      	str	r2, [r7, #8]
 800f7b4:	607b      	str	r3, [r7, #4]
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d005      	beq.n	800f7d0 <GetFCntDown+0x24>
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d002      	beq.n	800f7d0 <GetFCntDown+0x24>
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f7d0:	230a      	movs	r3, #10
 800f7d2:	e029      	b.n	800f828 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d016      	beq.n	800f808 <GetFCntDown+0x5c>
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d118      	bne.n	800f810 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f7de:	79bb      	ldrb	r3, [r7, #6]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d10d      	bne.n	800f800 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d002      	beq.n	800f7f0 <GetFCntDown+0x44>
 800f7ea:	7bbb      	ldrb	r3, [r7, #14]
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	d103      	bne.n	800f7f8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	2202      	movs	r2, #2
 800f7f4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f7f6:	e00d      	b.n	800f814 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	701a      	strb	r2, [r3, #0]
            break;
 800f7fe:	e009      	b.n	800f814 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	2203      	movs	r2, #3
 800f804:	701a      	strb	r2, [r3, #0]
            break;
 800f806:	e005      	b.n	800f814 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	2204      	movs	r2, #4
 800f80c:	701a      	strb	r2, [r3, #0]
            break;
 800f80e:	e001      	b.n	800f814 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f810:	2305      	movs	r3, #5
 800f812:	e009      	b.n	800f828 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	7818      	ldrb	r0, [r3, #0]
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	89db      	ldrh	r3, [r3, #14]
 800f81c:	461a      	mov	r2, r3
 800f81e:	8b39      	ldrh	r1, [r7, #24]
 800f820:	6a3b      	ldr	r3, [r7, #32]
 800f822:	f004 fb25 	bl	8013e70 <LoRaMacCryptoGetFCntDown>
 800f826:	4603      	mov	r3, r0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f830:	b5b0      	push	{r4, r5, r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	4603      	mov	r3, r0
 800f838:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f83a:	2303      	movs	r3, #3
 800f83c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f83e:	4b61      	ldr	r3, [pc, #388]	@ (800f9c4 <SwitchClass+0x194>)
 800f840:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 800f844:	2b02      	cmp	r3, #2
 800f846:	f000 80a5 	beq.w	800f994 <SwitchClass+0x164>
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	f300 80b4 	bgt.w	800f9b8 <SwitchClass+0x188>
 800f850:	2b00      	cmp	r3, #0
 800f852:	d003      	beq.n	800f85c <SwitchClass+0x2c>
 800f854:	2b01      	cmp	r3, #1
 800f856:	f000 808f 	beq.w	800f978 <SwitchClass+0x148>
 800f85a:	e0ad      	b.n	800f9b8 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d107      	bne.n	800f872 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f862:	4b58      	ldr	r3, [pc, #352]	@ (800f9c4 <SwitchClass+0x194>)
 800f864:	4a57      	ldr	r2, [pc, #348]	@ (800f9c4 <SwitchClass+0x194>)
 800f866:	336c      	adds	r3, #108	@ 0x6c
 800f868:	3264      	adds	r2, #100	@ 0x64
 800f86a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f86e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f872:	79fb      	ldrb	r3, [r7, #7]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d10c      	bne.n	800f892 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f003 fa61 	bl	8012d42 <LoRaMacClassBSwitchClass>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d103      	bne.n	800f892 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f88a:	4a4e      	ldr	r2, [pc, #312]	@ (800f9c4 <SwitchClass+0x194>)
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	2b02      	cmp	r3, #2
 800f896:	f040 808a 	bne.w	800f9ae <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f89a:	4a4a      	ldr	r2, [pc, #296]	@ (800f9c4 <SwitchClass+0x194>)
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f8a2:	4a49      	ldr	r2, [pc, #292]	@ (800f9c8 <SwitchClass+0x198>)
 800f8a4:	4b48      	ldr	r3, [pc, #288]	@ (800f9c8 <SwitchClass+0x198>)
 800f8a6:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800f8aa:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800f8ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f8b6:	4b44      	ldr	r3, [pc, #272]	@ (800f9c8 <SwitchClass+0x198>)
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f8be:	2300      	movs	r3, #0
 800f8c0:	73bb      	strb	r3, [r7, #14]
 800f8c2:	e049      	b.n	800f958 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8c8:	4a3e      	ldr	r2, [pc, #248]	@ (800f9c4 <SwitchClass+0x194>)
 800f8ca:	212c      	movs	r1, #44	@ 0x2c
 800f8cc:	fb01 f303 	mul.w	r3, r1, r3
 800f8d0:	4413      	add	r3, r2
 800f8d2:	33d2      	adds	r3, #210	@ 0xd2
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d038      	beq.n	800f94c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f8da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8de:	4a39      	ldr	r2, [pc, #228]	@ (800f9c4 <SwitchClass+0x194>)
 800f8e0:	212c      	movs	r1, #44	@ 0x2c
 800f8e2:	fb01 f303 	mul.w	r3, r1, r3
 800f8e6:	4413      	add	r3, r2
 800f8e8:	33e8      	adds	r3, #232	@ 0xe8
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a35      	ldr	r2, [pc, #212]	@ (800f9c4 <SwitchClass+0x194>)
 800f8ee:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f8f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8f4:	4a33      	ldr	r2, [pc, #204]	@ (800f9c4 <SwitchClass+0x194>)
 800f8f6:	212c      	movs	r1, #44	@ 0x2c
 800f8f8:	fb01 f303 	mul.w	r3, r1, r3
 800f8fc:	4413      	add	r3, r2
 800f8fe:	33ec      	adds	r3, #236	@ 0xec
 800f900:	f993 3000 	ldrsb.w	r3, [r3]
 800f904:	b2da      	uxtb	r2, r3
 800f906:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c4 <SwitchClass+0x194>)
 800f908:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f90c:	4b2e      	ldr	r3, [pc, #184]	@ (800f9c8 <SwitchClass+0x198>)
 800f90e:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 800f912:	4b2d      	ldr	r3, [pc, #180]	@ (800f9c8 <SwitchClass+0x198>)
 800f914:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f918:	4b2a      	ldr	r3, [pc, #168]	@ (800f9c4 <SwitchClass+0x194>)
 800f91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f91c:	4a2a      	ldr	r2, [pc, #168]	@ (800f9c8 <SwitchClass+0x198>)
 800f91e:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f922:	4b28      	ldr	r3, [pc, #160]	@ (800f9c4 <SwitchClass+0x194>)
 800f924:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f928:	4b27      	ldr	r3, [pc, #156]	@ (800f9c8 <SwitchClass+0x198>)
 800f92a:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f92e:	4b25      	ldr	r3, [pc, #148]	@ (800f9c4 <SwitchClass+0x194>)
 800f930:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f934:	4b24      	ldr	r3, [pc, #144]	@ (800f9c8 <SwitchClass+0x198>)
 800f936:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f93a:	4b23      	ldr	r3, [pc, #140]	@ (800f9c8 <SwitchClass+0x198>)
 800f93c:	2203      	movs	r2, #3
 800f93e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f942:	4b21      	ldr	r3, [pc, #132]	@ (800f9c8 <SwitchClass+0x198>)
 800f944:	2201      	movs	r2, #1
 800f946:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800f94a:	e009      	b.n	800f960 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f94c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f950:	b2db      	uxtb	r3, r3
 800f952:	3301      	adds	r3, #1
 800f954:	b2db      	uxtb	r3, r3
 800f956:	73bb      	strb	r3, [r7, #14]
 800f958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	ddb1      	ble.n	800f8c4 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f960:	4b19      	ldr	r3, [pc, #100]	@ (800f9c8 <SwitchClass+0x198>)
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f968:	4b18      	ldr	r3, [pc, #96]	@ (800f9cc <SwitchClass+0x19c>)
 800f96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f96c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f96e:	f001 f9c1 	bl	8010cf4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f976:	e01a      	b.n	800f9ae <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f978:	79fb      	ldrb	r3, [r7, #7]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f003 f9e1 	bl	8012d42 <LoRaMacClassBSwitchClass>
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d113      	bne.n	800f9b2 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f98a:	4a0e      	ldr	r2, [pc, #56]	@ (800f9c4 <SwitchClass+0x194>)
 800f98c:	79fb      	ldrb	r3, [r7, #7]
 800f98e:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
            }
            break;
 800f992:	e00e      	b.n	800f9b2 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f994:	79fb      	ldrb	r3, [r7, #7]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10d      	bne.n	800f9b6 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f99a:	4a0a      	ldr	r2, [pc, #40]	@ (800f9c4 <SwitchClass+0x194>)
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9cc <SwitchClass+0x19c>)
 800f9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f9ac:	e003      	b.n	800f9b6 <SwitchClass+0x186>
            break;
 800f9ae:	bf00      	nop
 800f9b0:	e002      	b.n	800f9b8 <SwitchClass+0x188>
            break;
 800f9b2:	bf00      	nop
 800f9b4:	e000      	b.n	800f9b8 <SwitchClass+0x188>
            break;
 800f9b6:	bf00      	nop
        }
    }

    return status;
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000353c 	.word	0x2000353c
 800f9c8:	20003034 	.word	0x20003034
 800f9cc:	0801e020 	.word	0x0801e020

0800f9d0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f9da:	4b10      	ldr	r3, [pc, #64]	@ (800fa1c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f9dc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f9e0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f9e6:	230d      	movs	r3, #13
 800f9e8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800fa1c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f9ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d001      	beq.n	800f9f8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f9f4:	230e      	movs	r3, #14
 800f9f6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f9f8:	4b08      	ldr	r3, [pc, #32]	@ (800fa1c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f9fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9fe:	f107 0210 	add.w	r2, r7, #16
 800fa02:	4611      	mov	r1, r2
 800fa04:	4618      	mov	r0, r3
 800fa06:	f005 f8c0 	bl	8014b8a <RegionGetPhyParam>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	b2db      	uxtb	r3, r3
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3718      	adds	r7, #24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	2000353c 	.word	0x2000353c

0800fa20 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	71fb      	strb	r3, [r7, #7]
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	71bb      	strb	r3, [r7, #6]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fa32:	2300      	movs	r3, #0
 800fa34:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fa36:	2300      	movs	r3, #0
 800fa38:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fa3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7ff ffc6 	bl	800f9d0 <GetMaxAppPayloadWithoutFOptsLength>
 800fa44:	4603      	mov	r3, r0
 800fa46:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fa48:	79fb      	ldrb	r3, [r7, #7]
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	797b      	ldrb	r3, [r7, #5]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	4413      	add	r3, r2
 800fa52:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fa54:	89ba      	ldrh	r2, [r7, #12]
 800fa56:	89fb      	ldrh	r3, [r7, #14]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d804      	bhi.n	800fa66 <ValidatePayloadLength+0x46>
 800fa5c:	89bb      	ldrh	r3, [r7, #12]
 800fa5e:	2bff      	cmp	r3, #255	@ 0xff
 800fa60:	d801      	bhi.n	800fa66 <ValidatePayloadLength+0x46>
    {
        return true;
 800fa62:	2301      	movs	r3, #1
 800fa64:	e000      	b.n	800fa68 <ValidatePayloadLength+0x48>
    }
    return false;
 800fa66:	2300      	movs	r3, #0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800fa70:	b480      	push	{r7}
 800fa72:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800fa74:	4a05      	ldr	r2, [pc, #20]	@ (800fa8c <SetMlmeScheduleUplinkIndication+0x1c>)
 800fa76:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800fa7a:	f043 0310 	orr.w	r3, r3, #16
 800fa7e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800fa82:	bf00      	nop
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bc80      	pop	{r7}
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop
 800fa8c:	20003034 	.word	0x20003034

0800fa90 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fa90:	b590      	push	{r4, r7, lr}
 800fa92:	b0a5      	sub	sp, #148	@ 0x94
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	4608      	mov	r0, r1
 800fa9a:	4611      	mov	r1, r2
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4603      	mov	r3, r0
 800faa0:	70fb      	strb	r3, [r7, #3]
 800faa2:	460b      	mov	r3, r1
 800faa4:	70bb      	strb	r3, [r7, #2]
 800faa6:	4613      	mov	r3, r2
 800faa8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800fab0:	2300      	movs	r3, #0
 800fab2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fab6:	2300      	movs	r3, #0
 800fab8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    while( macIndex < commandsSize )
 800fabc:	f000 bc83 	b.w	80103c6 <ProcessMacCommands+0x936>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fac0:	78fb      	ldrb	r3, [r7, #3]
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	4413      	add	r3, r2
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f003 fc03 	bl	80132d4 <LoRaMacCommandsGetCmdSize>
 800face:	4603      	mov	r3, r0
 800fad0:	461a      	mov	r2, r3
 800fad2:	78fb      	ldrb	r3, [r7, #3]
 800fad4:	441a      	add	r2, r3
 800fad6:	78bb      	ldrb	r3, [r7, #2]
 800fad8:	429a      	cmp	r2, r3
 800fada:	f300 847a 	bgt.w	80103d2 <ProcessMacCommands+0x942>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fade:	78fb      	ldrb	r3, [r7, #3]
 800fae0:	1c5a      	adds	r2, r3, #1
 800fae2:	70fa      	strb	r2, [r7, #3]
 800fae4:	461a      	mov	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4413      	add	r3, r2
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	3b02      	subs	r3, #2
 800faee:	2b11      	cmp	r3, #17
 800faf0:	f200 8471 	bhi.w	80103d6 <ProcessMacCommands+0x946>
 800faf4:	a201      	add	r2, pc, #4	@ (adr r2, 800fafc <ProcessMacCommands+0x6c>)
 800faf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fafa:	bf00      	nop
 800fafc:	0800fb45 	.word	0x0800fb45
 800fb00:	0800fb87 	.word	0x0800fb87
 800fb04:	0800fca3 	.word	0x0800fca3
 800fb08:	0800fce1 	.word	0x0800fce1
 800fb0c:	0800fdcf 	.word	0x0800fdcf
 800fb10:	0800fe2d 	.word	0x0800fe2d
 800fb14:	0800fee9 	.word	0x0800fee9
 800fb18:	0800ff43 	.word	0x0800ff43
 800fb1c:	08010027 	.word	0x08010027
 800fb20:	080103d7 	.word	0x080103d7
 800fb24:	080103d7 	.word	0x080103d7
 800fb28:	080100d1 	.word	0x080100d1
 800fb2c:	080103d7 	.word	0x080103d7
 800fb30:	080103d7 	.word	0x080103d7
 800fb34:	080101e7 	.word	0x080101e7
 800fb38:	0801021b 	.word	0x0801021b
 800fb3c:	080102ab 	.word	0x080102ab
 800fb40:	08010323 	.word	0x08010323
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800fb44:	2004      	movs	r0, #4
 800fb46:	f003 fd9d 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 842b 	beq.w	80103a8 <ProcessMacCommands+0x918>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800fb52:	2104      	movs	r1, #4
 800fb54:	2000      	movs	r0, #0
 800fb56:	f003 fd09 	bl	801356c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fb5a:	78fb      	ldrb	r3, [r7, #3]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	70fa      	strb	r2, [r7, #3]
 800fb60:	461a      	mov	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4413      	add	r3, r2
 800fb66:	781a      	ldrb	r2, [r3, #0]
 800fb68:	4bad      	ldr	r3, [pc, #692]	@ (800fe20 <ProcessMacCommands+0x390>)
 800fb6a:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800fb6e:	78fb      	ldrb	r3, [r7, #3]
 800fb70:	1c5a      	adds	r2, r3, #1
 800fb72:	70fa      	strb	r2, [r7, #3]
 800fb74:	461a      	mov	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4413      	add	r3, r2
 800fb7a:	781a      	ldrb	r2, [r3, #0]
 800fb7c:	4ba8      	ldr	r3, [pc, #672]	@ (800fe20 <ProcessMacCommands+0x390>)
 800fb7e:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
                }
                break;
 800fb82:	f000 bc11 	b.w	80103a8 <ProcessMacCommands+0x918>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                if( adrBlockFound == false )
 800fb9e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fba2:	f083 0301 	eor.w	r3, r3, #1
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 83ff 	beq.w	80103ac <ProcessMacCommands+0x91c>
                {
                    adrBlockFound = true;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800fbb4:	78fb      	ldrb	r3, [r7, #3]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	4413      	add	r3, r2
 800fbbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800fbbe:	78ba      	ldrb	r2, [r7, #2]
 800fbc0:	78fb      	ldrb	r3, [r7, #3]
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800fbce:	4b95      	ldr	r3, [pc, #596]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fbd0:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 800fbd4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fbd8:	4b92      	ldr	r3, [pc, #584]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fbda:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fbde:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbe2:	4b90      	ldr	r3, [pc, #576]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fbe4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fbe8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbec:	4b8d      	ldr	r3, [pc, #564]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fbee:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fbf2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fbf6:	4b8b      	ldr	r3, [pc, #556]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fbf8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fbfc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800fc00:	4b88      	ldr	r3, [pc, #544]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fc02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fc06:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800fc08:	4b86      	ldr	r3, [pc, #536]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fc0a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fc0e:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800fc12:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800fc16:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800fc1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	4623      	mov	r3, r4
 800fc28:	f005 f8b2 	bl	8014d90 <RegionLinkAdrReq>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800fc32:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fc36:	f003 0307 	and.w	r3, r3, #7
 800fc3a:	2b07      	cmp	r3, #7
 800fc3c:	d10e      	bne.n	800fc5c <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fc3e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800fc42:	4b78      	ldr	r3, [pc, #480]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fc44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fc48:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800fc4c:	4b75      	ldr	r3, [pc, #468]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fc4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fc52:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800fc56:	4b73      	ldr	r3, [pc, #460]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fc58:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fc62:	e00b      	b.n	800fc7c <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800fc64:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800fc68:	2201      	movs	r2, #1
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	2003      	movs	r0, #3
 800fc6e:	f003 f9e1 	bl	8013034 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fc72:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fc76:	3301      	adds	r3, #1
 800fc78:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fc7c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fc80:	4a69      	ldr	r2, [pc, #420]	@ (800fe28 <ProcessMacCommands+0x398>)
 800fc82:	fba2 2303 	umull	r2, r3, r2, r3
 800fc86:	089b      	lsrs	r3, r3, #2
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d3e8      	bcc.n	800fc64 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800fc92:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	4413      	add	r3, r2
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800fca0:	e384      	b.n	80103ac <ProcessMacCommands+0x91c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800fca2:	78fb      	ldrb	r3, [r7, #3]
 800fca4:	1c5a      	adds	r2, r3, #1
 800fca6:	70fa      	strb	r2, [r7, #3]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4413      	add	r3, r2
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 030f 	and.w	r3, r3, #15
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	4b5b      	ldr	r3, [pc, #364]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fcb8:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fcbc:	4b59      	ldr	r3, [pc, #356]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fcbe:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	4093      	lsls	r3, r2
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	4b56      	ldr	r3, [pc, #344]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fccc:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800fcd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	2004      	movs	r0, #4
 800fcda:	f003 f9ab 	bl	8013034 <LoRaMacCommandsAddCmd>
                break;
 800fcde:	e372      	b.n	80103c6 <ProcessMacCommands+0x936>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fce0:	2307      	movs	r3, #7
 800fce2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fce6:	78fb      	ldrb	r3, [r7, #3]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	4413      	add	r3, r2
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	091b      	lsrs	r3, r3, #4
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	b25b      	sxtb	r3, r3
 800fcf4:	f003 0307 	and.w	r3, r3, #7
 800fcf8:	b25b      	sxtb	r3, r3
 800fcfa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800fcfe:	78fb      	ldrb	r3, [r7, #3]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	4413      	add	r3, r2
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	b25b      	sxtb	r3, r3
 800fd08:	f003 030f 	and.w	r3, r3, #15
 800fd0c:	b25b      	sxtb	r3, r3
 800fd0e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fd12:	78fb      	ldrb	r3, [r7, #3]
 800fd14:	3301      	adds	r3, #1
 800fd16:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	1c5a      	adds	r2, r3, #1
 800fd1c:	70fa      	strb	r2, [r7, #3]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4413      	add	r3, r2
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	1c5a      	adds	r2, r3, #1
 800fd2c:	70fa      	strb	r2, [r7, #3]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4413      	add	r3, r2
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	021a      	lsls	r2, r3, #8
 800fd38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fd3e:	78fb      	ldrb	r3, [r7, #3]
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	70fa      	strb	r2, [r7, #3]
 800fd44:	461a      	mov	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	041a      	lsls	r2, r3, #16
 800fd4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd50:	4313      	orrs	r3, r2
 800fd52:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800fd54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd56:	2264      	movs	r2, #100	@ 0x64
 800fd58:	fb02 f303 	mul.w	r3, r2, r3
 800fd5c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800fd5e:	4b31      	ldr	r3, [pc, #196]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fd60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fd64:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f005 f837 	bl	8014dde <RegionRxParamSetupReq>
 800fd70:	4603      	mov	r3, r0
 800fd72:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800fd76:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	2b07      	cmp	r3, #7
 800fd80:	d117      	bne.n	800fdb2 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800fd82:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	4b26      	ldr	r3, [pc, #152]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fd8a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800fd8e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	4b23      	ldr	r3, [pc, #140]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fd96:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800fd9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd9c:	4a21      	ldr	r2, [pc, #132]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fd9e:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800fda0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fda2:	4a20      	ldr	r2, [pc, #128]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fda4:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800fda6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	4b1d      	ldr	r3, [pc, #116]	@ (800fe24 <ProcessMacCommands+0x394>)
 800fdae:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800fdb2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fdb6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800fdba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	2005      	movs	r0, #5
 800fdc4:	f003 f936 	bl	8013034 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800fdc8:	f7ff fe52 	bl	800fa70 <SetMlmeScheduleUplinkIndication>
                break;
 800fdcc:	e2fb      	b.n	80103c6 <ProcessMacCommands+0x936>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800fdce:	23ff      	movs	r3, #255	@ 0xff
 800fdd0:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800fdd4:	4b12      	ldr	r3, [pc, #72]	@ (800fe20 <ProcessMacCommands+0x390>)
 800fdd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00d      	beq.n	800fdfa <ProcessMacCommands+0x36a>
 800fdde:	4b10      	ldr	r3, [pc, #64]	@ (800fe20 <ProcessMacCommands+0x390>)
 800fde0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <ProcessMacCommands+0x36a>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800fdea:	4b0d      	ldr	r3, [pc, #52]	@ (800fe20 <ProcessMacCommands+0x390>)
 800fdec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4798      	blx	r3
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800fdfa:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800fdfe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800fe02:	787b      	ldrb	r3, [r7, #1]
 800fe04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800fe0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fe12:	2202      	movs	r2, #2
 800fe14:	4619      	mov	r1, r3
 800fe16:	2006      	movs	r0, #6
 800fe18:	f003 f90c 	bl	8013034 <LoRaMacCommandsAddCmd>
                break;
 800fe1c:	e2d3      	b.n	80103c6 <ProcessMacCommands+0x936>
 800fe1e:	bf00      	nop
 800fe20:	20003034 	.word	0x20003034
 800fe24:	2000353c 	.word	0x2000353c
 800fe28:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800fe32:	78fb      	ldrb	r3, [r7, #3]
 800fe34:	1c5a      	adds	r2, r3, #1
 800fe36:	70fa      	strb	r2, [r7, #3]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	b25b      	sxtb	r3, r3
 800fe42:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800fe46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fe4a:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800fe4c:	78fb      	ldrb	r3, [r7, #3]
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	70fa      	strb	r2, [r7, #3]
 800fe52:	461a      	mov	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4413      	add	r3, r2
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fe5c:	78fb      	ldrb	r3, [r7, #3]
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	70fa      	strb	r2, [r7, #3]
 800fe62:	461a      	mov	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	021a      	lsls	r2, r3, #8
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fe72:	78fb      	ldrb	r3, [r7, #3]
 800fe74:	1c5a      	adds	r2, r3, #1
 800fe76:	70fa      	strb	r2, [r7, #3]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	041a      	lsls	r2, r3, #16
 800fe82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe84:	4313      	orrs	r3, r2
 800fe86:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800fe88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe8a:	2264      	movs	r2, #100	@ 0x64
 800fe8c:	fb02 f303 	mul.w	r3, r2, r3
 800fe90:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800fe92:	2300      	movs	r3, #0
 800fe94:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800fe96:	78fb      	ldrb	r3, [r7, #3]
 800fe98:	1c5a      	adds	r2, r3, #1
 800fe9a:	70fa      	strb	r2, [r7, #3]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4413      	add	r3, r2
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	b25b      	sxtb	r3, r3
 800fea6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800feaa:	4b87      	ldr	r3, [pc, #540]	@ (80100c8 <ProcessMacCommands+0x638>)
 800feac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800feb0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f004 ffac 	bl	8014e14 <RegionNewChannelReq>
 800febc:	4603      	mov	r3, r0
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800fec4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fec8:	b25b      	sxtb	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	f2c0 8270 	blt.w	80103b0 <ProcessMacCommands+0x920>
                {
                    macCmdPayload[0] = status;
 800fed0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fed4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800fed8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fedc:	2201      	movs	r2, #1
 800fede:	4619      	mov	r1, r3
 800fee0:	2007      	movs	r0, #7
 800fee2:	f003 f8a7 	bl	8013034 <LoRaMacCommandsAddCmd>
                }
                break;
 800fee6:	e263      	b.n	80103b0 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800fee8:	78fb      	ldrb	r3, [r7, #3]
 800feea:	1c5a      	adds	r2, r3, #1
 800feec:	70fa      	strb	r2, [r7, #3]
 800feee:	461a      	mov	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4413      	add	r3, r2
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	f003 030f 	and.w	r3, r3, #15
 800fefa:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800fefe:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d104      	bne.n	800ff10 <ProcessMacCommands+0x480>
                {
                    delay++;
 800ff06:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800ff10:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ff14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff18:	fb02 f303 	mul.w	r3, r2, r3
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4b6a      	ldr	r3, [pc, #424]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ff20:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ff22:	4b69      	ldr	r3, [pc, #420]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ff24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff26:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ff2a:	4a67      	ldr	r2, [pc, #412]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ff2c:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800ff2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ff32:	2200      	movs	r2, #0
 800ff34:	4619      	mov	r1, r3
 800ff36:	2008      	movs	r0, #8
 800ff38:	f003 f87c 	bl	8013034 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800ff3c:	f7ff fd98 	bl	800fa70 <SetMlmeScheduleUplinkIndication>
                break;
 800ff40:	e241      	b.n	80103c6 <ProcessMacCommands+0x936>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800ff42:	78fb      	ldrb	r3, [r7, #3]
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	70fa      	strb	r2, [r7, #3]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800ff60:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ff64:	f003 0320 	and.w	r3, r3, #32
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d002      	beq.n	800ff72 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800ff72:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ff76:	f003 0310 	and.w	r3, r3, #16
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d002      	beq.n	800ff84 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800ff84:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800ff88:	f003 030f 	and.w	r3, r3, #15
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800ff92:	4b4d      	ldr	r3, [pc, #308]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ff94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ff98:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ff9c:	4611      	mov	r1, r2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f004 ff53 	bl	8014e4a <RegionTxParamSetupReq>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffaa:	f000 8203 	beq.w	80103b4 <ProcessMacCommands+0x924>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ffae:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800ffb2:	4b45      	ldr	r3, [pc, #276]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ffb4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ffb8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800ffbc:	4b42      	ldr	r3, [pc, #264]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ffbe:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ffc2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	4b40      	ldr	r3, [pc, #256]	@ (80100cc <ProcessMacCommands+0x63c>)
 800ffca:	5c9b      	ldrb	r3, [r3, r2]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f0 fc01 	bl	80007d4 <__aeabi_ui2f>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	4a3c      	ldr	r2, [pc, #240]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ffd6:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ffd8:	2302      	movs	r3, #2
 800ffda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ffde:	4b3a      	ldr	r3, [pc, #232]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ffe0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ffe4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffe8:	4b37      	ldr	r3, [pc, #220]	@ (80100c8 <ProcessMacCommands+0x638>)
 800ffea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ffee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f004 fdc8 	bl	8014b8a <RegionGetPhyParam>
 800fffa:	4603      	mov	r3, r0
 800fffc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010000:	b25a      	sxtb	r2, r3
 8010002:	4b31      	ldr	r3, [pc, #196]	@ (80100c8 <ProcessMacCommands+0x638>)
 8010004:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010008:	4293      	cmp	r3, r2
 801000a:	bfb8      	it	lt
 801000c:	4613      	movlt	r3, r2
 801000e:	b25a      	sxtb	r2, r3
 8010010:	4b2d      	ldr	r3, [pc, #180]	@ (80100c8 <ProcessMacCommands+0x638>)
 8010012:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010016:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801001a:	2200      	movs	r2, #0
 801001c:	4619      	mov	r1, r3
 801001e:	2009      	movs	r0, #9
 8010020:	f003 f808 	bl	8013034 <LoRaMacCommandsAddCmd>
                }
                break;
 8010024:	e1c6      	b.n	80103b4 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010026:	2303      	movs	r3, #3
 8010028:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801002c:	78fb      	ldrb	r3, [r7, #3]
 801002e:	1c5a      	adds	r2, r3, #1
 8010030:	70fa      	strb	r2, [r7, #3]
 8010032:	461a      	mov	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4413      	add	r3, r2
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801003e:	78fb      	ldrb	r3, [r7, #3]
 8010040:	1c5a      	adds	r2, r3, #1
 8010042:	70fa      	strb	r2, [r7, #3]
 8010044:	461a      	mov	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4413      	add	r3, r2
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801004e:	78fb      	ldrb	r3, [r7, #3]
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	70fa      	strb	r2, [r7, #3]
 8010054:	461a      	mov	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4413      	add	r3, r2
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	021a      	lsls	r2, r3, #8
 801005e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010060:	4313      	orrs	r3, r2
 8010062:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010064:	78fb      	ldrb	r3, [r7, #3]
 8010066:	1c5a      	adds	r2, r3, #1
 8010068:	70fa      	strb	r2, [r7, #3]
 801006a:	461a      	mov	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4413      	add	r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	041a      	lsls	r2, r3, #16
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	4313      	orrs	r3, r2
 8010078:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007c:	2264      	movs	r2, #100	@ 0x64
 801007e:	fb02 f303 	mul.w	r3, r2, r3
 8010082:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8010084:	4b10      	ldr	r3, [pc, #64]	@ (80100c8 <ProcessMacCommands+0x638>)
 8010086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801008a:	f107 0220 	add.w	r2, r7, #32
 801008e:	4611      	mov	r1, r2
 8010090:	4618      	mov	r0, r3
 8010092:	f004 fef5 	bl	8014e80 <RegionDlChannelReq>
 8010096:	4603      	mov	r3, r0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 801009e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80100a2:	b25b      	sxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f2c0 8187 	blt.w	80103b8 <ProcessMacCommands+0x928>
                {
                    macCmdPayload[0] = status;
 80100aa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80100ae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80100b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100b6:	2201      	movs	r2, #1
 80100b8:	4619      	mov	r1, r3
 80100ba:	200a      	movs	r0, #10
 80100bc:	f002 ffba 	bl	8013034 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 80100c0:	f7ff fcd6 	bl	800fa70 <SetMlmeScheduleUplinkIndication>
                }
                break;
 80100c4:	e178      	b.n	80103b8 <ProcessMacCommands+0x928>
 80100c6:	bf00      	nop
 80100c8:	2000353c 	.word	0x2000353c
 80100cc:	0801df54 	.word	0x0801df54
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80100d0:	200a      	movs	r0, #10
 80100d2:	f003 fad7 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f000 816f 	beq.w	80103bc <ProcessMacCommands+0x92c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80100de:	210a      	movs	r1, #10
 80100e0:	2000      	movs	r0, #0
 80100e2:	f003 fa43 	bl	801356c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80100e6:	f107 0318 	add.w	r3, r7, #24
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
 80100ee:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80100f0:	f107 0310 	add.w	r3, r7, #16
 80100f4:	2200      	movs	r2, #0
 80100f6:	601a      	str	r2, [r3, #0]
 80100f8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80100fa:	f107 0308 	add.w	r3, r7, #8
 80100fe:	2200      	movs	r2, #0
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	1c5a      	adds	r2, r3, #1
 8010108:	70fa      	strb	r2, [r7, #3]
 801010a:	461a      	mov	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4413      	add	r3, r2
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010114:	78fb      	ldrb	r3, [r7, #3]
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	70fa      	strb	r2, [r7, #3]
 801011a:	461a      	mov	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4413      	add	r3, r2
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	021a      	lsls	r2, r3, #8
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	4313      	orrs	r3, r2
 8010128:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801012a:	78fb      	ldrb	r3, [r7, #3]
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	70fa      	strb	r2, [r7, #3]
 8010130:	461a      	mov	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4413      	add	r3, r2
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	041a      	lsls	r2, r3, #16
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	4313      	orrs	r3, r2
 801013e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	1c5a      	adds	r2, r3, #1
 8010144:	70fa      	strb	r2, [r7, #3]
 8010146:	461a      	mov	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	061a      	lsls	r2, r3, #24
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	4313      	orrs	r3, r2
 8010154:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010156:	78fb      	ldrb	r3, [r7, #3]
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	70fa      	strb	r2, [r7, #3]
 801015c:	461a      	mov	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4413      	add	r3, r2
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	b21b      	sxth	r3, r3
 8010166:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010168:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801016c:	461a      	mov	r2, r3
 801016e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010172:	fb02 f303 	mul.w	r3, r2, r3
 8010176:	121b      	asrs	r3, r3, #8
 8010178:	b21b      	sxth	r3, r3
 801017a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801017c:	f107 0310 	add.w	r3, r7, #16
 8010180:	f107 0218 	add.w	r2, r7, #24
 8010184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010188:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801018c:	693a      	ldr	r2, [r7, #16]
 801018e:	4b94      	ldr	r3, [pc, #592]	@ (80103e0 <ProcessMacCommands+0x950>)
 8010190:	4413      	add	r3, r2
 8010192:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010194:	f107 0308 	add.w	r3, r7, #8
 8010198:	4618      	mov	r0, r3
 801019a:	f00c fa4b 	bl	801c634 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801019e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80101a2:	4b90      	ldr	r3, [pc, #576]	@ (80103e4 <ProcessMacCommands+0x954>)
 80101a4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80101a8:	9200      	str	r2, [sp, #0]
 80101aa:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80101ae:	f107 0210 	add.w	r2, r7, #16
 80101b2:	ca06      	ldmia	r2, {r1, r2}
 80101b4:	f00c f9d7 	bl	801c566 <SysTimeSub>
 80101b8:	f107 0010 	add.w	r0, r7, #16
 80101bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101c2:	f107 0208 	add.w	r2, r7, #8
 80101c6:	ca06      	ldmia	r2, {r1, r2}
 80101c8:	f00c f994 	bl	801c4f4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80101cc:	f107 0310 	add.w	r3, r7, #16
 80101d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80101d4:	f00c fa00 	bl	801c5d8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80101d8:	f002 fdf1 	bl	8012dbe <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80101dc:	4b81      	ldr	r3, [pc, #516]	@ (80103e4 <ProcessMacCommands+0x954>)
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
                }
                break;
 80101e4:	e0ea      	b.n	80103bc <ProcessMacCommands+0x92c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80101e6:	200d      	movs	r0, #13
 80101e8:	f003 fa4c 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f000 80e6 	beq.w	80103c0 <ProcessMacCommands+0x930>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80101f4:	210d      	movs	r1, #13
 80101f6:	2000      	movs	r0, #0
 80101f8:	f003 f9b8 	bl	801356c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80101fc:	4b79      	ldr	r3, [pc, #484]	@ (80103e4 <ProcessMacCommands+0x954>)
 80101fe:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 8010202:	2b04      	cmp	r3, #4
 8010204:	f000 80dc 	beq.w	80103c0 <ProcessMacCommands+0x930>
 8010208:	4b76      	ldr	r3, [pc, #472]	@ (80103e4 <ProcessMacCommands+0x954>)
 801020a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 801020e:	2b05      	cmp	r3, #5
 8010210:	f000 80d6 	beq.w	80103c0 <ProcessMacCommands+0x930>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010214:	f002 fdb4 	bl	8012d80 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010218:	e0d2      	b.n	80103c0 <ProcessMacCommands+0x930>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801021a:	2303      	movs	r3, #3
 801021c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010224:	78fb      	ldrb	r3, [r7, #3]
 8010226:	1c5a      	adds	r2, r3, #1
 8010228:	70fa      	strb	r2, [r7, #3]
 801022a:	461a      	mov	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4413      	add	r3, r2
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010234:	78fb      	ldrb	r3, [r7, #3]
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	70fa      	strb	r2, [r7, #3]
 801023a:	461a      	mov	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4413      	add	r3, r2
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010246:	4313      	orrs	r3, r2
 8010248:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801024a:	78fb      	ldrb	r3, [r7, #3]
 801024c:	1c5a      	adds	r2, r3, #1
 801024e:	70fa      	strb	r2, [r7, #3]
 8010250:	461a      	mov	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4413      	add	r3, r2
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	041b      	lsls	r3, r3, #16
 801025a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801025c:	4313      	orrs	r3, r2
 801025e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010262:	2264      	movs	r2, #100	@ 0x64
 8010264:	fb02 f303 	mul.w	r3, r2, r3
 8010268:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	70fa      	strb	r2, [r7, #3]
 8010270:	461a      	mov	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4413      	add	r3, r2
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f003 030f 	and.w	r3, r3, #15
 801027c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010280:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010284:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010286:	4618      	mov	r0, r3
 8010288:	f002 fd80 	bl	8012d8c <LoRaMacClassBPingSlotChannelReq>
 801028c:	4603      	mov	r3, r0
 801028e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8010292:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8010296:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801029a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801029e:	2201      	movs	r2, #1
 80102a0:	4619      	mov	r1, r3
 80102a2:	2011      	movs	r0, #17
 80102a4:	f002 fec6 	bl	8013034 <LoRaMacCommandsAddCmd>
                break;
 80102a8:	e08d      	b.n	80103c6 <ProcessMacCommands+0x936>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80102aa:	200e      	movs	r0, #14
 80102ac:	f003 f9ea 	bl	8013684 <LoRaMacConfirmQueueIsCmdActive>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 8086 	beq.w	80103c4 <ProcessMacCommands+0x934>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80102b8:	210e      	movs	r1, #14
 80102ba:	2000      	movs	r0, #0
 80102bc:	f003 f956 	bl	801356c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	1c5a      	adds	r2, r3, #1
 80102d0:	70fa      	strb	r2, [r7, #3]
 80102d2:	461a      	mov	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4413      	add	r3, r2
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80102de:	78fb      	ldrb	r3, [r7, #3]
 80102e0:	1c5a      	adds	r2, r3, #1
 80102e2:	70fa      	strb	r2, [r7, #3]
 80102e4:	461a      	mov	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4413      	add	r3, r2
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	021b      	lsls	r3, r3, #8
 80102ee:	b21a      	sxth	r2, r3
 80102f0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80102f4:	4313      	orrs	r3, r2
 80102f6:	b21b      	sxth	r3, r3
 80102f8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80102fc:	78fb      	ldrb	r3, [r7, #3]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	70fa      	strb	r2, [r7, #3]
 8010302:	461a      	mov	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4413      	add	r3, r2
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801030e:	4b36      	ldr	r3, [pc, #216]	@ (80103e8 <ProcessMacCommands+0x958>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8010316:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 801031a:	4618      	mov	r0, r3
 801031c:	f002 fd42 	bl	8012da4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010320:	e050      	b.n	80103c4 <ProcessMacCommands+0x934>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010328:	78fb      	ldrb	r3, [r7, #3]
 801032a:	1c5a      	adds	r2, r3, #1
 801032c:	70fa      	strb	r2, [r7, #3]
 801032e:	461a      	mov	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4413      	add	r3, r2
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801033a:	78fb      	ldrb	r3, [r7, #3]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	70fa      	strb	r2, [r7, #3]
 8010340:	461a      	mov	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4413      	add	r3, r2
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	021b      	lsls	r3, r3, #8
 801034a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801034e:	4313      	orrs	r3, r2
 8010350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010354:	78fb      	ldrb	r3, [r7, #3]
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	70fa      	strb	r2, [r7, #3]
 801035a:	461a      	mov	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4413      	add	r3, r2
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	041b      	lsls	r3, r3, #16
 8010364:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010368:	4313      	orrs	r3, r2
 801036a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 801036e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010372:	2264      	movs	r2, #100	@ 0x64
 8010374:	fb02 f303 	mul.w	r3, r2, r3
 8010378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801037c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010380:	f002 fd23 	bl	8012dca <LoRaMacClassBBeaconFreqReq>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <ProcessMacCommands+0x902>
                    {
                        macCmdPayload[0] = 1;
 801038a:	2301      	movs	r3, #1
 801038c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8010390:	e002      	b.n	8010398 <ProcessMacCommands+0x908>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010398:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801039c:	2201      	movs	r2, #1
 801039e:	4619      	mov	r1, r3
 80103a0:	2013      	movs	r0, #19
 80103a2:	f002 fe47 	bl	8013034 <LoRaMacCommandsAddCmd>
                }
                break;
 80103a6:	e00e      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103a8:	bf00      	nop
 80103aa:	e00c      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103ac:	bf00      	nop
 80103ae:	e00a      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103b0:	bf00      	nop
 80103b2:	e008      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103b4:	bf00      	nop
 80103b6:	e006      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103b8:	bf00      	nop
 80103ba:	e004      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103bc:	bf00      	nop
 80103be:	e002      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103c0:	bf00      	nop
 80103c2:	e000      	b.n	80103c6 <ProcessMacCommands+0x936>
                break;
 80103c4:	bf00      	nop
    while( macIndex < commandsSize )
 80103c6:	78fa      	ldrb	r2, [r7, #3]
 80103c8:	78bb      	ldrb	r3, [r7, #2]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	f4ff ab78 	bcc.w	800fac0 <ProcessMacCommands+0x30>
 80103d0:	e002      	b.n	80103d8 <ProcessMacCommands+0x948>
            return;
 80103d2:	bf00      	nop
 80103d4:	e000      	b.n	80103d8 <ProcessMacCommands+0x948>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80103d6:	bf00      	nop
        }
    }
}
 80103d8:	378c      	adds	r7, #140	@ 0x8c
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd90      	pop	{r4, r7, pc}
 80103de:	bf00      	nop
 80103e0:	12d53d80 	.word	0x12d53d80
 80103e4:	20003034 	.word	0x20003034
 80103e8:	20003b54 	.word	0x20003b54

080103ec <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b08e      	sub	sp, #56	@ 0x38
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	461a      	mov	r2, r3
 80103f8:	460b      	mov	r3, r1
 80103fa:	72fb      	strb	r3, [r7, #11]
 80103fc:	4613      	mov	r3, r2
 80103fe:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010400:	2303      	movs	r3, #3
 8010402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010406:	4b65      	ldr	r3, [pc, #404]	@ (801059c <Send+0x1b0>)
 8010408:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801040c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010410:	4b62      	ldr	r3, [pc, #392]	@ (801059c <Send+0x1b0>)
 8010412:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010416:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801041a:	4b60      	ldr	r3, [pc, #384]	@ (801059c <Send+0x1b0>)
 801041c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801041e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010420:	4b5e      	ldr	r3, [pc, #376]	@ (801059c <Send+0x1b0>)
 8010422:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801042a:	2307      	movs	r3, #7
 801042c:	e0b1      	b.n	8010592 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801042e:	4b5b      	ldr	r3, [pc, #364]	@ (801059c <Send+0x1b0>)
 8010430:	f893 30ff 	ldrb.w	r3, [r3, #255]	@ 0xff
 8010434:	2b00      	cmp	r3, #0
 8010436:	d102      	bne.n	801043e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010438:	4b58      	ldr	r3, [pc, #352]	@ (801059c <Send+0x1b0>)
 801043a:	2200      	movs	r2, #0
 801043c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010444:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010448:	f36f 0303 	bfc	r3, #0, #4
 801044c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010450:	4b52      	ldr	r3, [pc, #328]	@ (801059c <Send+0x1b0>)
 8010452:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 8010456:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801045a:	f362 13c7 	bfi	r3, r2, #7, #1
 801045e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010462:	4b4e      	ldr	r3, [pc, #312]	@ (801059c <Send+0x1b0>)
 8010464:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8010468:	2b01      	cmp	r3, #1
 801046a:	d106      	bne.n	801047a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801046c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010470:	f043 0310 	orr.w	r3, r3, #16
 8010474:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010478:	e005      	b.n	8010486 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801047a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801047e:	f36f 1304 	bfc	r3, #4, #1
 8010482:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010486:	4b45      	ldr	r3, [pc, #276]	@ (801059c <Send+0x1b0>)
 8010488:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801048c:	2b00      	cmp	r3, #0
 801048e:	d005      	beq.n	801049c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010490:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010494:	f043 0320 	orr.w	r3, r3, #32
 8010498:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 801049c:	4b3f      	ldr	r3, [pc, #252]	@ (801059c <Send+0x1b0>)
 801049e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80104a2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 80104a4:	2301      	movs	r3, #1
 80104a6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80104a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80104ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bf14      	ite	ne
 80104b6:	2301      	movne	r3, #1
 80104b8:	2300      	moveq	r3, #0
 80104ba:	b2db      	uxtb	r3, r3
 80104bc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80104be:	4b37      	ldr	r3, [pc, #220]	@ (801059c <Send+0x1b0>)
 80104c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104c2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80104c4:	4b36      	ldr	r3, [pc, #216]	@ (80105a0 <Send+0x1b4>)
 80104c6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 80104ca:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80104cc:	4b34      	ldr	r3, [pc, #208]	@ (80105a0 <Send+0x1b4>)
 80104ce:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	@ 0x3f6
 80104d2:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80104d4:	4b31      	ldr	r3, [pc, #196]	@ (801059c <Send+0x1b0>)
 80104d6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80104da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80104de:	4b2f      	ldr	r3, [pc, #188]	@ (801059c <Send+0x1b0>)
 80104e0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80104e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80104e8:	4b2c      	ldr	r3, [pc, #176]	@ (801059c <Send+0x1b0>)
 80104ea:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80104ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80104f2:	4b2a      	ldr	r3, [pc, #168]	@ (801059c <Send+0x1b0>)
 80104f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80104f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80104fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010500:	f107 0014 	add.w	r0, r7, #20
 8010504:	4a27      	ldr	r2, [pc, #156]	@ (80105a4 <Send+0x1b8>)
 8010506:	4928      	ldr	r1, [pc, #160]	@ (80105a8 <Send+0x1bc>)
 8010508:	f002 fb7a 	bl	8012c00 <LoRaMacAdrCalcNext>
 801050c:	4603      	mov	r3, r0
 801050e:	461a      	mov	r2, r3
 8010510:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010514:	f362 1386 	bfi	r3, r2, #6, #1
 8010518:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801051c:	7afa      	ldrb	r2, [r7, #11]
 801051e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010522:	893b      	ldrh	r3, [r7, #8]
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 fc21 	bl	8010d70 <PrepareFrame>
 801052e:	4603      	mov	r3, r0
 8010530:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <Send+0x158>
 801053c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010540:	2b0a      	cmp	r3, #10
 8010542:	d107      	bne.n	8010554 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010544:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f96d 	bl	8010828 <ScheduleTx>
 801054e:	4603      	mov	r3, r0
 8010550:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010554:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00a      	beq.n	8010572 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801055c:	4a0f      	ldr	r2, [pc, #60]	@ (801059c <Send+0x1b0>)
 801055e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010562:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010566:	4a0d      	ldr	r2, [pc, #52]	@ (801059c <Send+0x1b0>)
 8010568:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801056c:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010570:	e00d      	b.n	801058e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010572:	4b0a      	ldr	r3, [pc, #40]	@ (801059c <Send+0x1b0>)
 8010574:	2200      	movs	r2, #0
 8010576:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801057a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057c:	4a07      	ldr	r2, [pc, #28]	@ (801059c <Send+0x1b0>)
 801057e:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010580:	f002 fdd0 	bl	8013124 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801058a:	2313      	movs	r3, #19
 801058c:	e001      	b.n	8010592 <Send+0x1a6>
        }
    }
    return status;
 801058e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010592:	4618      	mov	r0, r3
 8010594:	3730      	adds	r7, #48	@ 0x30
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	2000353c 	.word	0x2000353c
 80105a0:	20003034 	.word	0x20003034
 80105a4:	20003574 	.word	0x20003574
 80105a8:	20003575 	.word	0x20003575

080105ac <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80105be:	2301      	movs	r3, #1
 80105c0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80105c2:	79fb      	ldrb	r3, [r7, #7]
 80105c4:	2bff      	cmp	r3, #255	@ 0xff
 80105c6:	d129      	bne.n	801061c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80105c8:	2000      	movs	r0, #0
 80105ca:	f7ff f931 	bl	800f830 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80105ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010638 <SendReJoinReq+0x8c>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80105d6:	4b18      	ldr	r3, [pc, #96]	@ (8010638 <SendReJoinReq+0x8c>)
 80105d8:	4a18      	ldr	r2, [pc, #96]	@ (801063c <SendReJoinReq+0x90>)
 80105da:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80105de:	4b16      	ldr	r3, [pc, #88]	@ (8010638 <SendReJoinReq+0x8c>)
 80105e0:	22ff      	movs	r2, #255	@ 0xff
 80105e2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80105e6:	7b3b      	ldrb	r3, [r7, #12]
 80105e8:	f36f 1347 	bfc	r3, #5, #3
 80105ec:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80105ee:	7b3a      	ldrb	r2, [r7, #12]
 80105f0:	4b11      	ldr	r3, [pc, #68]	@ (8010638 <SendReJoinReq+0x8c>)
 80105f2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80105f6:	f7fc fc79 	bl	800ceec <SecureElementGetJoinEui>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2208      	movs	r2, #8
 80105fe:	4619      	mov	r1, r3
 8010600:	480f      	ldr	r0, [pc, #60]	@ (8010640 <SendReJoinReq+0x94>)
 8010602:	f008 f98c 	bl	801891e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010606:	f7fc fc4f 	bl	800cea8 <SecureElementGetDevEui>
 801060a:	4603      	mov	r3, r0
 801060c:	2208      	movs	r2, #8
 801060e:	4619      	mov	r1, r3
 8010610:	480c      	ldr	r0, [pc, #48]	@ (8010644 <SendReJoinReq+0x98>)
 8010612:	f008 f984 	bl	801891e <memcpy1>

            allowDelayedTx = false;
 8010616:	2300      	movs	r3, #0
 8010618:	73fb      	strb	r3, [r7, #15]

            break;
 801061a:	e002      	b.n	8010622 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801061c:	2302      	movs	r3, #2
 801061e:	73bb      	strb	r3, [r7, #14]
            break;
 8010620:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010622:	7bfb      	ldrb	r3, [r7, #15]
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f8ff 	bl	8010828 <ScheduleTx>
 801062a:	4603      	mov	r3, r0
 801062c:	73bb      	strb	r3, [r7, #14]
    return status;
 801062e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20003034 	.word	0x20003034
 801063c:	20003036 	.word	0x20003036
 8010640:	20003142 	.word	0x20003142
 8010644:	2000314a 	.word	0x2000314a

08010648 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801064c:	f002 fb47 	bl	8012cde <LoRaMacClassBIsBeaconExpected>
 8010650:	4603      	mov	r3, r0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010656:	230e      	movs	r3, #14
 8010658:	e013      	b.n	8010682 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801065a:	4b0b      	ldr	r3, [pc, #44]	@ (8010688 <CheckForClassBCollision+0x40>)
 801065c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8010660:	2b01      	cmp	r3, #1
 8010662:	d10d      	bne.n	8010680 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010664:	f002 fb42 	bl	8012cec <LoRaMacClassBIsPingExpected>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801066e:	230f      	movs	r3, #15
 8010670:	e007      	b.n	8010682 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010672:	f002 fb42 	bl	8012cfa <LoRaMacClassBIsMulticastExpected>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801067c:	230f      	movs	r3, #15
 801067e:	e000      	b.n	8010682 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	2000353c 	.word	0x2000353c

0801068c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b083      	sub	sp, #12
 8010690:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010692:	4b2d      	ldr	r3, [pc, #180]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 8010694:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010698:	4b2b      	ldr	r3, [pc, #172]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 801069a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801069e:	4b2a      	ldr	r3, [pc, #168]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106a0:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 80106a4:	4b28      	ldr	r3, [pc, #160]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106a6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80106aa:	4b27      	ldr	r3, [pc, #156]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106ac:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80106b0:	b25b      	sxtb	r3, r3
 80106b2:	f004 fc60 	bl	8014f76 <RegionApplyDrOffset>
 80106b6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80106b8:	b259      	sxtb	r1, r3
 80106ba:	4b23      	ldr	r3, [pc, #140]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106bc:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80106c0:	4b21      	ldr	r3, [pc, #132]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106c4:	4821      	ldr	r0, [pc, #132]	@ (801074c <ComputeRxWindowParameters+0xc0>)
 80106c6:	9000      	str	r0, [sp, #0]
 80106c8:	4620      	mov	r0, r4
 80106ca:	f004 faff 	bl	8014ccc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80106ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106d0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80106d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106d6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80106da:	b259      	sxtb	r1, r3
 80106dc:	4b1a      	ldr	r3, [pc, #104]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106de:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80106e2:	4b19      	ldr	r3, [pc, #100]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106e6:	4c1a      	ldr	r4, [pc, #104]	@ (8010750 <ComputeRxWindowParameters+0xc4>)
 80106e8:	9400      	str	r4, [sp, #0]
 80106ea:	f004 faef 	bl	8014ccc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80106ee:	4b16      	ldr	r3, [pc, #88]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 80106f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106f2:	4a18      	ldr	r2, [pc, #96]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 80106f4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80106f8:	4413      	add	r3, r2
 80106fa:	4a16      	ldr	r2, [pc, #88]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 80106fc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010700:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 8010702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010704:	4a13      	ldr	r2, [pc, #76]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 8010706:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 801070a:	4413      	add	r3, r2
 801070c:	4a11      	ldr	r2, [pc, #68]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 801070e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010712:	4b0d      	ldr	r3, [pc, #52]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 8010714:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8010718:	2b00      	cmp	r3, #0
 801071a:	d111      	bne.n	8010740 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801071c:	4b0a      	ldr	r3, [pc, #40]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 801071e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010720:	4a0c      	ldr	r2, [pc, #48]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 8010722:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010726:	4413      	add	r3, r2
 8010728:	4a0a      	ldr	r2, [pc, #40]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 801072a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801072e:	4b06      	ldr	r3, [pc, #24]	@ (8010748 <ComputeRxWindowParameters+0xbc>)
 8010730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010732:	4a08      	ldr	r2, [pc, #32]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 8010734:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 8010738:	4413      	add	r3, r2
 801073a:	4a06      	ldr	r2, [pc, #24]	@ (8010754 <ComputeRxWindowParameters+0xc8>)
 801073c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010740:	bf00      	nop
 8010742:	3704      	adds	r7, #4
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}
 8010748:	2000353c 	.word	0x2000353c
 801074c:	200033ec 	.word	0x200033ec
 8010750:	20003400 	.word	0x20003400
 8010754:	20003034 	.word	0x20003034

08010758 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010762:	4b13      	ldr	r3, [pc, #76]	@ (80107b0 <VerifyTxFrame+0x58>)
 8010764:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8010768:	2b00      	cmp	r3, #0
 801076a:	d01b      	beq.n	80107a4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801076c:	1d3b      	adds	r3, r7, #4
 801076e:	4618      	mov	r0, r3
 8010770:	f002 fd1e 	bl	80131b0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801077a:	2313      	movs	r3, #19
 801077c:	e013      	b.n	80107a6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801077e:	4b0d      	ldr	r3, [pc, #52]	@ (80107b4 <VerifyTxFrame+0x5c>)
 8010780:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010784:	4a0a      	ldr	r2, [pc, #40]	@ (80107b0 <VerifyTxFrame+0x58>)
 8010786:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	b2d2      	uxtb	r2, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff f946 	bl	800fa20 <ValidatePayloadLength>
 8010794:	4603      	mov	r3, r0
 8010796:	f083 0301 	eor.w	r3, r3, #1
 801079a:	b2db      	uxtb	r3, r3
 801079c:	2b00      	cmp	r3, #0
 801079e:	d001      	beq.n	80107a4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80107a0:	2308      	movs	r3, #8
 80107a2:	e000      	b.n	80107a6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3708      	adds	r7, #8
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	2000353c 	.word	0x2000353c
 80107b4:	20003034 	.word	0x20003034

080107b8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80107be:	4b18      	ldr	r3, [pc, #96]	@ (8010820 <SerializeTxFrame+0x68>)
 80107c0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d002      	beq.n	80107ce <SerializeTxFrame+0x16>
 80107c8:	2b04      	cmp	r3, #4
 80107ca:	d011      	beq.n	80107f0 <SerializeTxFrame+0x38>
 80107cc:	e021      	b.n	8010812 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80107ce:	4815      	ldr	r0, [pc, #84]	@ (8010824 <SerializeTxFrame+0x6c>)
 80107d0:	f004 f84f 	bl	8014872 <LoRaMacSerializerJoinRequest>
 80107d4:	4603      	mov	r3, r0
 80107d6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80107d8:	79fb      	ldrb	r3, [r7, #7]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80107de:	2311      	movs	r3, #17
 80107e0:	e01a      	b.n	8010818 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80107e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010820 <SerializeTxFrame+0x68>)
 80107e4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80107e8:	461a      	mov	r2, r3
 80107ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010820 <SerializeTxFrame+0x68>)
 80107ec:	801a      	strh	r2, [r3, #0]
            break;
 80107ee:	e012      	b.n	8010816 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80107f0:	480c      	ldr	r0, [pc, #48]	@ (8010824 <SerializeTxFrame+0x6c>)
 80107f2:	f004 f8c0 	bl	8014976 <LoRaMacSerializerData>
 80107f6:	4603      	mov	r3, r0
 80107f8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010800:	2311      	movs	r3, #17
 8010802:	e009      	b.n	8010818 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010804:	4b06      	ldr	r3, [pc, #24]	@ (8010820 <SerializeTxFrame+0x68>)
 8010806:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801080a:	461a      	mov	r2, r3
 801080c:	4b04      	ldr	r3, [pc, #16]	@ (8010820 <SerializeTxFrame+0x68>)
 801080e:	801a      	strh	r2, [r3, #0]
            break;
 8010810:	e001      	b.n	8010816 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010812:	2303      	movs	r3, #3
 8010814:	e000      	b.n	8010818 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	20003034 	.word	0x20003034
 8010824:	2000313c 	.word	0x2000313c

08010828 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b090      	sub	sp, #64	@ 0x40
 801082c:	af02      	add	r7, sp, #8
 801082e:	4603      	mov	r3, r0
 8010830:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010832:	2303      	movs	r3, #3
 8010834:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010838:	f7ff ff06 	bl	8010648 <CheckForClassBCollision>
 801083c:	4603      	mov	r3, r0
 801083e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010846:	2b00      	cmp	r3, #0
 8010848:	d002      	beq.n	8010850 <ScheduleTx+0x28>
    {
        return status;
 801084a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801084e:	e08f      	b.n	8010970 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010850:	f000 f8fa 	bl	8010a48 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010854:	f7ff ffb0 	bl	80107b8 <SerializeTxFrame>
 8010858:	4603      	mov	r3, r0
 801085a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801085e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010862:	2b00      	cmp	r3, #0
 8010864:	d002      	beq.n	801086c <ScheduleTx+0x44>
    {
        return status;
 8010866:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801086a:	e081      	b.n	8010970 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801086c:	4b42      	ldr	r3, [pc, #264]	@ (8010978 <ScheduleTx+0x150>)
 801086e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010870:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010872:	4b41      	ldr	r3, [pc, #260]	@ (8010978 <ScheduleTx+0x150>)
 8010874:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010878:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801087a:	4b3f      	ldr	r3, [pc, #252]	@ (8010978 <ScheduleTx+0x150>)
 801087c:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8010880:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010886:	4618      	mov	r0, r3
 8010888:	f00b ff0c 	bl	801c6a4 <SysTimeGetMcuTime>
 801088c:	4638      	mov	r0, r7
 801088e:	4b3a      	ldr	r3, [pc, #232]	@ (8010978 <ScheduleTx+0x150>)
 8010890:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8010894:	9200      	str	r2, [sp, #0]
 8010896:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801089a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801089e:	ca06      	ldmia	r2, {r1, r2}
 80108a0:	f00b fe61 	bl	801c566 <SysTimeSub>
 80108a4:	f107 0320 	add.w	r3, r7, #32
 80108a8:	463a      	mov	r2, r7
 80108aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108ae:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80108b2:	4b31      	ldr	r3, [pc, #196]	@ (8010978 <ScheduleTx+0x150>)
 80108b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80108b8:	2300      	movs	r3, #0
 80108ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80108be:	2301      	movs	r3, #1
 80108c0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80108c2:	4b2e      	ldr	r3, [pc, #184]	@ (801097c <ScheduleTx+0x154>)
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80108c8:	4b2b      	ldr	r3, [pc, #172]	@ (8010978 <ScheduleTx+0x150>)
 80108ca:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d104      	bne.n	80108dc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80108d2:	2301      	movs	r3, #1
 80108d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80108d8:	2300      	movs	r3, #0
 80108da:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80108dc:	4b26      	ldr	r3, [pc, #152]	@ (8010978 <ScheduleTx+0x150>)
 80108de:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80108e2:	f107 0114 	add.w	r1, r7, #20
 80108e6:	4b26      	ldr	r3, [pc, #152]	@ (8010980 <ScheduleTx+0x158>)
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	4b26      	ldr	r3, [pc, #152]	@ (8010984 <ScheduleTx+0x15c>)
 80108ec:	4a26      	ldr	r2, [pc, #152]	@ (8010988 <ScheduleTx+0x160>)
 80108ee:	f004 fb08 	bl	8014f02 <RegionNextChannel>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80108f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d022      	beq.n	8010946 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010900:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010904:	2b0b      	cmp	r3, #11
 8010906:	d11b      	bne.n	8010940 <ScheduleTx+0x118>
 8010908:	7bfb      	ldrb	r3, [r7, #15]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d018      	beq.n	8010940 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801090e:	4b1b      	ldr	r3, [pc, #108]	@ (801097c <ScheduleTx+0x154>)
 8010910:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8010914:	2b00      	cmp	r3, #0
 8010916:	d011      	beq.n	801093c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010918:	4b18      	ldr	r3, [pc, #96]	@ (801097c <ScheduleTx+0x154>)
 801091a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801091e:	f043 0320 	orr.w	r3, r3, #32
 8010922:	4a16      	ldr	r2, [pc, #88]	@ (801097c <ScheduleTx+0x154>)
 8010924:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010928:	4b14      	ldr	r3, [pc, #80]	@ (801097c <ScheduleTx+0x154>)
 801092a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801092e:	4619      	mov	r1, r3
 8010930:	4816      	ldr	r0, [pc, #88]	@ (801098c <ScheduleTx+0x164>)
 8010932:	f00c f861 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010936:	4815      	ldr	r0, [pc, #84]	@ (801098c <ScheduleTx+0x164>)
 8010938:	f00b ff80 	bl	801c83c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	e017      	b.n	8010970 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010940:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010944:	e014      	b.n	8010970 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010946:	f7ff fea1 	bl	801068c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801094a:	f7ff ff05 	bl	8010758 <VerifyTxFrame>
 801094e:	4603      	mov	r3, r0
 8010950:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <ScheduleTx+0x13a>
    {
        return status;
 801095c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010960:	e006      	b.n	8010970 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010962:	4b06      	ldr	r3, [pc, #24]	@ (801097c <ScheduleTx+0x154>)
 8010964:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8010968:	4618      	mov	r0, r3
 801096a:	f000 fb1b 	bl	8010fa4 <SendFrameOnChannel>
 801096e:	4603      	mov	r3, r0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3738      	adds	r7, #56	@ 0x38
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	2000353c 	.word	0x2000353c
 801097c:	20003034 	.word	0x20003034
 8010980:	2000356c 	.word	0x2000356c
 8010984:	200034b8 	.word	0x200034b8
 8010988:	20003449 	.word	0x20003449
 801098c:	2000339c 	.word	0x2000339c

08010990 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	460a      	mov	r2, r1
 801099a:	71fb      	strb	r3, [r7, #7]
 801099c:	4613      	mov	r3, r2
 801099e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80109a0:	2313      	movs	r3, #19
 80109a2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80109a4:	2300      	movs	r3, #0
 80109a6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80109a8:	4b25      	ldr	r3, [pc, #148]	@ (8010a40 <SecureFrame+0xb0>)
 80109aa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d002      	beq.n	80109b8 <SecureFrame+0x28>
 80109b2:	2b04      	cmp	r3, #4
 80109b4:	d011      	beq.n	80109da <SecureFrame+0x4a>
 80109b6:	e03b      	b.n	8010a30 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80109b8:	4822      	ldr	r0, [pc, #136]	@ (8010a44 <SecureFrame+0xb4>)
 80109ba:	f003 fb27 	bl	801400c <LoRaMacCryptoPrepareJoinRequest>
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80109c8:	2311      	movs	r3, #17
 80109ca:	e034      	b.n	8010a36 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80109cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010a40 <SecureFrame+0xb0>)
 80109ce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80109d2:	461a      	mov	r2, r3
 80109d4:	4b1a      	ldr	r3, [pc, #104]	@ (8010a40 <SecureFrame+0xb0>)
 80109d6:	801a      	strh	r2, [r3, #0]
            break;
 80109d8:	e02c      	b.n	8010a34 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80109da:	f107 0308 	add.w	r3, r7, #8
 80109de:	4618      	mov	r0, r3
 80109e0:	f003 fa2e 	bl	8013e40 <LoRaMacCryptoGetFCntUp>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80109ea:	2312      	movs	r3, #18
 80109ec:	e023      	b.n	8010a36 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80109ee:	4b14      	ldr	r3, [pc, #80]	@ (8010a40 <SecureFrame+0xb0>)
 80109f0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d104      	bne.n	8010a02 <SecureFrame+0x72>
 80109f8:	4b11      	ldr	r3, [pc, #68]	@ (8010a40 <SecureFrame+0xb0>)
 80109fa:	f893 3412 	ldrb.w	r3, [r3, #1042]	@ 0x412
 80109fe:	2b01      	cmp	r3, #1
 8010a00:	d902      	bls.n	8010a08 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	3b01      	subs	r3, #1
 8010a06:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010a08:	68b8      	ldr	r0, [r7, #8]
 8010a0a:	79ba      	ldrb	r2, [r7, #6]
 8010a0c:	79f9      	ldrb	r1, [r7, #7]
 8010a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a44 <SecureFrame+0xb4>)
 8010a10:	f003 fc14 	bl	801423c <LoRaMacCryptoSecureMessage>
 8010a14:	4603      	mov	r3, r0
 8010a16:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010a18:	7bfb      	ldrb	r3, [r7, #15]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d001      	beq.n	8010a22 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010a1e:	2311      	movs	r3, #17
 8010a20:	e009      	b.n	8010a36 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010a22:	4b07      	ldr	r3, [pc, #28]	@ (8010a40 <SecureFrame+0xb0>)
 8010a24:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4b05      	ldr	r3, [pc, #20]	@ (8010a40 <SecureFrame+0xb0>)
 8010a2c:	801a      	strh	r2, [r3, #0]
            break;
 8010a2e:	e001      	b.n	8010a34 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a30:	2303      	movs	r3, #3
 8010a32:	e000      	b.n	8010a36 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	20003034 	.word	0x20003034
 8010a44:	2000313c 	.word	0x2000313c

08010a48 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010a4c:	4b09      	ldr	r3, [pc, #36]	@ (8010a74 <CalculateBackOff+0x2c>)
 8010a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10a      	bne.n	8010a6a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010a54:	4b07      	ldr	r3, [pc, #28]	@ (8010a74 <CalculateBackOff+0x2c>)
 8010a56:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	4a06      	ldr	r2, [pc, #24]	@ (8010a78 <CalculateBackOff+0x30>)
 8010a5e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 8010a62:	fb02 f303 	mul.w	r3, r2, r3
 8010a66:	4a03      	ldr	r2, [pc, #12]	@ (8010a74 <CalculateBackOff+0x2c>)
 8010a68:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010a6a:	bf00      	nop
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bc80      	pop	{r7}
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	2000353c 	.word	0x2000353c
 8010a78:	20003034 	.word	0x20003034

08010a7c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	7139      	strb	r1, [r7, #4]
 8010a86:	71fb      	strb	r3, [r7, #7]
 8010a88:	4613      	mov	r3, r2
 8010a8a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010a8c:	79fb      	ldrb	r3, [r7, #7]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d002      	beq.n	8010a98 <RemoveMacCommands+0x1c>
 8010a92:	79fb      	ldrb	r3, [r7, #7]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d10d      	bne.n	8010ab4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010a98:	79bb      	ldrb	r3, [r7, #6]
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d108      	bne.n	8010ab0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010a9e:	793b      	ldrb	r3, [r7, #4]
 8010aa0:	f003 0320 	and.w	r3, r3, #32
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d004      	beq.n	8010ab4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010aaa:	f002 fb5f 	bl	801316c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010aae:	e001      	b.n	8010ab4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010ab0:	f002 fb5c 	bl	801316c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010ab4:	bf00      	nop
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8010abc:	b5b0      	push	{r4, r5, r7, lr}
 8010abe:	b08e      	sub	sp, #56	@ 0x38
 8010ac0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010ac2:	4b68      	ldr	r3, [pc, #416]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010aca:	4b66      	ldr	r3, [pc, #408]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010acc:	2200      	movs	r2, #0
 8010ace:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010ad0:	4b65      	ldr	r3, [pc, #404]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    MacCtx.AckTimeoutRetries = 1;
 8010ad8:	4b63      	ldr	r3, [pc, #396]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010ada:	2201      	movs	r2, #1
 8010adc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010ae0:	4b61      	ldr	r3, [pc, #388]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    MacCtx.AckTimeoutRetry = false;
 8010ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010aea:	2200      	movs	r2, #0
 8010aec:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8010af0:	4b5c      	ldr	r3, [pc, #368]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010af8:	4b5a      	ldr	r3, [pc, #360]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010afa:	2201      	movs	r2, #1
 8010afc:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010b00:	4b58      	ldr	r3, [pc, #352]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b02:	f993 20c4 	ldrsb.w	r2, [r3, #196]	@ 0xc4
 8010b06:	4b57      	ldr	r3, [pc, #348]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010b0c:	4b55      	ldr	r3, [pc, #340]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b0e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	@ 0xc5
 8010b12:	4b54      	ldr	r3, [pc, #336]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010b18:	4b52      	ldr	r3, [pc, #328]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b1a:	f893 20a1 	ldrb.w	r2, [r3, #161]	@ 0xa1
 8010b1e:	4b51      	ldr	r3, [pc, #324]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010b24:	4b4f      	ldr	r3, [pc, #316]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b26:	4a4f      	ldr	r2, [pc, #316]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b28:	3364      	adds	r3, #100	@ 0x64
 8010b2a:	32a4      	adds	r2, #164	@ 0xa4
 8010b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b30:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010b34:	4b4b      	ldr	r3, [pc, #300]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b36:	4a4b      	ldr	r2, [pc, #300]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b38:	336c      	adds	r3, #108	@ 0x6c
 8010b3a:	32ac      	adds	r2, #172	@ 0xac
 8010b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b40:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010b44:	4b47      	ldr	r3, [pc, #284]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b46:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 8010b4a:	4b46      	ldr	r3, [pc, #280]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b4c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010b50:	4b44      	ldr	r3, [pc, #272]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b52:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 8010b56:	4b43      	ldr	r3, [pc, #268]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b58:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010b5c:	4b41      	ldr	r3, [pc, #260]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010b62:	4a40      	ldr	r2, [pc, #256]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b64:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010b66:	4b3f      	ldr	r3, [pc, #252]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010b6c:	4a3d      	ldr	r2, [pc, #244]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b6e:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010b70:	4b3d      	ldr	r3, [pc, #244]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8010b78:	4b3a      	ldr	r3, [pc, #232]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010b80:	2301      	movs	r3, #1
 8010b82:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b84:	4b39      	ldr	r3, [pc, #228]	@ (8010c6c <ResetMacParameters+0x1b0>)
 8010b86:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b88:	4b39      	ldr	r3, [pc, #228]	@ (8010c70 <ResetMacParameters+0x1b4>)
 8010b8a:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b8c:	4b35      	ldr	r3, [pc, #212]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010b92:	1d3a      	adds	r2, r7, #4
 8010b94:	4611      	mov	r1, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f004 f82e 	bl	8014bf8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010b9c:	4b32      	ldr	r3, [pc, #200]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010ba4:	4b30      	ldr	r3, [pc, #192]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010ba6:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 8010baa:	4b2f      	ldr	r3, [pc, #188]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bac:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bb6:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010bba:	4b2a      	ldr	r3, [pc, #168]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010bbc:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010bc0:	4b29      	ldr	r3, [pc, #164]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bc2:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010bc6:	4b27      	ldr	r3, [pc, #156]	@ (8010c64 <ResetMacParameters+0x1a8>)
 8010bc8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010bcc:	4b26      	ldr	r3, [pc, #152]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bce:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010bd2:	4b25      	ldr	r3, [pc, #148]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010bda:	4b23      	ldr	r3, [pc, #140]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010be2:	4a21      	ldr	r2, [pc, #132]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010be4:	4b20      	ldr	r3, [pc, #128]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010be6:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 8010bea:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 8010bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010bf2:	682b      	ldr	r3, [r5, #0]
 8010bf4:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010c00:	2202      	movs	r2, #2
 8010c02:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	633b      	str	r3, [r7, #48]	@ 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	637b      	str	r3, [r7, #52]	@ 0x34

    if( MacCtx.MacCallbacks != NULL )
 8010c0e:	4b16      	ldr	r3, [pc, #88]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010c10:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d009      	beq.n	8010c2c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010c18:	4b13      	ldr	r3, [pc, #76]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010c1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	633b      	str	r3, [r7, #48]	@ 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010c22:	4b11      	ldr	r3, [pc, #68]	@ (8010c68 <ResetMacParameters+0x1ac>)
 8010c24:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c28:	691b      	ldr	r3, [r3, #16]
 8010c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010c2c:	4b11      	ldr	r3, [pc, #68]	@ (8010c74 <ResetMacParameters+0x1b8>)
 8010c2e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010c30:	4b11      	ldr	r3, [pc, #68]	@ (8010c78 <ResetMacParameters+0x1bc>)
 8010c32:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010c34:	4b11      	ldr	r3, [pc, #68]	@ (8010c7c <ResetMacParameters+0x1c0>)
 8010c36:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010c38:	4b11      	ldr	r3, [pc, #68]	@ (8010c80 <ResetMacParameters+0x1c4>)
 8010c3a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010c3c:	4b11      	ldr	r3, [pc, #68]	@ (8010c84 <ResetMacParameters+0x1c8>)
 8010c3e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010c40:	4b11      	ldr	r3, [pc, #68]	@ (8010c88 <ResetMacParameters+0x1cc>)
 8010c42:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010c44:	4b11      	ldr	r3, [pc, #68]	@ (8010c8c <ResetMacParameters+0x1d0>)
 8010c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010c48:	4b11      	ldr	r3, [pc, #68]	@ (8010c90 <ResetMacParameters+0x1d4>)
 8010c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010c4c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010c50:	f107 0310 	add.w	r3, r7, #16
 8010c54:	4a0f      	ldr	r2, [pc, #60]	@ (8010c94 <ResetMacParameters+0x1d8>)
 8010c56:	4618      	mov	r0, r3
 8010c58:	f001 ffea 	bl	8012c30 <LoRaMacClassBInit>
}
 8010c5c:	bf00      	nop
 8010c5e:	3738      	adds	r7, #56	@ 0x38
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bdb0      	pop	{r4, r5, r7, pc}
 8010c64:	2000353c 	.word	0x2000353c
 8010c68:	20003034 	.word	0x20003034
 8010c6c:	20003714 	.word	0x20003714
 8010c70:	200037b8 	.word	0x200037b8
 8010c74:	20003494 	.word	0x20003494
 8010c78:	20003450 	.word	0x20003450
 8010c7c:	20003480 	.word	0x20003480
 8010c80:	200034b5 	.word	0x200034b5
 8010c84:	20003608 	.word	0x20003608
 8010c88:	2000357c 	.word	0x2000357c
 8010c8c:	20003580 	.word	0x20003580
 8010c90:	2000360c 	.word	0x2000360c
 8010c94:	20003b34 	.word	0x20003b34

08010c98 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f00b fe38 	bl	801c918 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce4 <RxWindowSetup+0x4c>)
 8010caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cac:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010cae:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce8 <RxWindowSetup+0x50>)
 8010cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8010cec <RxWindowSetup+0x54>)
 8010cb6:	6839      	ldr	r1, [r7, #0]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f004 f82a 	bl	8014d12 <RegionRxConfig>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d00a      	beq.n	8010cda <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010cc4:	4b07      	ldr	r3, [pc, #28]	@ (8010ce4 <RxWindowSetup+0x4c>)
 8010cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cc8:	4a07      	ldr	r2, [pc, #28]	@ (8010ce8 <RxWindowSetup+0x50>)
 8010cca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010ccc:	4610      	mov	r0, r2
 8010cce:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	7cda      	ldrb	r2, [r3, #19]
 8010cd4:	4b06      	ldr	r3, [pc, #24]	@ (8010cf0 <RxWindowSetup+0x58>)
 8010cd6:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8010cda:	bf00      	nop
 8010cdc:	3708      	adds	r7, #8
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	0801e020 	.word	0x0801e020
 8010ce8:	2000353c 	.word	0x2000353c
 8010cec:	20003454 	.word	0x20003454
 8010cf0:	20003034 	.word	0x20003034

08010cf4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010cf4:	b590      	push	{r4, r7, lr}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010cfa:	4b18      	ldr	r3, [pc, #96]	@ (8010d5c <OpenContinuousRxCWindow+0x68>)
 8010cfc:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010d00:	4b16      	ldr	r3, [pc, #88]	@ (8010d5c <OpenContinuousRxCWindow+0x68>)
 8010d02:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010d06:	b259      	sxtb	r1, r3
 8010d08:	4b14      	ldr	r3, [pc, #80]	@ (8010d5c <OpenContinuousRxCWindow+0x68>)
 8010d0a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010d0e:	4b13      	ldr	r3, [pc, #76]	@ (8010d5c <OpenContinuousRxCWindow+0x68>)
 8010d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d12:	4c13      	ldr	r4, [pc, #76]	@ (8010d60 <OpenContinuousRxCWindow+0x6c>)
 8010d14:	9400      	str	r4, [sp, #0]
 8010d16:	f003 ffd9 	bl	8014ccc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d1a:	4b12      	ldr	r3, [pc, #72]	@ (8010d64 <OpenContinuousRxCWindow+0x70>)
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010d22:	4b10      	ldr	r3, [pc, #64]	@ (8010d64 <OpenContinuousRxCWindow+0x70>)
 8010d24:	2201      	movs	r2, #1
 8010d26:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d5c <OpenContinuousRxCWindow+0x68>)
 8010d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d30:	4a0d      	ldr	r2, [pc, #52]	@ (8010d68 <OpenContinuousRxCWindow+0x74>)
 8010d32:	490b      	ldr	r1, [pc, #44]	@ (8010d60 <OpenContinuousRxCWindow+0x6c>)
 8010d34:	4618      	mov	r0, r3
 8010d36:	f003 ffec 	bl	8014d12 <RegionRxConfig>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d009      	beq.n	8010d54 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8010d40:	4b0a      	ldr	r3, [pc, #40]	@ (8010d6c <OpenContinuousRxCWindow+0x78>)
 8010d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d44:	2000      	movs	r0, #0
 8010d46:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010d48:	4b06      	ldr	r3, [pc, #24]	@ (8010d64 <OpenContinuousRxCWindow+0x70>)
 8010d4a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 8010d4e:	4b05      	ldr	r3, [pc, #20]	@ (8010d64 <OpenContinuousRxCWindow+0x70>)
 8010d50:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8010d54:	bf00      	nop
 8010d56:	3704      	adds	r7, #4
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd90      	pop	{r4, r7, pc}
 8010d5c:	2000353c 	.word	0x2000353c
 8010d60:	20003414 	.word	0x20003414
 8010d64:	20003034 	.word	0x20003034
 8010d68:	20003454 	.word	0x20003454
 8010d6c:	0801e020 	.word	0x0801e020

08010d70 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b088      	sub	sp, #32
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	603b      	str	r3, [r7, #0]
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010d80:	4b81      	ldr	r3, [pc, #516]	@ (8010f88 <PrepareFrame+0x218>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010d86:	4b80      	ldr	r3, [pc, #512]	@ (8010f88 <PrepareFrame+0x218>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    uint32_t fCntUp = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010d92:	2300      	movs	r3, #0
 8010d94:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d101      	bne.n	8010da4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010da4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010da6:	461a      	mov	r2, r3
 8010da8:	6839      	ldr	r1, [r7, #0]
 8010daa:	4878      	ldr	r0, [pc, #480]	@ (8010f8c <PrepareFrame+0x21c>)
 8010dac:	f007 fdb7 	bl	801891e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010db0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	4b74      	ldr	r3, [pc, #464]	@ (8010f88 <PrepareFrame+0x218>)
 8010db6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	781a      	ldrb	r2, [r3, #0]
 8010dbe:	4b72      	ldr	r3, [pc, #456]	@ (8010f88 <PrepareFrame+0x218>)
 8010dc0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b07      	cmp	r3, #7
 8010dce:	f000 80b9 	beq.w	8010f44 <PrepareFrame+0x1d4>
 8010dd2:	2b07      	cmp	r3, #7
 8010dd4:	f300 80ce 	bgt.w	8010f74 <PrepareFrame+0x204>
 8010dd8:	2b02      	cmp	r3, #2
 8010dda:	d006      	beq.n	8010dea <PrepareFrame+0x7a>
 8010ddc:	2b04      	cmp	r3, #4
 8010dde:	f040 80c9 	bne.w	8010f74 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010de2:	4b69      	ldr	r3, [pc, #420]	@ (8010f88 <PrepareFrame+0x218>)
 8010de4:	2201      	movs	r2, #1
 8010de6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010dea:	4b67      	ldr	r3, [pc, #412]	@ (8010f88 <PrepareFrame+0x218>)
 8010dec:	2204      	movs	r2, #4
 8010dee:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010df2:	4b65      	ldr	r3, [pc, #404]	@ (8010f88 <PrepareFrame+0x218>)
 8010df4:	4a66      	ldr	r2, [pc, #408]	@ (8010f90 <PrepareFrame+0x220>)
 8010df6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010dfa:	4b63      	ldr	r3, [pc, #396]	@ (8010f88 <PrepareFrame+0x218>)
 8010dfc:	22ff      	movs	r2, #255	@ 0xff
 8010dfe:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	781a      	ldrb	r2, [r3, #0]
 8010e06:	4b60      	ldr	r3, [pc, #384]	@ (8010f88 <PrepareFrame+0x218>)
 8010e08:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8010f88 <PrepareFrame+0x218>)
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010e14:	4b5f      	ldr	r3, [pc, #380]	@ (8010f94 <PrepareFrame+0x224>)
 8010e16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8010f88 <PrepareFrame+0x218>)
 8010e1c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	781a      	ldrb	r2, [r3, #0]
 8010e24:	4b58      	ldr	r3, [pc, #352]	@ (8010f88 <PrepareFrame+0x218>)
 8010e26:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010e2a:	4b57      	ldr	r3, [pc, #348]	@ (8010f88 <PrepareFrame+0x218>)
 8010e2c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010e30:	4b55      	ldr	r3, [pc, #340]	@ (8010f88 <PrepareFrame+0x218>)
 8010e32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010e36:	4b54      	ldr	r3, [pc, #336]	@ (8010f88 <PrepareFrame+0x218>)
 8010e38:	4a54      	ldr	r2, [pc, #336]	@ (8010f8c <PrepareFrame+0x21c>)
 8010e3a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010e3e:	f107 0318 	add.w	r3, r7, #24
 8010e42:	4618      	mov	r0, r3
 8010e44:	f002 fffc 	bl	8013e40 <LoRaMacCryptoGetFCntUp>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d001      	beq.n	8010e52 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010e4e:	2312      	movs	r3, #18
 8010e50:	e096      	b.n	8010f80 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	4b4c      	ldr	r3, [pc, #304]	@ (8010f88 <PrepareFrame+0x218>)
 8010e58:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8010e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8010f88 <PrepareFrame+0x218>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010e64:	4b48      	ldr	r3, [pc, #288]	@ (8010f88 <PrepareFrame+0x218>)
 8010e66:	2200      	movs	r2, #0
 8010e68:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	4a46      	ldr	r2, [pc, #280]	@ (8010f88 <PrepareFrame+0x218>)
 8010e70:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010e74:	f107 0314 	add.w	r3, r7, #20
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f002 f999 	bl	80131b0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d001      	beq.n	8010e88 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e84:	2313      	movs	r3, #19
 8010e86:	e07b      	b.n	8010f80 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d074      	beq.n	8010f78 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010e8e:	4b41      	ldr	r3, [pc, #260]	@ (8010f94 <PrepareFrame+0x224>)
 8010e90:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fe fd9b 	bl	800f9d0 <GetMaxAppPayloadWithoutFOptsLength>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8010f88 <PrepareFrame+0x218>)
 8010ea0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d01d      	beq.n	8010ee4 <PrepareFrame+0x174>
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b0f      	cmp	r3, #15
 8010eac:	d81a      	bhi.n	8010ee4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010eae:	f107 0314 	add.w	r3, r7, #20
 8010eb2:	4a39      	ldr	r2, [pc, #228]	@ (8010f98 <PrepareFrame+0x228>)
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	200f      	movs	r0, #15
 8010eb8:	f002 f990 	bl	80131dc <LoRaMacCommandsSerializeCmds>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d001      	beq.n	8010ec6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ec2:	2313      	movs	r3, #19
 8010ec4:	e05c      	b.n	8010f80 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	f003 030f 	and.w	r3, r3, #15
 8010ecc:	b2d9      	uxtb	r1, r3
 8010ece:	68ba      	ldr	r2, [r7, #8]
 8010ed0:	7813      	ldrb	r3, [r2, #0]
 8010ed2:	f361 0303 	bfi	r3, r1, #0, #4
 8010ed6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	781a      	ldrb	r2, [r3, #0]
 8010edc:	4b2a      	ldr	r3, [pc, #168]	@ (8010f88 <PrepareFrame+0x218>)
 8010ede:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010ee2:	e049      	b.n	8010f78 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010ee4:	4b28      	ldr	r3, [pc, #160]	@ (8010f88 <PrepareFrame+0x218>)
 8010ee6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d010      	beq.n	8010f10 <PrepareFrame+0x1a0>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	2b0f      	cmp	r3, #15
 8010ef2:	d90d      	bls.n	8010f10 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010ef4:	7ffb      	ldrb	r3, [r7, #31]
 8010ef6:	f107 0114 	add.w	r1, r7, #20
 8010efa:	4a28      	ldr	r2, [pc, #160]	@ (8010f9c <PrepareFrame+0x22c>)
 8010efc:	4618      	mov	r0, r3
 8010efe:	f002 f96d 	bl	80131dc <LoRaMacCommandsSerializeCmds>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d001      	beq.n	8010f0c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f08:	2313      	movs	r3, #19
 8010f0a:	e039      	b.n	8010f80 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010f0c:	230a      	movs	r3, #10
 8010f0e:	e037      	b.n	8010f80 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010f10:	7ffb      	ldrb	r3, [r7, #31]
 8010f12:	f107 0114 	add.w	r1, r7, #20
 8010f16:	4a21      	ldr	r2, [pc, #132]	@ (8010f9c <PrepareFrame+0x22c>)
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f002 f95f 	bl	80131dc <LoRaMacCommandsSerializeCmds>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d001      	beq.n	8010f28 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f24:	2313      	movs	r3, #19
 8010f26:	e02b      	b.n	8010f80 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010f28:	4b17      	ldr	r3, [pc, #92]	@ (8010f88 <PrepareFrame+0x218>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010f30:	4b15      	ldr	r3, [pc, #84]	@ (8010f88 <PrepareFrame+0x218>)
 8010f32:	4a1a      	ldr	r2, [pc, #104]	@ (8010f9c <PrepareFrame+0x22c>)
 8010f34:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	4b12      	ldr	r3, [pc, #72]	@ (8010f88 <PrepareFrame+0x218>)
 8010f3e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010f42:	e019      	b.n	8010f78 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d018      	beq.n	8010f7c <PrepareFrame+0x20c>
 8010f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010f88 <PrepareFrame+0x218>)
 8010f4c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d013      	beq.n	8010f7c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010f54:	4812      	ldr	r0, [pc, #72]	@ (8010fa0 <PrepareFrame+0x230>)
 8010f56:	4b0c      	ldr	r3, [pc, #48]	@ (8010f88 <PrepareFrame+0x218>)
 8010f58:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	6839      	ldr	r1, [r7, #0]
 8010f60:	f007 fcdd 	bl	801891e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010f64:	4b08      	ldr	r3, [pc, #32]	@ (8010f88 <PrepareFrame+0x218>)
 8010f66:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	4b06      	ldr	r3, [pc, #24]	@ (8010f88 <PrepareFrame+0x218>)
 8010f70:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010f72:	e003      	b.n	8010f7c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010f74:	2302      	movs	r3, #2
 8010f76:	e003      	b.n	8010f80 <PrepareFrame+0x210>
            break;
 8010f78:	bf00      	nop
 8010f7a:	e000      	b.n	8010f7e <PrepareFrame+0x20e>
            break;
 8010f7c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3720      	adds	r7, #32
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	20003034 	.word	0x20003034
 8010f8c:	2000316c 	.word	0x2000316c
 8010f90:	20003036 	.word	0x20003036
 8010f94:	2000353c 	.word	0x2000353c
 8010f98:	2000314c 	.word	0x2000314c
 8010f9c:	200034bc 	.word	0x200034bc
 8010fa0:	20003037 	.word	0x20003037

08010fa4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b08a      	sub	sp, #40	@ 0x28
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fae:	2303      	movs	r3, #3
 8010fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010fbc:	4b47      	ldr	r3, [pc, #284]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010fbe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010fc2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010fc4:	4b45      	ldr	r3, [pc, #276]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010fc6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010fca:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010fcc:	4b43      	ldr	r3, [pc, #268]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010fd0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010fd2:	4b42      	ldr	r3, [pc, #264]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fd6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010fd8:	4b41      	ldr	r3, [pc, #260]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010fde:	4b3f      	ldr	r3, [pc, #252]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010fe0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010fe4:	f107 020f 	add.w	r2, r7, #15
 8010fe8:	f107 0110 	add.w	r1, r7, #16
 8010fec:	4b3d      	ldr	r3, [pc, #244]	@ (80110e4 <SendFrameOnChannel+0x140>)
 8010fee:	f003 feae 	bl	8014d4e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ffa:	4b38      	ldr	r3, [pc, #224]	@ (80110dc <SendFrameOnChannel+0x138>)
 8010ffc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011000:	b2da      	uxtb	r2, r3
 8011002:	4b37      	ldr	r3, [pc, #220]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011004:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011008:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801100c:	4b34      	ldr	r3, [pc, #208]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 801100e:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8011012:	79fb      	ldrb	r3, [r7, #7]
 8011014:	4a32      	ldr	r2, [pc, #200]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011016:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801101a:	4b31      	ldr	r3, [pc, #196]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 801101c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8011020:	4a2f      	ldr	r2, [pc, #188]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011022:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011026:	4b2e      	ldr	r3, [pc, #184]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011028:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 801102c:	4a2c      	ldr	r2, [pc, #176]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 801102e:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011032:	f001 fe69 	bl	8012d08 <LoRaMacClassBIsBeaconModeActive>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d00b      	beq.n	8011054 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801103c:	4b28      	ldr	r3, [pc, #160]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 801103e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8011042:	4618      	mov	r0, r3
 8011044:	f001 fecb 	bl	8012dde <LoRaMacClassBIsUplinkCollision>
 8011048:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011050:	2310      	movs	r3, #16
 8011052:	e03e      	b.n	80110d2 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011054:	4b21      	ldr	r3, [pc, #132]	@ (80110dc <SendFrameOnChannel+0x138>)
 8011056:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 801105a:	2b01      	cmp	r3, #1
 801105c:	d101      	bne.n	8011062 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801105e:	f001 fec8 	bl	8012df2 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011062:	f001 fe62 	bl	8012d2a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011066:	4b1d      	ldr	r3, [pc, #116]	@ (80110dc <SendFrameOnChannel+0x138>)
 8011068:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801106c:	b2db      	uxtb	r3, r3
 801106e:	4a1c      	ldr	r2, [pc, #112]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011070:	f892 2415 	ldrb.w	r2, [r2, #1045]	@ 0x415
 8011074:	4611      	mov	r1, r2
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff fc8a 	bl	8010990 <SecureFrame>
 801107c:	4603      	mov	r3, r0
 801107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011086:	2b00      	cmp	r3, #0
 8011088:	d002      	beq.n	8011090 <SendFrameOnChannel+0xec>
    {
        return status;
 801108a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801108e:	e020      	b.n	80110d2 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011090:	4b13      	ldr	r3, [pc, #76]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 8011092:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011096:	f043 0302 	orr.w	r3, r3, #2
 801109a:	4a11      	ldr	r2, [pc, #68]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 801109c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
 80110a0:	4b0f      	ldr	r3, [pc, #60]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 80110a2:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 80110a6:	f083 0301 	eor.w	r3, r3, #1
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80110b0:	4b0b      	ldr	r3, [pc, #44]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 80110b2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80110b6:	3301      	adds	r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	4b09      	ldr	r3, [pc, #36]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 80110bc:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80110c0:	4b09      	ldr	r3, [pc, #36]	@ (80110e8 <SendFrameOnChannel+0x144>)
 80110c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110c4:	4a06      	ldr	r2, [pc, #24]	@ (80110e0 <SendFrameOnChannel+0x13c>)
 80110c6:	8812      	ldrh	r2, [r2, #0]
 80110c8:	b2d2      	uxtb	r2, r2
 80110ca:	4611      	mov	r1, r2
 80110cc:	4807      	ldr	r0, [pc, #28]	@ (80110ec <SendFrameOnChannel+0x148>)
 80110ce:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3728      	adds	r7, #40	@ 0x28
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	2000353c 	.word	0x2000353c
 80110e0:	20003034 	.word	0x20003034
 80110e4:	2000344c 	.word	0x2000344c
 80110e8:	0801e020 	.word	0x0801e020
 80110ec:	20003036 	.word	0x20003036

080110f0 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80110fa:	4b15      	ldr	r3, [pc, #84]	@ (8011150 <SetTxContinuousWave+0x60>)
 80110fc:	f893 3415 	ldrb.w	r3, [r3, #1045]	@ 0x415
 8011100:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011102:	4b14      	ldr	r3, [pc, #80]	@ (8011154 <SetTxContinuousWave+0x64>)
 8011104:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011108:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801110a:	4b12      	ldr	r3, [pc, #72]	@ (8011154 <SetTxContinuousWave+0x64>)
 801110c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011110:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011112:	4b10      	ldr	r3, [pc, #64]	@ (8011154 <SetTxContinuousWave+0x64>)
 8011114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011116:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011118:	4b0e      	ldr	r3, [pc, #56]	@ (8011154 <SetTxContinuousWave+0x64>)
 801111a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801111c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801111e:	88fb      	ldrh	r3, [r7, #6]
 8011120:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8011122:	4b0c      	ldr	r3, [pc, #48]	@ (8011154 <SetTxContinuousWave+0x64>)
 8011124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011128:	f107 0208 	add.w	r2, r7, #8
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f003 ff0a 	bl	8014f48 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011134:	4b06      	ldr	r3, [pc, #24]	@ (8011150 <SetTxContinuousWave+0x60>)
 8011136:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801113a:	f043 0302 	orr.w	r3, r3, #2
 801113e:	4a04      	ldr	r2, [pc, #16]	@ (8011150 <SetTxContinuousWave+0x60>)
 8011140:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3718      	adds	r7, #24
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	20003034 	.word	0x20003034
 8011154:	2000353c 	.word	0x2000353c

08011158 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	4603      	mov	r3, r0
 8011160:	6039      	str	r1, [r7, #0]
 8011162:	80fb      	strh	r3, [r7, #6]
 8011164:	4613      	mov	r3, r2
 8011166:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011168:	4b09      	ldr	r3, [pc, #36]	@ (8011190 <SetTxContinuousWave1+0x38>)
 801116a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801116c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011170:	88fa      	ldrh	r2, [r7, #6]
 8011172:	6838      	ldr	r0, [r7, #0]
 8011174:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011176:	4b07      	ldr	r3, [pc, #28]	@ (8011194 <SetTxContinuousWave1+0x3c>)
 8011178:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801117c:	f043 0302 	orr.w	r3, r3, #2
 8011180:	4a04      	ldr	r2, [pc, #16]	@ (8011194 <SetTxContinuousWave1+0x3c>)
 8011182:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	0801e020 	.word	0x0801e020
 8011194:	20003034 	.word	0x20003034

08011198 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
    return &Nvm;
 801119c:	4b02      	ldr	r3, [pc, #8]	@ (80111a8 <GetNvmData+0x10>)
}
 801119e:	4618      	mov	r0, r3
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bc80      	pop	{r7}
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	2000353c 	.word	0x2000353c

080111ac <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80111be:	2303      	movs	r3, #3
 80111c0:	e09a      	b.n	80112f8 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80111c2:	4b4f      	ldr	r3, [pc, #316]	@ (8011300 <RestoreNvmData+0x154>)
 80111c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	d001      	beq.n	80111d0 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 80111cc:	2301      	movs	r3, #1
 80111ce:	e093      	b.n	80112f8 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2124      	movs	r1, #36	@ 0x24
 80111d4:	4618      	mov	r0, r3
 80111d6:	f007 fbf7 	bl	80189c8 <Crc32>
 80111da:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d105      	bne.n	80111f2 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2228      	movs	r2, #40	@ 0x28
 80111ea:	4619      	mov	r1, r3
 80111ec:	4845      	ldr	r0, [pc, #276]	@ (8011304 <RestoreNvmData+0x158>)
 80111ee:	f007 fb96 	bl	801891e <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	3328      	adds	r3, #40	@ 0x28
 80111f6:	2114      	movs	r1, #20
 80111f8:	4618      	mov	r0, r3
 80111fa:	f007 fbe5 	bl	80189c8 <Crc32>
 80111fe:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	429a      	cmp	r2, r3
 8011208:	d106      	bne.n	8011218 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	3328      	adds	r3, #40	@ 0x28
 801120e:	2218      	movs	r2, #24
 8011210:	4619      	mov	r1, r3
 8011212:	483d      	ldr	r0, [pc, #244]	@ (8011308 <RestoreNvmData+0x15c>)
 8011214:	f007 fb83 	bl	801891e <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3340      	adds	r3, #64	@ 0x40
 801121c:	21d4      	movs	r1, #212	@ 0xd4
 801121e:	4618      	mov	r0, r3
 8011220:	f007 fbd2 	bl	80189c8 <Crc32>
 8011224:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	429a      	cmp	r2, r3
 8011230:	d11f      	bne.n	8011272 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	3340      	adds	r3, #64	@ 0x40
 8011236:	22d8      	movs	r2, #216	@ 0xd8
 8011238:	4619      	mov	r1, r3
 801123a:	4834      	ldr	r0, [pc, #208]	@ (801130c <RestoreNvmData+0x160>)
 801123c:	f007 fb6f 	bl	801891e <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011240:	4b2f      	ldr	r3, [pc, #188]	@ (8011300 <RestoreNvmData+0x154>)
 8011242:	f893 2415 	ldrb.w	r2, [r3, #1045]	@ 0x415
 8011246:	4b2e      	ldr	r3, [pc, #184]	@ (8011300 <RestoreNvmData+0x154>)
 8011248:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801124c:	4b2d      	ldr	r3, [pc, #180]	@ (8011304 <RestoreNvmData+0x158>)
 801124e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011250:	4a2b      	ldr	r2, [pc, #172]	@ (8011300 <RestoreNvmData+0x154>)
 8011252:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011256:	4b2b      	ldr	r3, [pc, #172]	@ (8011304 <RestoreNvmData+0x158>)
 8011258:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 801125c:	4b28      	ldr	r3, [pc, #160]	@ (8011300 <RestoreNvmData+0x154>)
 801125e:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011262:	4b27      	ldr	r3, [pc, #156]	@ (8011300 <RestoreNvmData+0x154>)
 8011264:	2201      	movs	r2, #1
 8011266:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801126a:	4b25      	ldr	r3, [pc, #148]	@ (8011300 <RestoreNvmData+0x154>)
 801126c:	2202      	movs	r2, #2
 801126e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011278:	21bc      	movs	r1, #188	@ 0xbc
 801127a:	4618      	mov	r0, r3
 801127c:	f007 fba4 	bl	80189c8 <Crc32>
 8011280:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	429a      	cmp	r2, r3
 801128c:	d107      	bne.n	801129e <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011294:	22c0      	movs	r2, #192	@ 0xc0
 8011296:	4619      	mov	r1, r3
 8011298:	481d      	ldr	r0, [pc, #116]	@ (8011310 <RestoreNvmData+0x164>)
 801129a:	f007 fb40 	bl	801891e <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80112a4:	21a0      	movs	r1, #160	@ 0xa0
 80112a6:	4618      	mov	r0, r3
 80112a8:	f007 fb8e 	bl	80189c8 <Crc32>
 80112ac:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d107      	bne.n	80112ca <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80112c0:	22a4      	movs	r2, #164	@ 0xa4
 80112c2:	4619      	mov	r1, r3
 80112c4:	4813      	ldr	r0, [pc, #76]	@ (8011314 <RestoreNvmData+0x168>)
 80112c6:	f007 fb2a 	bl	801891e <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f503 63bf 	add.w	r3, r3, #1528	@ 0x5f8
 80112d0:	2114      	movs	r1, #20
 80112d2:	4618      	mov	r0, r3
 80112d4:	f007 fb78 	bl	80189c8 <Crc32>
 80112d8:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8d3 360c 	ldr.w	r3, [r3, #1548]	@ 0x60c
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d107      	bne.n	80112f6 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f503 63bf 	add.w	r3, r3, #1528	@ 0x5f8
 80112ec:	2218      	movs	r2, #24
 80112ee:	4619      	mov	r1, r3
 80112f0:	4809      	ldr	r0, [pc, #36]	@ (8011318 <RestoreNvmData+0x16c>)
 80112f2:	f007 fb14 	bl	801891e <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 80112f6:	2300      	movs	r3, #0
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	20003034 	.word	0x20003034
 8011304:	2000353c 	.word	0x2000353c
 8011308:	20003564 	.word	0x20003564
 801130c:	2000357c 	.word	0x2000357c
 8011310:	20003654 	.word	0x20003654
 8011314:	20003714 	.word	0x20003714
 8011318:	20003b34 	.word	0x20003b34

0801131c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d002      	beq.n	8011332 <DetermineFrameType+0x16>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d101      	bne.n	8011336 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011332:	2303      	movs	r3, #3
 8011334:	e03b      	b.n	80113ae <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7b1b      	ldrb	r3, [r3, #12]
 801133a:	f003 030f 	and.w	r3, r3, #15
 801133e:	b2db      	uxtb	r3, r3
 8011340:	2b00      	cmp	r3, #0
 8011342:	d008      	beq.n	8011356 <DetermineFrameType+0x3a>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f893 3020 	ldrb.w	r3, [r3, #32]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d003      	beq.n	8011356 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2200      	movs	r2, #0
 8011352:	701a      	strb	r2, [r3, #0]
 8011354:	e02a      	b.n	80113ac <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801135c:	2b00      	cmp	r3, #0
 801135e:	d103      	bne.n	8011368 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	2201      	movs	r2, #1
 8011364:	701a      	strb	r2, [r3, #0]
 8011366:	e021      	b.n	80113ac <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	7b1b      	ldrb	r3, [r3, #12]
 801136c:	f003 030f 	and.w	r3, r3, #15
 8011370:	b2db      	uxtb	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d108      	bne.n	8011388 <DetermineFrameType+0x6c>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 3020 	ldrb.w	r3, [r3, #32]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	2202      	movs	r2, #2
 8011384:	701a      	strb	r2, [r3, #0]
 8011386:	e011      	b.n	80113ac <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	7b1b      	ldrb	r3, [r3, #12]
 801138c:	f003 030f 	and.w	r3, r3, #15
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	d108      	bne.n	80113a8 <DetermineFrameType+0x8c>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f893 3020 	ldrb.w	r3, [r3, #32]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d003      	beq.n	80113a8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2203      	movs	r2, #3
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	e001      	b.n	80113ac <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80113a8:	2317      	movs	r3, #23
 80113aa:	e000      	b.n	80113ae <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	370c      	adds	r7, #12
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bc80      	pop	{r7}
 80113b6:	4770      	bx	lr

080113b8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80113b8:	b480      	push	{r7}
 80113ba:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80113bc:	4b12      	ldr	r3, [pc, #72]	@ (8011408 <CheckRetransUnconfirmedUplink+0x50>)
 80113be:	f893 2410 	ldrb.w	r2, [r3, #1040]	@ 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80113c2:	4b12      	ldr	r3, [pc, #72]	@ (801140c <CheckRetransUnconfirmedUplink+0x54>)
 80113c4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d301      	bcc.n	80113d0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80113cc:	2301      	movs	r3, #1
 80113ce:	e016      	b.n	80113fe <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80113d0:	4b0d      	ldr	r3, [pc, #52]	@ (8011408 <CheckRetransUnconfirmedUplink+0x50>)
 80113d2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80113d6:	f003 0302 	and.w	r3, r3, #2
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00d      	beq.n	80113fc <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80113e0:	4b0a      	ldr	r3, [pc, #40]	@ (801140c <CheckRetransUnconfirmedUplink+0x54>)
 80113e2:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d101      	bne.n	80113ee <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80113ea:	2301      	movs	r3, #1
 80113ec:	e007      	b.n	80113fe <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80113ee:	4b06      	ldr	r3, [pc, #24]	@ (8011408 <CheckRetransUnconfirmedUplink+0x50>)
 80113f0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80113f8:	2301      	movs	r3, #1
 80113fa:	e000      	b.n	80113fe <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80113fc:	2300      	movs	r3, #0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	46bd      	mov	sp, r7
 8011402:	bc80      	pop	{r7}
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	20003034 	.word	0x20003034
 801140c:	2000353c 	.word	0x2000353c

08011410 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011410:	b480      	push	{r7}
 8011412:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011414:	4b0e      	ldr	r3, [pc, #56]	@ (8011450 <CheckRetransConfirmedUplink+0x40>)
 8011416:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
        MacCtx.AckTimeoutRetries )
 801141a:	4b0d      	ldr	r3, [pc, #52]	@ (8011450 <CheckRetransConfirmedUplink+0x40>)
 801141c:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011420:	429a      	cmp	r2, r3
 8011422:	d301      	bcc.n	8011428 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011424:	2301      	movs	r3, #1
 8011426:	e00f      	b.n	8011448 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011428:	4b09      	ldr	r3, [pc, #36]	@ (8011450 <CheckRetransConfirmedUplink+0x40>)
 801142a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801142e:	f003 0302 	and.w	r3, r3, #2
 8011432:	b2db      	uxtb	r3, r3
 8011434:	2b00      	cmp	r3, #0
 8011436:	d006      	beq.n	8011446 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011438:	4b05      	ldr	r3, [pc, #20]	@ (8011450 <CheckRetransConfirmedUplink+0x40>)
 801143a:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	46bd      	mov	sp, r7
 801144c:	bc80      	pop	{r7}
 801144e:	4770      	bx	lr
 8011450:	20003034 	.word	0x20003034

08011454 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011454:	b480      	push	{r7}
 8011456:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011458:	4b1a      	ldr	r3, [pc, #104]	@ (80114c4 <StopRetransmission+0x70>)
 801145a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801145e:	f003 0302 	and.w	r3, r3, #2
 8011462:	b2db      	uxtb	r3, r3
 8011464:	2b00      	cmp	r3, #0
 8011466:	d009      	beq.n	801147c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011468:	4b16      	ldr	r3, [pc, #88]	@ (80114c4 <StopRetransmission+0x70>)
 801146a:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00e      	beq.n	8011490 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011472:	4b14      	ldr	r3, [pc, #80]	@ (80114c4 <StopRetransmission+0x70>)
 8011474:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011478:	2b01      	cmp	r3, #1
 801147a:	d009      	beq.n	8011490 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801147c:	4b12      	ldr	r3, [pc, #72]	@ (80114c8 <StopRetransmission+0x74>)
 801147e:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8011482:	2b00      	cmp	r3, #0
 8011484:	d004      	beq.n	8011490 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8011486:	4b10      	ldr	r3, [pc, #64]	@ (80114c8 <StopRetransmission+0x74>)
 8011488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801148a:	3301      	adds	r3, #1
 801148c:	4a0e      	ldr	r2, [pc, #56]	@ (80114c8 <StopRetransmission+0x74>)
 801148e:	6293      	str	r3, [r2, #40]	@ 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011490:	4b0c      	ldr	r3, [pc, #48]	@ (80114c4 <StopRetransmission+0x70>)
 8011492:	2200      	movs	r2, #0
 8011494:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    MacCtx.NodeAckRequested = false;
 8011498:	4b0a      	ldr	r3, [pc, #40]	@ (80114c4 <StopRetransmission+0x70>)
 801149a:	2200      	movs	r2, #0
 801149c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    MacCtx.AckTimeoutRetry = false;
 80114a0:	4b08      	ldr	r3, [pc, #32]	@ (80114c4 <StopRetransmission+0x70>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80114a8:	4b06      	ldr	r3, [pc, #24]	@ (80114c4 <StopRetransmission+0x70>)
 80114aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80114ae:	f023 0302 	bic.w	r3, r3, #2
 80114b2:	4a04      	ldr	r2, [pc, #16]	@ (80114c4 <StopRetransmission+0x70>)
 80114b4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80114b8:	2301      	movs	r3, #1
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	46bd      	mov	sp, r7
 80114be:	bc80      	pop	{r7}
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20003034 	.word	0x20003034
 80114c8:	2000353c 	.word	0x2000353c

080114cc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	4603      	mov	r3, r0
 80114d4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80114d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011504 <CallNvmDataChangeCallback+0x38>)
 80114d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00c      	beq.n	80114fa <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80114e0:	4b08      	ldr	r3, [pc, #32]	@ (8011504 <CallNvmDataChangeCallback+0x38>)
 80114e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80114e6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d006      	beq.n	80114fa <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80114ec:	4b05      	ldr	r3, [pc, #20]	@ (8011504 <CallNvmDataChangeCallback+0x38>)
 80114ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	88fa      	ldrh	r2, [r7, #6]
 80114f6:	4610      	mov	r0, r2
 80114f8:	4798      	blx	r3
    }
}
 80114fa:	bf00      	nop
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	20003034 	.word	0x20003034

08011508 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801150e:	4b1b      	ldr	r3, [pc, #108]	@ (801157c <AckTimeoutRetriesProcess+0x74>)
 8011510:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 8011514:	4b19      	ldr	r3, [pc, #100]	@ (801157c <AckTimeoutRetriesProcess+0x74>)
 8011516:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 801151a:	429a      	cmp	r2, r3
 801151c:	d229      	bcs.n	8011572 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801151e:	4b17      	ldr	r3, [pc, #92]	@ (801157c <AckTimeoutRetriesProcess+0x74>)
 8011520:	f893 3412 	ldrb.w	r3, [r3, #1042]	@ 0x412
 8011524:	3301      	adds	r3, #1
 8011526:	b2da      	uxtb	r2, r3
 8011528:	4b14      	ldr	r3, [pc, #80]	@ (801157c <AckTimeoutRetriesProcess+0x74>)
 801152a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801152e:	4b13      	ldr	r3, [pc, #76]	@ (801157c <AckTimeoutRetriesProcess+0x74>)
 8011530:	f893 3412 	ldrb.w	r3, [r3, #1042]	@ 0x412
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d019      	beq.n	8011572 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801153e:	2322      	movs	r3, #34	@ 0x22
 8011540:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011542:	4b0f      	ldr	r3, [pc, #60]	@ (8011580 <AckTimeoutRetriesProcess+0x78>)
 8011544:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011548:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801154a:	4b0d      	ldr	r3, [pc, #52]	@ (8011580 <AckTimeoutRetriesProcess+0x78>)
 801154c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011550:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011552:	4b0b      	ldr	r3, [pc, #44]	@ (8011580 <AckTimeoutRetriesProcess+0x78>)
 8011554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011558:	f107 0208 	add.w	r2, r7, #8
 801155c:	4611      	mov	r1, r2
 801155e:	4618      	mov	r0, r3
 8011560:	f003 fb13 	bl	8014b8a <RegionGetPhyParam>
 8011564:	4603      	mov	r3, r0
 8011566:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	b25a      	sxtb	r2, r3
 801156c:	4b04      	ldr	r3, [pc, #16]	@ (8011580 <AckTimeoutRetriesProcess+0x78>)
 801156e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 8011572:	bf00      	nop
 8011574:	3710      	adds	r7, #16
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20003034 	.word	0x20003034
 8011580:	2000353c 	.word	0x2000353c

08011584 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801158a:	4b14      	ldr	r3, [pc, #80]	@ (80115dc <AckTimeoutRetriesFinalize+0x58>)
 801158c:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 8011590:	f083 0301 	eor.w	r3, r3, #1
 8011594:	b2db      	uxtb	r3, r3
 8011596:	2b00      	cmp	r3, #0
 8011598:	d015      	beq.n	80115c6 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801159a:	2302      	movs	r3, #2
 801159c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801159e:	4b10      	ldr	r3, [pc, #64]	@ (80115e0 <AckTimeoutRetriesFinalize+0x5c>)
 80115a0:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80115a2:	4b10      	ldr	r3, [pc, #64]	@ (80115e4 <AckTimeoutRetriesFinalize+0x60>)
 80115a4:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80115a6:	4b10      	ldr	r3, [pc, #64]	@ (80115e8 <AckTimeoutRetriesFinalize+0x64>)
 80115a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115ac:	1d3a      	adds	r2, r7, #4
 80115ae:	4611      	mov	r1, r2
 80115b0:	4618      	mov	r0, r3
 80115b2:	f003 fb21 	bl	8014bf8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80115b6:	4b09      	ldr	r3, [pc, #36]	@ (80115dc <AckTimeoutRetriesFinalize+0x58>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80115be:	4b07      	ldr	r3, [pc, #28]	@ (80115dc <AckTimeoutRetriesFinalize+0x58>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80115c6:	4b05      	ldr	r3, [pc, #20]	@ (80115dc <AckTimeoutRetriesFinalize+0x58>)
 80115c8:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80115cc:	4b03      	ldr	r3, [pc, #12]	@ (80115dc <AckTimeoutRetriesFinalize+0x58>)
 80115ce:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d
}
 80115d2:	bf00      	nop
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	20003034 	.word	0x20003034
 80115e0:	20003714 	.word	0x20003714
 80115e4:	200037b8 	.word	0x200037b8
 80115e8:	2000353c 	.word	0x2000353c

080115ec <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80115ec:	b480      	push	{r7}
 80115ee:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80115f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011620 <IsRequestPending+0x34>)
 80115f2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80115f6:	f003 0304 	and.w	r3, r3, #4
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d107      	bne.n	8011610 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011600:	4b07      	ldr	r3, [pc, #28]	@ (8011620 <IsRequestPending+0x34>)
 8011602:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8011606:	f003 0301 	and.w	r3, r3, #1
 801160a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <IsRequestPending+0x28>
    {
        return 1;
 8011610:	2301      	movs	r3, #1
 8011612:	e000      	b.n	8011616 <IsRequestPending+0x2a>
    }
    return 0;
 8011614:	2300      	movs	r3, #0
}
 8011616:	4618      	mov	r0, r3
 8011618:	46bd      	mov	sp, r7
 801161a:	bc80      	pop	{r7}
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	20003034 	.word	0x20003034

08011624 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011624:	b590      	push	{r4, r7, lr}
 8011626:	b08f      	sub	sp, #60	@ 0x3c
 8011628:	af02      	add	r7, sp, #8
 801162a:	6178      	str	r0, [r7, #20]
 801162c:	6139      	str	r1, [r7, #16]
 801162e:	4613      	mov	r3, r2
 8011630:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <LoRaMacInitialization+0x1a>
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d101      	bne.n	8011642 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801163e:	2303      	movs	r3, #3
 8011640:	e275      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00b      	beq.n	8011662 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801164e:	2b00      	cmp	r3, #0
 8011650:	d007      	beq.n	8011662 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011656:	2b00      	cmp	r3, #0
 8011658:	d003      	beq.n	8011662 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801165e:	2b00      	cmp	r3, #0
 8011660:	d101      	bne.n	8011666 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011662:	2303      	movs	r3, #3
 8011664:	e263      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011666:	7bfb      	ldrb	r3, [r7, #15]
 8011668:	4618      	mov	r0, r3
 801166a:	f003 fa79 	bl	8014b60 <RegionIsActive>
 801166e:	4603      	mov	r3, r0
 8011670:	f083 0301 	eor.w	r3, r3, #1
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d001      	beq.n	801167e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801167a:	2309      	movs	r3, #9
 801167c:	e257      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801167e:	6978      	ldr	r0, [r7, #20]
 8011680:	f001 fef6 	bl	8013470 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011684:	f44f 62c2 	mov.w	r2, #1552	@ 0x610
 8011688:	2100      	movs	r1, #0
 801168a:	48c7      	ldr	r0, [pc, #796]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801168c:	f007 f982 	bl	8018994 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011690:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 8011694:	2100      	movs	r1, #0
 8011696:	48c5      	ldr	r0, [pc, #788]	@ (80119ac <LoRaMacInitialization+0x388>)
 8011698:	f007 f97c 	bl	8018994 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 801169c:	4bc3      	ldr	r3, [pc, #780]	@ (80119ac <LoRaMacInitialization+0x388>)
 801169e:	2201      	movs	r2, #1
 80116a0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    MacCtx.AckTimeoutRetries = 1;
 80116a4:	4bc1      	ldr	r3, [pc, #772]	@ (80119ac <LoRaMacInitialization+0x388>)
 80116a6:	2201      	movs	r2, #1
 80116a8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    Nvm.MacGroup2.Region = region;
 80116ac:	4abe      	ldr	r2, [pc, #760]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
 80116b0:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80116b4:	4bbc      	ldr	r3, [pc, #752]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116b6:	2200      	movs	r2, #0
 80116b8:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80116bc:	4bba      	ldr	r3, [pc, #744]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116be:	2200      	movs	r2, #0
 80116c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80116c4:	4bb8      	ldr	r3, [pc, #736]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116c6:	4aba      	ldr	r2, [pc, #744]	@ (80119b0 <LoRaMacInitialization+0x38c>)
 80116c8:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80116cc:	230f      	movs	r3, #15
 80116ce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116d2:	4bb5      	ldr	r3, [pc, #724]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80116dc:	4611      	mov	r1, r2
 80116de:	4618      	mov	r0, r3
 80116e0:	f003 fa53 	bl	8014b8a <RegionGetPhyParam>
 80116e4:	4603      	mov	r3, r0
 80116e6:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	bf14      	ite	ne
 80116ee:	2301      	movne	r3, #1
 80116f0:	2300      	moveq	r3, #0
 80116f2:	b2da      	uxtb	r2, r3
 80116f4:	4bac      	ldr	r3, [pc, #688]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80116f6:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80116fa:	230a      	movs	r3, #10
 80116fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011700:	4ba9      	ldr	r3, [pc, #676]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011706:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801170a:	4611      	mov	r1, r2
 801170c:	4618      	mov	r0, r3
 801170e:	f003 fa3c 	bl	8014b8a <RegionGetPhyParam>
 8011712:	4603      	mov	r3, r0
 8011714:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011718:	b25a      	sxtb	r2, r3
 801171a:	4ba3      	ldr	r3, [pc, #652]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801171c:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011720:	2306      	movs	r3, #6
 8011722:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011726:	4ba0      	ldr	r3, [pc, #640]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011728:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801172c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f003 fa29 	bl	8014b8a <RegionGetPhyParam>
 8011738:	4603      	mov	r3, r0
 801173a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173e:	b25a      	sxtb	r2, r3
 8011740:	4b99      	ldr	r3, [pc, #612]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011742:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011746:	2310      	movs	r3, #16
 8011748:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801174c:	4b96      	ldr	r3, [pc, #600]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801174e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011752:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011756:	4611      	mov	r1, r2
 8011758:	4618      	mov	r0, r3
 801175a:	f003 fa16 	bl	8014b8a <RegionGetPhyParam>
 801175e:	4603      	mov	r3, r0
 8011760:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011764:	4a90      	ldr	r2, [pc, #576]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011766:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801176a:	2311      	movs	r3, #17
 801176c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011770:	4b8d      	ldr	r3, [pc, #564]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011776:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f003 fa04 	bl	8014b8a <RegionGetPhyParam>
 8011782:	4603      	mov	r3, r0
 8011784:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011788:	4a87      	ldr	r2, [pc, #540]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801178a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801178e:	2312      	movs	r3, #18
 8011790:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011794:	4b84      	ldr	r3, [pc, #528]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801179a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801179e:	4611      	mov	r1, r2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f003 f9f2 	bl	8014b8a <RegionGetPhyParam>
 80117a6:	4603      	mov	r3, r0
 80117a8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ac:	4a7e      	ldr	r2, [pc, #504]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80117ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80117b2:	2313      	movs	r3, #19
 80117b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117b8:	4b7b      	ldr	r3, [pc, #492]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80117ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80117c2:	4611      	mov	r1, r2
 80117c4:	4618      	mov	r0, r3
 80117c6:	f003 f9e0 	bl	8014b8a <RegionGetPhyParam>
 80117ca:	4603      	mov	r3, r0
 80117cc:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80117ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d0:	4a75      	ldr	r2, [pc, #468]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80117d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80117d6:	2314      	movs	r3, #20
 80117d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117dc:	4b72      	ldr	r3, [pc, #456]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80117de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80117e6:	4611      	mov	r1, r2
 80117e8:	4618      	mov	r0, r3
 80117ea:	f003 f9ce 	bl	8014b8a <RegionGetPhyParam>
 80117ee:	4603      	mov	r3, r0
 80117f0:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80117f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f4:	4a6c      	ldr	r2, [pc, #432]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80117f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80117fa:	2317      	movs	r3, #23
 80117fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011800:	4b69      	ldr	r3, [pc, #420]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011806:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801180a:	4611      	mov	r1, r2
 801180c:	4618      	mov	r0, r3
 801180e:	f003 f9bc 	bl	8014b8a <RegionGetPhyParam>
 8011812:	4603      	mov	r3, r0
 8011814:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011818:	b2da      	uxtb	r2, r3
 801181a:	4b63      	ldr	r3, [pc, #396]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801181c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011820:	2318      	movs	r3, #24
 8011822:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011826:	4b60      	ldr	r3, [pc, #384]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801182c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011830:	4611      	mov	r1, r2
 8011832:	4618      	mov	r0, r3
 8011834:	f003 f9a9 	bl	8014b8a <RegionGetPhyParam>
 8011838:	4603      	mov	r3, r0
 801183a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183e:	4a5a      	ldr	r2, [pc, #360]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011840:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011846:	4a58      	ldr	r2, [pc, #352]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011848:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801184c:	2319      	movs	r3, #25
 801184e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011852:	4b55      	ldr	r3, [pc, #340]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011858:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f003 f993 	bl	8014b8a <RegionGetPhyParam>
 8011864:	4603      	mov	r3, r0
 8011866:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186a:	b2da      	uxtb	r2, r3
 801186c:	4b4e      	ldr	r3, [pc, #312]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801186e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	b2da      	uxtb	r2, r3
 8011876:	4b4c      	ldr	r3, [pc, #304]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011878:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801187c:	231e      	movs	r3, #30
 801187e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011882:	4b49      	ldr	r3, [pc, #292]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011888:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801188c:	4611      	mov	r1, r2
 801188e:	4618      	mov	r0, r3
 8011890:	f003 f97b 	bl	8014b8a <RegionGetPhyParam>
 8011894:	4603      	mov	r3, r0
 8011896:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189a:	b2da      	uxtb	r2, r3
 801189c:	4b42      	ldr	r3, [pc, #264]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801189e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80118a2:	231f      	movs	r3, #31
 80118a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118a8:	4b3f      	ldr	r3, [pc, #252]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80118aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118ae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80118b2:	4611      	mov	r1, r2
 80118b4:	4618      	mov	r0, r3
 80118b6:	f003 f968 	bl	8014b8a <RegionGetPhyParam>
 80118ba:	4603      	mov	r3, r0
 80118bc:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80118be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	4b39      	ldr	r3, [pc, #228]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80118c4:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80118c8:	2320      	movs	r3, #32
 80118ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118ce:	4b36      	ldr	r3, [pc, #216]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80118d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f003 f955 	bl	8014b8a <RegionGetPhyParam>
 80118e0:	4603      	mov	r3, r0
 80118e2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80118e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e6:	4a30      	ldr	r2, [pc, #192]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80118e8:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80118ec:	2321      	movs	r3, #33	@ 0x21
 80118ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118f2:	4b2d      	ldr	r3, [pc, #180]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80118f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118f8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80118fc:	4611      	mov	r1, r2
 80118fe:	4618      	mov	r0, r3
 8011900:	f003 f943 	bl	8014b8a <RegionGetPhyParam>
 8011904:	4603      	mov	r3, r0
 8011906:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801190a:	4a27      	ldr	r2, [pc, #156]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801190c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011910:	230b      	movs	r3, #11
 8011912:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011916:	4b24      	ldr	r3, [pc, #144]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801191c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011920:	4611      	mov	r1, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f003 f931 	bl	8014b8a <RegionGetPhyParam>
 8011928:	4603      	mov	r3, r0
 801192a:	627b      	str	r3, [r7, #36]	@ 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 801192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192e:	b29a      	uxth	r2, r3
 8011930:	4b1e      	ldr	r3, [pc, #120]	@ (80119ac <LoRaMacInitialization+0x388>)
 8011932:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011936:	230c      	movs	r3, #12
 8011938:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801193c:	4b1a      	ldr	r3, [pc, #104]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801193e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011942:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011946:	4611      	mov	r1, r2
 8011948:	4618      	mov	r0, r3
 801194a:	f003 f91e 	bl	8014b8a <RegionGetPhyParam>
 801194e:	4603      	mov	r3, r0
 8011950:	627b      	str	r3, [r7, #36]	@ 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8011952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011954:	b29a      	uxth	r2, r3
 8011956:	4b15      	ldr	r3, [pc, #84]	@ (80119ac <LoRaMacInitialization+0x388>)
 8011958:	f8a3 23f6 	strh.w	r2, [r3, #1014]	@ 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801195c:	4b12      	ldr	r3, [pc, #72]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801195e:	2201      	movs	r2, #1
 8011960:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011964:	4b10      	ldr	r3, [pc, #64]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011966:	220a      	movs	r2, #10
 8011968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801196c:	4b0e      	ldr	r3, [pc, #56]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801196e:	2206      	movs	r2, #6
 8011970:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011974:	4b0c      	ldr	r3, [pc, #48]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801197a:	4a0b      	ldr	r2, [pc, #44]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801197c:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801197e:	4b0a      	ldr	r3, [pc, #40]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011980:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8011984:	4b08      	ldr	r3, [pc, #32]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011986:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801198a:	4b07      	ldr	r3, [pc, #28]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801198c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011990:	4a05      	ldr	r2, [pc, #20]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011992:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011994:	4b04      	ldr	r3, [pc, #16]	@ (80119a8 <LoRaMacInitialization+0x384>)
 8011996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801199a:	4a03      	ldr	r2, [pc, #12]	@ (80119a8 <LoRaMacInitialization+0x384>)
 801199c:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801199e:	4b02      	ldr	r3, [pc, #8]	@ (80119a8 <LoRaMacInitialization+0x384>)
 80119a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80119a4:	e006      	b.n	80119b4 <LoRaMacInitialization+0x390>
 80119a6:	bf00      	nop
 80119a8:	2000353c 	.word	0x2000353c
 80119ac:	20003034 	.word	0x20003034
 80119b0:	01000300 	.word	0x01000300
 80119b4:	4a60      	ldr	r2, [pc, #384]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119b6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80119b8:	4b5f      	ldr	r3, [pc, #380]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80119be:	4a5e      	ldr	r2, [pc, #376]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119c0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80119c2:	4b5d      	ldr	r3, [pc, #372]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80119c8:	4a5b      	ldr	r2, [pc, #364]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80119cc:	4b5a      	ldr	r3, [pc, #360]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119ce:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80119d2:	4b59      	ldr	r3, [pc, #356]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80119d8:	2300      	movs	r3, #0
 80119da:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80119de:	4b57      	ldr	r3, [pc, #348]	@ (8011b3c <LoRaMacInitialization+0x518>)
 80119e0:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80119e2:	4b57      	ldr	r3, [pc, #348]	@ (8011b40 <LoRaMacInitialization+0x51c>)
 80119e4:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80119e6:	4b54      	ldr	r3, [pc, #336]	@ (8011b38 <LoRaMacInitialization+0x514>)
 80119e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80119ec:	f107 0218 	add.w	r2, r7, #24
 80119f0:	4611      	mov	r1, r2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f003 f900 	bl	8014bf8 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80119f8:	4a52      	ldr	r2, [pc, #328]	@ (8011b44 <LoRaMacInitialization+0x520>)
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8011a00:	f7ff f85c 	bl	8010abc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011a04:	4b4c      	ldr	r3, [pc, #304]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011a06:	2201      	movs	r2, #1
 8011a08:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd

    MacCtx.MacPrimitives = primitives;
 8011a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8011a14:	4b4b      	ldr	r3, [pc, #300]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8011a1c:	4b49      	ldr	r3, [pc, #292]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011a1e:	2201      	movs	r2, #1
 8011a20:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011a24:	4b44      	ldr	r3, [pc, #272]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011a2a:	4b43      	ldr	r3, [pc, #268]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011a30:	2300      	movs	r3, #0
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	4b44      	ldr	r3, [pc, #272]	@ (8011b48 <LoRaMacInitialization+0x524>)
 8011a36:	2200      	movs	r2, #0
 8011a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a3c:	4843      	ldr	r0, [pc, #268]	@ (8011b4c <LoRaMacInitialization+0x528>)
 8011a3e:	f00a fec7 	bl	801c7d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011a42:	2300      	movs	r3, #0
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	4b42      	ldr	r3, [pc, #264]	@ (8011b50 <LoRaMacInitialization+0x52c>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a4e:	4841      	ldr	r0, [pc, #260]	@ (8011b54 <LoRaMacInitialization+0x530>)
 8011a50:	f00a febe 	bl	801c7d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011a54:	2300      	movs	r3, #0
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	4b3f      	ldr	r3, [pc, #252]	@ (8011b58 <LoRaMacInitialization+0x534>)
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a60:	483e      	ldr	r0, [pc, #248]	@ (8011b5c <LoRaMacInitialization+0x538>)
 8011a62:	f00a feb5 	bl	801c7d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011a66:	2300      	movs	r3, #0
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8011b60 <LoRaMacInitialization+0x53c>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a72:	483c      	ldr	r0, [pc, #240]	@ (8011b64 <LoRaMacInitialization+0x540>)
 8011a74:	f00a feac 	bl	801c7d0 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011a78:	4c2f      	ldr	r4, [pc, #188]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011a7a:	463b      	mov	r3, r7
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f00a fe11 	bl	801c6a4 <SysTimeGetMcuTime>
 8011a82:	f504 7382 	add.w	r3, r4, #260	@ 0x104
 8011a86:	463a      	mov	r2, r7
 8011a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a8c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011a90:	4b2c      	ldr	r3, [pc, #176]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011a92:	4a35      	ldr	r2, [pc, #212]	@ (8011b68 <LoRaMacInitialization+0x544>)
 8011a94:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011a98:	4b2a      	ldr	r3, [pc, #168]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011a9a:	4a34      	ldr	r2, [pc, #208]	@ (8011b6c <LoRaMacInitialization+0x548>)
 8011a9c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011aa0:	4b28      	ldr	r3, [pc, #160]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011aa2:	4a33      	ldr	r2, [pc, #204]	@ (8011b70 <LoRaMacInitialization+0x54c>)
 8011aa4:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011aa8:	4b26      	ldr	r3, [pc, #152]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011aaa:	4a32      	ldr	r2, [pc, #200]	@ (8011b74 <LoRaMacInitialization+0x550>)
 8011aac:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011ab0:	4b24      	ldr	r3, [pc, #144]	@ (8011b44 <LoRaMacInitialization+0x520>)
 8011ab2:	4a31      	ldr	r2, [pc, #196]	@ (8011b78 <LoRaMacInitialization+0x554>)
 8011ab4:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011ab8:	4b30      	ldr	r3, [pc, #192]	@ (8011b7c <LoRaMacInitialization+0x558>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4830      	ldr	r0, [pc, #192]	@ (8011b80 <LoRaMacInitialization+0x55c>)
 8011abe:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	482f      	ldr	r0, [pc, #188]	@ (8011b84 <LoRaMacInitialization+0x560>)
 8011ac8:	f7fa ff28 	bl	800c91c <SecureElementInit>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d001      	beq.n	8011ad6 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ad2:	2311      	movs	r3, #17
 8011ad4:	e02b      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011ad6:	4818      	ldr	r0, [pc, #96]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011ad8:	f002 f976 	bl	8013dc8 <LoRaMacCryptoInit>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d001      	beq.n	8011ae6 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ae2:	2311      	movs	r3, #17
 8011ae4:	e023      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011ae6:	f001 fa95 	bl	8013014 <LoRaMacCommandsInit>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d001      	beq.n	8011af4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011af0:	2313      	movs	r3, #19
 8011af2:	e01c      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011af4:	4824      	ldr	r0, [pc, #144]	@ (8011b88 <LoRaMacInitialization+0x564>)
 8011af6:	f002 fa31 	bl	8013f5c <LoRaMacCryptoSetMulticastReference>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b00:	2311      	movs	r3, #17
 8011b02:	e014      	b.n	8011b2e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011b04:	4b1d      	ldr	r3, [pc, #116]	@ (8011b7c <LoRaMacInitialization+0x558>)
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	4798      	blx	r3
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f006 fee1 	bl	80188d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011b12:	4b1a      	ldr	r3, [pc, #104]	@ (8011b7c <LoRaMacInitialization+0x558>)
 8011b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b16:	4a08      	ldr	r2, [pc, #32]	@ (8011b38 <LoRaMacInitialization+0x514>)
 8011b18:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	4798      	blx	r3
    Radio.Sleep( );
 8011b20:	4b16      	ldr	r3, [pc, #88]	@ (8011b7c <LoRaMacInitialization+0x558>)
 8011b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b24:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b26:	2001      	movs	r0, #1
 8011b28:	f7fd fa9c 	bl	800f064 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011b2c:	2300      	movs	r3, #0
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3734      	adds	r7, #52	@ 0x34
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd90      	pop	{r4, r7, pc}
 8011b36:	bf00      	nop
 8011b38:	2000353c 	.word	0x2000353c
 8011b3c:	20003714 	.word	0x20003714
 8011b40:	200037b8 	.word	0x200037b8
 8011b44:	20003034 	.word	0x20003034
 8011b48:	0800f5ed 	.word	0x0800f5ed
 8011b4c:	2000339c 	.word	0x2000339c
 8011b50:	0800f661 	.word	0x0800f661
 8011b54:	200033b4 	.word	0x200033b4
 8011b58:	0800f6cd 	.word	0x0800f6cd
 8011b5c:	200033cc 	.word	0x200033cc
 8011b60:	0800f741 	.word	0x0800f741
 8011b64:	2000342c 	.word	0x2000342c
 8011b68:	0800e1f1 	.word	0x0800e1f1
 8011b6c:	0800e269 	.word	0x0800e269
 8011b70:	0800e341 	.word	0x0800e341
 8011b74:	0800e2f5 	.word	0x0800e2f5
 8011b78:	0800e37d 	.word	0x0800e37d
 8011b7c:	0801e020 	.word	0x0801e020
 8011b80:	20003380 	.word	0x20003380
 8011b84:	20003654 	.word	0x20003654
 8011b88:	2000360c 	.word	0x2000360c

08011b8c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011b90:	4b04      	ldr	r3, [pc, #16]	@ (8011ba4 <LoRaMacStart+0x18>)
 8011b92:	2200      	movs	r2, #0
 8011b94:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bc80      	pop	{r7}
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop
 8011ba4:	20003034 	.word	0x20003034

08011ba8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b08a      	sub	sp, #40	@ 0x28
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	4603      	mov	r3, r0
 8011bb0:	6039      	str	r1, [r7, #0]
 8011bb2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bb8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011bba:	4b3d      	ldr	r3, [pc, #244]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011bbc:	f993 30c5 	ldrsb.w	r3, [r3, #197]	@ 0xc5
 8011bc0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011bc4:	f993 30c4 	ldrsb.w	r3, [r3, #196]	@ 0xc4
 8011bc8:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d101      	bne.n	8011bd8 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bd4:	2303      	movs	r3, #3
 8011bd6:	e066      	b.n	8011ca6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8011bd8:	4b35      	ldr	r3, [pc, #212]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011bda:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011bde:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8011be0:	2300      	movs	r3, #0
 8011be2:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011be4:	4b32      	ldr	r3, [pc, #200]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011be6:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 8011bea:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011bec:	4b30      	ldr	r3, [pc, #192]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bf0:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011bf2:	4b30      	ldr	r3, [pc, #192]	@ (8011cb4 <LoRaMacQueryTxPossible+0x10c>)
 8011bf4:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8011bf8:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8011cb4 <LoRaMacQueryTxPossible+0x10c>)
 8011bfc:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	@ 0x3f6
 8011c00:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011c02:	4b2b      	ldr	r3, [pc, #172]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011c04:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011c08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011c0c:	4b28      	ldr	r3, [pc, #160]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011c0e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011c12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c16:	4b26      	ldr	r3, [pc, #152]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011c18:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011c1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8011c20:	4b23      	ldr	r3, [pc, #140]	@ (8011cb0 <LoRaMacQueryTxPossible+0x108>)
 8011c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8011c2a:	f107 0310 	add.w	r3, r7, #16
 8011c2e:	f107 020e 	add.w	r2, r7, #14
 8011c32:	f107 010f 	add.w	r1, r7, #15
 8011c36:	f107 0014 	add.w	r0, r7, #20
 8011c3a:	f000 ffe1 	bl	8012c00 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7fd fec4 	bl	800f9d0 <GetMaxAppPayloadWithoutFOptsLength>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c50:	f107 0308 	add.w	r3, r7, #8
 8011c54:	4618      	mov	r0, r3
 8011c56:	f001 faab 	bl	80131b0 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c60:	2313      	movs	r3, #19
 8011c62:	e020      	b.n	8011ca6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	2b0f      	cmp	r3, #15
 8011c68:	d819      	bhi.n	8011c9e <LoRaMacQueryTxPossible+0xf6>
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	785b      	ldrb	r3, [r3, #1]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d313      	bcc.n	8011c9e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	785a      	ldrb	r2, [r3, #1]
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	785b      	ldrb	r3, [r3, #1]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	79fa      	ldrb	r2, [r7, #7]
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	4413      	add	r3, r2
 8011c92:	4299      	cmp	r1, r3
 8011c94:	d301      	bcc.n	8011c9a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8011c96:	2300      	movs	r3, #0
 8011c98:	e005      	b.n	8011ca6 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011c9a:	2308      	movs	r3, #8
 8011c9c:	e003      	b.n	8011ca6 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011ca4:	2308      	movs	r3, #8
    }
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3728      	adds	r7, #40	@ 0x28
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	2000353c 	.word	0x2000353c
 8011cb4:	20003034 	.word	0x20003034

08011cb8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011cb8:	b590      	push	{r4, r7, lr}
 8011cba:	b087      	sub	sp, #28
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d101      	bne.n	8011cce <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cca:	2303      	movs	r3, #3
 8011ccc:	e14b      	b.n	8011f66 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	2b28      	cmp	r3, #40	@ 0x28
 8011cd4:	f200 8140 	bhi.w	8011f58 <LoRaMacMibGetRequestConfirm+0x2a0>
 8011cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8011ce0 <LoRaMacMibGetRequestConfirm+0x28>)
 8011cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cde:	bf00      	nop
 8011ce0:	08011d85 	.word	0x08011d85
 8011ce4:	08011d91 	.word	0x08011d91
 8011ce8:	08011d9d 	.word	0x08011d9d
 8011cec:	08011da9 	.word	0x08011da9
 8011cf0:	08011db5 	.word	0x08011db5
 8011cf4:	08011dc1 	.word	0x08011dc1
 8011cf8:	08011dcd 	.word	0x08011dcd
 8011cfc:	08011f59 	.word	0x08011f59
 8011d00:	08011f59 	.word	0x08011f59
 8011d04:	08011f59 	.word	0x08011f59
 8011d08:	08011f59 	.word	0x08011f59
 8011d0c:	08011f59 	.word	0x08011f59
 8011d10:	08011f59 	.word	0x08011f59
 8011d14:	08011f59 	.word	0x08011f59
 8011d18:	08011f59 	.word	0x08011f59
 8011d1c:	08011dd9 	.word	0x08011dd9
 8011d20:	08011de5 	.word	0x08011de5
 8011d24:	08011df1 	.word	0x08011df1
 8011d28:	08011e13 	.word	0x08011e13
 8011d2c:	08011e25 	.word	0x08011e25
 8011d30:	08011e37 	.word	0x08011e37
 8011d34:	08011e49 	.word	0x08011e49
 8011d38:	08011e7d 	.word	0x08011e7d
 8011d3c:	08011e5b 	.word	0x08011e5b
 8011d40:	08011e9f 	.word	0x08011e9f
 8011d44:	08011eab 	.word	0x08011eab
 8011d48:	08011eb5 	.word	0x08011eb5
 8011d4c:	08011ebf 	.word	0x08011ebf
 8011d50:	08011ec9 	.word	0x08011ec9
 8011d54:	08011ed3 	.word	0x08011ed3
 8011d58:	08011edd 	.word	0x08011edd
 8011d5c:	08011ee9 	.word	0x08011ee9
 8011d60:	08011f01 	.word	0x08011f01
 8011d64:	08011ef5 	.word	0x08011ef5
 8011d68:	08011f0d 	.word	0x08011f0d
 8011d6c:	08011f17 	.word	0x08011f17
 8011d70:	08011f23 	.word	0x08011f23
 8011d74:	08011f39 	.word	0x08011f39
 8011d78:	08011f2d 	.word	0x08011f2d
 8011d7c:	08011f59 	.word	0x08011f59
 8011d80:	08011f45 	.word	0x08011f45
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011d84:	4b7a      	ldr	r3, [pc, #488]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011d86:	f893 20fc 	ldrb.w	r2, [r3, #252]	@ 0xfc
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	711a      	strb	r2, [r3, #4]
            break;
 8011d8e:	e0e9      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011d90:	4b77      	ldr	r3, [pc, #476]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011d92:	f893 2110 	ldrb.w	r2, [r3, #272]	@ 0x110
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	711a      	strb	r2, [r3, #4]
            break;
 8011d9a:	e0e3      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011d9c:	f7fb f884 	bl	800cea8 <SecureElementGetDevEui>
 8011da0:	4602      	mov	r2, r0
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	605a      	str	r2, [r3, #4]
            break;
 8011da6:	e0dd      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011da8:	f7fb f8a0 	bl	800ceec <SecureElementGetJoinEui>
 8011dac:	4602      	mov	r2, r0
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	605a      	str	r2, [r3, #4]
            break;
 8011db2:	e0d7      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011db4:	4b6e      	ldr	r3, [pc, #440]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011db6:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	711a      	strb	r2, [r3, #4]
            break;
 8011dbe:	e0d1      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011dc2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	605a      	str	r2, [r3, #4]
            break;
 8011dca:	e0cb      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011dcc:	4b68      	ldr	r3, [pc, #416]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011dce:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	605a      	str	r2, [r3, #4]
            break;
 8011dd6:	e0c5      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011dd8:	4b65      	ldr	r3, [pc, #404]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011dda:	f893 20fd 	ldrb.w	r2, [r3, #253]	@ 0xfd
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	711a      	strb	r2, [r3, #4]
            break;
 8011de2:	e0bf      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011de4:	4b62      	ldr	r3, [pc, #392]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011de6:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	711a      	strb	r2, [r3, #4]
            break;
 8011dee:	e0b9      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011df0:	231d      	movs	r3, #29
 8011df2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011df4:	4b5e      	ldr	r3, [pc, #376]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011dfa:	f107 0210 	add.w	r2, r7, #16
 8011dfe:	4611      	mov	r1, r2
 8011e00:	4618      	mov	r0, r3
 8011e02:	f002 fec2 	bl	8014b8a <RegionGetPhyParam>
 8011e06:	4603      	mov	r3, r0
 8011e08:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	605a      	str	r2, [r3, #4]
            break;
 8011e10:	e0a8      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	4a56      	ldr	r2, [pc, #344]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e16:	3304      	adds	r3, #4
 8011e18:	3264      	adds	r2, #100	@ 0x64
 8011e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e1e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011e22:	e09f      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	4a52      	ldr	r2, [pc, #328]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e28:	3304      	adds	r3, #4
 8011e2a:	32a4      	adds	r2, #164	@ 0xa4
 8011e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e30:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011e34:	e096      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	4a4d      	ldr	r2, [pc, #308]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	326c      	adds	r2, #108	@ 0x6c
 8011e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e42:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011e46:	e08d      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4a49      	ldr	r2, [pc, #292]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	32ac      	adds	r2, #172	@ 0xac
 8011e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e54:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011e58:	e084      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011e5a:	231b      	movs	r3, #27
 8011e5c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e5e:	4b44      	ldr	r3, [pc, #272]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e64:	f107 0210 	add.w	r2, r7, #16
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f002 fe8d 	bl	8014b8a <RegionGetPhyParam>
 8011e70:	4603      	mov	r3, r0
 8011e72:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	605a      	str	r2, [r3, #4]
            break;
 8011e7a:	e073      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011e7c:	231a      	movs	r3, #26
 8011e7e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e80:	4b3b      	ldr	r3, [pc, #236]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e86:	f107 0210 	add.w	r2, r7, #16
 8011e8a:	4611      	mov	r1, r2
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f002 fe7c 	bl	8014b8a <RegionGetPhyParam>
 8011e92:	4603      	mov	r3, r0
 8011e94:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	605a      	str	r2, [r3, #4]
            break;
 8011e9c:	e062      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011e9e:	4b34      	ldr	r3, [pc, #208]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011ea0:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	711a      	strb	r2, [r3, #4]
            break;
 8011ea8:	e05c      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011eaa:	4b31      	ldr	r3, [pc, #196]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011eac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	605a      	str	r2, [r3, #4]
            break;
 8011eb2:	e057      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	605a      	str	r2, [r3, #4]
            break;
 8011ebc:	e052      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	605a      	str	r2, [r3, #4]
            break;
 8011ec6:	e04d      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011ec8:	4b29      	ldr	r3, [pc, #164]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011eca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	605a      	str	r2, [r3, #4]
            break;
 8011ed0:	e048      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011ed2:	4b27      	ldr	r3, [pc, #156]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011ed4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	605a      	str	r2, [r3, #4]
            break;
 8011eda:	e043      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011edc:	4b24      	ldr	r3, [pc, #144]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011ede:	f993 20c5 	ldrsb.w	r2, [r3, #197]	@ 0xc5
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	711a      	strb	r2, [r3, #4]
            break;
 8011ee6:	e03d      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ee8:	4b21      	ldr	r3, [pc, #132]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011eea:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	711a      	strb	r2, [r3, #4]
            break;
 8011ef2:	e037      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011ef6:	f993 20c4 	ldrsb.w	r2, [r3, #196]	@ 0xc4
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	711a      	strb	r2, [r3, #4]
            break;
 8011efe:	e031      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011f00:	4b1b      	ldr	r3, [pc, #108]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f02:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	711a      	strb	r2, [r3, #4]
            break;
 8011f0a:	e02b      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011f0c:	4b18      	ldr	r3, [pc, #96]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	605a      	str	r2, [r3, #4]
            break;
 8011f14:	e026      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011f16:	4b16      	ldr	r3, [pc, #88]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f18:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	711a      	strb	r2, [r3, #4]
            break;
 8011f20:	e020      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011f22:	4b13      	ldr	r3, [pc, #76]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f24:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	605a      	str	r2, [r3, #4]
            break;
 8011f2a:	e01b      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8011f2c:	f7ff f934 	bl	8011198 <GetNvmData>
 8011f30:	4602      	mov	r2, r0
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	605a      	str	r2, [r3, #4]
            break;
 8011f36:	e015      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011f38:	4b0d      	ldr	r3, [pc, #52]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f3a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	605a      	str	r2, [r3, #4]
            break;
 8011f42:	e00f      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	4a0a      	ldr	r2, [pc, #40]	@ (8011f70 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011f48:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 8011f4c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011f4e:	687c      	ldr	r4, [r7, #4]
 8011f50:	f003 f840 	bl	8014fd4 <RegionGetVersion>
 8011f54:	60a0      	str	r0, [r4, #8]
            break;
 8011f56:	e005      	b.n	8011f64 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f000 fefd 	bl	8012d58 <LoRaMacClassBMibGetRequestConfirm>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	75fb      	strb	r3, [r7, #23]
            break;
 8011f62:	bf00      	nop
        }
    }
    return status;
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	371c      	adds	r7, #28
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	2000353c 	.word	0x2000353c

08011f74 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b086      	sub	sp, #24
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d101      	bne.n	8011f8a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f86:	2303      	movs	r3, #3
 8011f88:	e32b      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011f8a:	4bb4      	ldr	r3, [pc, #720]	@ (801225c <LoRaMacMibSetRequestConfirm+0x2e8>)
 8011f8c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f90:	f003 0302 	and.w	r3, r3, #2
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	e322      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b27      	cmp	r3, #39	@ 0x27
 8011fa2:	f200 82fc 	bhi.w	801259e <LoRaMacMibSetRequestConfirm+0x62a>
 8011fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8011fac <LoRaMacMibSetRequestConfirm+0x38>)
 8011fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fac:	0801204d 	.word	0x0801204d
 8011fb0:	0801205d 	.word	0x0801205d
 8011fb4:	08012077 	.word	0x08012077
 8011fb8:	0801208f 	.word	0x0801208f
 8011fbc:	080120a7 	.word	0x080120a7
 8011fc0:	080120b3 	.word	0x080120b3
 8011fc4:	080120bf 	.word	0x080120bf
 8011fc8:	080120cb 	.word	0x080120cb
 8011fcc:	080120f1 	.word	0x080120f1
 8011fd0:	08012117 	.word	0x08012117
 8011fd4:	0801213d 	.word	0x0801213d
 8011fd8:	08012163 	.word	0x08012163
 8011fdc:	08012189 	.word	0x08012189
 8011fe0:	080121af 	.word	0x080121af
 8011fe4:	080121d5 	.word	0x080121d5
 8011fe8:	080121fb 	.word	0x080121fb
 8011fec:	0801221b 	.word	0x0801221b
 8011ff0:	0801259f 	.word	0x0801259f
 8011ff4:	08012227 	.word	0x08012227
 8011ff8:	080122a5 	.word	0x080122a5
 8011ffc:	080122e5 	.word	0x080122e5
 8012000:	08012347 	.word	0x08012347
 8012004:	080123b7 	.word	0x080123b7
 8012008:	08012387 	.word	0x08012387
 801200c:	080123e7 	.word	0x080123e7
 8012010:	08012409 	.word	0x08012409
 8012014:	08012413 	.word	0x08012413
 8012018:	0801241d 	.word	0x0801241d
 801201c:	08012427 	.word	0x08012427
 8012020:	08012431 	.word	0x08012431
 8012024:	0801243b 	.word	0x0801243b
 8012028:	0801246d 	.word	0x0801246d
 801202c:	080124d9 	.word	0x080124d9
 8012030:	080124a7 	.word	0x080124a7
 8012034:	0801250b 	.word	0x0801250b
 8012038:	08012521 	.word	0x08012521
 801203c:	08012541 	.word	0x08012541
 8012040:	0801254b 	.word	0x0801254b
 8012044:	08012557 	.word	0x08012557
 8012048:	08012575 	.word	0x08012575
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	791b      	ldrb	r3, [r3, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	f7fd fbed 	bl	800f830 <SwitchClass>
 8012056:	4603      	mov	r3, r0
 8012058:	75fb      	strb	r3, [r7, #23]
            break;
 801205a:	e2c1      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	791b      	ldrb	r3, [r3, #4]
 8012060:	2b02      	cmp	r3, #2
 8012062:	d005      	beq.n	8012070 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	791a      	ldrb	r2, [r3, #4]
 8012068:	4b7d      	ldr	r3, [pc, #500]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801206a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801206e:	e2b7      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012070:	2303      	movs	r3, #3
 8012072:	75fb      	strb	r3, [r7, #23]
            break;
 8012074:	e2b4      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	4618      	mov	r0, r3
 801207c:	f7fa fefc 	bl	800ce78 <SecureElementSetDevEui>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	f000 8291 	beq.w	80125aa <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012088:	2303      	movs	r3, #3
 801208a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801208c:	e28d      	b.n	80125aa <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	4618      	mov	r0, r3
 8012094:	f7fa ff12 	bl	800cebc <SecureElementSetJoinEui>
 8012098:	4603      	mov	r3, r0
 801209a:	2b00      	cmp	r3, #0
 801209c:	f000 8287 	beq.w	80125ae <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120a0:	2303      	movs	r3, #3
 80120a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120a4:	e283      	b.n	80125ae <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	791a      	ldrb	r2, [r3, #4]
 80120aa:	4b6d      	ldr	r3, [pc, #436]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80120ac:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
            break;
 80120b0:	e296      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	4a6a      	ldr	r2, [pc, #424]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80120b8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
            break;
 80120bc:	e290      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	4a67      	ldr	r2, [pc, #412]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80120c4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 80120c8:	e28a      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	4619      	mov	r1, r3
 80120d8:	2000      	movs	r0, #0
 80120da:	f001 ff67 	bl	8013fac <LoRaMacCryptoSetKey>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	f000 8266 	beq.w	80125b2 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80120e6:	2311      	movs	r3, #17
 80120e8:	e27b      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80120ea:	2303      	movs	r3, #3
 80120ec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80120ee:	e260      	b.n	80125b2 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00b      	beq.n	8012110 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	4619      	mov	r1, r3
 80120fe:	2001      	movs	r0, #1
 8012100:	f001 ff54 	bl	8013fac <LoRaMacCryptoSetKey>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 8255 	beq.w	80125b6 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801210c:	2311      	movs	r3, #17
 801210e:	e268      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012110:	2303      	movs	r3, #3
 8012112:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012114:	e24f      	b.n	80125b6 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00b      	beq.n	8012136 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	4619      	mov	r1, r3
 8012124:	2002      	movs	r0, #2
 8012126:	f001 ff41 	bl	8013fac <LoRaMacCryptoSetKey>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	f000 8244 	beq.w	80125ba <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012132:	2311      	movs	r3, #17
 8012134:	e255      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012136:	2303      	movs	r3, #3
 8012138:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801213a:	e23e      	b.n	80125ba <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00b      	beq.n	801215c <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	4619      	mov	r1, r3
 801214a:	2003      	movs	r0, #3
 801214c:	f001 ff2e 	bl	8013fac <LoRaMacCryptoSetKey>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	f000 8233 	beq.w	80125be <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012158:	2311      	movs	r3, #17
 801215a:	e242      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801215c:	2303      	movs	r3, #3
 801215e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012160:	e22d      	b.n	80125be <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00b      	beq.n	8012182 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	4619      	mov	r1, r3
 8012170:	207f      	movs	r0, #127	@ 0x7f
 8012172:	f001 ff1b 	bl	8013fac <LoRaMacCryptoSetKey>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	f000 8222 	beq.w	80125c2 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801217e:	2311      	movs	r3, #17
 8012180:	e22f      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012182:	2303      	movs	r3, #3
 8012184:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012186:	e21c      	b.n	80125c2 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00b      	beq.n	80121a8 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	4619      	mov	r1, r3
 8012196:	2080      	movs	r0, #128	@ 0x80
 8012198:	f001 ff08 	bl	8013fac <LoRaMacCryptoSetKey>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	f000 8211 	beq.w	80125c6 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80121a4:	2311      	movs	r3, #17
 80121a6:	e21c      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121a8:	2303      	movs	r3, #3
 80121aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80121ac:	e20b      	b.n	80125c6 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00b      	beq.n	80121ce <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	4619      	mov	r1, r3
 80121bc:	2081      	movs	r0, #129	@ 0x81
 80121be:	f001 fef5 	bl	8013fac <LoRaMacCryptoSetKey>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f000 8200 	beq.w	80125ca <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80121ca:	2311      	movs	r3, #17
 80121cc:	e209      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121ce:	2303      	movs	r3, #3
 80121d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80121d2:	e1fa      	b.n	80125ca <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00b      	beq.n	80121f4 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	4619      	mov	r1, r3
 80121e2:	2082      	movs	r0, #130	@ 0x82
 80121e4:	f001 fee2 	bl	8013fac <LoRaMacCryptoSetKey>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	f000 81ef 	beq.w	80125ce <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80121f0:	2311      	movs	r3, #17
 80121f2:	e1f6      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121f4:	2303      	movs	r3, #3
 80121f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80121f8:	e1e9      	b.n	80125ce <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	791a      	ldrb	r2, [r3, #4]
 80121fe:	4b18      	ldr	r3, [pc, #96]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012200:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012204:	4b17      	ldr	r3, [pc, #92]	@ (8012264 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012208:	4a15      	ldr	r2, [pc, #84]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801220a:	f892 20fd 	ldrb.w	r2, [r2, #253]	@ 0xfd
 801220e:	4610      	mov	r0, r2
 8012210:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012212:	4b14      	ldr	r3, [pc, #80]	@ (8012264 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8012214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012216:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012218:	e1e2      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	791a      	ldrb	r2, [r3, #4]
 801221e:	4b10      	ldr	r3, [pc, #64]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012220:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8012224:	e1dc      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	7a1b      	ldrb	r3, [r3, #8]
 801222a:	b25b      	sxtb	r3, r3
 801222c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801222e:	4b0c      	ldr	r3, [pc, #48]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012230:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012234:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012236:	4b0a      	ldr	r3, [pc, #40]	@ (8012260 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8012238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801223c:	f107 0108 	add.w	r1, r7, #8
 8012240:	2207      	movs	r2, #7
 8012242:	4618      	mov	r0, r3
 8012244:	f002 fcef 	bl	8014c26 <RegionVerify>
 8012248:	4603      	mov	r3, r0
 801224a:	f083 0301 	eor.w	r3, r3, #1
 801224e:	b2db      	uxtb	r3, r3
 8012250:	2b00      	cmp	r3, #0
 8012252:	d009      	beq.n	8012268 <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012254:	2303      	movs	r3, #3
 8012256:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012258:	e1c2      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
 801225a:	bf00      	nop
 801225c:	20003034 	.word	0x20003034
 8012260:	2000353c 	.word	0x2000353c
 8012264:	0801e020 	.word	0x0801e020
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801226e:	4bb2      	ldr	r3, [pc, #712]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012274:	f107 0108 	add.w	r1, r7, #8
 8012278:	2200      	movs	r2, #0
 801227a:	4618      	mov	r0, r3
 801227c:	f002 fcd3 	bl	8014c26 <RegionVerify>
 8012280:	4603      	mov	r3, r0
 8012282:	f083 0301 	eor.w	r3, r3, #1
 8012286:	b2db      	uxtb	r3, r3
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801228c:	2303      	movs	r3, #3
 801228e:	75fb      	strb	r3, [r7, #23]
            break;
 8012290:	e1a6      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012292:	4ba9      	ldr	r3, [pc, #676]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	3364      	adds	r3, #100	@ 0x64
 8012298:	3204      	adds	r2, #4
 801229a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801229e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122a2:	e19d      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	7a1b      	ldrb	r3, [r3, #8]
 80122a8:	b25b      	sxtb	r3, r3
 80122aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122ac:	4ba2      	ldr	r3, [pc, #648]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80122ae:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80122b2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80122b4:	4ba0      	ldr	r3, [pc, #640]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80122b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122ba:	f107 0108 	add.w	r1, r7, #8
 80122be:	2207      	movs	r2, #7
 80122c0:	4618      	mov	r0, r3
 80122c2:	f002 fcb0 	bl	8014c26 <RegionVerify>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d008      	beq.n	80122de <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80122cc:	4b9a      	ldr	r3, [pc, #616]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	33a4      	adds	r3, #164	@ 0xa4
 80122d2:	3204      	adds	r2, #4
 80122d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122d8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122dc:	e180      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122de:	2303      	movs	r3, #3
 80122e0:	75fb      	strb	r3, [r7, #23]
            break;
 80122e2:	e17d      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	7a1b      	ldrb	r3, [r3, #8]
 80122e8:	b25b      	sxtb	r3, r3
 80122ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122ec:	4b92      	ldr	r3, [pc, #584]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80122ee:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80122f2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80122f4:	4b90      	ldr	r3, [pc, #576]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80122f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122fa:	f107 0108 	add.w	r1, r7, #8
 80122fe:	2207      	movs	r2, #7
 8012300:	4618      	mov	r0, r3
 8012302:	f002 fc90 	bl	8014c26 <RegionVerify>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d019      	beq.n	8012340 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801230c:	4b8a      	ldr	r3, [pc, #552]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	336c      	adds	r3, #108	@ 0x6c
 8012312:	3204      	adds	r2, #4
 8012314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012318:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801231c:	4b86      	ldr	r3, [pc, #536]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801231e:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8012322:	2b02      	cmp	r3, #2
 8012324:	f040 8155 	bne.w	80125d2 <LoRaMacMibSetRequestConfirm+0x65e>
 8012328:	4b83      	ldr	r3, [pc, #524]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801232a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 801232e:	2b00      	cmp	r3, #0
 8012330:	f000 814f 	beq.w	80125d2 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012334:	4b81      	ldr	r3, [pc, #516]	@ (801253c <LoRaMacMibSetRequestConfirm+0x5c8>)
 8012336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012338:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801233a:	f7fe fcdb 	bl	8010cf4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801233e:	e148      	b.n	80125d2 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012340:	2303      	movs	r3, #3
 8012342:	75fb      	strb	r3, [r7, #23]
            break;
 8012344:	e145      	b.n	80125d2 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7a1b      	ldrb	r3, [r3, #8]
 801234a:	b25b      	sxtb	r3, r3
 801234c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801234e:	4b7a      	ldr	r3, [pc, #488]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012350:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012354:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012356:	4b78      	ldr	r3, [pc, #480]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801235c:	f107 0108 	add.w	r1, r7, #8
 8012360:	2207      	movs	r2, #7
 8012362:	4618      	mov	r0, r3
 8012364:	f002 fc5f 	bl	8014c26 <RegionVerify>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d008      	beq.n	8012380 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801236e:	4b72      	ldr	r3, [pc, #456]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	33ac      	adds	r3, #172	@ 0xac
 8012374:	3204      	adds	r2, #4
 8012376:	e892 0003 	ldmia.w	r2, {r0, r1}
 801237a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801237e:	e12f      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012380:	2303      	movs	r3, #3
 8012382:	75fb      	strb	r3, [r7, #23]
            break;
 8012384:	e12c      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801238c:	2301      	movs	r3, #1
 801238e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012390:	4b69      	ldr	r3, [pc, #420]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012396:	f107 020c 	add.w	r2, r7, #12
 801239a:	4611      	mov	r1, r2
 801239c:	4618      	mov	r0, r3
 801239e:	f002 fc7a 	bl	8014c96 <RegionChanMaskSet>
 80123a2:	4603      	mov	r3, r0
 80123a4:	f083 0301 	eor.w	r3, r3, #1
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f000 8113 	beq.w	80125d6 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123b0:	2303      	movs	r3, #3
 80123b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80123b4:	e10f      	b.n	80125d6 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80123bc:	2300      	movs	r3, #0
 80123be:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80123c0:	4b5d      	ldr	r3, [pc, #372]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80123c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123c6:	f107 020c 	add.w	r2, r7, #12
 80123ca:	4611      	mov	r1, r2
 80123cc:	4618      	mov	r0, r3
 80123ce:	f002 fc62 	bl	8014c96 <RegionChanMaskSet>
 80123d2:	4603      	mov	r3, r0
 80123d4:	f083 0301 	eor.w	r3, r3, #1
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f000 80fd 	beq.w	80125da <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123e0:	2303      	movs	r3, #3
 80123e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80123e4:	e0f9      	b.n	80125da <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	791b      	ldrb	r3, [r3, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d009      	beq.n	8012402 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80123f2:	2b0f      	cmp	r3, #15
 80123f4:	d805      	bhi.n	8012402 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	791a      	ldrb	r2, [r3, #4]
 80123fa:	4b4f      	ldr	r3, [pc, #316]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80123fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012400:	e0ee      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012402:	2303      	movs	r3, #3
 8012404:	75fb      	strb	r3, [r7, #23]
            break;
 8012406:	e0eb      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	4a4a      	ldr	r2, [pc, #296]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8012410:	e0e6      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	4a48      	ldr	r2, [pc, #288]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012418:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 801241a:	e0e1      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	4a45      	ldr	r2, [pc, #276]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012422:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8012424:	e0dc      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4a43      	ldr	r2, [pc, #268]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801242c:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 801242e:	e0d7      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	4a40      	ldr	r2, [pc, #256]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012436:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012438:	e0d2      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012440:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012442:	4b3d      	ldr	r3, [pc, #244]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012448:	f107 0108 	add.w	r1, r7, #8
 801244c:	2206      	movs	r2, #6
 801244e:	4618      	mov	r0, r3
 8012450:	f002 fbe9 	bl	8014c26 <RegionVerify>
 8012454:	4603      	mov	r3, r0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d005      	beq.n	8012466 <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801245a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801245e:	4b36      	ldr	r3, [pc, #216]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012460:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012464:	e0bc      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012466:	2303      	movs	r3, #3
 8012468:	75fb      	strb	r3, [r7, #23]
            break;
 801246a:	e0b9      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012472:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012474:	4b30      	ldr	r3, [pc, #192]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012476:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801247a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801247c:	4b2e      	ldr	r3, [pc, #184]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801247e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012482:	f107 0108 	add.w	r1, r7, #8
 8012486:	2205      	movs	r2, #5
 8012488:	4618      	mov	r0, r3
 801248a:	f002 fbcc 	bl	8014c26 <RegionVerify>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	d005      	beq.n	80124a0 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012494:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012498:	4b27      	ldr	r3, [pc, #156]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801249a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801249e:	e09f      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124a0:	2303      	movs	r3, #3
 80124a2:	75fb      	strb	r3, [r7, #23]
            break;
 80124a4:	e09c      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80124ac:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80124ae:	4b22      	ldr	r3, [pc, #136]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80124b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124b4:	f107 0108 	add.w	r1, r7, #8
 80124b8:	220a      	movs	r2, #10
 80124ba:	4618      	mov	r0, r3
 80124bc:	f002 fbb3 	bl	8014c26 <RegionVerify>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d005      	beq.n	80124d2 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80124c6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80124ca:	4b1b      	ldr	r3, [pc, #108]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80124cc:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80124d0:	e086      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124d2:	2303      	movs	r3, #3
 80124d4:	75fb      	strb	r3, [r7, #23]
            break;
 80124d6:	e083      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80124de:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80124e0:	4b15      	ldr	r3, [pc, #84]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80124e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124e6:	f107 0108 	add.w	r1, r7, #8
 80124ea:	2209      	movs	r2, #9
 80124ec:	4618      	mov	r0, r3
 80124ee:	f002 fb9a 	bl	8014c26 <RegionVerify>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d005      	beq.n	8012504 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80124f8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80124fc:	4b0e      	ldr	r3, [pc, #56]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80124fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012502:	e06d      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012504:	2303      	movs	r3, #3
 8012506:	75fb      	strb	r3, [r7, #23]
            break;
 8012508:	e06a      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	4a0a      	ldr	r2, [pc, #40]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012510:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8012514:	4b08      	ldr	r3, [pc, #32]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801251a:	4a07      	ldr	r2, [pc, #28]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801251c:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 801251e:	e05f      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	791a      	ldrb	r2, [r3, #4]
 8012524:	4b04      	ldr	r3, [pc, #16]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012526:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 801252a:	4b03      	ldr	r3, [pc, #12]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801252c:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8012530:	4b01      	ldr	r3, [pc, #4]	@ (8012538 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8012532:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8012536:	e053      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
 8012538:	2000353c 	.word	0x2000353c
 801253c:	0801e020 	.word	0x0801e020
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	4a29      	ldr	r2, [pc, #164]	@ (80125ec <LoRaMacMibSetRequestConfirm+0x678>)
 8012546:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8012548:	e04a      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4a27      	ldr	r2, [pc, #156]	@ (80125ec <LoRaMacMibSetRequestConfirm+0x678>)
 8012550:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
            break;
 8012554:	e044      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d007      	beq.n	801256e <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	4618      	mov	r0, r3
 8012564:	f7fe fe22 	bl	80111ac <RestoreNvmData>
 8012568:	4603      	mov	r3, r0
 801256a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801256c:	e038      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801256e:	2303      	movs	r3, #3
 8012570:	75fb      	strb	r3, [r7, #23]
            break;
 8012572:	e035      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	799b      	ldrb	r3, [r3, #6]
 8012578:	2b01      	cmp	r3, #1
 801257a:	d80d      	bhi.n	8012598 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801257c:	4a1b      	ldr	r2, [pc, #108]	@ (80125ec <LoRaMacMibSetRequestConfirm+0x678>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6858      	ldr	r0, [r3, #4]
 801258a:	f001 fc49 	bl	8013e20 <LoRaMacCryptoSetLrWanVersion>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d024      	beq.n	80125de <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012594:	2311      	movs	r3, #17
 8012596:	e024      	b.n	80125e2 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012598:	2303      	movs	r3, #3
 801259a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801259c:	e01f      	b.n	80125de <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f000 fbe4 	bl	8012d6c <LoRaMacMibClassBSetRequestConfirm>
 80125a4:	4603      	mov	r3, r0
 80125a6:	75fb      	strb	r3, [r7, #23]
            break;
 80125a8:	e01a      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125aa:	bf00      	nop
 80125ac:	e018      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125ae:	bf00      	nop
 80125b0:	e016      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125b2:	bf00      	nop
 80125b4:	e014      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125b6:	bf00      	nop
 80125b8:	e012      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125ba:	bf00      	nop
 80125bc:	e010      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125be:	bf00      	nop
 80125c0:	e00e      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125c2:	bf00      	nop
 80125c4:	e00c      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125c6:	bf00      	nop
 80125c8:	e00a      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125ca:	bf00      	nop
 80125cc:	e008      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125ce:	bf00      	nop
 80125d0:	e006      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125d2:	bf00      	nop
 80125d4:	e004      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125d6:	bf00      	nop
 80125d8:	e002      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125da:	bf00      	nop
 80125dc:	e000      	b.n	80125e0 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80125de:	bf00      	nop
        }
    }
    return status;
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3718      	adds	r7, #24
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	2000353c 	.word	0x2000353c

080125f0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b086      	sub	sp, #24
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80125f8:	2302      	movs	r3, #2
 80125fa:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80125fc:	2300      	movs	r3, #0
 80125fe:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d101      	bne.n	801260a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012606:	2303      	movs	r3, #3
 8012608:	e127      	b.n	801285a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801260a:	f7fc fd15 	bl	800f038 <LoRaMacIsBusy>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d001      	beq.n	8012618 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012614:	2301      	movs	r3, #1
 8012616:	e120      	b.n	801285a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012618:	f001 f8a6 	bl	8013768 <LoRaMacConfirmQueueIsFull>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d001      	beq.n	8012626 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012622:	2301      	movs	r3, #1
 8012624:	e119      	b.n	801285a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012626:	f001 f893 	bl	8013750 <LoRaMacConfirmQueueGetCnt>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d104      	bne.n	801263a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012630:	2214      	movs	r2, #20
 8012632:	2100      	movs	r1, #0
 8012634:	488b      	ldr	r0, [pc, #556]	@ (8012864 <LoRaMacMlmeRequest+0x274>)
 8012636:	f006 f9ad 	bl	8018994 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801263a:	4b8b      	ldr	r3, [pc, #556]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 801263c:	2201      	movs	r2, #1
 801263e:	f883 244d 	strb.w	r2, [r3, #1101]	@ 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012642:	4a89      	ldr	r2, [pc, #548]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 8012644:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8012648:	f043 0304 	orr.w	r3, r3, #4
 801264c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012656:	2301      	movs	r3, #1
 8012658:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801265a:	2300      	movs	r3, #0
 801265c:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	3b01      	subs	r3, #1
 8012664:	2b0d      	cmp	r3, #13
 8012666:	f200 80ce 	bhi.w	8012806 <LoRaMacMlmeRequest+0x216>
 801266a:	a201      	add	r2, pc, #4	@ (adr r2, 8012670 <LoRaMacMlmeRequest+0x80>)
 801266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012670:	080126a9 	.word	0x080126a9
 8012674:	08012807 	.word	0x08012807
 8012678:	08012807 	.word	0x08012807
 801267c:	08012713 	.word	0x08012713
 8012680:	08012731 	.word	0x08012731
 8012684:	08012741 	.word	0x08012741
 8012688:	08012807 	.word	0x08012807
 801268c:	08012807 	.word	0x08012807
 8012690:	08012807 	.word	0x08012807
 8012694:	0801275d 	.word	0x0801275d
 8012698:	08012807 	.word	0x08012807
 801269c:	080127db 	.word	0x080127db
 80126a0:	0801277b 	.word	0x0801277b
 80126a4:	080127bd 	.word	0x080127bd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80126a8:	4b6f      	ldr	r3, [pc, #444]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 80126aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80126ae:	f003 0320 	and.w	r3, r3, #32
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80126b6:	2301      	movs	r3, #1
 80126b8:	e0cf      	b.n	801285a <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80126ba:	f7fe f9ff 	bl	8010abc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80126be:	4b6b      	ldr	r3, [pc, #428]	@ (801286c <LoRaMacMlmeRequest+0x27c>)
 80126c0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	791b      	ldrb	r3, [r3, #4]
 80126c8:	b25b      	sxtb	r3, r3
 80126ca:	2200      	movs	r2, #0
 80126cc:	4619      	mov	r1, r3
 80126ce:	f002 fbf2 	bl	8014eb6 <RegionAlternateDr>
 80126d2:	4603      	mov	r3, r0
 80126d4:	461a      	mov	r2, r3
 80126d6:	4b65      	ldr	r3, [pc, #404]	@ (801286c <LoRaMacMlmeRequest+0x27c>)
 80126d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80126dc:	2307      	movs	r3, #7
 80126de:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80126e0:	20ff      	movs	r0, #255	@ 0xff
 80126e2:	f7fd ff63 	bl	80105ac <SendReJoinReq>
 80126e6:	4603      	mov	r3, r0
 80126e8:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f000 808c 	beq.w	801280a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80126f2:	4b5e      	ldr	r3, [pc, #376]	@ (801286c <LoRaMacMlmeRequest+0x27c>)
 80126f4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	791b      	ldrb	r3, [r3, #4]
 80126fc:	b25b      	sxtb	r3, r3
 80126fe:	2201      	movs	r2, #1
 8012700:	4619      	mov	r1, r3
 8012702:	f002 fbd8 	bl	8014eb6 <RegionAlternateDr>
 8012706:	4603      	mov	r3, r0
 8012708:	461a      	mov	r2, r3
 801270a:	4b58      	ldr	r3, [pc, #352]	@ (801286c <LoRaMacMlmeRequest+0x27c>)
 801270c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            break;
 8012710:	e07b      	b.n	801280a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012712:	2300      	movs	r3, #0
 8012714:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012716:	f107 030c 	add.w	r3, r7, #12
 801271a:	2200      	movs	r2, #0
 801271c:	4619      	mov	r1, r3
 801271e:	2002      	movs	r0, #2
 8012720:	f000 fc88 	bl	8013034 <LoRaMacCommandsAddCmd>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d071      	beq.n	801280e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801272a:	2313      	movs	r3, #19
 801272c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801272e:	e06e      	b.n	801280e <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	889b      	ldrh	r3, [r3, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7fe fcdb 	bl	80110f0 <SetTxContinuousWave>
 801273a:	4603      	mov	r3, r0
 801273c:	75fb      	strb	r3, [r7, #23]
            break;
 801273e:	e06d      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8898      	ldrh	r0, [r3, #4]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6899      	ldr	r1, [r3, #8]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801274e:	b2db      	uxtb	r3, r3
 8012750:	461a      	mov	r2, r3
 8012752:	f7fe fd01 	bl	8011158 <SetTxContinuousWave1>
 8012756:	4603      	mov	r3, r0
 8012758:	75fb      	strb	r3, [r7, #23]
            break;
 801275a:	e05f      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012760:	f107 030c 	add.w	r3, r7, #12
 8012764:	2200      	movs	r2, #0
 8012766:	4619      	mov	r1, r3
 8012768:	200d      	movs	r0, #13
 801276a:	f000 fc63 	bl	8013034 <LoRaMacCommandsAddCmd>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d04e      	beq.n	8012812 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012774:	2313      	movs	r3, #19
 8012776:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012778:	e04b      	b.n	8012812 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801277a:	4b3c      	ldr	r3, [pc, #240]	@ (801286c <LoRaMacMlmeRequest+0x27c>)
 801277c:	f893 30fc 	ldrb.w	r3, [r3, #252]	@ 0xfc
 8012780:	2b00      	cmp	r3, #0
 8012782:	d148      	bne.n	8012816 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	791b      	ldrb	r3, [r3, #4]
 8012788:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	791b      	ldrb	r3, [r3, #4]
 801278e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012792:	b2db      	uxtb	r3, r3
 8012794:	4618      	mov	r0, r3
 8012796:	f000 fabe 	bl	8012d16 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801279a:	7dbb      	ldrb	r3, [r7, #22]
 801279c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80127a2:	f107 030c 	add.w	r3, r7, #12
 80127a6:	2201      	movs	r2, #1
 80127a8:	4619      	mov	r1, r3
 80127aa:	2010      	movs	r0, #16
 80127ac:	f000 fc42 	bl	8013034 <LoRaMacCommandsAddCmd>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d02f      	beq.n	8012816 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127b6:	2313      	movs	r3, #19
 80127b8:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80127ba:	e02c      	b.n	8012816 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80127bc:	2300      	movs	r3, #0
 80127be:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80127c0:	f107 030c 	add.w	r3, r7, #12
 80127c4:	2200      	movs	r2, #0
 80127c6:	4619      	mov	r1, r3
 80127c8:	2012      	movs	r0, #18
 80127ca:	f000 fc33 	bl	8013034 <LoRaMacCommandsAddCmd>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d022      	beq.n	801281a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80127d4:	2313      	movs	r3, #19
 80127d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127d8:	e01f      	b.n	801281a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80127da:	2301      	movs	r3, #1
 80127dc:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80127de:	f000 fa50 	bl	8012c82 <LoRaMacClassBIsAcquisitionInProgress>
 80127e2:	4603      	mov	r3, r0
 80127e4:	f083 0301 	eor.w	r3, r3, #1
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d008      	beq.n	8012800 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80127ee:	2000      	movs	r0, #0
 80127f0:	f000 fa29 	bl	8012c46 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80127f4:	2000      	movs	r0, #0
 80127f6:	f000 fa4b 	bl	8012c90 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80127fa:	2300      	movs	r3, #0
 80127fc:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80127fe:	e00d      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8012800:	2301      	movs	r3, #1
 8012802:	75fb      	strb	r3, [r7, #23]
            break;
 8012804:	e00a      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8012806:	bf00      	nop
 8012808:	e008      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
            break;
 801280a:	bf00      	nop
 801280c:	e006      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
            break;
 801280e:	bf00      	nop
 8012810:	e004      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
            break;
 8012812:	bf00      	nop
 8012814:	e002      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
            break;
 8012816:	bf00      	nop
 8012818:	e000      	b.n	801281c <LoRaMacMlmeRequest+0x22c>
            break;
 801281a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801281c:	4b12      	ldr	r3, [pc, #72]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 801281e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d010      	beq.n	801284e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801282c:	f000 ff90 	bl	8013750 <LoRaMacConfirmQueueGetCnt>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d110      	bne.n	8012858 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8012836:	4b0c      	ldr	r3, [pc, #48]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 8012838:	2200      	movs	r2, #0
 801283a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801283e:	4a0a      	ldr	r2, [pc, #40]	@ (8012868 <LoRaMacMlmeRequest+0x278>)
 8012840:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8012844:	f36f 0382 	bfc	r3, #2, #1
 8012848:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 801284c:	e004      	b.n	8012858 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801284e:	f107 0310 	add.w	r3, r7, #16
 8012852:	4618      	mov	r0, r3
 8012854:	f000 fe2e 	bl	80134b4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012858:	7dfb      	ldrb	r3, [r7, #23]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3718      	adds	r7, #24
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20003480 	.word	0x20003480
 8012868:	20003034 	.word	0x20003034
 801286c:	2000353c 	.word	0x2000353c

08012870 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b08c      	sub	sp, #48	@ 0x30
 8012874:	af02      	add	r7, sp, #8
 8012876:	6078      	str	r0, [r7, #4]
 8012878:	460b      	mov	r3, r1
 801287a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801287c:	2302      	movs	r3, #2
 801287e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012888:	2300      	movs	r3, #0
 801288a:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801288c:	2300      	movs	r3, #0
 801288e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8012890:	2300      	movs	r3, #0
 8012892:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d101      	bne.n	801289e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801289a:	2303      	movs	r3, #3
 801289c:	e0d4      	b.n	8012a48 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 801289e:	f7fc fbcb 	bl	800f038 <LoRaMacIsBusy>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80128a8:	2301      	movs	r3, #1
 80128aa:	e0cd      	b.n	8012a48 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80128ac:	2300      	movs	r3, #0
 80128ae:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80128b0:	2214      	movs	r2, #20
 80128b2:	2100      	movs	r1, #0
 80128b4:	4866      	ldr	r0, [pc, #408]	@ (8012a50 <LoRaMacMcpsRequest+0x1e0>)
 80128b6:	f006 f86d 	bl	8018994 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128ba:	4b66      	ldr	r3, [pc, #408]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 80128bc:	2201      	movs	r2, #1
 80128be:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80128c2:	4b64      	ldr	r3, [pc, #400]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 80128c4:	2201      	movs	r2, #1
 80128c6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

    switch( mcpsRequest->Type )
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b03      	cmp	r3, #3
 80128d0:	d03d      	beq.n	801294e <LoRaMacMcpsRequest+0xde>
 80128d2:	2b03      	cmp	r3, #3
 80128d4:	dc4f      	bgt.n	8012976 <LoRaMacMcpsRequest+0x106>
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d002      	beq.n	80128e0 <LoRaMacMcpsRequest+0x70>
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d019      	beq.n	8012912 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80128de:	e04a      	b.n	8012976 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80128e0:	2301      	movs	r3, #1
 80128e2:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80128e4:	4b5b      	ldr	r3, [pc, #364]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 80128e6:	2201      	movs	r2, #1
 80128e8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80128ec:	7b3b      	ldrb	r3, [r7, #12]
 80128ee:	2202      	movs	r2, #2
 80128f0:	f362 1347 	bfi	r3, r2, #5, #3
 80128f4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	791b      	ldrb	r3, [r3, #4]
 80128fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	689b      	ldr	r3, [r3, #8]
 8012902:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	899b      	ldrh	r3, [r3, #12]
 8012908:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	7b9b      	ldrb	r3, [r3, #14]
 801290e:	777b      	strb	r3, [r7, #29]
            break;
 8012910:	e032      	b.n	8012978 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8012912:	2301      	movs	r3, #1
 8012914:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	7bdb      	ldrb	r3, [r3, #15]
 801291a:	2b08      	cmp	r3, #8
 801291c:	bf28      	it	cs
 801291e:	2308      	movcs	r3, #8
 8012920:	b2da      	uxtb	r2, r3
 8012922:	4b4c      	ldr	r3, [pc, #304]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012924:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012928:	7b3b      	ldrb	r3, [r7, #12]
 801292a:	2204      	movs	r2, #4
 801292c:	f362 1347 	bfi	r3, r2, #5, #3
 8012930:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	791b      	ldrb	r3, [r3, #4]
 8012936:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	689b      	ldr	r3, [r3, #8]
 801293e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	899b      	ldrh	r3, [r3, #12]
 8012944:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	7b9b      	ldrb	r3, [r3, #14]
 801294a:	777b      	strb	r3, [r7, #29]
            break;
 801294c:	e014      	b.n	8012978 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801294e:	2301      	movs	r3, #1
 8012950:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012952:	4b40      	ldr	r3, [pc, #256]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012954:	2201      	movs	r2, #1
 8012956:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801295a:	7b3b      	ldrb	r3, [r7, #12]
 801295c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012960:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	891b      	ldrh	r3, [r3, #8]
 801296c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	7a9b      	ldrb	r3, [r3, #10]
 8012972:	777b      	strb	r3, [r7, #29]
            break;
 8012974:	e000      	b.n	8012978 <LoRaMacMcpsRequest+0x108>
            break;
 8012976:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012978:	2302      	movs	r3, #2
 801297a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801297c:	4b36      	ldr	r3, [pc, #216]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 801297e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012982:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012984:	4b34      	ldr	r3, [pc, #208]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 8012986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801298a:	f107 0214 	add.w	r2, r7, #20
 801298e:	4611      	mov	r1, r2
 8012990:	4618      	mov	r0, r3
 8012992:	f002 f8fa 	bl	8014b8a <RegionGetPhyParam>
 8012996:	4603      	mov	r3, r0
 8012998:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	b25b      	sxtb	r3, r3
 801299e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80129a2:	4293      	cmp	r3, r2
 80129a4:	bfb8      	it	lt
 80129a6:	4613      	movlt	r3, r2
 80129a8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80129aa:	7f3b      	ldrb	r3, [r7, #28]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d044      	beq.n	8012a3a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80129b0:	4b29      	ldr	r3, [pc, #164]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 80129b2:	f893 30fe 	ldrb.w	r3, [r3, #254]	@ 0xfe
 80129b6:	f083 0301 	eor.w	r3, r3, #1
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d019      	beq.n	80129f4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80129c0:	7f7b      	ldrb	r3, [r7, #29]
 80129c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80129c4:	4b24      	ldr	r3, [pc, #144]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 80129c6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80129ca:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80129cc:	4b22      	ldr	r3, [pc, #136]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 80129ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129d2:	f107 0108 	add.w	r1, r7, #8
 80129d6:	2205      	movs	r2, #5
 80129d8:	4618      	mov	r0, r3
 80129da:	f002 f924 	bl	8014c26 <RegionVerify>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d005      	beq.n	80129f0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80129e4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129e8:	4b1b      	ldr	r3, [pc, #108]	@ (8012a58 <LoRaMacMcpsRequest+0x1e8>)
 80129ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80129ee:	e001      	b.n	80129f4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80129f0:	2303      	movs	r3, #3
 80129f2:	e029      	b.n	8012a48 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80129f4:	8bfa      	ldrh	r2, [r7, #30]
 80129f6:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 80129fa:	f107 000c 	add.w	r0, r7, #12
 80129fe:	78fb      	ldrb	r3, [r7, #3]
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	4613      	mov	r3, r2
 8012a04:	6a3a      	ldr	r2, [r7, #32]
 8012a06:	f7fd fcf1 	bl	80103ec <Send>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 8012a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d10c      	bne.n	8012a32 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	781a      	ldrb	r2, [r3, #0]
 8012a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012a1e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012a22:	4a0c      	ldr	r2, [pc, #48]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012a24:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8012a28:	f043 0301 	orr.w	r3, r3, #1
 8012a2c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8012a30:	e003      	b.n	8012a3a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012a32:	4b08      	ldr	r3, [pc, #32]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012a34:	2200      	movs	r2, #0
 8012a36:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012a3a:	4b06      	ldr	r3, [pc, #24]	@ (8012a54 <LoRaMacMcpsRequest+0x1e4>)
 8012a3c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	611a      	str	r2, [r3, #16]

    return status;
 8012a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3728      	adds	r7, #40	@ 0x28
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	2000346c 	.word	0x2000346c
 8012a54:	20003034 	.word	0x20003034
 8012a58:	2000353c 	.word	0x2000353c

08012a5c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	4603      	mov	r3, r0
 8012a64:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012a66:	79fb      	ldrb	r3, [r7, #7]
 8012a68:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8012a94 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a70:	f107 010c 	add.w	r1, r7, #12
 8012a74:	220f      	movs	r2, #15
 8012a76:	4618      	mov	r0, r3
 8012a78:	f002 f8d5 	bl	8014c26 <RegionVerify>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012a82:	4a04      	ldr	r2, [pc, #16]	@ (8012a94 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012a84:	79fb      	ldrb	r3, [r7, #7]
 8012a86:	f882 3100 	strb.w	r3, [r2, #256]	@ 0x100
    }
}
 8012a8a:	bf00      	nop
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	2000353c 	.word	0x2000353c

08012a98 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b08c      	sub	sp, #48	@ 0x30
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	7c1b      	ldrb	r3, [r3, #16]
 8012ab0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	7c5b      	ldrb	r3, [r3, #17]
 8012ab8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	689a      	ldr	r2, [r3, #8]
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	795b      	ldrb	r3, [r3, #5]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	f000 808b 	beq.w	8012be4 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012ace:	2302      	movs	r3, #2
 8012ad0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	7c9b      	ldrb	r3, [r3, #18]
 8012ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	7cdb      	ldrb	r3, [r3, #19]
 8012ae0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f002 f84f 	bl	8014b8a <RegionGetPhyParam>
 8012aec:	4603      	mov	r3, r0
 8012aee:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012af0:	6a3b      	ldr	r3, [r7, #32]
 8012af2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8012af6:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8012afa:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012afe:	4293      	cmp	r3, r2
 8012b00:	bfb8      	it	lt
 8012b02:	4613      	movlt	r3, r2
 8012b04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8012b08:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012b0c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d106      	bne.n	8012b22 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	2200      	movs	r2, #0
 8012b18:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012b20:	e060      	b.n	8012be4 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	68fa      	ldr	r2, [r7, #12]
 8012b28:	8992      	ldrh	r2, [r2, #12]
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d303      	bcc.n	8012b36 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012b34:	e002      	b.n	8012b3c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8012b36:	2300      	movs	r3, #0
 8012b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	8992      	ldrh	r2, [r2, #12]
 8012b44:	4611      	mov	r1, r2
 8012b46:	68fa      	ldr	r2, [r7, #12]
 8012b48:	89d2      	ldrh	r2, [r2, #14]
 8012b4a:	440a      	add	r2, r1
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d349      	bcc.n	8012be4 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8012b50:	2308      	movs	r3, #8
 8012b52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	7cdb      	ldrb	r3, [r3, #19]
 8012b5a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012b5e:	4611      	mov	r1, r2
 8012b60:	4618      	mov	r0, r3
 8012b62:	f002 f812 	bl	8014b8a <RegionGetPhyParam>
 8012b66:	4603      	mov	r3, r0
 8012b68:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8012b6a:	6a3b      	ldr	r3, [r7, #32]
 8012b6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	89d2      	ldrh	r2, [r2, #14]
 8012b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b7c:	fb01 f202 	mul.w	r2, r1, r2
 8012b80:	1a9b      	subs	r3, r3, r2
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d12e      	bne.n	8012be4 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012b86:	2322      	movs	r3, #34	@ 0x22
 8012b88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8012b8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012b90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	7c9b      	ldrb	r3, [r3, #18]
 8012b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	7cdb      	ldrb	r3, [r3, #19]
 8012ba0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f001 ffef 	bl	8014b8a <RegionGetPhyParam>
 8012bac:	4603      	mov	r3, r0
 8012bae:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8012bb6:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012bba:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d110      	bne.n	8012be4 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	791b      	ldrb	r3, [r3, #4]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d009      	beq.n	8012be4 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	7cdb      	ldrb	r3, [r3, #19]
 8012bd8:	f107 0214 	add.w	r2, r7, #20
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f002 f80a 	bl	8014bf8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012bea:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012bf2:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3730      	adds	r7, #48	@ 0x30
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	60b9      	str	r1, [r7, #8]
 8012c0a:	607a      	str	r2, [r7, #4]
 8012c0c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	789b      	ldrb	r3, [r3, #2]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d107      	bne.n	8012c26 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	68b9      	ldr	r1, [r7, #8]
 8012c1c:	68f8      	ldr	r0, [r7, #12]
 8012c1e:	f7ff ff3b 	bl	8012a98 <CalcNextV10X>
 8012c22:	4603      	mov	r3, r0
 8012c24:	e000      	b.n	8012c28 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3710      	adds	r7, #16
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c3c:	bf00      	nop
 8012c3e:	3714      	adds	r7, #20
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bc80      	pop	{r7}
 8012c44:	4770      	bx	lr

08012c46 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012c46:	b480      	push	{r7}
 8012c48:	b083      	sub	sp, #12
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c50:	bf00      	nop
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bc80      	pop	{r7}
 8012c58:	4770      	bx	lr

08012c5a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012c5a:	b480      	push	{r7}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	4603      	mov	r3, r0
 8012c62:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c64:	bf00      	nop
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bc80      	pop	{r7}
 8012c6c:	4770      	bx	lr

08012c6e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012c6e:	b480      	push	{r7}
 8012c70:	b083      	sub	sp, #12
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	4603      	mov	r3, r0
 8012c76:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bc80      	pop	{r7}
 8012c80:	4770      	bx	lr

08012c82 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012c82:	b480      	push	{r7}
 8012c84:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012c86:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bc80      	pop	{r7}
 8012c8e:	4770      	bx	lr

08012c90 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bc80      	pop	{r7}
 8012ca0:	4770      	bx	lr

08012ca2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012ca2:	b480      	push	{r7}
 8012ca4:	b083      	sub	sp, #12
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012caa:	bf00      	nop
 8012cac:	370c      	adds	r7, #12
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bc80      	pop	{r7}
 8012cb2:	4770      	bx	lr

08012cb4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cbc:	bf00      	nop
 8012cbe:	370c      	adds	r7, #12
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bc80      	pop	{r7}
 8012cc4:	4770      	bx	lr

08012cc6 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b083      	sub	sp, #12
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
 8012cce:	460b      	mov	r3, r1
 8012cd0:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012cd2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bc80      	pop	{r7}
 8012cdc:	4770      	bx	lr

08012cde <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012cde:	b480      	push	{r7}
 8012ce0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012ce2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bc80      	pop	{r7}
 8012cea:	4770      	bx	lr

08012cec <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012cf0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bc80      	pop	{r7}
 8012cf8:	4770      	bx	lr

08012cfa <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012cfa:	b480      	push	{r7}
 8012cfc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012cfe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bc80      	pop	{r7}
 8012d06:	4770      	bx	lr

08012d08 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012d08:	b480      	push	{r7}
 8012d0a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012d0c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bc80      	pop	{r7}
 8012d14:	4770      	bx	lr

08012d16 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012d16:	b480      	push	{r7}
 8012d18:	b083      	sub	sp, #12
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d20:	bf00      	nop
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bc80      	pop	{r7}
 8012d28:	4770      	bx	lr

08012d2a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012d2a:	b480      	push	{r7}
 8012d2c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d2e:	bf00      	nop
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bc80      	pop	{r7}
 8012d34:	4770      	bx	lr

08012d36 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012d36:	b480      	push	{r7}
 8012d38:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d3a:	bf00      	nop
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bc80      	pop	{r7}
 8012d40:	4770      	bx	lr

08012d42 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012d42:	b480      	push	{r7}
 8012d44:	b083      	sub	sp, #12
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	4603      	mov	r3, r0
 8012d4a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d4c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	370c      	adds	r7, #12
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bc80      	pop	{r7}
 8012d56:	4770      	bx	lr

08012d58 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b083      	sub	sp, #12
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d60:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bc80      	pop	{r7}
 8012d6a:	4770      	bx	lr

08012d6c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d74:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	370c      	adds	r7, #12
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bc80      	pop	{r7}
 8012d7e:	4770      	bx	lr

08012d80 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012d80:	b480      	push	{r7}
 8012d82:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d84:	bf00      	nop
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bc80      	pop	{r7}
 8012d8a:	4770      	bx	lr

08012d8c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	4603      	mov	r3, r0
 8012d94:	6039      	str	r1, [r7, #0]
 8012d96:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012d98:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bc80      	pop	{r7}
 8012da2:	4770      	bx	lr

08012da4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	4603      	mov	r3, r0
 8012dac:	603a      	str	r2, [r7, #0]
 8012dae:	80fb      	strh	r3, [r7, #6]
 8012db0:	460b      	mov	r3, r1
 8012db2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bc80      	pop	{r7}
 8012dbc:	4770      	bx	lr

08012dbe <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dc2:	bf00      	nop
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bc80      	pop	{r7}
 8012dc8:	4770      	bx	lr

08012dca <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012dca:	b480      	push	{r7}
 8012dcc:	b083      	sub	sp, #12
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012dd2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bc80      	pop	{r7}
 8012ddc:	4770      	bx	lr

08012dde <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012dde:	b480      	push	{r7}
 8012de0:	b083      	sub	sp, #12
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012de6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	370c      	adds	r7, #12
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bc80      	pop	{r7}
 8012df0:	4770      	bx	lr

08012df2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012df2:	b480      	push	{r7}
 8012df4:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012df6:	bf00      	nop
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bc80      	pop	{r7}
 8012dfc:	4770      	bx	lr

08012dfe <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8012dfe:	b480      	push	{r7}
 8012e00:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012e02:	bf00      	nop
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bc80      	pop	{r7}
 8012e08:	4770      	bx	lr

08012e0a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012e0a:	b480      	push	{r7}
 8012e0c:	b085      	sub	sp, #20
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e16:	2300      	movs	r3, #0
 8012e18:	81fb      	strh	r3, [r7, #14]
 8012e1a:	e00a      	b.n	8012e32 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012e1c:	89fb      	ldrh	r3, [r7, #14]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4413      	add	r3, r2
 8012e22:	781b      	ldrb	r3, [r3, #0]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <IsSlotFree+0x22>
        {
            return false;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	e006      	b.n	8012e3a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012e2c:	89fb      	ldrh	r3, [r7, #14]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	81fb      	strh	r3, [r7, #14]
 8012e32:	89fb      	ldrh	r3, [r7, #14]
 8012e34:	2b0f      	cmp	r3, #15
 8012e36:	d9f1      	bls.n	8012e1c <IsSlotFree+0x12>
        }
    }
    return true;
 8012e38:	2301      	movs	r3, #1
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bc80      	pop	{r7}
 8012e42:	4770      	bx	lr

08012e44 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e4e:	e007      	b.n	8012e60 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012e50:	79fb      	ldrb	r3, [r7, #7]
 8012e52:	3301      	adds	r3, #1
 8012e54:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012e56:	79fb      	ldrb	r3, [r7, #7]
 8012e58:	2b0f      	cmp	r3, #15
 8012e5a:	d101      	bne.n	8012e60 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	e012      	b.n	8012e86 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012e60:	79fb      	ldrb	r3, [r7, #7]
 8012e62:	011b      	lsls	r3, r3, #4
 8012e64:	3308      	adds	r3, #8
 8012e66:	4a0a      	ldr	r2, [pc, #40]	@ (8012e90 <MallocNewMacCommandSlot+0x4c>)
 8012e68:	4413      	add	r3, r2
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff ffcd 	bl	8012e0a <IsSlotFree>
 8012e70:	4603      	mov	r3, r0
 8012e72:	f083 0301 	eor.w	r3, r3, #1
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d1e9      	bne.n	8012e50 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012e7c:	79fb      	ldrb	r3, [r7, #7]
 8012e7e:	011b      	lsls	r3, r3, #4
 8012e80:	3308      	adds	r3, #8
 8012e82:	4a03      	ldr	r2, [pc, #12]	@ (8012e90 <MallocNewMacCommandSlot+0x4c>)
 8012e84:	4413      	add	r3, r2
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3708      	adds	r7, #8
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	20003b64 	.word	0x20003b64

08012e94 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d101      	bne.n	8012ea6 <FreeMacCommandSlot+0x12>
    {
        return false;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	e005      	b.n	8012eb2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012ea6:	2210      	movs	r2, #16
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f005 fd72 	bl	8018994 <memset1>

    return true;
 8012eb0:	2301      	movs	r3, #1
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012eba:	b480      	push	{r7}
 8012ebc:	b083      	sub	sp, #12
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d101      	bne.n	8012ecc <LinkedListInit+0x12>
    {
        return false;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	e006      	b.n	8012eda <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	605a      	str	r2, [r3, #4]

    return true;
 8012ed8:	2301      	movs	r3, #1
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	370c      	adds	r7, #12
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bc80      	pop	{r7}
 8012ee2:	4770      	bx	lr

08012ee4 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <LinkedListAdd+0x16>
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d101      	bne.n	8012efe <LinkedListAdd+0x1a>
    {
        return false;
 8012efa:	2300      	movs	r3, #0
 8012efc:	e015      	b.n	8012f2a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d102      	bne.n	8012f0c <LinkedListAdd+0x28>
    {
        list->First = element;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d003      	beq.n	8012f1c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	683a      	ldr	r2, [r7, #0]
 8012f1a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	605a      	str	r2, [r3, #4]

    return true;
 8012f28:	2301      	movs	r3, #1
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bc80      	pop	{r7}
 8012f32:	4770      	bx	lr

08012f34 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d002      	beq.n	8012f4a <LinkedListGetPrevious+0x16>
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d101      	bne.n	8012f4e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e016      	b.n	8012f7c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012f54:	683a      	ldr	r2, [r7, #0]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d00c      	beq.n	8012f76 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f5c:	e002      	b.n	8012f64 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d007      	beq.n	8012f7a <LinkedListGetPrevious+0x46>
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	683a      	ldr	r2, [r7, #0]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d1f4      	bne.n	8012f5e <LinkedListGetPrevious+0x2a>
 8012f74:	e001      	b.n	8012f7a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012f76:	2300      	movs	r3, #0
 8012f78:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3714      	adds	r7, #20
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bc80      	pop	{r7}
 8012f84:	4770      	bx	lr

08012f86 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b084      	sub	sp, #16
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
 8012f8e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d002      	beq.n	8012f9c <LinkedListRemove+0x16>
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d101      	bne.n	8012fa0 <LinkedListRemove+0x1a>
    {
        return false;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	e020      	b.n	8012fe2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7ff ffc6 	bl	8012f34 <LinkedListGetPrevious>
 8012fa8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d103      	bne.n	8012fbc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	683a      	ldr	r2, [r7, #0]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d102      	bne.n	8012fcc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d003      	beq.n	8012fda <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	2200      	movs	r2, #0
 8012fde:	601a      	str	r2, [r3, #0]

    return true;
 8012fe0:	2301      	movs	r3, #1
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012fea:	b480      	push	{r7}
 8012fec:	b083      	sub	sp, #12
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	2b05      	cmp	r3, #5
 8012ff8:	d004      	beq.n	8013004 <IsSticky+0x1a>
 8012ffa:	2b05      	cmp	r3, #5
 8012ffc:	db04      	blt.n	8013008 <IsSticky+0x1e>
 8012ffe:	3b08      	subs	r3, #8
 8013000:	2b02      	cmp	r3, #2
 8013002:	d801      	bhi.n	8013008 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8013004:	2301      	movs	r3, #1
 8013006:	e000      	b.n	801300a <IsSticky+0x20>
        default:
            return false;
 8013008:	2300      	movs	r3, #0
    }
}
 801300a:	4618      	mov	r0, r3
 801300c:	370c      	adds	r7, #12
 801300e:	46bd      	mov	sp, r7
 8013010:	bc80      	pop	{r7}
 8013012:	4770      	bx	lr

08013014 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013018:	22fc      	movs	r2, #252	@ 0xfc
 801301a:	2100      	movs	r1, #0
 801301c:	4804      	ldr	r0, [pc, #16]	@ (8013030 <LoRaMacCommandsInit+0x1c>)
 801301e:	f005 fcb9 	bl	8018994 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013022:	4803      	ldr	r0, [pc, #12]	@ (8013030 <LoRaMacCommandsInit+0x1c>)
 8013024:	f7ff ff49 	bl	8012eba <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013028:	2300      	movs	r3, #0
}
 801302a:	4618      	mov	r0, r3
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	20003b64 	.word	0x20003b64

08013034 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	4603      	mov	r3, r0
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	607a      	str	r2, [r7, #4]
 8013040:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d101      	bne.n	801304c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013048:	2301      	movs	r3, #1
 801304a:	e033      	b.n	80130b4 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801304c:	f7ff fefa 	bl	8012e44 <MallocNewMacCommandSlot>
 8013050:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d101      	bne.n	801305c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013058:	2302      	movs	r3, #2
 801305a:	e02b      	b.n	80130b4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801305c:	6979      	ldr	r1, [r7, #20]
 801305e:	4817      	ldr	r0, [pc, #92]	@ (80130bc <LoRaMacCommandsAddCmd+0x88>)
 8013060:	f7ff ff40 	bl	8012ee4 <LinkedListAdd>
 8013064:	4603      	mov	r3, r0
 8013066:	f083 0301 	eor.w	r3, r3, #1
 801306a:	b2db      	uxtb	r3, r3
 801306c:	2b00      	cmp	r3, #0
 801306e:	d001      	beq.n	8013074 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013070:	2305      	movs	r3, #5
 8013072:	e01f      	b.n	80130b4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	7bfa      	ldrb	r2, [r7, #15]
 8013078:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	3305      	adds	r3, #5
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	b292      	uxth	r2, r2
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	4618      	mov	r0, r3
 801308c:	f005 fc47 	bl	801891e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013090:	7bfb      	ldrb	r3, [r7, #15]
 8013092:	4618      	mov	r0, r3
 8013094:	f7ff ffa9 	bl	8012fea <IsSticky>
 8013098:	4603      	mov	r3, r0
 801309a:	461a      	mov	r2, r3
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80130a0:	4b06      	ldr	r3, [pc, #24]	@ (80130bc <LoRaMacCommandsAddCmd+0x88>)
 80130a2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4413      	add	r3, r2
 80130aa:	3301      	adds	r3, #1
 80130ac:	4a03      	ldr	r2, [pc, #12]	@ (80130bc <LoRaMacCommandsAddCmd+0x88>)
 80130ae:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3718      	adds	r7, #24
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	20003b64 	.word	0x20003b64

080130c0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d101      	bne.n	80130d2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80130ce:	2301      	movs	r3, #1
 80130d0:	e021      	b.n	8013116 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80130d2:	6879      	ldr	r1, [r7, #4]
 80130d4:	4812      	ldr	r0, [pc, #72]	@ (8013120 <LoRaMacCommandsRemoveCmd+0x60>)
 80130d6:	f7ff ff56 	bl	8012f86 <LinkedListRemove>
 80130da:	4603      	mov	r3, r0
 80130dc:	f083 0301 	eor.w	r3, r3, #1
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d001      	beq.n	80130ea <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80130e6:	2303      	movs	r3, #3
 80130e8:	e015      	b.n	8013116 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80130ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013120 <LoRaMacCommandsRemoveCmd+0x60>)
 80130ec:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	3b01      	subs	r3, #1
 80130f8:	4a09      	ldr	r2, [pc, #36]	@ (8013120 <LoRaMacCommandsRemoveCmd+0x60>)
 80130fa:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f7ff fec8 	bl	8012e94 <FreeMacCommandSlot>
 8013104:	4603      	mov	r3, r0
 8013106:	f083 0301 	eor.w	r3, r3, #1
 801310a:	b2db      	uxtb	r3, r3
 801310c:	2b00      	cmp	r3, #0
 801310e:	d001      	beq.n	8013114 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013110:	2305      	movs	r3, #5
 8013112:	e000      	b.n	8013116 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013114:	2300      	movs	r3, #0
}
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	20003b64 	.word	0x20003b64

08013124 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801312a:	4b0f      	ldr	r3, [pc, #60]	@ (8013168 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013130:	e012      	b.n	8013158 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	7b1b      	ldrb	r3, [r3, #12]
 8013136:	f083 0301 	eor.w	r3, r3, #1
 801313a:	b2db      	uxtb	r3, r3
 801313c:	2b00      	cmp	r3, #0
 801313e:	d008      	beq.n	8013152 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7ff ffba 	bl	80130c0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	607b      	str	r3, [r7, #4]
 8013150:	e002      	b.n	8013158 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d1e9      	bne.n	8013132 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801315e:	2300      	movs	r3, #0
}
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	20003b64 	.word	0x20003b64

0801316c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013172:	4b0e      	ldr	r3, [pc, #56]	@ (80131ac <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013178:	e00f      	b.n	801319a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	791b      	ldrb	r3, [r3, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	f7ff ff30 	bl	8012fea <IsSticky>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d002      	beq.n	8013196 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff ff95 	bl	80130c0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1ec      	bne.n	801317a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	20003b64 	.word	0x20003b64

080131b0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d101      	bne.n	80131c2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80131be:	2301      	movs	r3, #1
 80131c0:	e005      	b.n	80131ce <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80131c2:	4b05      	ldr	r3, [pc, #20]	@ (80131d8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80131c4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	370c      	adds	r7, #12
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bc80      	pop	{r7}
 80131d6:	4770      	bx	lr
 80131d8:	20003b64 	.word	0x20003b64

080131dc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b088      	sub	sp, #32
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	60f8      	str	r0, [r7, #12]
 80131e4:	60b9      	str	r1, [r7, #8]
 80131e6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80131e8:	4b25      	ldr	r3, [pc, #148]	@ (8013280 <LoRaMacCommandsSerializeCmds+0xa4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <LoRaMacCommandsSerializeCmds+0x22>
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d126      	bne.n	801324c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80131fe:	2301      	movs	r3, #1
 8013200:	e039      	b.n	8013276 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013202:	7efb      	ldrb	r3, [r7, #27]
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	1ad2      	subs	r2, r2, r3
 8013208:	69fb      	ldr	r3, [r7, #28]
 801320a:	689b      	ldr	r3, [r3, #8]
 801320c:	3301      	adds	r3, #1
 801320e:	429a      	cmp	r2, r3
 8013210:	d320      	bcc.n	8013254 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013212:	7efb      	ldrb	r3, [r7, #27]
 8013214:	1c5a      	adds	r2, r3, #1
 8013216:	76fa      	strb	r2, [r7, #27]
 8013218:	461a      	mov	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4413      	add	r3, r2
 801321e:	69fa      	ldr	r2, [r7, #28]
 8013220:	7912      	ldrb	r2, [r2, #4]
 8013222:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013224:	7efb      	ldrb	r3, [r7, #27]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	18d0      	adds	r0, r2, r3
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	1d59      	adds	r1, r3, #5
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	689b      	ldr	r3, [r3, #8]
 8013232:	b29b      	uxth	r3, r3
 8013234:	461a      	mov	r2, r3
 8013236:	f005 fb72 	bl	801891e <memcpy1>
            itr += curElement->PayloadSize;
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	b2da      	uxtb	r2, r3
 8013240:	7efb      	ldrb	r3, [r7, #27]
 8013242:	4413      	add	r3, r2
 8013244:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d1d7      	bne.n	8013202 <LoRaMacCommandsSerializeCmds+0x26>
 8013252:	e009      	b.n	8013268 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013254:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013256:	e007      	b.n	8013268 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801325e:	69f8      	ldr	r0, [r7, #28]
 8013260:	f7ff ff2e 	bl	80130c0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d1f4      	bne.n	8013258 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801326e:	68b8      	ldr	r0, [r7, #8]
 8013270:	f7ff ff9e 	bl	80131b0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3720      	adds	r7, #32
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	20003b64 	.word	0x20003b64

08013284 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013284:	b480      	push	{r7}
 8013286:	b085      	sub	sp, #20
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d101      	bne.n	8013296 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013292:	2301      	movs	r3, #1
 8013294:	e016      	b.n	80132c4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013296:	4b0e      	ldr	r3, [pc, #56]	@ (80132d0 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80132a2:	e00b      	b.n	80132bc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	7b1b      	ldrb	r3, [r3, #12]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d004      	beq.n	80132b6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2201      	movs	r2, #1
 80132b0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e006      	b.n	80132c4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1f0      	bne.n	80132a4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80132c2:	2300      	movs	r3, #0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bc80      	pop	{r7}
 80132cc:	4770      	bx	lr
 80132ce:	bf00      	nop
 80132d0:	20003b64 	.word	0x20003b64

080132d4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80132d4:	b480      	push	{r7}
 80132d6:	b085      	sub	sp, #20
 80132d8:	af00      	add	r7, sp, #0
 80132da:	4603      	mov	r3, r0
 80132dc:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80132e2:	79fb      	ldrb	r3, [r7, #7]
 80132e4:	3b02      	subs	r3, #2
 80132e6:	2b11      	cmp	r3, #17
 80132e8:	d850      	bhi.n	801338c <LoRaMacCommandsGetCmdSize+0xb8>
 80132ea:	a201      	add	r2, pc, #4	@ (adr r2, 80132f0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80132ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f0:	08013339 	.word	0x08013339
 80132f4:	0801333f 	.word	0x0801333f
 80132f8:	08013345 	.word	0x08013345
 80132fc:	0801334b 	.word	0x0801334b
 8013300:	08013351 	.word	0x08013351
 8013304:	08013357 	.word	0x08013357
 8013308:	0801335d 	.word	0x0801335d
 801330c:	08013363 	.word	0x08013363
 8013310:	08013369 	.word	0x08013369
 8013314:	0801338d 	.word	0x0801338d
 8013318:	0801338d 	.word	0x0801338d
 801331c:	0801336f 	.word	0x0801336f
 8013320:	0801338d 	.word	0x0801338d
 8013324:	0801338d 	.word	0x0801338d
 8013328:	08013375 	.word	0x08013375
 801332c:	0801337b 	.word	0x0801337b
 8013330:	08013381 	.word	0x08013381
 8013334:	08013387 	.word	0x08013387
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013338:	2303      	movs	r3, #3
 801333a:	73fb      	strb	r3, [r7, #15]
            break;
 801333c:	e027      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801333e:	2305      	movs	r3, #5
 8013340:	73fb      	strb	r3, [r7, #15]
            break;
 8013342:	e024      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013344:	2302      	movs	r3, #2
 8013346:	73fb      	strb	r3, [r7, #15]
            break;
 8013348:	e021      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801334a:	2305      	movs	r3, #5
 801334c:	73fb      	strb	r3, [r7, #15]
            break;
 801334e:	e01e      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013350:	2301      	movs	r3, #1
 8013352:	73fb      	strb	r3, [r7, #15]
            break;
 8013354:	e01b      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013356:	2306      	movs	r3, #6
 8013358:	73fb      	strb	r3, [r7, #15]
            break;
 801335a:	e018      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801335c:	2302      	movs	r3, #2
 801335e:	73fb      	strb	r3, [r7, #15]
            break;
 8013360:	e015      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013362:	2302      	movs	r3, #2
 8013364:	73fb      	strb	r3, [r7, #15]
            break;
 8013366:	e012      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013368:	2305      	movs	r3, #5
 801336a:	73fb      	strb	r3, [r7, #15]
            break;
 801336c:	e00f      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801336e:	2306      	movs	r3, #6
 8013370:	73fb      	strb	r3, [r7, #15]
            break;
 8013372:	e00c      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013374:	2301      	movs	r3, #1
 8013376:	73fb      	strb	r3, [r7, #15]
            break;
 8013378:	e009      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801337a:	2305      	movs	r3, #5
 801337c:	73fb      	strb	r3, [r7, #15]
            break;
 801337e:	e006      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013380:	2304      	movs	r3, #4
 8013382:	73fb      	strb	r3, [r7, #15]
            break;
 8013384:	e003      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013386:	2304      	movs	r3, #4
 8013388:	73fb      	strb	r3, [r7, #15]
            break;
 801338a:	e000      	b.n	801338e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801338c:	bf00      	nop
        }
    }
    return cidSize;
 801338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	bc80      	pop	{r7}
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop

0801339c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	4a07      	ldr	r2, [pc, #28]	@ (80133c4 <IncreaseBufferPointer+0x28>)
 80133a8:	4293      	cmp	r3, r2
 80133aa:	d102      	bne.n	80133b2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80133ac:	4b06      	ldr	r3, [pc, #24]	@ (80133c8 <IncreaseBufferPointer+0x2c>)
 80133ae:	607b      	str	r3, [r7, #4]
 80133b0:	e002      	b.n	80133b8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	3304      	adds	r3, #4
 80133b6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80133b8:	687b      	ldr	r3, [r7, #4]
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	370c      	adds	r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	bc80      	pop	{r7}
 80133c2:	4770      	bx	lr
 80133c4:	20003c7c 	.word	0x20003c7c
 80133c8:	20003c6c 	.word	0x20003c6c

080133cc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	4603      	mov	r3, r0
 80133d4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d101      	bne.n	80133e0 <IsListEmpty+0x14>
    {
        return true;
 80133dc:	2301      	movs	r3, #1
 80133de:	e000      	b.n	80133e2 <IsListEmpty+0x16>
    }
    return false;
 80133e0:	2300      	movs	r3, #0
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	370c      	adds	r7, #12
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bc80      	pop	{r7}
 80133ea:	4770      	bx	lr

080133ec <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80133f6:	79fb      	ldrb	r3, [r7, #7]
 80133f8:	2b04      	cmp	r3, #4
 80133fa:	d901      	bls.n	8013400 <IsListFull+0x14>
    {
        return true;
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <IsListFull+0x16>
    }
    return false;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	370c      	adds	r7, #12
 8013406:	46bd      	mov	sp, r7
 8013408:	bc80      	pop	{r7}
 801340a:	4770      	bx	lr

0801340c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b086      	sub	sp, #24
 8013410:	af00      	add	r7, sp, #0
 8013412:	4603      	mov	r3, r0
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801341e:	4b13      	ldr	r3, [pc, #76]	@ (801346c <GetElement+0x60>)
 8013420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013424:	4618      	mov	r0, r3
 8013426:	f7ff ffd1 	bl	80133cc <IsListEmpty>
 801342a:	4603      	mov	r3, r0
 801342c:	2b00      	cmp	r3, #0
 801342e:	d001      	beq.n	8013434 <GetElement+0x28>
    {
        return NULL;
 8013430:	2300      	movs	r3, #0
 8013432:	e017      	b.n	8013464 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013434:	2300      	movs	r3, #0
 8013436:	74fb      	strb	r3, [r7, #19]
 8013438:	e00d      	b.n	8013456 <GetElement+0x4a>
    {
        if( element->Request == request )
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	7bfa      	ldrb	r2, [r7, #15]
 8013440:	429a      	cmp	r2, r3
 8013442:	d101      	bne.n	8013448 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	e00d      	b.n	8013464 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013448:	6978      	ldr	r0, [r7, #20]
 801344a:	f7ff ffa7 	bl	801339c <IncreaseBufferPointer>
 801344e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013450:	7cfb      	ldrb	r3, [r7, #19]
 8013452:	3301      	adds	r3, #1
 8013454:	74fb      	strb	r3, [r7, #19]
 8013456:	4b05      	ldr	r3, [pc, #20]	@ (801346c <GetElement+0x60>)
 8013458:	f893 3020 	ldrb.w	r3, [r3, #32]
 801345c:	7cfa      	ldrb	r2, [r7, #19]
 801345e:	429a      	cmp	r2, r3
 8013460:	d3eb      	bcc.n	801343a <GetElement+0x2e>
    }

    return NULL;
 8013462:	2300      	movs	r3, #0
}
 8013464:	4618      	mov	r0, r3
 8013466:	3718      	adds	r7, #24
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	20003c60 	.word	0x20003c60

08013470 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013478:	4a0c      	ldr	r2, [pc, #48]	@ (80134ac <LoRaMacConfirmQueueInit+0x3c>)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801347e:	4b0b      	ldr	r3, [pc, #44]	@ (80134ac <LoRaMacConfirmQueueInit+0x3c>)
 8013480:	2200      	movs	r2, #0
 8013482:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013486:	4b09      	ldr	r3, [pc, #36]	@ (80134ac <LoRaMacConfirmQueueInit+0x3c>)
 8013488:	4a09      	ldr	r2, [pc, #36]	@ (80134b0 <LoRaMacConfirmQueueInit+0x40>)
 801348a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801348c:	4b07      	ldr	r3, [pc, #28]	@ (80134ac <LoRaMacConfirmQueueInit+0x3c>)
 801348e:	4a08      	ldr	r2, [pc, #32]	@ (80134b0 <LoRaMacConfirmQueueInit+0x40>)
 8013490:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013492:	2214      	movs	r2, #20
 8013494:	21ff      	movs	r1, #255	@ 0xff
 8013496:	4806      	ldr	r0, [pc, #24]	@ (80134b0 <LoRaMacConfirmQueueInit+0x40>)
 8013498:	f005 fa7c 	bl	8018994 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801349c:	4b03      	ldr	r3, [pc, #12]	@ (80134ac <LoRaMacConfirmQueueInit+0x3c>)
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80134a4:	bf00      	nop
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	20003c60 	.word	0x20003c60
 80134b0:	20003c6c 	.word	0x20003c6c

080134b4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80134bc:	4b19      	ldr	r3, [pc, #100]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff ff92 	bl	80133ec <IsListFull>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d001      	beq.n	80134d2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80134ce:	2300      	movs	r3, #0
 80134d0:	e023      	b.n	801351a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80134d2:	4b14      	ldr	r3, [pc, #80]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134d4:	689b      	ldr	r3, [r3, #8]
 80134d6:	687a      	ldr	r2, [r7, #4]
 80134d8:	7812      	ldrb	r2, [r2, #0]
 80134da:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80134dc:	4b11      	ldr	r3, [pc, #68]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	7852      	ldrb	r2, [r2, #1]
 80134e4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80134e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134e8:	689b      	ldr	r3, [r3, #8]
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	78d2      	ldrb	r2, [r2, #3]
 80134ee:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80134f0:	4b0c      	ldr	r3, [pc, #48]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	2200      	movs	r2, #0
 80134f6:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80134f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 80134fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134fe:	3301      	adds	r3, #1
 8013500:	b2da      	uxtb	r2, r3
 8013502:	4b08      	ldr	r3, [pc, #32]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 8013504:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013508:	4b06      	ldr	r3, [pc, #24]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 801350a:	689b      	ldr	r3, [r3, #8]
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff ff45 	bl	801339c <IncreaseBufferPointer>
 8013512:	4603      	mov	r3, r0
 8013514:	4a03      	ldr	r2, [pc, #12]	@ (8013524 <LoRaMacConfirmQueueAdd+0x70>)
 8013516:	6093      	str	r3, [r2, #8]

    return true;
 8013518:	2301      	movs	r3, #1
}
 801351a:	4618      	mov	r0, r3
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	20003c60 	.word	0x20003c60

08013528 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013528:	b580      	push	{r7, lr}
 801352a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801352c:	4b0e      	ldr	r3, [pc, #56]	@ (8013568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801352e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013532:	4618      	mov	r0, r3
 8013534:	f7ff ff4a 	bl	80133cc <IsListEmpty>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d001      	beq.n	8013542 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801353e:	2300      	movs	r3, #0
 8013540:	e010      	b.n	8013564 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013542:	4b09      	ldr	r3, [pc, #36]	@ (8013568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013548:	3b01      	subs	r3, #1
 801354a:	b2da      	uxtb	r2, r3
 801354c:	4b06      	ldr	r3, [pc, #24]	@ (8013568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801354e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013552:	4b05      	ldr	r3, [pc, #20]	@ (8013568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff ff20 	bl	801339c <IncreaseBufferPointer>
 801355c:	4603      	mov	r3, r0
 801355e:	4a02      	ldr	r2, [pc, #8]	@ (8013568 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013560:	6053      	str	r3, [r2, #4]

    return true;
 8013562:	2301      	movs	r3, #1
}
 8013564:	4618      	mov	r0, r3
 8013566:	bd80      	pop	{r7, pc}
 8013568:	20003c60 	.word	0x20003c60

0801356c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b084      	sub	sp, #16
 8013570:	af00      	add	r7, sp, #0
 8013572:	4603      	mov	r3, r0
 8013574:	460a      	mov	r2, r1
 8013576:	71fb      	strb	r3, [r7, #7]
 8013578:	4613      	mov	r3, r2
 801357a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801357c:	2300      	movs	r3, #0
 801357e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013580:	4b10      	ldr	r3, [pc, #64]	@ (80135c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff ff20 	bl	80133cc <IsListEmpty>
 801358c:	4603      	mov	r3, r0
 801358e:	f083 0301 	eor.w	r3, r3, #1
 8013592:	b2db      	uxtb	r3, r3
 8013594:	2b00      	cmp	r3, #0
 8013596:	d011      	beq.n	80135bc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013598:	4b0a      	ldr	r3, [pc, #40]	@ (80135c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801359a:	6859      	ldr	r1, [r3, #4]
 801359c:	4b09      	ldr	r3, [pc, #36]	@ (80135c4 <LoRaMacConfirmQueueSetStatus+0x58>)
 801359e:	689a      	ldr	r2, [r3, #8]
 80135a0:	79bb      	ldrb	r3, [r7, #6]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7ff ff32 	bl	801340c <GetElement>
 80135a8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d005      	beq.n	80135bc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	79fa      	ldrb	r2, [r7, #7]
 80135b4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2201      	movs	r2, #1
 80135ba:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80135bc:	bf00      	nop
 80135be:	3710      	adds	r7, #16
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	20003c60 	.word	0x20003c60

080135c8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80135d2:	2300      	movs	r3, #0
 80135d4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80135d6:	4b10      	ldr	r3, [pc, #64]	@ (8013618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80135d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80135dc:	4618      	mov	r0, r3
 80135de:	f7ff fef5 	bl	80133cc <IsListEmpty>
 80135e2:	4603      	mov	r3, r0
 80135e4:	f083 0301 	eor.w	r3, r3, #1
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00e      	beq.n	801360c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80135ee:	4b0a      	ldr	r3, [pc, #40]	@ (8013618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80135f0:	6859      	ldr	r1, [r3, #4]
 80135f2:	4b09      	ldr	r3, [pc, #36]	@ (8013618 <LoRaMacConfirmQueueGetStatus+0x50>)
 80135f4:	689a      	ldr	r2, [r3, #8]
 80135f6:	79fb      	ldrb	r3, [r7, #7]
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7ff ff07 	bl	801340c <GetElement>
 80135fe:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d002      	beq.n	801360c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	785b      	ldrb	r3, [r3, #1]
 801360a:	e000      	b.n	801360e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801360c:	2301      	movs	r3, #1
}
 801360e:	4618      	mov	r0, r3
 8013610:	3710      	adds	r7, #16
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	20003c60 	.word	0x20003c60

0801361c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	4603      	mov	r3, r0
 8013624:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013626:	4b16      	ldr	r3, [pc, #88]	@ (8013680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801362c:	4a14      	ldr	r2, [pc, #80]	@ (8013680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801362e:	79fb      	ldrb	r3, [r7, #7]
 8013630:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013634:	4b12      	ldr	r3, [pc, #72]	@ (8013680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013636:	f893 3020 	ldrb.w	r3, [r3, #32]
 801363a:	4618      	mov	r0, r3
 801363c:	f7ff fec6 	bl	80133cc <IsListEmpty>
 8013640:	4603      	mov	r3, r0
 8013642:	f083 0301 	eor.w	r3, r3, #1
 8013646:	b2db      	uxtb	r3, r3
 8013648:	2b00      	cmp	r3, #0
 801364a:	d015      	beq.n	8013678 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	79fa      	ldrb	r2, [r7, #7]
 8013650:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	78db      	ldrb	r3, [r3, #3]
 8013656:	f083 0301 	eor.w	r3, r3, #1
 801365a:	b2db      	uxtb	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2201      	movs	r2, #1
 8013664:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	f7ff fe98 	bl	801339c <IncreaseBufferPointer>
 801366c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801366e:	4b04      	ldr	r3, [pc, #16]	@ (8013680 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	68fa      	ldr	r2, [r7, #12]
 8013674:	429a      	cmp	r2, r3
 8013676:	d1e9      	bne.n	801364c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013678:	bf00      	nop
 801367a:	3710      	adds	r7, #16
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}
 8013680:	20003c60 	.word	0x20003c60

08013684 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	4603      	mov	r3, r0
 801368c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801368e:	4b09      	ldr	r3, [pc, #36]	@ (80136b4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013690:	6859      	ldr	r1, [r3, #4]
 8013692:	4b08      	ldr	r3, [pc, #32]	@ (80136b4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013694:	689a      	ldr	r2, [r3, #8]
 8013696:	79fb      	ldrb	r3, [r7, #7]
 8013698:	4618      	mov	r0, r3
 801369a:	f7ff feb7 	bl	801340c <GetElement>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d001      	beq.n	80136a8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80136a4:	2301      	movs	r3, #1
 80136a6:	e000      	b.n	80136aa <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	20003c60 	.word	0x20003c60

080136b8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80136c0:	4b22      	ldr	r3, [pc, #136]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 80136c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136c6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80136c8:	2300      	movs	r3, #0
 80136ca:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80136cc:	2300      	movs	r3, #0
 80136ce:	73fb      	strb	r3, [r7, #15]
 80136d0:	e032      	b.n	8013738 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80136d2:	4b1e      	ldr	r3, [pc, #120]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	781a      	ldrb	r2, [r3, #0]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80136dc:	4b1b      	ldr	r3, [pc, #108]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	785a      	ldrb	r2, [r3, #1]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80136e6:	4b19      	ldr	r3, [pc, #100]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	789b      	ldrb	r3, [r3, #2]
 80136ec:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80136ee:	7b7b      	ldrb	r3, [r7, #13]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d005      	beq.n	8013700 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80136f4:	4b15      	ldr	r3, [pc, #84]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	4798      	blx	r3
 80136fe:	e00b      	b.n	8013718 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013700:	4b12      	ldr	r3, [pc, #72]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013708:	4b10      	ldr	r3, [pc, #64]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	785b      	ldrb	r3, [r3, #1]
 801370e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013710:	4b0e      	ldr	r3, [pc, #56]	@ (801374c <LoRaMacConfirmQueueHandleCb+0x94>)
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	78db      	ldrb	r3, [r3, #3]
 8013716:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013718:	f7ff ff06 	bl	8013528 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801371c:	7b7b      	ldrb	r3, [r7, #13]
 801371e:	f083 0301 	eor.w	r3, r3, #1
 8013722:	b2db      	uxtb	r3, r3
 8013724:	2b00      	cmp	r3, #0
 8013726:	d004      	beq.n	8013732 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013728:	f107 0308 	add.w	r3, r7, #8
 801372c:	4618      	mov	r0, r3
 801372e:	f7ff fec1 	bl	80134b4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013732:	7bfb      	ldrb	r3, [r7, #15]
 8013734:	3301      	adds	r3, #1
 8013736:	73fb      	strb	r3, [r7, #15]
 8013738:	7bfa      	ldrb	r2, [r7, #15]
 801373a:	7bbb      	ldrb	r3, [r7, #14]
 801373c:	429a      	cmp	r2, r3
 801373e:	d3c8      	bcc.n	80136d2 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013740:	bf00      	nop
 8013742:	bf00      	nop
 8013744:	3710      	adds	r7, #16
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	20003c60 	.word	0x20003c60

08013750 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013750:	b480      	push	{r7}
 8013752:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013754:	4b03      	ldr	r3, [pc, #12]	@ (8013764 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013756:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801375a:	4618      	mov	r0, r3
 801375c:	46bd      	mov	sp, r7
 801375e:	bc80      	pop	{r7}
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	20003c60 	.word	0x20003c60

08013768 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013768:	b580      	push	{r7, lr}
 801376a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801376c:	4b06      	ldr	r3, [pc, #24]	@ (8013788 <LoRaMacConfirmQueueIsFull+0x20>)
 801376e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff fe3a 	bl	80133ec <IsListFull>
 8013778:	4603      	mov	r3, r0
 801377a:	2b00      	cmp	r3, #0
 801377c:	d001      	beq.n	8013782 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801377e:	2301      	movs	r3, #1
 8013780:	e000      	b.n	8013784 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013782:	2300      	movs	r3, #0
    }
}
 8013784:	4618      	mov	r0, r3
 8013786:	bd80      	pop	{r7, pc}
 8013788:	20003c60 	.word	0x20003c60

0801378c <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08e      	sub	sp, #56	@ 0x38
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	607b      	str	r3, [r7, #4]
 8013796:	460b      	mov	r3, r1
 8013798:	817b      	strh	r3, [r7, #10]
 801379a:	4613      	mov	r3, r2
 801379c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137a4:	230a      	movs	r3, #10
 80137a6:	e086      	b.n	80138b6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80137a8:	2300      	movs	r3, #0
 80137aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80137ae:	2301      	movs	r3, #1
 80137b0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80137b2:	2300      	movs	r3, #0
 80137b4:	623b      	str	r3, [r7, #32]
 80137b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137ba:	2200      	movs	r2, #0
 80137bc:	601a      	str	r2, [r3, #0]
 80137be:	605a      	str	r2, [r3, #4]
 80137c0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80137c2:	2300      	movs	r3, #0
 80137c4:	613b      	str	r3, [r7, #16]
 80137c6:	f107 0314 	add.w	r3, r7, #20
 80137ca:	2200      	movs	r2, #0
 80137cc:	601a      	str	r2, [r3, #0]
 80137ce:	605a      	str	r2, [r3, #4]
 80137d0:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80137d2:	2301      	movs	r3, #1
 80137d4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80137d6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80137da:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	b2db      	uxtb	r3, r3
 80137e0:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	0a1b      	lsrs	r3, r3, #8
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	0c1b      	lsrs	r3, r3, #16
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	0e1b      	lsrs	r3, r3, #24
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80137fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013802:	0a1b      	lsrs	r3, r3, #8
 8013804:	b2db      	uxtb	r3, r3
 8013806:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801380a:	0c1b      	lsrs	r3, r3, #16
 801380c:	b2db      	uxtb	r3, r3
 801380e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013812:	0e1b      	lsrs	r3, r3, #24
 8013814:	b2db      	uxtb	r3, r3
 8013816:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013818:	e048      	b.n	80138ac <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801381a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801381c:	b2db      	uxtb	r3, r3
 801381e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013820:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013822:	3301      	adds	r3, #1
 8013824:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013826:	f107 0320 	add.w	r3, r7, #32
 801382a:	7a7a      	ldrb	r2, [r7, #9]
 801382c:	f107 0010 	add.w	r0, r7, #16
 8013830:	2110      	movs	r1, #16
 8013832:	f7f9 f9e6 	bl	800cc02 <SecureElementAesEncrypt>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d001      	beq.n	8013840 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801383c:	230f      	movs	r3, #15
 801383e:	e03a      	b.n	80138b6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013840:	2300      	movs	r3, #0
 8013842:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013846:	e01e      	b.n	8013886 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013848:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801384c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013850:	4413      	add	r3, r2
 8013852:	461a      	mov	r2, r3
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	4413      	add	r3, r2
 8013858:	7819      	ldrb	r1, [r3, #0]
 801385a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801385e:	3338      	adds	r3, #56	@ 0x38
 8013860:	443b      	add	r3, r7
 8013862:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013866:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801386a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801386e:	4403      	add	r3, r0
 8013870:	4618      	mov	r0, r3
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	4403      	add	r3, r0
 8013876:	404a      	eors	r2, r1
 8013878:	b2d2      	uxtb	r2, r2
 801387a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801387c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013880:	3301      	adds	r3, #1
 8013882:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013886:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801388a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801388e:	2a10      	cmp	r2, #16
 8013890:	bfa8      	it	ge
 8013892:	2210      	movge	r2, #16
 8013894:	b212      	sxth	r2, r2
 8013896:	4293      	cmp	r3, r2
 8013898:	dbd6      	blt.n	8013848 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801389a:	897b      	ldrh	r3, [r7, #10]
 801389c:	3b10      	subs	r3, #16
 801389e:	b29b      	uxth	r3, r3
 80138a0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80138a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80138a6:	3310      	adds	r3, #16
 80138a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80138ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dcb2      	bgt.n	801381a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3738      	adds	r7, #56	@ 0x38
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80138be:	b490      	push	{r4, r7}
 80138c0:	b082      	sub	sp, #8
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	4604      	mov	r4, r0
 80138c6:	4608      	mov	r0, r1
 80138c8:	4611      	mov	r1, r2
 80138ca:	461a      	mov	r2, r3
 80138cc:	4623      	mov	r3, r4
 80138ce:	80fb      	strh	r3, [r7, #6]
 80138d0:	4603      	mov	r3, r0
 80138d2:	717b      	strb	r3, [r7, #5]
 80138d4:	460b      	mov	r3, r1
 80138d6:	713b      	strb	r3, [r7, #4]
 80138d8:	4613      	mov	r3, r2
 80138da:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d101      	bne.n	80138e6 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138e2:	230a      	movs	r3, #10
 80138e4:	e04e      	b.n	8013984 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	2249      	movs	r2, #73	@ 0x49
 80138ea:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	3301      	adds	r3, #1
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	3302      	adds	r3, #2
 80138f8:	2200      	movs	r2, #0
 80138fa:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	3303      	adds	r3, #3
 8013900:	2200      	movs	r2, #0
 8013902:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013904:	69bb      	ldr	r3, [r7, #24]
 8013906:	3304      	adds	r3, #4
 8013908:	2200      	movs	r2, #0
 801390a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801390c:	69bb      	ldr	r3, [r7, #24]
 801390e:	3305      	adds	r3, #5
 8013910:	78fa      	ldrb	r2, [r7, #3]
 8013912:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	3306      	adds	r3, #6
 8013918:	693a      	ldr	r2, [r7, #16]
 801391a:	b2d2      	uxtb	r2, r2
 801391c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	0a1a      	lsrs	r2, r3, #8
 8013922:	69bb      	ldr	r3, [r7, #24]
 8013924:	3307      	adds	r3, #7
 8013926:	b2d2      	uxtb	r2, r2
 8013928:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	0c1a      	lsrs	r2, r3, #16
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	3308      	adds	r3, #8
 8013932:	b2d2      	uxtb	r2, r2
 8013934:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	0e1a      	lsrs	r2, r3, #24
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	3309      	adds	r3, #9
 801393e:	b2d2      	uxtb	r2, r2
 8013940:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	330a      	adds	r3, #10
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	b2d2      	uxtb	r2, r2
 801394a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	0a1a      	lsrs	r2, r3, #8
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	330b      	adds	r3, #11
 8013954:	b2d2      	uxtb	r2, r2
 8013956:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	0c1a      	lsrs	r2, r3, #16
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	330c      	adds	r3, #12
 8013960:	b2d2      	uxtb	r2, r2
 8013962:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	0e1a      	lsrs	r2, r3, #24
 8013968:	69bb      	ldr	r3, [r7, #24]
 801396a:	330d      	adds	r3, #13
 801396c:	b2d2      	uxtb	r2, r2
 801396e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	330e      	adds	r3, #14
 8013974:	2200      	movs	r2, #0
 8013976:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	330f      	adds	r3, #15
 801397c:	88fa      	ldrh	r2, [r7, #6]
 801397e:	b2d2      	uxtb	r2, r2
 8013980:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013982:	2300      	movs	r3, #0
}
 8013984:	4618      	mov	r0, r3
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bc90      	pop	{r4, r7}
 801398c:	4770      	bx	lr

0801398e <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801398e:	b590      	push	{r4, r7, lr}
 8013990:	b08b      	sub	sp, #44	@ 0x2c
 8013992:	af04      	add	r7, sp, #16
 8013994:	6078      	str	r0, [r7, #4]
 8013996:	4608      	mov	r0, r1
 8013998:	4611      	mov	r1, r2
 801399a:	461a      	mov	r2, r3
 801399c:	4603      	mov	r3, r0
 801399e:	807b      	strh	r3, [r7, #2]
 80139a0:	460b      	mov	r3, r1
 80139a2:	707b      	strb	r3, [r7, #1]
 80139a4:	4613      	mov	r3, r2
 80139a6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <ComputeCmacB0+0x26>
 80139ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d101      	bne.n	80139b8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139b4:	230a      	movs	r3, #10
 80139b6:	e024      	b.n	8013a02 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80139b8:	887b      	ldrh	r3, [r7, #2]
 80139ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139be:	d901      	bls.n	80139c4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80139c0:	230e      	movs	r3, #14
 80139c2:	e01e      	b.n	8013a02 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80139c4:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80139c8:	783a      	ldrb	r2, [r7, #0]
 80139ca:	7879      	ldrb	r1, [r7, #1]
 80139cc:	8878      	ldrh	r0, [r7, #2]
 80139ce:	f107 0308 	add.w	r3, r7, #8
 80139d2:	9302      	str	r3, [sp, #8]
 80139d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d6:	9301      	str	r3, [sp, #4]
 80139d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	4623      	mov	r3, r4
 80139de:	f7ff ff6e 	bl	80138be <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80139e2:	7879      	ldrb	r1, [r7, #1]
 80139e4:	887a      	ldrh	r2, [r7, #2]
 80139e6:	f107 0008 	add.w	r0, r7, #8
 80139ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139ec:	9300      	str	r3, [sp, #0]
 80139ee:	460b      	mov	r3, r1
 80139f0:	6879      	ldr	r1, [r7, #4]
 80139f2:	f7f9 f8b9 	bl	800cb68 <SecureElementComputeAesCmac>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d001      	beq.n	8013a00 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139fc:	230f      	movs	r3, #15
 80139fe:	e000      	b.n	8013a02 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	371c      	adds	r7, #28
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd90      	pop	{r4, r7, pc}

08013a0a <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013a0a:	b590      	push	{r4, r7, lr}
 8013a0c:	b0cd      	sub	sp, #308	@ 0x134
 8013a0e:	af04      	add	r7, sp, #16
 8013a10:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013a14:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013a18:	6020      	str	r0, [r4, #0]
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	4619      	mov	r1, r3
 8013a20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a24:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a28:	4622      	mov	r2, r4
 8013a2a:	801a      	strh	r2, [r3, #0]
 8013a2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a30:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013a34:	4602      	mov	r2, r0
 8013a36:	701a      	strb	r2, [r3, #0]
 8013a38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a3c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013a40:	460a      	mov	r2, r1
 8013a42:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013a44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a48:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d101      	bne.n	8013a56 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a52:	230a      	movs	r3, #10
 8013a54:	e063      	b.n	8013b1e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013a56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a5a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a5e:	881b      	ldrh	r3, [r3, #0]
 8013a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a64:	d901      	bls.n	8013a6a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013a66:	230e      	movs	r3, #14
 8013a68:	e059      	b.n	8013b1e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013a6a:	f107 030c 	add.w	r3, r7, #12
 8013a6e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013a72:	2100      	movs	r1, #0
 8013a74:	4618      	mov	r0, r3
 8013a76:	f004 ff8d 	bl	8018994 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013a7a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013a7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013a86:	781a      	ldrb	r2, [r3, #0]
 8013a88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a8c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013a90:	7819      	ldrb	r1, [r3, #0]
 8013a92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013a96:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013a9a:	8818      	ldrh	r0, [r3, #0]
 8013a9c:	f107 030c 	add.w	r3, r7, #12
 8013aa0:	9302      	str	r3, [sp, #8]
 8013aa2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	4623      	mov	r3, r4
 8013ab0:	f7ff ff05 	bl	80138be <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013ab4:	f107 030c 	add.w	r3, r7, #12
 8013ab8:	3310      	adds	r3, #16
 8013aba:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013abe:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013ac2:	8812      	ldrh	r2, [r2, #0]
 8013ac4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013ac8:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013acc:	6809      	ldr	r1, [r1, #0]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f004 ff25 	bl	801891e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013ad4:	2306      	movs	r3, #6
 8013ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013ada:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ade:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013ae2:	881b      	ldrh	r3, [r3, #0]
 8013ae4:	3310      	adds	r3, #16
 8013ae6:	b299      	uxth	r1, r3
 8013ae8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013aec:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	f107 000c 	add.w	r0, r7, #12
 8013af6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013afa:	f7f9 f853 	bl	800cba4 <SecureElementVerifyAesCmac>
 8013afe:	4603      	mov	r3, r0
 8013b00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d101      	bne.n	8013b10 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	e006      	b.n	8013b1e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013b10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d101      	bne.n	8013b1c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e000      	b.n	8013b1e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b1c:	230f      	movs	r3, #15
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd90      	pop	{r4, r7, pc}

08013b28 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b085      	sub	sp, #20
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	6039      	str	r1, [r7, #0]
 8013b32:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b34:	2300      	movs	r3, #0
 8013b36:	73fb      	strb	r3, [r7, #15]
 8013b38:	e011      	b.n	8013b5e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013b3a:	7bfb      	ldrb	r3, [r7, #15]
 8013b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8013b70 <GetKeyAddrItem+0x48>)
 8013b3e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013b42:	79fa      	ldrb	r2, [r7, #7]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d107      	bne.n	8013b58 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013b48:	7bfb      	ldrb	r3, [r7, #15]
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4a08      	ldr	r2, [pc, #32]	@ (8013b70 <GetKeyAddrItem+0x48>)
 8013b4e:	441a      	add	r2, r3
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013b54:	2300      	movs	r3, #0
 8013b56:	e006      	b.n	8013b66 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013b58:	7bfb      	ldrb	r3, [r7, #15]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	73fb      	strb	r3, [r7, #15]
 8013b5e:	7bfb      	ldrb	r3, [r7, #15]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d9ea      	bls.n	8013b3a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013b64:	230c      	movs	r3, #12
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3714      	adds	r7, #20
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bc80      	pop	{r7}
 8013b6e:	4770      	bx	lr
 8013b70:	200000f8 	.word	0x200000f8

08013b74 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b088      	sub	sp, #32
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60b9      	str	r1, [r7, #8]
 8013b7c:	607a      	str	r2, [r7, #4]
 8013b7e:	461a      	mov	r2, r3
 8013b80:	4603      	mov	r3, r0
 8013b82:	73fb      	strb	r3, [r7, #15]
 8013b84:	4613      	mov	r3, r2
 8013b86:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013b88:	2300      	movs	r3, #0
 8013b8a:	613b      	str	r3, [r7, #16]
 8013b8c:	f107 0314 	add.w	r3, r7, #20
 8013b90:	2200      	movs	r2, #0
 8013b92:	601a      	str	r2, [r3, #0]
 8013b94:	605a      	str	r2, [r3, #4]
 8013b96:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013b98:	7bfb      	ldrb	r3, [r7, #15]
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d002      	beq.n	8013ba4 <DeriveSessionKey10x+0x30>
 8013b9e:	2b03      	cmp	r3, #3
 8013ba0:	d003      	beq.n	8013baa <DeriveSessionKey10x+0x36>
 8013ba2:	e005      	b.n	8013bb0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	743b      	strb	r3, [r7, #16]
            break;
 8013ba8:	e004      	b.n	8013bb4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013baa:	2302      	movs	r3, #2
 8013bac:	743b      	strb	r3, [r7, #16]
            break;
 8013bae:	e001      	b.n	8013bb4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013bb0:	230b      	movs	r3, #11
 8013bb2:	e02a      	b.n	8013c0a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	0a1b      	lsrs	r3, r3, #8
 8013bbe:	b2db      	uxtb	r3, r3
 8013bc0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	0c1b      	lsrs	r3, r3, #16
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	b2db      	uxtb	r3, r3
 8013bce:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	0a1b      	lsrs	r3, r3, #8
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	0c1b      	lsrs	r3, r3, #16
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013be0:	89bb      	ldrh	r3, [r7, #12]
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013be6:	89bb      	ldrh	r3, [r7, #12]
 8013be8:	0a1b      	lsrs	r3, r3, #8
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013bf0:	7bfa      	ldrb	r2, [r7, #15]
 8013bf2:	f107 0310 	add.w	r3, r7, #16
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f9 f869 	bl	800ccd0 <SecureElementDeriveAndStoreKey>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d001      	beq.n	8013c08 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013c04:	230f      	movs	r3, #15
 8013c06:	e000      	b.n	8013c0a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3720      	adds	r7, #32
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}
	...

08013c14 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	6039      	str	r1, [r7, #0]
 8013c1e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d101      	bne.n	8013c2a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013c26:	230a      	movs	r3, #10
 8013c28:	e03b      	b.n	8013ca2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	2b03      	cmp	r3, #3
 8013c30:	d834      	bhi.n	8013c9c <GetLastFcntDown+0x88>
 8013c32:	a201      	add	r2, pc, #4	@ (adr r2, 8013c38 <GetLastFcntDown+0x24>)
 8013c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c38:	08013c49 	.word	0x08013c49
 8013c3c:	08013c61 	.word	0x08013c61
 8013c40:	08013c79 	.word	0x08013c79
 8013c44:	08013c91 	.word	0x08013c91
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013c48:	4b18      	ldr	r3, [pc, #96]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	691a      	ldr	r2, [r3, #16]
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013c52:	4b16      	ldr	r3, [pc, #88]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	4b15      	ldr	r3, [pc, #84]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	6912      	ldr	r2, [r2, #16]
 8013c5c:	621a      	str	r2, [r3, #32]
            break;
 8013c5e:	e01f      	b.n	8013ca0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013c60:	4b12      	ldr	r3, [pc, #72]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	695a      	ldr	r2, [r3, #20]
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013c6a:	4b10      	ldr	r3, [pc, #64]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	6952      	ldr	r2, [r2, #20]
 8013c74:	621a      	str	r2, [r3, #32]
            break;
 8013c76:	e013      	b.n	8013ca0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013c78:	4b0c      	ldr	r3, [pc, #48]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	699a      	ldr	r2, [r3, #24]
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013c82:	4b0a      	ldr	r3, [pc, #40]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	4b09      	ldr	r3, [pc, #36]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	6992      	ldr	r2, [r2, #24]
 8013c8c:	621a      	str	r2, [r3, #32]
            break;
 8013c8e:	e007      	b.n	8013ca0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013c90:	4b06      	ldr	r3, [pc, #24]	@ (8013cac <GetLastFcntDown+0x98>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	69da      	ldr	r2, [r3, #28]
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	601a      	str	r2, [r3, #0]
            break;
 8013c9a:	e001      	b.n	8013ca0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013c9c:	2305      	movs	r3, #5
 8013c9e:	e000      	b.n	8013ca2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	370c      	adds	r7, #12
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bc80      	pop	{r7}
 8013caa:	4770      	bx	lr
 8013cac:	20003c84 	.word	0x20003c84

08013cb0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b084      	sub	sp, #16
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	6039      	str	r1, [r7, #0]
 8013cba:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013cc0:	f107 020c 	add.w	r2, r7, #12
 8013cc4:	79fb      	ldrb	r3, [r7, #7]
 8013cc6:	4611      	mov	r1, r2
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7ff ffa3 	bl	8013c14 <GetLastFcntDown>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d001      	beq.n	8013cd8 <CheckFCntDown+0x28>
    {
        return false;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	e00a      	b.n	8013cee <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d803      	bhi.n	8013ce8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013ce0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ce6:	d101      	bne.n	8013cec <CheckFCntDown+0x3c>
    {
        return true;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	e000      	b.n	8013cee <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013cec:	2300      	movs	r3, #0
    }
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
	...

08013cf8 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	4603      	mov	r3, r0
 8013d00:	6039      	str	r1, [r7, #0]
 8013d02:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013d04:	79fb      	ldrb	r3, [r7, #7]
 8013d06:	3b01      	subs	r3, #1
 8013d08:	2b03      	cmp	r3, #3
 8013d0a:	d81f      	bhi.n	8013d4c <UpdateFCntDown+0x54>
 8013d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8013d14 <UpdateFCntDown+0x1c>)
 8013d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d12:	bf00      	nop
 8013d14:	08013d25 	.word	0x08013d25
 8013d18:	08013d2f 	.word	0x08013d2f
 8013d1c:	08013d39 	.word	0x08013d39
 8013d20:	08013d43 	.word	0x08013d43
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013d24:	4b0c      	ldr	r3, [pc, #48]	@ (8013d58 <UpdateFCntDown+0x60>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	683a      	ldr	r2, [r7, #0]
 8013d2a:	611a      	str	r2, [r3, #16]
            break;
 8013d2c:	e00f      	b.n	8013d4e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8013d58 <UpdateFCntDown+0x60>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	683a      	ldr	r2, [r7, #0]
 8013d34:	615a      	str	r2, [r3, #20]
            break;
 8013d36:	e00a      	b.n	8013d4e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013d38:	4b07      	ldr	r3, [pc, #28]	@ (8013d58 <UpdateFCntDown+0x60>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	683a      	ldr	r2, [r7, #0]
 8013d3e:	619a      	str	r2, [r3, #24]
            break;
 8013d40:	e005      	b.n	8013d4e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013d42:	4b05      	ldr	r3, [pc, #20]	@ (8013d58 <UpdateFCntDown+0x60>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	61da      	str	r2, [r3, #28]
            break;
 8013d4a:	e000      	b.n	8013d4e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013d4c:	bf00      	nop
    }
}
 8013d4e:	bf00      	nop
 8013d50:	370c      	adds	r7, #12
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bc80      	pop	{r7}
 8013d56:	4770      	bx	lr
 8013d58:	20003c84 	.word	0x20003c84

08013d5c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013d62:	4b18      	ldr	r3, [pc, #96]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2200      	movs	r2, #0
 8013d68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013d6a:	4b16      	ldr	r3, [pc, #88]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d72:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013d74:	4b13      	ldr	r3, [pc, #76]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d7c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013d7e:	4b11      	ldr	r3, [pc, #68]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013d86:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013d88:	4b0e      	ldr	r3, [pc, #56]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	6992      	ldr	r2, [r2, #24]
 8013d92:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013d94:	2300      	movs	r3, #0
 8013d96:	607b      	str	r3, [r7, #4]
 8013d98:	e00b      	b.n	8013db2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8013dc4 <ResetFCnts+0x68>)
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	3306      	adds	r3, #6
 8013da2:	009b      	lsls	r3, r3, #2
 8013da4:	4413      	add	r3, r2
 8013da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013daa:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3301      	adds	r3, #1
 8013db0:	607b      	str	r3, [r7, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	ddf0      	ble.n	8013d9a <ResetFCnts+0x3e>
    }
}
 8013db8:	bf00      	nop
 8013dba:	bf00      	nop
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bc80      	pop	{r7}
 8013dc2:	4770      	bx	lr
 8013dc4:	20003c84 	.word	0x20003c84

08013dc8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013dd6:	2309      	movs	r3, #9
 8013dd8:	e01c      	b.n	8013e14 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013dda:	4a10      	ldr	r2, [pc, #64]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013de0:	4b0e      	ldr	r3, [pc, #56]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2228      	movs	r2, #40	@ 0x28
 8013de6:	2100      	movs	r1, #0
 8013de8:	4618      	mov	r0, r3
 8013dea:	f004 fdd3 	bl	8018994 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013dee:	4b0b      	ldr	r3, [pc, #44]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2201      	movs	r2, #1
 8013df4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013df6:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013dfe:	4b07      	ldr	r3, [pc, #28]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2201      	movs	r2, #1
 8013e04:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013e06:	4b05      	ldr	r3, [pc, #20]	@ (8013e1c <LoRaMacCryptoInit+0x54>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013e0e:	f7ff ffa5 	bl	8013d5c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	20003c84 	.word	0x20003c84

08013e20 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013e20:	b480      	push	{r7}
 8013e22:	b083      	sub	sp, #12
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013e28:	4b04      	ldr	r3, [pc, #16]	@ (8013e3c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	370c      	adds	r7, #12
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bc80      	pop	{r7}
 8013e3a:	4770      	bx	lr
 8013e3c:	20003c84 	.word	0x20003c84

08013e40 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013e40:	b480      	push	{r7}
 8013e42:	b083      	sub	sp, #12
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d101      	bne.n	8013e52 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e4e:	230a      	movs	r3, #10
 8013e50:	e006      	b.n	8013e60 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013e52:	4b06      	ldr	r3, [pc, #24]	@ (8013e6c <LoRaMacCryptoGetFCntUp+0x2c>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013e5e:	2300      	movs	r3, #0
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bc80      	pop	{r7}
 8013e68:	4770      	bx	lr
 8013e6a:	bf00      	nop
 8013e6c:	20003c84 	.word	0x20003c84

08013e70 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013e74:	b08a      	sub	sp, #40	@ 0x28
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	613a      	str	r2, [r7, #16]
 8013e7a:	60fb      	str	r3, [r7, #12]
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	75fb      	strb	r3, [r7, #23]
 8013e80:	460b      	mov	r3, r1
 8013e82:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013e8c:	2313      	movs	r3, #19
 8013e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d101      	bne.n	8013e9c <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e98:	230a      	movs	r3, #10
 8013e9a:	e057      	b.n	8013f4c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013e9c:	f107 021c 	add.w	r2, r7, #28
 8013ea0:	7dfb      	ldrb	r3, [r7, #23]
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff feb5 	bl	8013c14 <GetLastFcntDown>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d002      	beq.n	8013ebe <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013ebc:	e046      	b.n	8013f4c <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013ec4:	d103      	bne.n	8013ece <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	693a      	ldr	r2, [r7, #16]
 8013eca:	601a      	str	r2, [r3, #0]
 8013ecc:	e01e      	b.n	8013f0c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	693a      	ldr	r2, [r7, #16]
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	dd05      	ble.n	8013eea <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013ede:	69fa      	ldr	r2, [r7, #28]
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee2:	441a      	add	r2, r3
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	601a      	str	r2, [r3, #0]
 8013ee8:	e010      	b.n	8013f0c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8013eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d104      	bne.n	8013efa <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013ef0:	69fa      	ldr	r2, [r7, #28]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013ef6:	2307      	movs	r3, #7
 8013ef8:	e028      	b.n	8013f4c <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013efa:	69fb      	ldr	r3, [r7, #28]
 8013efc:	0c1b      	lsrs	r3, r3, #16
 8013efe:	041b      	lsls	r3, r3, #16
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	4413      	add	r3, r2
 8013f04:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013f0c:	4b12      	ldr	r3, [pc, #72]	@ (8013f58 <LoRaMacCryptoGetFCntDown+0xe8>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	789b      	ldrb	r3, [r3, #2]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d119      	bne.n	8013f4a <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	603b      	str	r3, [r7, #0]
 8013f1e:	607a      	str	r2, [r7, #4]
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	2200      	movs	r2, #0
 8013f24:	469a      	mov	sl, r3
 8013f26:	4693      	mov	fp, r2
 8013f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	ebb1 040a 	subs.w	r4, r1, sl
 8013f32:	eb63 050b 	sbc.w	r5, r3, fp
 8013f36:	8abb      	ldrh	r3, [r7, #20]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	4698      	mov	r8, r3
 8013f3c:	4691      	mov	r9, r2
 8013f3e:	4544      	cmp	r4, r8
 8013f40:	eb75 0309 	sbcs.w	r3, r5, r9
 8013f44:	db01      	blt.n	8013f4a <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013f46:	2308      	movs	r3, #8
 8013f48:	e000      	b.n	8013f4c <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3728      	adds	r7, #40	@ 0x28
 8013f50:	46bd      	mov	sp, r7
 8013f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013f56:	bf00      	nop
 8013f58:	20003c84 	.word	0x20003c84

08013f5c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013f5c:	b480      	push	{r7}
 8013f5e:	b085      	sub	sp, #20
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d101      	bne.n	8013f6e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f6a:	230a      	movs	r3, #10
 8013f6c:	e017      	b.n	8013f9e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f6e:	2300      	movs	r3, #0
 8013f70:	60fb      	str	r3, [r7, #12]
 8013f72:	e010      	b.n	8013f96 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013f74:	4b0c      	ldr	r3, [pc, #48]	@ (8013fa8 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013f76:	6819      	ldr	r1, [r3, #0]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	222c      	movs	r2, #44	@ 0x2c
 8013f7c:	fb02 f303 	mul.w	r3, r2, r3
 8013f80:	687a      	ldr	r2, [r7, #4]
 8013f82:	4413      	add	r3, r2
 8013f84:	68fa      	ldr	r2, [r7, #12]
 8013f86:	3206      	adds	r2, #6
 8013f88:	0092      	lsls	r2, r2, #2
 8013f8a:	440a      	add	r2, r1
 8013f8c:	3204      	adds	r2, #4
 8013f8e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	3301      	adds	r3, #1
 8013f94:	60fb      	str	r3, [r7, #12]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	ddeb      	ble.n	8013f74 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f9c:	2300      	movs	r3, #0
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3714      	adds	r7, #20
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bc80      	pop	{r7}
 8013fa6:	4770      	bx	lr
 8013fa8:	20003c84 	.word	0x20003c84

08013fac <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b082      	sub	sp, #8
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	6039      	str	r1, [r7, #0]
 8013fb6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013fb8:	79fb      	ldrb	r3, [r7, #7]
 8013fba:	6839      	ldr	r1, [r7, #0]
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f8 fd75 	bl	800caac <SecureElementSetKey>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d001      	beq.n	8013fcc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fc8:	230f      	movs	r3, #15
 8013fca:	e018      	b.n	8013ffe <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013fcc:	79fb      	ldrb	r3, [r7, #7]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d114      	bne.n	8013ffc <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8014008 <LoRaMacCryptoSetKey+0x5c>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	789b      	ldrb	r3, [r3, #2]
 8013fd8:	79fa      	ldrb	r2, [r7, #7]
 8013fda:	4611      	mov	r1, r2
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f000 fa3d 	bl	801445c <LoRaMacCryptoDeriveMcRootKey>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d001      	beq.n	8013fec <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fe8:	230f      	movs	r3, #15
 8013fea:	e008      	b.n	8013ffe <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013fec:	2004      	movs	r0, #4
 8013fee:	f000 fa60 	bl	80144b2 <LoRaMacCryptoDeriveMcKEKey>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d001      	beq.n	8013ffc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ff8:	230f      	movs	r3, #15
 8013ffa:	e000      	b.n	8013ffe <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	20003c84 	.word	0x20003c84

0801400c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b086      	sub	sp, #24
 8014010:	af02      	add	r7, sp, #8
 8014012:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d101      	bne.n	801401e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801401a:	230a      	movs	r3, #10
 801401c:	e033      	b.n	8014086 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801401e:	2301      	movs	r3, #1
 8014020:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8014026:	f107 0308 	add.w	r3, r7, #8
 801402a:	4618      	mov	r0, r3
 801402c:	f7f8 ff0e 	bl	800ce4c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	4b17      	ldr	r3, [pc, #92]	@ (8014090 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	b292      	uxth	r2, r2
 8014038:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801403a:	4b15      	ldr	r3, [pc, #84]	@ (8014090 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	889a      	ldrh	r2, [r3, #4]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 fc14 	bl	8014872 <LoRaMacSerializerJoinRequest>
 801404a:	4603      	mov	r3, r0
 801404c:	2b00      	cmp	r3, #0
 801404e:	d001      	beq.n	8014054 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014050:	2311      	movs	r3, #17
 8014052:	e018      	b.n	8014086 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6819      	ldr	r1, [r3, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	3318      	adds	r3, #24
 801405c:	7bfa      	ldrb	r2, [r7, #15]
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	4613      	mov	r3, r2
 8014062:	2213      	movs	r2, #19
 8014064:	2000      	movs	r0, #0
 8014066:	f7f8 fd7f 	bl	800cb68 <SecureElementComputeAesCmac>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d001      	beq.n	8014074 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014070:	230f      	movs	r3, #15
 8014072:	e008      	b.n	8014086 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f000 fbfc 	bl	8014872 <LoRaMacSerializerJoinRequest>
 801407a:	4603      	mov	r3, r0
 801407c:	2b00      	cmp	r3, #0
 801407e:	d001      	beq.n	8014084 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014080:	2311      	movs	r3, #17
 8014082:	e000      	b.n	8014086 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014084:	2300      	movs	r3, #0
}
 8014086:	4618      	mov	r0, r3
 8014088:	3710      	adds	r7, #16
 801408a:	46bd      	mov	sp, r7
 801408c:	bd80      	pop	{r7, pc}
 801408e:	bf00      	nop
 8014090:	20003c84 	.word	0x20003c84

08014094 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014094:	b590      	push	{r4, r7, lr}
 8014096:	b097      	sub	sp, #92	@ 0x5c
 8014098:	af04      	add	r7, sp, #16
 801409a:	4603      	mov	r3, r0
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <LoRaMacCryptoHandleJoinAccept+0x1a>
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140ae:	230a      	movs	r3, #10
 80140b0:	e0bd      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80140b2:	2313      	movs	r3, #19
 80140b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80140b8:	2300      	movs	r3, #0
 80140ba:	61bb      	str	r3, [r7, #24]
 80140bc:	f107 031c 	add.w	r3, r7, #28
 80140c0:	221d      	movs	r2, #29
 80140c2:	2100      	movs	r1, #0
 80140c4:	4618      	mov	r0, r3
 80140c6:	f009 f869 	bl	801d19c <memset>
    uint8_t versionMinor         = 0;
 80140ca:	2300      	movs	r3, #0
 80140cc:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80140ce:	4b5a      	ldr	r3, [pc, #360]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	889b      	ldrh	r3, [r3, #4]
 80140d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681c      	ldr	r4, [r3, #0]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	791b      	ldrb	r3, [r3, #4]
 80140e0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80140e4:	7bf8      	ldrb	r0, [r7, #15]
 80140e6:	f107 0217 	add.w	r2, r7, #23
 80140ea:	9202      	str	r2, [sp, #8]
 80140ec:	f107 0218 	add.w	r2, r7, #24
 80140f0:	9201      	str	r2, [sp, #4]
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	4623      	mov	r3, r4
 80140f6:	460a      	mov	r2, r1
 80140f8:	68b9      	ldr	r1, [r7, #8]
 80140fa:	f7f8 fe29 	bl	800cd50 <SecureElementProcessJoinAccept>
 80140fe:	4603      	mov	r3, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d001      	beq.n	8014108 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014104:	230f      	movs	r3, #15
 8014106:	e092      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6818      	ldr	r0, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	791b      	ldrb	r3, [r3, #4]
 8014110:	461a      	mov	r2, r3
 8014112:	f107 0318 	add.w	r3, r7, #24
 8014116:	4619      	mov	r1, r3
 8014118:	f004 fc01 	bl	801891e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 f9eb 	bl	80144f8 <LoRaMacParserJoinAccept>
 8014122:	4603      	mov	r3, r0
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014128:	2310      	movs	r3, #16
 801412a:	e080      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	799b      	ldrb	r3, [r3, #6]
 8014130:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	79db      	ldrb	r3, [r3, #7]
 8014136:	021b      	lsls	r3, r3, #8
 8014138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801413a:	4313      	orrs	r3, r2
 801413c:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	7a1b      	ldrb	r3, [r3, #8]
 8014142:	041b      	lsls	r3, r3, #16
 8014144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014146:	4313      	orrs	r3, r2
 8014148:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801414a:	4b3b      	ldr	r3, [pc, #236]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014152:	429a      	cmp	r2, r3
 8014154:	d010      	beq.n	8014178 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014156:	4b38      	ldr	r3, [pc, #224]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801415c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2100      	movs	r1, #0
 8014162:	4618      	mov	r0, r3
 8014164:	f000 f97a 	bl	801445c <LoRaMacCryptoDeriveMcRootKey>
 8014168:	4603      	mov	r3, r0
 801416a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801416e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014172:	2b00      	cmp	r3, #0
 8014174:	d005      	beq.n	8014182 <LoRaMacCryptoHandleJoinAccept+0xee>
 8014176:	e001      	b.n	801417c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014178:	2303      	movs	r3, #3
 801417a:	e058      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 801417c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014180:	e055      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014182:	2004      	movs	r0, #4
 8014184:	f000 f995 	bl	80144b2 <LoRaMacCryptoDeriveMcKEKey>
 8014188:	4603      	mov	r3, r0
 801418a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801418e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014192:	2b00      	cmp	r3, #0
 8014194:	d002      	beq.n	801419c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014196:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801419a:	e048      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	7a5b      	ldrb	r3, [r3, #9]
 80141a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	7a9b      	ldrb	r3, [r3, #10]
 80141a6:	021b      	lsls	r3, r3, #8
 80141a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141aa:	4313      	orrs	r3, r2
 80141ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	7adb      	ldrb	r3, [r3, #11]
 80141b2:	041b      	lsls	r3, r3, #16
 80141b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141b6:	4313      	orrs	r3, r2
 80141b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80141ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80141be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141c2:	2003      	movs	r0, #3
 80141c4:	f7ff fcd6 	bl	8013b74 <DeriveSessionKey10x>
 80141c8:	4603      	mov	r3, r0
 80141ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d002      	beq.n	80141dc <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80141d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141da:	e028      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80141dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80141e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80141e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141e4:	2002      	movs	r0, #2
 80141e6:	f7ff fcc5 	bl	8013b74 <DeriveSessionKey10x>
 80141ea:	4603      	mov	r3, r0
 80141ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80141f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d002      	beq.n	80141fe <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80141f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80141fc:	e017      	b.n	801422e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80141fe:	4b0e      	ldr	r3, [pc, #56]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	7dfa      	ldrb	r2, [r7, #23]
 8014204:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014206:	4b0c      	ldr	r3, [pc, #48]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2200      	movs	r2, #0
 801420c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801420e:	4b0a      	ldr	r3, [pc, #40]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014216:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014218:	4b07      	ldr	r3, [pc, #28]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014220:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014222:	4b05      	ldr	r3, [pc, #20]	@ (8014238 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801422a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801422c:	2300      	movs	r3, #0
}
 801422e:	4618      	mov	r0, r3
 8014230:	374c      	adds	r7, #76	@ 0x4c
 8014232:	46bd      	mov	sp, r7
 8014234:	bd90      	pop	{r4, r7, pc}
 8014236:	bf00      	nop
 8014238:	20003c84 	.word	0x20003c84

0801423c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801423c:	b590      	push	{r4, r7, lr}
 801423e:	b08b      	sub	sp, #44	@ 0x2c
 8014240:	af04      	add	r7, sp, #16
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	607b      	str	r3, [r7, #4]
 8014246:	460b      	mov	r3, r1
 8014248:	72fb      	strb	r3, [r7, #11]
 801424a:	4613      	mov	r3, r2
 801424c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801424e:	2313      	movs	r3, #19
 8014250:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014252:	2303      	movs	r3, #3
 8014254:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d101      	bne.n	8014260 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801425c:	230a      	movs	r3, #10
 801425e:	e05e      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014260:	4b31      	ldr	r3, [pc, #196]	@ (8014328 <LoRaMacCryptoSecureMessage+0xec>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	68db      	ldr	r3, [r3, #12]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	429a      	cmp	r2, r3
 801426a:	d201      	bcs.n	8014270 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801426c:	2306      	movs	r3, #6
 801426e:	e056      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d101      	bne.n	801427e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801427a:	2302      	movs	r3, #2
 801427c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801427e:	4b2a      	ldr	r3, [pc, #168]	@ (8014328 <LoRaMacCryptoSecureMessage+0xec>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	68fa      	ldr	r2, [r7, #12]
 8014286:	429a      	cmp	r2, r3
 8014288:	d916      	bls.n	80142b8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014294:	b219      	sxth	r1, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	689c      	ldr	r4, [r3, #8]
 801429a:	7dfa      	ldrb	r2, [r7, #23]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	2300      	movs	r3, #0
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	4623      	mov	r3, r4
 80142a6:	f7ff fa71 	bl	801378c <PayloadEncrypt>
 80142aa:	4603      	mov	r3, r0
 80142ac:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142ae:	7dbb      	ldrb	r3, [r7, #22]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d001      	beq.n	80142b8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80142b4:	7dbb      	ldrb	r3, [r7, #22]
 80142b6:	e032      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f000 fb5c 	bl	8014976 <LoRaMacSerializerData>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d001      	beq.n	80142c8 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80142c4:	2311      	movs	r3, #17
 80142c6:	e02a      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80142c8:	2302      	movs	r3, #2
 80142ca:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6818      	ldr	r0, [r3, #0]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	791b      	ldrb	r3, [r3, #4]
 80142d4:	3b04      	subs	r3, #4
 80142d6:	b299      	uxth	r1, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	689b      	ldr	r3, [r3, #8]
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	322c      	adds	r2, #44	@ 0x2c
 80142e0:	7dfc      	ldrb	r4, [r7, #23]
 80142e2:	9203      	str	r2, [sp, #12]
 80142e4:	68fa      	ldr	r2, [r7, #12]
 80142e6:	9202      	str	r2, [sp, #8]
 80142e8:	9301      	str	r3, [sp, #4]
 80142ea:	2300      	movs	r3, #0
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	2300      	movs	r3, #0
 80142f0:	4622      	mov	r2, r4
 80142f2:	f7ff fb4c 	bl	801398e <ComputeCmacB0>
 80142f6:	4603      	mov	r3, r0
 80142f8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80142fa:	7dbb      	ldrb	r3, [r7, #22]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d001      	beq.n	8014304 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014300:	7dbb      	ldrb	r3, [r7, #22]
 8014302:	e00c      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 fb36 	bl	8014976 <LoRaMacSerializerData>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d001      	beq.n	8014314 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014310:	2311      	movs	r3, #17
 8014312:	e004      	b.n	801431e <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014314:	4b04      	ldr	r3, [pc, #16]	@ (8014328 <LoRaMacCryptoSecureMessage+0xec>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801431c:	2300      	movs	r3, #0
}
 801431e:	4618      	mov	r0, r3
 8014320:	371c      	adds	r7, #28
 8014322:	46bd      	mov	sp, r7
 8014324:	bd90      	pop	{r4, r7, pc}
 8014326:	bf00      	nop
 8014328:	20003c84 	.word	0x20003c84

0801432c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801432c:	b590      	push	{r4, r7, lr}
 801432e:	b08b      	sub	sp, #44	@ 0x2c
 8014330:	af04      	add	r7, sp, #16
 8014332:	60b9      	str	r1, [r7, #8]
 8014334:	607b      	str	r3, [r7, #4]
 8014336:	4603      	mov	r3, r0
 8014338:	73fb      	strb	r3, [r7, #15]
 801433a:	4613      	mov	r3, r2
 801433c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014340:	2b00      	cmp	r3, #0
 8014342:	d101      	bne.n	8014348 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014344:	230a      	movs	r3, #10
 8014346:	e083      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014348:	7bbb      	ldrb	r3, [r7, #14]
 801434a:	6879      	ldr	r1, [r7, #4]
 801434c:	4618      	mov	r0, r3
 801434e:	f7ff fcaf 	bl	8013cb0 <CheckFCntDown>
 8014352:	4603      	mov	r3, r0
 8014354:	f083 0301 	eor.w	r3, r3, #1
 8014358:	b2db      	uxtb	r3, r3
 801435a:	2b00      	cmp	r3, #0
 801435c:	d001      	beq.n	8014362 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801435e:	2306      	movs	r3, #6
 8014360:	e076      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014362:	2313      	movs	r3, #19
 8014364:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014366:	2303      	movs	r3, #3
 8014368:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801436a:	2302      	movs	r3, #2
 801436c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801436e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014370:	f000 f98d 	bl	801468e <LoRaMacParserData>
 8014374:	4603      	mov	r3, r0
 8014376:	2b00      	cmp	r3, #0
 8014378:	d001      	beq.n	801437e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801437a:	2310      	movs	r3, #16
 801437c:	e068      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801437e:	f107 0210 	add.w	r2, r7, #16
 8014382:	7bfb      	ldrb	r3, [r7, #15]
 8014384:	4611      	mov	r1, r2
 8014386:	4618      	mov	r0, r3
 8014388:	f7ff fbce 	bl	8013b28 <GetKeyAddrItem>
 801438c:	4603      	mov	r3, r0
 801438e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014390:	7d7b      	ldrb	r3, [r7, #21]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d001      	beq.n	801439a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014396:	7d7b      	ldrb	r3, [r7, #21]
 8014398:	e05a      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	785b      	ldrb	r3, [r3, #1]
 801439e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	789b      	ldrb	r3, [r3, #2]
 80143a4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80143a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a8:	689b      	ldr	r3, [r3, #8]
 80143aa:	68ba      	ldr	r2, [r7, #8]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d001      	beq.n	80143b4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80143b0:	2302      	movs	r3, #2
 80143b2:	e04d      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80143b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b6:	7b1b      	ldrb	r3, [r3, #12]
 80143b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	2b00      	cmp	r3, #0
 80143c0:	bf14      	ite	ne
 80143c2:	2301      	movne	r3, #1
 80143c4:	2300      	moveq	r3, #0
 80143c6:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80143c8:	4b23      	ldr	r3, [pc, #140]	@ (8014458 <LoRaMacCryptoUnsecureMessage+0x12c>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	789b      	ldrb	r3, [r3, #2]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80143d2:	2300      	movs	r3, #0
 80143d4:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	6818      	ldr	r0, [r3, #0]
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	791b      	ldrb	r3, [r3, #4]
 80143de:	3b04      	subs	r3, #4
 80143e0:	b299      	uxth	r1, r3
 80143e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143e6:	7dbc      	ldrb	r4, [r7, #22]
 80143e8:	7d3a      	ldrb	r2, [r7, #20]
 80143ea:	9303      	str	r3, [sp, #12]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	9302      	str	r3, [sp, #8]
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	2301      	movs	r3, #1
 80143f6:	9300      	str	r3, [sp, #0]
 80143f8:	4623      	mov	r3, r4
 80143fa:	f7ff fb06 	bl	8013a0a <VerifyCmacB0>
 80143fe:	4603      	mov	r3, r0
 8014400:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014402:	7d7b      	ldrb	r3, [r7, #21]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d001      	beq.n	801440c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014408:	7d7b      	ldrb	r3, [r7, #21]
 801440a:	e021      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014416:	2302      	movs	r3, #2
 8014418:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801441c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014424:	b219      	sxth	r1, r3
 8014426:	7dfa      	ldrb	r2, [r7, #23]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	9301      	str	r3, [sp, #4]
 801442c:	2301      	movs	r3, #1
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	f7ff f9ab 	bl	801378c <PayloadEncrypt>
 8014436:	4603      	mov	r3, r0
 8014438:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801443a:	7d7b      	ldrb	r3, [r7, #21]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d001      	beq.n	8014444 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014440:	7d7b      	ldrb	r3, [r7, #21]
 8014442:	e005      	b.n	8014450 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014444:	7bbb      	ldrb	r3, [r7, #14]
 8014446:	6879      	ldr	r1, [r7, #4]
 8014448:	4618      	mov	r0, r3
 801444a:	f7ff fc55 	bl	8013cf8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801444e:	2300      	movs	r3, #0
}
 8014450:	4618      	mov	r0, r3
 8014452:	371c      	adds	r7, #28
 8014454:	46bd      	mov	sp, r7
 8014456:	bd90      	pop	{r4, r7, pc}
 8014458:	20003c84 	.word	0x20003c84

0801445c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b086      	sub	sp, #24
 8014460:	af00      	add	r7, sp, #0
 8014462:	4603      	mov	r3, r0
 8014464:	460a      	mov	r2, r1
 8014466:	71fb      	strb	r3, [r7, #7]
 8014468:	4613      	mov	r3, r2
 801446a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801446c:	79bb      	ldrb	r3, [r7, #6]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d001      	beq.n	8014476 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014472:	230b      	movs	r3, #11
 8014474:	e019      	b.n	80144aa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014476:	2300      	movs	r3, #0
 8014478:	60bb      	str	r3, [r7, #8]
 801447a:	f107 030c 	add.w	r3, r7, #12
 801447e:	2200      	movs	r2, #0
 8014480:	601a      	str	r2, [r3, #0]
 8014482:	605a      	str	r2, [r3, #4]
 8014484:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014486:	79fb      	ldrb	r3, [r7, #7]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d101      	bne.n	8014490 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 801448c:	2320      	movs	r3, #32
 801448e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014490:	79b9      	ldrb	r1, [r7, #6]
 8014492:	f107 0308 	add.w	r3, r7, #8
 8014496:	2204      	movs	r2, #4
 8014498:	4618      	mov	r0, r3
 801449a:	f7f8 fc19 	bl	800ccd0 <SecureElementDeriveAndStoreKey>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80144a4:	230f      	movs	r3, #15
 80144a6:	e000      	b.n	80144aa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144a8:	2300      	movs	r3, #0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}

080144b2 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b086      	sub	sp, #24
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	4603      	mov	r3, r0
 80144ba:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80144bc:	79fb      	ldrb	r3, [r7, #7]
 80144be:	2b04      	cmp	r3, #4
 80144c0:	d001      	beq.n	80144c6 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80144c2:	230b      	movs	r3, #11
 80144c4:	e014      	b.n	80144f0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80144c6:	2300      	movs	r3, #0
 80144c8:	60bb      	str	r3, [r7, #8]
 80144ca:	f107 030c 	add.w	r3, r7, #12
 80144ce:	2200      	movs	r2, #0
 80144d0:	601a      	str	r2, [r3, #0]
 80144d2:	605a      	str	r2, [r3, #4]
 80144d4:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80144d6:	79f9      	ldrb	r1, [r7, #7]
 80144d8:	f107 0308 	add.w	r3, r7, #8
 80144dc:	227f      	movs	r2, #127	@ 0x7f
 80144de:	4618      	mov	r0, r3
 80144e0:	f7f8 fbf6 	bl	800ccd0 <SecureElementDeriveAndStoreKey>
 80144e4:	4603      	mov	r3, r0
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d001      	beq.n	80144ee <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80144ea:	230f      	movs	r3, #15
 80144ec:	e000      	b.n	80144f0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3718      	adds	r7, #24
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d003      	beq.n	801450e <LoRaMacParserJoinAccept+0x16>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d101      	bne.n	8014512 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801450e:	2302      	movs	r3, #2
 8014510:	e0b9      	b.n	8014686 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014512:	2300      	movs	r3, #0
 8014514:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	89fb      	ldrh	r3, [r7, #14]
 801451c:	1c59      	adds	r1, r3, #1
 801451e:	81f9      	strh	r1, [r7, #14]
 8014520:	4413      	add	r3, r2
 8014522:	781a      	ldrb	r2, [r3, #0]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	1d98      	adds	r0, r3, #6
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681a      	ldr	r2, [r3, #0]
 8014530:	89fb      	ldrh	r3, [r7, #14]
 8014532:	4413      	add	r3, r2
 8014534:	2203      	movs	r2, #3
 8014536:	4619      	mov	r1, r3
 8014538:	f004 f9f1 	bl	801891e <memcpy1>
    bufItr = bufItr + 3;
 801453c:	89fb      	ldrh	r3, [r7, #14]
 801453e:	3303      	adds	r3, #3
 8014540:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f103 0009 	add.w	r0, r3, #9
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	89fb      	ldrh	r3, [r7, #14]
 801454e:	4413      	add	r3, r2
 8014550:	2203      	movs	r2, #3
 8014552:	4619      	mov	r1, r3
 8014554:	f004 f9e3 	bl	801891e <memcpy1>
    bufItr = bufItr + 3;
 8014558:	89fb      	ldrh	r3, [r7, #14]
 801455a:	3303      	adds	r3, #3
 801455c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681a      	ldr	r2, [r3, #0]
 8014562:	89fb      	ldrh	r3, [r7, #14]
 8014564:	1c59      	adds	r1, r3, #1
 8014566:	81f9      	strh	r1, [r7, #14]
 8014568:	4413      	add	r3, r2
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	461a      	mov	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	89fb      	ldrh	r3, [r7, #14]
 8014578:	1c59      	adds	r1, r3, #1
 801457a:	81f9      	strh	r1, [r7, #14]
 801457c:	4413      	add	r3, r2
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	021a      	lsls	r2, r3, #8
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	431a      	orrs	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	89fb      	ldrh	r3, [r7, #14]
 8014592:	1c59      	adds	r1, r3, #1
 8014594:	81f9      	strh	r1, [r7, #14]
 8014596:	4413      	add	r3, r2
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	041a      	lsls	r2, r3, #16
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	431a      	orrs	r2, r3
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	89fb      	ldrh	r3, [r7, #14]
 80145ac:	1c59      	adds	r1, r3, #1
 80145ae:	81f9      	strh	r1, [r7, #14]
 80145b0:	4413      	add	r3, r2
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	061a      	lsls	r2, r3, #24
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	431a      	orrs	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	89fb      	ldrh	r3, [r7, #14]
 80145c6:	1c59      	adds	r1, r3, #1
 80145c8:	81f9      	strh	r1, [r7, #14]
 80145ca:	4413      	add	r3, r2
 80145cc:	781a      	ldrb	r2, [r3, #0]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	89fb      	ldrh	r3, [r7, #14]
 80145d8:	1c59      	adds	r1, r3, #1
 80145da:	81f9      	strh	r1, [r7, #14]
 80145dc:	4413      	add	r3, r2
 80145de:	781a      	ldrb	r2, [r3, #0]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	791b      	ldrb	r3, [r3, #4]
 80145e8:	1f1a      	subs	r2, r3, #4
 80145ea:	89fb      	ldrh	r3, [r7, #14]
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	2b10      	cmp	r3, #16
 80145f0:	d10e      	bne.n	8014610 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f103 0012 	add.w	r0, r3, #18
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	89fb      	ldrh	r3, [r7, #14]
 80145fe:	4413      	add	r3, r2
 8014600:	2210      	movs	r2, #16
 8014602:	4619      	mov	r1, r3
 8014604:	f004 f98b 	bl	801891e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014608:	89fb      	ldrh	r3, [r7, #14]
 801460a:	3310      	adds	r3, #16
 801460c:	81fb      	strh	r3, [r7, #14]
 801460e:	e008      	b.n	8014622 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	791b      	ldrb	r3, [r3, #4]
 8014614:	1f1a      	subs	r2, r3, #4
 8014616:	89fb      	ldrh	r3, [r7, #14]
 8014618:	1ad3      	subs	r3, r2, r3
 801461a:	2b00      	cmp	r3, #0
 801461c:	dd01      	ble.n	8014622 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801461e:	2301      	movs	r3, #1
 8014620:	e031      	b.n	8014686 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	89fb      	ldrh	r3, [r7, #14]
 8014628:	1c59      	adds	r1, r3, #1
 801462a:	81f9      	strh	r1, [r7, #14]
 801462c:	4413      	add	r3, r2
 801462e:	781b      	ldrb	r3, [r3, #0]
 8014630:	461a      	mov	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	89fb      	ldrh	r3, [r7, #14]
 801463c:	1c59      	adds	r1, r3, #1
 801463e:	81f9      	strh	r1, [r7, #14]
 8014640:	4413      	add	r3, r2
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	021a      	lsls	r2, r3, #8
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801464a:	431a      	orrs	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	89fb      	ldrh	r3, [r7, #14]
 8014656:	1c59      	adds	r1, r3, #1
 8014658:	81f9      	strh	r1, [r7, #14]
 801465a:	4413      	add	r3, r2
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	041a      	lsls	r2, r3, #16
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014664:	431a      	orrs	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681a      	ldr	r2, [r3, #0]
 801466e:	89fb      	ldrh	r3, [r7, #14]
 8014670:	1c59      	adds	r1, r3, #1
 8014672:	81f9      	strh	r1, [r7, #14]
 8014674:	4413      	add	r3, r2
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	061a      	lsls	r2, r3, #24
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801467e:	431a      	orrs	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014684:	2300      	movs	r3, #0
}
 8014686:	4618      	mov	r0, r3
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b084      	sub	sp, #16
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d003      	beq.n	80146a4 <LoRaMacParserData+0x16>
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d101      	bne.n	80146a8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80146a4:	2302      	movs	r3, #2
 80146a6:	e0e0      	b.n	801486a <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80146a8:	2300      	movs	r3, #0
 80146aa:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	89fb      	ldrh	r3, [r7, #14]
 80146b2:	1c59      	adds	r1, r3, #1
 80146b4:	81f9      	strh	r1, [r7, #14]
 80146b6:	4413      	add	r3, r2
 80146b8:	781a      	ldrb	r2, [r3, #0]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681a      	ldr	r2, [r3, #0]
 80146c2:	89fb      	ldrh	r3, [r7, #14]
 80146c4:	1c59      	adds	r1, r3, #1
 80146c6:	81f9      	strh	r1, [r7, #14]
 80146c8:	4413      	add	r3, r2
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	89fb      	ldrh	r3, [r7, #14]
 80146d8:	1c59      	adds	r1, r3, #1
 80146da:	81f9      	strh	r1, [r7, #14]
 80146dc:	4413      	add	r3, r2
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	021a      	lsls	r2, r3, #8
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	431a      	orrs	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	89fb      	ldrh	r3, [r7, #14]
 80146f2:	1c59      	adds	r1, r3, #1
 80146f4:	81f9      	strh	r1, [r7, #14]
 80146f6:	4413      	add	r3, r2
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	041a      	lsls	r2, r3, #16
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	431a      	orrs	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	89fb      	ldrh	r3, [r7, #14]
 801470c:	1c59      	adds	r1, r3, #1
 801470e:	81f9      	strh	r1, [r7, #14]
 8014710:	4413      	add	r3, r2
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	061a      	lsls	r2, r3, #24
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	431a      	orrs	r2, r3
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681a      	ldr	r2, [r3, #0]
 8014724:	89fb      	ldrh	r3, [r7, #14]
 8014726:	1c59      	adds	r1, r3, #1
 8014728:	81f9      	strh	r1, [r7, #14]
 801472a:	4413      	add	r3, r2
 801472c:	781a      	ldrb	r2, [r3, #0]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	89fb      	ldrh	r3, [r7, #14]
 8014738:	1c59      	adds	r1, r3, #1
 801473a:	81f9      	strh	r1, [r7, #14]
 801473c:	4413      	add	r3, r2
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	89fb      	ldrh	r3, [r7, #14]
 801474c:	1c59      	adds	r1, r3, #1
 801474e:	81f9      	strh	r1, [r7, #14]
 8014750:	4413      	add	r3, r2
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	0219      	lsls	r1, r3, #8
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	89db      	ldrh	r3, [r3, #14]
 801475a:	b21a      	sxth	r2, r3
 801475c:	b20b      	sxth	r3, r1
 801475e:	4313      	orrs	r3, r2
 8014760:	b21b      	sxth	r3, r3
 8014762:	b29a      	uxth	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f103 0010 	add.w	r0, r3, #16
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	89fb      	ldrh	r3, [r7, #14]
 8014774:	18d1      	adds	r1, r2, r3
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	7b1b      	ldrb	r3, [r3, #12]
 801477a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801477e:	b2db      	uxtb	r3, r3
 8014780:	461a      	mov	r2, r3
 8014782:	f004 f8cc 	bl	801891e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	7b1b      	ldrb	r3, [r3, #12]
 801478a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801478e:	b2db      	uxtb	r3, r3
 8014790:	461a      	mov	r2, r3
 8014792:	89fb      	ldrh	r3, [r7, #14]
 8014794:	4413      	add	r3, r2
 8014796:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2200      	movs	r2, #0
 801479c:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	791b      	ldrb	r3, [r3, #4]
 80147ac:	461a      	mov	r2, r3
 80147ae:	89fb      	ldrh	r3, [r7, #14]
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	2b04      	cmp	r3, #4
 80147b4:	dd27      	ble.n	8014806 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	89fb      	ldrh	r3, [r7, #14]
 80147bc:	1c59      	adds	r1, r3, #1
 80147be:	81f9      	strh	r1, [r7, #14]
 80147c0:	4413      	add	r3, r2
 80147c2:	781a      	ldrb	r2, [r3, #0]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	791a      	ldrb	r2, [r3, #4]
 80147ce:	89fb      	ldrh	r3, [r7, #14]
 80147d0:	b2db      	uxtb	r3, r3
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	b2db      	uxtb	r3, r3
 80147d6:	3b04      	subs	r3, #4
 80147d8:	b2da      	uxtb	r2, r3
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	89fb      	ldrh	r3, [r7, #14]
 80147ea:	18d1      	adds	r1, r2, r3
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147f2:	461a      	mov	r2, r3
 80147f4:	f004 f893 	bl	801891e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147fe:	461a      	mov	r2, r3
 8014800:	89fb      	ldrh	r3, [r7, #14]
 8014802:	4413      	add	r3, r2
 8014804:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	791b      	ldrb	r3, [r3, #4]
 801480e:	3b04      	subs	r3, #4
 8014810:	4413      	add	r3, r2
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	461a      	mov	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6819      	ldr	r1, [r3, #0]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	791b      	ldrb	r3, [r3, #4]
 8014826:	3b03      	subs	r3, #3
 8014828:	440b      	add	r3, r1
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	021b      	lsls	r3, r3, #8
 801482e:	431a      	orrs	r2, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6819      	ldr	r1, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	791b      	ldrb	r3, [r3, #4]
 8014840:	3b02      	subs	r3, #2
 8014842:	440b      	add	r3, r1
 8014844:	781b      	ldrb	r3, [r3, #0]
 8014846:	041b      	lsls	r3, r3, #16
 8014848:	431a      	orrs	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	6819      	ldr	r1, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	791b      	ldrb	r3, [r3, #4]
 801485a:	3b01      	subs	r3, #1
 801485c:	440b      	add	r3, r1
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	061b      	lsls	r3, r3, #24
 8014862:	431a      	orrs	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014868:	2300      	movs	r3, #0
}
 801486a:	4618      	mov	r0, r3
 801486c:	3710      	adds	r7, #16
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b084      	sub	sp, #16
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d003      	beq.n	8014888 <LoRaMacSerializerJoinRequest+0x16>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014888:	2301      	movs	r3, #1
 801488a:	e070      	b.n	801496e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801488c:	2300      	movs	r3, #0
 801488e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	791b      	ldrb	r3, [r3, #4]
 8014894:	2b16      	cmp	r3, #22
 8014896:	d801      	bhi.n	801489c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014898:	2302      	movs	r3, #2
 801489a:	e068      	b.n	801496e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	89fb      	ldrh	r3, [r7, #14]
 80148a2:	1c59      	adds	r1, r3, #1
 80148a4:	81f9      	strh	r1, [r7, #14]
 80148a6:	4413      	add	r3, r2
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	7952      	ldrb	r2, [r2, #5]
 80148ac:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	89fb      	ldrh	r3, [r7, #14]
 80148b4:	18d0      	adds	r0, r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	3306      	adds	r3, #6
 80148ba:	2208      	movs	r2, #8
 80148bc:	4619      	mov	r1, r3
 80148be:	f004 f849 	bl	8018954 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80148c2:	89fb      	ldrh	r3, [r7, #14]
 80148c4:	3308      	adds	r3, #8
 80148c6:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	89fb      	ldrh	r3, [r7, #14]
 80148ce:	18d0      	adds	r0, r2, r3
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	330e      	adds	r3, #14
 80148d4:	2208      	movs	r2, #8
 80148d6:	4619      	mov	r1, r3
 80148d8:	f004 f83c 	bl	8018954 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80148dc:	89fb      	ldrh	r3, [r7, #14]
 80148de:	3308      	adds	r3, #8
 80148e0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	8ad9      	ldrh	r1, [r3, #22]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	89fb      	ldrh	r3, [r7, #14]
 80148ec:	1c58      	adds	r0, r3, #1
 80148ee:	81f8      	strh	r0, [r7, #14]
 80148f0:	4413      	add	r3, r2
 80148f2:	b2ca      	uxtb	r2, r1
 80148f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	8adb      	ldrh	r3, [r3, #22]
 80148fa:	0a1b      	lsrs	r3, r3, #8
 80148fc:	b299      	uxth	r1, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	89fb      	ldrh	r3, [r7, #14]
 8014904:	1c58      	adds	r0, r3, #1
 8014906:	81f8      	strh	r0, [r7, #14]
 8014908:	4413      	add	r3, r2
 801490a:	b2ca      	uxtb	r2, r1
 801490c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6999      	ldr	r1, [r3, #24]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	89fb      	ldrh	r3, [r7, #14]
 8014918:	1c58      	adds	r0, r3, #1
 801491a:	81f8      	strh	r0, [r7, #14]
 801491c:	4413      	add	r3, r2
 801491e:	b2ca      	uxtb	r2, r1
 8014920:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	699b      	ldr	r3, [r3, #24]
 8014926:	0a19      	lsrs	r1, r3, #8
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	89fb      	ldrh	r3, [r7, #14]
 801492e:	1c58      	adds	r0, r3, #1
 8014930:	81f8      	strh	r0, [r7, #14]
 8014932:	4413      	add	r3, r2
 8014934:	b2ca      	uxtb	r2, r1
 8014936:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	0c19      	lsrs	r1, r3, #16
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	89fb      	ldrh	r3, [r7, #14]
 8014944:	1c58      	adds	r0, r3, #1
 8014946:	81f8      	strh	r0, [r7, #14]
 8014948:	4413      	add	r3, r2
 801494a:	b2ca      	uxtb	r2, r1
 801494c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	699b      	ldr	r3, [r3, #24]
 8014952:	0e19      	lsrs	r1, r3, #24
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	89fb      	ldrh	r3, [r7, #14]
 801495a:	1c58      	adds	r0, r3, #1
 801495c:	81f8      	strh	r0, [r7, #14]
 801495e:	4413      	add	r3, r2
 8014960:	b2ca      	uxtb	r2, r1
 8014962:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014964:	89fb      	ldrh	r3, [r7, #14]
 8014966:	b2da      	uxtb	r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801496c:	2300      	movs	r3, #0
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d003      	beq.n	801498c <LoRaMacSerializerData+0x16>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d101      	bne.n	8014990 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801498c:	2301      	movs	r3, #1
 801498e:	e0e3      	b.n	8014b58 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014990:	2300      	movs	r3, #0
 8014992:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014994:	2308      	movs	r3, #8
 8014996:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	7b1b      	ldrb	r3, [r3, #12]
 801499c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	461a      	mov	r2, r3
 80149a4:	89bb      	ldrh	r3, [r7, #12]
 80149a6:	4413      	add	r3, r2
 80149a8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80149b4:	89bb      	ldrh	r3, [r7, #12]
 80149b6:	3301      	adds	r3, #1
 80149b8:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80149c0:	461a      	mov	r2, r3
 80149c2:	89bb      	ldrh	r3, [r7, #12]
 80149c4:	4413      	add	r3, r2
 80149c6:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80149c8:	89bb      	ldrh	r3, [r7, #12]
 80149ca:	3304      	adds	r3, #4
 80149cc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	791b      	ldrb	r3, [r3, #4]
 80149d2:	461a      	mov	r2, r3
 80149d4:	89bb      	ldrh	r3, [r7, #12]
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d901      	bls.n	80149de <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80149da:	2302      	movs	r3, #2
 80149dc:	e0bc      	b.n	8014b58 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	89fb      	ldrh	r3, [r7, #14]
 80149e4:	1c59      	adds	r1, r3, #1
 80149e6:	81f9      	strh	r1, [r7, #14]
 80149e8:	4413      	add	r3, r2
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	7952      	ldrb	r2, [r2, #5]
 80149ee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6899      	ldr	r1, [r3, #8]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	89fb      	ldrh	r3, [r7, #14]
 80149fa:	1c58      	adds	r0, r3, #1
 80149fc:	81f8      	strh	r0, [r7, #14]
 80149fe:	4413      	add	r3, r2
 8014a00:	b2ca      	uxtb	r2, r1
 8014a02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	689b      	ldr	r3, [r3, #8]
 8014a08:	0a19      	lsrs	r1, r3, #8
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	89fb      	ldrh	r3, [r7, #14]
 8014a10:	1c58      	adds	r0, r3, #1
 8014a12:	81f8      	strh	r0, [r7, #14]
 8014a14:	4413      	add	r3, r2
 8014a16:	b2ca      	uxtb	r2, r1
 8014a18:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	689b      	ldr	r3, [r3, #8]
 8014a1e:	0c19      	lsrs	r1, r3, #16
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	89fb      	ldrh	r3, [r7, #14]
 8014a26:	1c58      	adds	r0, r3, #1
 8014a28:	81f8      	strh	r0, [r7, #14]
 8014a2a:	4413      	add	r3, r2
 8014a2c:	b2ca      	uxtb	r2, r1
 8014a2e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	0e19      	lsrs	r1, r3, #24
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681a      	ldr	r2, [r3, #0]
 8014a3a:	89fb      	ldrh	r3, [r7, #14]
 8014a3c:	1c58      	adds	r0, r3, #1
 8014a3e:	81f8      	strh	r0, [r7, #14]
 8014a40:	4413      	add	r3, r2
 8014a42:	b2ca      	uxtb	r2, r1
 8014a44:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681a      	ldr	r2, [r3, #0]
 8014a4a:	89fb      	ldrh	r3, [r7, #14]
 8014a4c:	1c59      	adds	r1, r3, #1
 8014a4e:	81f9      	strh	r1, [r7, #14]
 8014a50:	4413      	add	r3, r2
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	7b12      	ldrb	r2, [r2, #12]
 8014a56:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	89d9      	ldrh	r1, [r3, #14]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	89fb      	ldrh	r3, [r7, #14]
 8014a62:	1c58      	adds	r0, r3, #1
 8014a64:	81f8      	strh	r0, [r7, #14]
 8014a66:	4413      	add	r3, r2
 8014a68:	b2ca      	uxtb	r2, r1
 8014a6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	89db      	ldrh	r3, [r3, #14]
 8014a70:	0a1b      	lsrs	r3, r3, #8
 8014a72:	b299      	uxth	r1, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	89fb      	ldrh	r3, [r7, #14]
 8014a7a:	1c58      	adds	r0, r3, #1
 8014a7c:	81f8      	strh	r0, [r7, #14]
 8014a7e:	4413      	add	r3, r2
 8014a80:	b2ca      	uxtb	r2, r1
 8014a82:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	89fb      	ldrh	r3, [r7, #14]
 8014a8a:	18d0      	adds	r0, r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f103 0110 	add.w	r1, r3, #16
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	7b1b      	ldrb	r3, [r3, #12]
 8014a96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	f003 ff3e 	bl	801891e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	7b1b      	ldrb	r3, [r3, #12]
 8014aa6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	461a      	mov	r2, r3
 8014aae:	89fb      	ldrh	r3, [r7, #14]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d009      	beq.n	8014ad2 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	89fb      	ldrh	r3, [r7, #14]
 8014ac4:	1c59      	adds	r1, r3, #1
 8014ac6:	81f9      	strh	r1, [r7, #14]
 8014ac8:	4413      	add	r3, r2
 8014aca:	687a      	ldr	r2, [r7, #4]
 8014acc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014ad0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	89fb      	ldrh	r3, [r7, #14]
 8014ad8:	18d0      	adds	r0, r2, r3
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	f003 ff1a 	bl	801891e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014af0:	461a      	mov	r2, r3
 8014af2:	89fb      	ldrh	r3, [r7, #14]
 8014af4:	4413      	add	r3, r2
 8014af6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	89fb      	ldrh	r3, [r7, #14]
 8014b02:	1c58      	adds	r0, r3, #1
 8014b04:	81f8      	strh	r0, [r7, #14]
 8014b06:	4413      	add	r3, r2
 8014b08:	b2ca      	uxtb	r2, r1
 8014b0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b10:	0a19      	lsrs	r1, r3, #8
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	89fb      	ldrh	r3, [r7, #14]
 8014b18:	1c58      	adds	r0, r3, #1
 8014b1a:	81f8      	strh	r0, [r7, #14]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	b2ca      	uxtb	r2, r1
 8014b20:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b26:	0c19      	lsrs	r1, r3, #16
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	89fb      	ldrh	r3, [r7, #14]
 8014b2e:	1c58      	adds	r0, r3, #1
 8014b30:	81f8      	strh	r0, [r7, #14]
 8014b32:	4413      	add	r3, r2
 8014b34:	b2ca      	uxtb	r2, r1
 8014b36:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b3c:	0e19      	lsrs	r1, r3, #24
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	89fb      	ldrh	r3, [r7, #14]
 8014b44:	1c58      	adds	r0, r3, #1
 8014b46:	81f8      	strh	r0, [r7, #14]
 8014b48:	4413      	add	r3, r2
 8014b4a:	b2ca      	uxtb	r2, r1
 8014b4c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014b4e:	89fb      	ldrh	r3, [r7, #14]
 8014b50:	b2da      	uxtb	r2, r3
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014b56:	2300      	movs	r3, #0
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}

08014b60 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014b60:	b480      	push	{r7}
 8014b62:	b083      	sub	sp, #12
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	4603      	mov	r3, r0
 8014b68:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014b6a:	79fb      	ldrb	r3, [r7, #7]
 8014b6c:	2b05      	cmp	r3, #5
 8014b6e:	d002      	beq.n	8014b76 <RegionIsActive+0x16>
 8014b70:	2b08      	cmp	r3, #8
 8014b72:	d002      	beq.n	8014b7a <RegionIsActive+0x1a>
 8014b74:	e003      	b.n	8014b7e <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8014b76:	2301      	movs	r3, #1
 8014b78:	e002      	b.n	8014b80 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e000      	b.n	8014b80 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014b7e:	2300      	movs	r3, #0
        }
    }
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	370c      	adds	r7, #12
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bc80      	pop	{r7}
 8014b88:	4770      	bx	lr

08014b8a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	4603      	mov	r3, r0
 8014b92:	6039      	str	r1, [r7, #0]
 8014b94:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014b96:	2300      	movs	r3, #0
 8014b98:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014b9a:	79fb      	ldrb	r3, [r7, #7]
 8014b9c:	2b05      	cmp	r3, #5
 8014b9e:	d002      	beq.n	8014ba6 <RegionGetPhyParam+0x1c>
 8014ba0:	2b08      	cmp	r3, #8
 8014ba2:	d006      	beq.n	8014bb2 <RegionGetPhyParam+0x28>
 8014ba4:	e00b      	b.n	8014bbe <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8014ba6:	6838      	ldr	r0, [r7, #0]
 8014ba8:	f001 fae4 	bl	8016174 <RegionEU868GetPhyParam>
 8014bac:	4603      	mov	r3, r0
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	e007      	b.n	8014bc2 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8014bb2:	6838      	ldr	r0, [r7, #0]
 8014bb4:	f002 fcb2 	bl	801751c <RegionUS915GetPhyParam>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	60fb      	str	r3, [r7, #12]
 8014bbc:	e001      	b.n	8014bc2 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014bbe:	68bb      	ldr	r3, [r7, #8]
 8014bc0:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}

08014bcc <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b082      	sub	sp, #8
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	6039      	str	r1, [r7, #0]
 8014bd6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014bd8:	79fb      	ldrb	r3, [r7, #7]
 8014bda:	2b05      	cmp	r3, #5
 8014bdc:	d002      	beq.n	8014be4 <RegionSetBandTxDone+0x18>
 8014bde:	2b08      	cmp	r3, #8
 8014be0:	d004      	beq.n	8014bec <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014be2:	e006      	b.n	8014bf2 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8014be4:	6838      	ldr	r0, [r7, #0]
 8014be6:	f001 fc11 	bl	801640c <RegionEU868SetBandTxDone>
 8014bea:	e002      	b.n	8014bf2 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8014bec:	6838      	ldr	r0, [r7, #0]
 8014bee:	f002 fdf7 	bl	80177e0 <RegionUS915SetBandTxDone>
        }
    }
}
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	4603      	mov	r3, r0
 8014c00:	6039      	str	r1, [r7, #0]
 8014c02:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	2b05      	cmp	r3, #5
 8014c08:	d002      	beq.n	8014c10 <RegionInitDefaults+0x18>
 8014c0a:	2b08      	cmp	r3, #8
 8014c0c:	d004      	beq.n	8014c18 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014c0e:	e006      	b.n	8014c1e <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8014c10:	6838      	ldr	r0, [r7, #0]
 8014c12:	f001 fc27 	bl	8016464 <RegionEU868InitDefaults>
 8014c16:	e002      	b.n	8014c1e <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8014c18:	6838      	ldr	r0, [r7, #0]
 8014c1a:	f002 fe0d 	bl	8017838 <RegionUS915InitDefaults>
        }
    }
}
 8014c1e:	bf00      	nop
 8014c20:	3708      	adds	r7, #8
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}

08014c26 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014c26:	b580      	push	{r7, lr}
 8014c28:	b082      	sub	sp, #8
 8014c2a:	af00      	add	r7, sp, #0
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	6039      	str	r1, [r7, #0]
 8014c30:	71fb      	strb	r3, [r7, #7]
 8014c32:	4613      	mov	r3, r2
 8014c34:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014c36:	79fb      	ldrb	r3, [r7, #7]
 8014c38:	2b05      	cmp	r3, #5
 8014c3a:	d002      	beq.n	8014c42 <RegionVerify+0x1c>
 8014c3c:	2b08      	cmp	r3, #8
 8014c3e:	d007      	beq.n	8014c50 <RegionVerify+0x2a>
 8014c40:	e00d      	b.n	8014c5e <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014c42:	79bb      	ldrb	r3, [r7, #6]
 8014c44:	4619      	mov	r1, r3
 8014c46:	6838      	ldr	r0, [r7, #0]
 8014c48:	f001 fcaa 	bl	80165a0 <RegionEU868Verify>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	e007      	b.n	8014c60 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8014c50:	79bb      	ldrb	r3, [r7, #6]
 8014c52:	4619      	mov	r1, r3
 8014c54:	6838      	ldr	r0, [r7, #0]
 8014c56:	f002 ff21 	bl	8017a9c <RegionUS915Verify>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	e000      	b.n	8014c60 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8014c5e:	2300      	movs	r3, #0
        }
    }
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	4603      	mov	r3, r0
 8014c70:	6039      	str	r1, [r7, #0]
 8014c72:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014c74:	79fb      	ldrb	r3, [r7, #7]
 8014c76:	2b05      	cmp	r3, #5
 8014c78:	d002      	beq.n	8014c80 <RegionApplyCFList+0x18>
 8014c7a:	2b08      	cmp	r3, #8
 8014c7c:	d004      	beq.n	8014c88 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014c7e:	e006      	b.n	8014c8e <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8014c80:	6838      	ldr	r0, [r7, #0]
 8014c82:	f001 fd09 	bl	8016698 <RegionEU868ApplyCFList>
 8014c86:	e002      	b.n	8014c8e <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8014c88:	6838      	ldr	r0, [r7, #0]
 8014c8a:	f002 ff6f 	bl	8017b6c <RegionUS915ApplyCFList>
        }
    }
}
 8014c8e:	bf00      	nop
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}

08014c96 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014c96:	b580      	push	{r7, lr}
 8014c98:	b082      	sub	sp, #8
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	6039      	str	r1, [r7, #0]
 8014ca0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ca2:	79fb      	ldrb	r3, [r7, #7]
 8014ca4:	2b05      	cmp	r3, #5
 8014ca6:	d002      	beq.n	8014cae <RegionChanMaskSet+0x18>
 8014ca8:	2b08      	cmp	r3, #8
 8014caa:	d005      	beq.n	8014cb8 <RegionChanMaskSet+0x22>
 8014cac:	e009      	b.n	8014cc2 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014cae:	6838      	ldr	r0, [r7, #0]
 8014cb0:	f001 fd66 	bl	8016780 <RegionEU868ChanMaskSet>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	e005      	b.n	8014cc4 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014cb8:	6838      	ldr	r0, [r7, #0]
 8014cba:	f002 ffcb 	bl	8017c54 <RegionUS915ChanMaskSet>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	e000      	b.n	8014cc4 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014cc2:	2300      	movs	r3, #0
        }
    }
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3708      	adds	r7, #8
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}

08014ccc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	603b      	str	r3, [r7, #0]
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	71fb      	strb	r3, [r7, #7]
 8014cd8:	460b      	mov	r3, r1
 8014cda:	71bb      	strb	r3, [r7, #6]
 8014cdc:	4613      	mov	r3, r2
 8014cde:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014ce0:	79fb      	ldrb	r3, [r7, #7]
 8014ce2:	2b05      	cmp	r3, #5
 8014ce4:	d002      	beq.n	8014cec <RegionComputeRxWindowParameters+0x20>
 8014ce6:	2b08      	cmp	r3, #8
 8014ce8:	d008      	beq.n	8014cfc <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014cea:	e00e      	b.n	8014d0a <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014cec:	7979      	ldrb	r1, [r7, #5]
 8014cee:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	683a      	ldr	r2, [r7, #0]
 8014cf6:	f001 fd6d 	bl	80167d4 <RegionEU868ComputeRxWindowParameters>
 8014cfa:	e006      	b.n	8014d0a <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014cfc:	7979      	ldrb	r1, [r7, #5]
 8014cfe:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	683a      	ldr	r2, [r7, #0]
 8014d06:	f003 f80f 	bl	8017d28 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8014d0a:	bf00      	nop
 8014d0c:	3708      	adds	r7, #8
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}

08014d12 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014d12:	b580      	push	{r7, lr}
 8014d14:	b084      	sub	sp, #16
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	4603      	mov	r3, r0
 8014d1a:	60b9      	str	r1, [r7, #8]
 8014d1c:	607a      	str	r2, [r7, #4]
 8014d1e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
 8014d22:	2b05      	cmp	r3, #5
 8014d24:	d002      	beq.n	8014d2c <RegionRxConfig+0x1a>
 8014d26:	2b08      	cmp	r3, #8
 8014d28:	d006      	beq.n	8014d38 <RegionRxConfig+0x26>
 8014d2a:	e00b      	b.n	8014d44 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014d2c:	6879      	ldr	r1, [r7, #4]
 8014d2e:	68b8      	ldr	r0, [r7, #8]
 8014d30:	f001 fdaa 	bl	8016888 <RegionEU868RxConfig>
 8014d34:	4603      	mov	r3, r0
 8014d36:	e006      	b.n	8014d46 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8014d38:	6879      	ldr	r1, [r7, #4]
 8014d3a:	68b8      	ldr	r0, [r7, #8]
 8014d3c:	f003 f83e 	bl	8017dbc <RegionUS915RxConfig>
 8014d40:	4603      	mov	r3, r0
 8014d42:	e000      	b.n	8014d46 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014d44:	2300      	movs	r3, #0
        }
    }
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3710      	adds	r7, #16
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}

08014d4e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014d4e:	b580      	push	{r7, lr}
 8014d50:	b084      	sub	sp, #16
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
 8014d58:	603b      	str	r3, [r7, #0]
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014d5e:	7bfb      	ldrb	r3, [r7, #15]
 8014d60:	2b05      	cmp	r3, #5
 8014d62:	d002      	beq.n	8014d6a <RegionTxConfig+0x1c>
 8014d64:	2b08      	cmp	r3, #8
 8014d66:	d007      	beq.n	8014d78 <RegionTxConfig+0x2a>
 8014d68:	e00d      	b.n	8014d86 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	6879      	ldr	r1, [r7, #4]
 8014d6e:	68b8      	ldr	r0, [r7, #8]
 8014d70:	f001 fe5a 	bl	8016a28 <RegionEU868TxConfig>
 8014d74:	4603      	mov	r3, r0
 8014d76:	e007      	b.n	8014d88 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	6879      	ldr	r1, [r7, #4]
 8014d7c:	68b8      	ldr	r0, [r7, #8]
 8014d7e:	f003 f8a1 	bl	8017ec4 <RegionUS915TxConfig>
 8014d82:	4603      	mov	r3, r0
 8014d84:	e000      	b.n	8014d88 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014d86:	2300      	movs	r3, #0
        }
    }
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3710      	adds	r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af02      	add	r7, sp, #8
 8014d96:	60b9      	str	r1, [r7, #8]
 8014d98:	607a      	str	r2, [r7, #4]
 8014d9a:	603b      	str	r3, [r7, #0]
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014da0:	7bfb      	ldrb	r3, [r7, #15]
 8014da2:	2b05      	cmp	r3, #5
 8014da4:	d002      	beq.n	8014dac <RegionLinkAdrReq+0x1c>
 8014da6:	2b08      	cmp	r3, #8
 8014da8:	d00a      	beq.n	8014dc0 <RegionLinkAdrReq+0x30>
 8014daa:	e013      	b.n	8014dd4 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	6879      	ldr	r1, [r7, #4]
 8014db6:	68b8      	ldr	r0, [r7, #8]
 8014db8:	f001 ff06 	bl	8016bc8 <RegionEU868LinkAdrReq>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	e00a      	b.n	8014dd6 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	9300      	str	r3, [sp, #0]
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	6879      	ldr	r1, [r7, #4]
 8014dca:	68b8      	ldr	r0, [r7, #8]
 8014dcc:	f003 f926 	bl	801801c <RegionUS915LinkAdrReq>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	e000      	b.n	8014dd6 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014dd4:	2300      	movs	r3, #0
        }
    }
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	4603      	mov	r3, r0
 8014de6:	6039      	str	r1, [r7, #0]
 8014de8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014dea:	79fb      	ldrb	r3, [r7, #7]
 8014dec:	2b05      	cmp	r3, #5
 8014dee:	d002      	beq.n	8014df6 <RegionRxParamSetupReq+0x18>
 8014df0:	2b08      	cmp	r3, #8
 8014df2:	d005      	beq.n	8014e00 <RegionRxParamSetupReq+0x22>
 8014df4:	e009      	b.n	8014e0a <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014df6:	6838      	ldr	r0, [r7, #0]
 8014df8:	f002 f808 	bl	8016e0c <RegionEU868RxParamSetupReq>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	e005      	b.n	8014e0c <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8014e00:	6838      	ldr	r0, [r7, #0]
 8014e02:	f003 fb2f 	bl	8018464 <RegionUS915RxParamSetupReq>
 8014e06:	4603      	mov	r3, r0
 8014e08:	e000      	b.n	8014e0c <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014e0a:	2300      	movs	r3, #0
        }
    }
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	6039      	str	r1, [r7, #0]
 8014e1e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e20:	79fb      	ldrb	r3, [r7, #7]
 8014e22:	2b05      	cmp	r3, #5
 8014e24:	d002      	beq.n	8014e2c <RegionNewChannelReq+0x18>
 8014e26:	2b08      	cmp	r3, #8
 8014e28:	d005      	beq.n	8014e36 <RegionNewChannelReq+0x22>
 8014e2a:	e009      	b.n	8014e40 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014e2c:	6838      	ldr	r0, [r7, #0]
 8014e2e:	f002 f82b 	bl	8016e88 <RegionEU868NewChannelReq>
 8014e32:	4603      	mov	r3, r0
 8014e34:	e005      	b.n	8014e42 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8014e36:	6838      	ldr	r0, [r7, #0]
 8014e38:	f003 fb60 	bl	80184fc <RegionUS915NewChannelReq>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	e000      	b.n	8014e42 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014e40:	2300      	movs	r3, #0
        }
    }
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3708      	adds	r7, #8
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}

08014e4a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014e4a:	b580      	push	{r7, lr}
 8014e4c:	b082      	sub	sp, #8
 8014e4e:	af00      	add	r7, sp, #0
 8014e50:	4603      	mov	r3, r0
 8014e52:	6039      	str	r1, [r7, #0]
 8014e54:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e56:	79fb      	ldrb	r3, [r7, #7]
 8014e58:	2b05      	cmp	r3, #5
 8014e5a:	d002      	beq.n	8014e62 <RegionTxParamSetupReq+0x18>
 8014e5c:	2b08      	cmp	r3, #8
 8014e5e:	d005      	beq.n	8014e6c <RegionTxParamSetupReq+0x22>
 8014e60:	e009      	b.n	8014e76 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014e62:	6838      	ldr	r0, [r7, #0]
 8014e64:	f002 f86e 	bl	8016f44 <RegionEU868TxParamSetupReq>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	e005      	b.n	8014e78 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8014e6c:	6838      	ldr	r0, [r7, #0]
 8014e6e:	f003 fb50 	bl	8018512 <RegionUS915TxParamSetupReq>
 8014e72:	4603      	mov	r3, r0
 8014e74:	e000      	b.n	8014e78 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014e76:	2300      	movs	r3, #0
        }
    }
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b082      	sub	sp, #8
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	4603      	mov	r3, r0
 8014e88:	6039      	str	r1, [r7, #0]
 8014e8a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014e8c:	79fb      	ldrb	r3, [r7, #7]
 8014e8e:	2b05      	cmp	r3, #5
 8014e90:	d002      	beq.n	8014e98 <RegionDlChannelReq+0x18>
 8014e92:	2b08      	cmp	r3, #8
 8014e94:	d005      	beq.n	8014ea2 <RegionDlChannelReq+0x22>
 8014e96:	e009      	b.n	8014eac <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014e98:	6838      	ldr	r0, [r7, #0]
 8014e9a:	f002 f85f 	bl	8016f5c <RegionEU868DlChannelReq>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	e005      	b.n	8014eae <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8014ea2:	6838      	ldr	r0, [r7, #0]
 8014ea4:	f003 fb40 	bl	8018528 <RegionUS915DlChannelReq>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	e000      	b.n	8014eae <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014eac:	2300      	movs	r3, #0
        }
    }
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b082      	sub	sp, #8
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	71fb      	strb	r3, [r7, #7]
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	71bb      	strb	r3, [r7, #6]
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014ec8:	79fb      	ldrb	r3, [r7, #7]
 8014eca:	2b05      	cmp	r3, #5
 8014ecc:	d002      	beq.n	8014ed4 <RegionAlternateDr+0x1e>
 8014ece:	2b08      	cmp	r3, #8
 8014ed0:	d009      	beq.n	8014ee6 <RegionAlternateDr+0x30>
 8014ed2:	e011      	b.n	8014ef8 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014ed4:	797a      	ldrb	r2, [r7, #5]
 8014ed6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014eda:	4611      	mov	r1, r2
 8014edc:	4618      	mov	r0, r3
 8014ede:	f002 f881 	bl	8016fe4 <RegionEU868AlternateDr>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	e009      	b.n	8014efa <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014ee6:	797a      	ldrb	r2, [r7, #5]
 8014ee8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014eec:	4611      	mov	r1, r2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f003 fb26 	bl	8018540 <RegionUS915AlternateDr>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	e000      	b.n	8014efa <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014ef8:	2300      	movs	r3, #0
        }
    }
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}

08014f02 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014f02:	b580      	push	{r7, lr}
 8014f04:	b084      	sub	sp, #16
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	607a      	str	r2, [r7, #4]
 8014f0c:	603b      	str	r3, [r7, #0]
 8014f0e:	4603      	mov	r3, r0
 8014f10:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014f12:	7bfb      	ldrb	r3, [r7, #15]
 8014f14:	2b05      	cmp	r3, #5
 8014f16:	d002      	beq.n	8014f1e <RegionNextChannel+0x1c>
 8014f18:	2b08      	cmp	r3, #8
 8014f1a:	d008      	beq.n	8014f2e <RegionNextChannel+0x2c>
 8014f1c:	e00f      	b.n	8014f3e <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	683a      	ldr	r2, [r7, #0]
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	68b8      	ldr	r0, [r7, #8]
 8014f26:	f002 f86d 	bl	8017004 <RegionEU868NextChannel>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	e008      	b.n	8014f40 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	683a      	ldr	r2, [r7, #0]
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	68b8      	ldr	r0, [r7, #8]
 8014f36:	f003 fb3f 	bl	80185b8 <RegionUS915NextChannel>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	e000      	b.n	8014f40 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014f3e:	2309      	movs	r3, #9
        }
    }
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	4603      	mov	r3, r0
 8014f50:	6039      	str	r1, [r7, #0]
 8014f52:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014f54:	79fb      	ldrb	r3, [r7, #7]
 8014f56:	2b05      	cmp	r3, #5
 8014f58:	d002      	beq.n	8014f60 <RegionSetContinuousWave+0x18>
 8014f5a:	2b08      	cmp	r3, #8
 8014f5c:	d004      	beq.n	8014f68 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8014f5e:	e006      	b.n	8014f6e <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8014f60:	6838      	ldr	r0, [r7, #0]
 8014f62:	f002 f9c9 	bl	80172f8 <RegionEU868SetContinuousWave>
 8014f66:	e002      	b.n	8014f6e <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 8014f68:	6838      	ldr	r0, [r7, #0]
 8014f6a:	f003 fc19 	bl	80187a0 <RegionUS915SetContinuousWave>
        }
    }
}
 8014f6e:	bf00      	nop
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014f76:	b590      	push	{r4, r7, lr}
 8014f78:	b083      	sub	sp, #12
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	4608      	mov	r0, r1
 8014f80:	4611      	mov	r1, r2
 8014f82:	461a      	mov	r2, r3
 8014f84:	4623      	mov	r3, r4
 8014f86:	71fb      	strb	r3, [r7, #7]
 8014f88:	4603      	mov	r3, r0
 8014f8a:	71bb      	strb	r3, [r7, #6]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	717b      	strb	r3, [r7, #5]
 8014f90:	4613      	mov	r3, r2
 8014f92:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014f94:	79fb      	ldrb	r3, [r7, #7]
 8014f96:	2b05      	cmp	r3, #5
 8014f98:	d002      	beq.n	8014fa0 <RegionApplyDrOffset+0x2a>
 8014f9a:	2b08      	cmp	r3, #8
 8014f9c:	d00a      	beq.n	8014fb4 <RegionApplyDrOffset+0x3e>
 8014f9e:	e013      	b.n	8014fc8 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014fa0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014fa4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014fa8:	79bb      	ldrb	r3, [r7, #6]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f002 f9f2 	bl	8017394 <RegionEU868ApplyDrOffset>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	e00a      	b.n	8014fca <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8014fb4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014fb8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014fbc:	79bb      	ldrb	r3, [r7, #6]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f003 fc44 	bl	801884c <RegionUS915ApplyDrOffset>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	e000      	b.n	8014fca <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014fc8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	370c      	adds	r7, #12
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd90      	pop	{r4, r7, pc}
	...

08014fd4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014fda:	4b04      	ldr	r3, [pc, #16]	@ (8014fec <RegionGetVersion+0x18>)
 8014fdc:	607b      	str	r3, [r7, #4]

    return version;
 8014fde:	687b      	ldr	r3, [r7, #4]
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	370c      	adds	r7, #12
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bc80      	pop	{r7}
 8014fe8:	4770      	bx	lr
 8014fea:	bf00      	nop
 8014fec:	01000300 	.word	0x01000300

08014ff0 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b087      	sub	sp, #28
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	60b9      	str	r1, [r7, #8]
 8014ffa:	607a      	str	r2, [r7, #4]
 8014ffc:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <FindAvailable125kHzChannels+0x1a>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801500a:	2303      	movs	r3, #3
 801500c:	e021      	b.n	8015052 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015014:	2300      	movs	r3, #0
 8015016:	75fb      	strb	r3, [r7, #23]
 8015018:	e017      	b.n	801504a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801501a:	89fa      	ldrh	r2, [r7, #14]
 801501c:	7dfb      	ldrb	r3, [r7, #23]
 801501e:	fa42 f303 	asr.w	r3, r2, r3
 8015022:	f003 0301 	and.w	r3, r3, #1
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00c      	beq.n	8015044 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	461a      	mov	r2, r3
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	4413      	add	r3, r2
 8015034:	7dfa      	ldrb	r2, [r7, #23]
 8015036:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	3301      	adds	r3, #1
 801503e:	b2da      	uxtb	r2, r3
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8015044:	7dfb      	ldrb	r3, [r7, #23]
 8015046:	3301      	adds	r3, #1
 8015048:	75fb      	strb	r3, [r7, #23]
 801504a:	7dfb      	ldrb	r3, [r7, #23]
 801504c:	2b07      	cmp	r3, #7
 801504e:	d9e4      	bls.n	801501a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8015050:	2300      	movs	r3, #0
}
 8015052:	4618      	mov	r0, r3
 8015054:	371c      	adds	r7, #28
 8015056:	46bd      	mov	sp, r7
 8015058:	bc80      	pop	{r7}
 801505a:	4770      	bx	lr

0801505c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801505c:	b590      	push	{r4, r7, lr}
 801505e:	b089      	sub	sp, #36	@ 0x24
 8015060:	af00      	add	r7, sp, #0
 8015062:	60f8      	str	r0, [r7, #12]
 8015064:	60b9      	str	r1, [r7, #8]
 8015066:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015068:	2300      	movs	r3, #0
 801506a:	617b      	str	r3, [r7, #20]
 801506c:	2300      	movs	r3, #0
 801506e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8015070:	2300      	movs	r3, #0
 8015072:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d005      	beq.n	8015086 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d002      	beq.n	8015086 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d101      	bne.n	801508a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015086:	2303      	movs	r3, #3
 8015088:	e055      	b.n	8015136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8015090:	7f7b      	ldrb	r3, [r7, #29]
 8015092:	085b      	lsrs	r3, r3, #1
 8015094:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015096:	7f7b      	ldrb	r3, [r7, #29]
 8015098:	f003 0301 	and.w	r3, r3, #1
 801509c:	b2db      	uxtb	r3, r3
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d107      	bne.n	80150b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80150a2:	7f3b      	ldrb	r3, [r7, #28]
 80150a4:	005b      	lsls	r3, r3, #1
 80150a6:	68fa      	ldr	r2, [r7, #12]
 80150a8:	4413      	add	r3, r2
 80150aa:	881b      	ldrh	r3, [r3, #0]
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	83fb      	strh	r3, [r7, #30]
 80150b0:	e006      	b.n	80150c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80150b2:	7f3b      	ldrb	r3, [r7, #28]
 80150b4:	005b      	lsls	r3, r3, #1
 80150b6:	68fa      	ldr	r2, [r7, #12]
 80150b8:	4413      	add	r3, r2
 80150ba:	881b      	ldrh	r3, [r3, #0]
 80150bc:	0a1b      	lsrs	r3, r3, #8
 80150be:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80150c0:	f107 0213 	add.w	r2, r7, #19
 80150c4:	f107 0114 	add.w	r1, r7, #20
 80150c8:	8bfb      	ldrh	r3, [r7, #30]
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7ff ff90 	bl	8014ff0 <FindAvailable125kHzChannels>
 80150d0:	4603      	mov	r3, r0
 80150d2:	2b03      	cmp	r3, #3
 80150d4:	d101      	bne.n	80150da <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80150d6:	2303      	movs	r3, #3
 80150d8:	e02d      	b.n	8015136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80150da:	7cfb      	ldrb	r3, [r7, #19]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d011      	beq.n	8015104 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80150e0:	7f7b      	ldrb	r3, [r7, #29]
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	b2dc      	uxtb	r4, r3
 80150e6:	7cfb      	ldrb	r3, [r7, #19]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	4619      	mov	r1, r3
 80150ec:	2000      	movs	r0, #0
 80150ee:	f003 fbff 	bl	80188f0 <randr>
 80150f2:	4603      	mov	r3, r0
 80150f4:	3320      	adds	r3, #32
 80150f6:	443b      	add	r3, r7
 80150f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80150fc:	4423      	add	r3, r4
 80150fe:	b2da      	uxtb	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8015104:	7f7b      	ldrb	r3, [r7, #29]
 8015106:	3301      	adds	r3, #1
 8015108:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801510a:	7f7b      	ldrb	r3, [r7, #29]
 801510c:	2b07      	cmp	r3, #7
 801510e:	d901      	bls.n	8015114 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8015110:	2300      	movs	r3, #0
 8015112:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8015114:	7cfb      	ldrb	r3, [r7, #19]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d104      	bne.n	8015124 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	7f7a      	ldrb	r2, [r7, #29]
 8015120:	429a      	cmp	r2, r3
 8015122:	d1b5      	bne.n	8015090 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8015124:	7cfb      	ldrb	r3, [r7, #19]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d004      	beq.n	8015134 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	7f7a      	ldrb	r2, [r7, #29]
 801512e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015130:	2300      	movs	r3, #0
 8015132:	e000      	b.n	8015136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8015134:	2303      	movs	r3, #3
}
 8015136:	4618      	mov	r0, r3
 8015138:	3724      	adds	r7, #36	@ 0x24
 801513a:	46bd      	mov	sp, r7
 801513c:	bd90      	pop	{r4, r7, pc}

0801513e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801513e:	b480      	push	{r7}
 8015140:	b085      	sub	sp, #20
 8015142:	af00      	add	r7, sp, #0
 8015144:	4603      	mov	r3, r0
 8015146:	60b9      	str	r1, [r7, #8]
 8015148:	607a      	str	r2, [r7, #4]
 801514a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801514c:	7bfb      	ldrb	r3, [r7, #15]
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	fb03 f202 	mul.w	r2, r3, r2
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	4413      	add	r3, r2
}
 8015158:	4618      	mov	r0, r3
 801515a:	3714      	adds	r7, #20
 801515c:	46bd      	mov	sp, r7
 801515e:	bc80      	pop	{r7}
 8015160:	4770      	bx	lr

08015162 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015162:	b480      	push	{r7}
 8015164:	b087      	sub	sp, #28
 8015166:	af00      	add	r7, sp, #0
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	4608      	mov	r0, r1
 801516c:	4639      	mov	r1, r7
 801516e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015172:	4603      	mov	r3, r0
 8015174:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	881b      	ldrh	r3, [r3, #0]
 801517a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801517c:	7afb      	ldrb	r3, [r7, #11]
 801517e:	f083 0301 	eor.w	r3, r3, #1
 8015182:	b2db      	uxtb	r3, r3
 8015184:	2b00      	cmp	r3, #0
 8015186:	d01b      	beq.n	80151c0 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015188:	f242 7310 	movw	r3, #10000	@ 0x2710
 801518c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015194:	d202      	bcs.n	801519c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015196:	2364      	movs	r3, #100	@ 0x64
 8015198:	82bb      	strh	r3, [r7, #20]
 801519a:	e00b      	b.n	80151b4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80151a2:	4293      	cmp	r3, r2
 80151a4:	d803      	bhi.n	80151ae <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80151a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80151aa:	82bb      	strh	r3, [r7, #20]
 80151ac:	e002      	b.n	80151b4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80151ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 80151b2:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80151b4:	8aba      	ldrh	r2, [r7, #20]
 80151b6:	8afb      	ldrh	r3, [r7, #22]
 80151b8:	4293      	cmp	r3, r2
 80151ba:	bf38      	it	cc
 80151bc:	4613      	movcc	r3, r2
 80151be:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80151c0:	8afb      	ldrh	r3, [r7, #22]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d101      	bne.n	80151ca <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80151c6:	2301      	movs	r3, #1
 80151c8:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80151ca:	8afb      	ldrh	r3, [r7, #22]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	371c      	adds	r7, #28
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bc80      	pop	{r7}
 80151d4:	4770      	bx	lr
	...

080151d8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b08e      	sub	sp, #56	@ 0x38
 80151dc:	af02      	add	r7, sp, #8
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	4608      	mov	r0, r1
 80151e2:	4639      	mov	r1, r7
 80151e4:	e881 000c 	stmia.w	r1, {r2, r3}
 80151e8:	4603      	mov	r3, r0
 80151ea:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	881b      	ldrh	r3, [r3, #0]
 80151f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80151f2:	4b4b      	ldr	r3, [pc, #300]	@ (8015320 <SetMaxTimeCredits+0x148>)
 80151f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80151f6:	463b      	mov	r3, r7
 80151f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80151fc:	f007 fa72 	bl	801c6e4 <SysTimeToMs>
 8015200:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8015202:	f107 0314 	add.w	r3, r7, #20
 8015206:	2200      	movs	r2, #0
 8015208:	601a      	str	r2, [r3, #0]
 801520a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801520c:	7af9      	ldrb	r1, [r7, #11]
 801520e:	463b      	mov	r3, r7
 8015210:	cb0c      	ldmia	r3, {r2, r3}
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7ff ffa5 	bl	8015162 <GetDutyCycle>
 8015218:	4603      	mov	r3, r0
 801521a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 801521c:	7afb      	ldrb	r3, [r7, #11]
 801521e:	f083 0301 	eor.w	r3, r3, #1
 8015222:	b2db      	uxtb	r3, r3
 8015224:	2b00      	cmp	r3, #0
 8015226:	d062      	beq.n	80152ee <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015228:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801522a:	2b64      	cmp	r3, #100	@ 0x64
 801522c:	d105      	bne.n	801523a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801522e:	4b3c      	ldr	r3, [pc, #240]	@ (8015320 <SetMaxTimeCredits+0x148>)
 8015230:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015236:	609a      	str	r2, [r3, #8]
 8015238:	e00b      	b.n	8015252 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801523a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801523c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015240:	d105      	bne.n	801524e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015242:	4b38      	ldr	r3, [pc, #224]	@ (8015324 <SetMaxTimeCredits+0x14c>)
 8015244:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801524a:	609a      	str	r2, [r3, #8]
 801524c:	e001      	b.n	8015252 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801524e:	4b36      	ldr	r3, [pc, #216]	@ (8015328 <SetMaxTimeCredits+0x150>)
 8015250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	689a      	ldr	r2, [r3, #8]
 8015256:	f107 031c 	add.w	r3, r7, #28
 801525a:	4611      	mov	r1, r2
 801525c:	4618      	mov	r0, r3
 801525e:	f007 fa69 	bl	801c734 <SysTimeFromMs>
 8015262:	f107 0014 	add.w	r0, r7, #20
 8015266:	6a3b      	ldr	r3, [r7, #32]
 8015268:	9300      	str	r3, [sp, #0]
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	463a      	mov	r2, r7
 801526e:	ca06      	ldmia	r2, {r1, r2}
 8015270:	f007 f979 	bl	801c566 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015274:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015278:	f083 0301 	eor.w	r3, r3, #1
 801527c:	b2db      	uxtb	r3, r3
 801527e:	2b00      	cmp	r3, #0
 8015280:	d006      	beq.n	8015290 <SetMaxTimeCredits+0xb8>
 8015282:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015286:	f083 0301 	eor.w	r3, r3, #1
 801528a:	b2db      	uxtb	r3, r3
 801528c:	2b00      	cmp	r3, #0
 801528e:	d108      	bne.n	80152a2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015296:	429a      	cmp	r2, r3
 8015298:	d103      	bne.n	80152a2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801529a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801529c:	4a23      	ldr	r2, [pc, #140]	@ (801532c <SetMaxTimeCredits+0x154>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d92f      	bls.n	8015302 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80152a6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	4a21      	ldr	r2, [pc, #132]	@ (8015330 <SetMaxTimeCredits+0x158>)
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d928      	bls.n	8015302 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80152b6:	3b30      	subs	r3, #48	@ 0x30
 80152b8:	4a1e      	ldr	r2, [pc, #120]	@ (8015334 <SetMaxTimeCredits+0x15c>)
 80152ba:	fba2 2303 	umull	r2, r3, r2, r3
 80152be:	0c1b      	lsrs	r3, r3, #16
 80152c0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	4a1c      	ldr	r2, [pc, #112]	@ (8015338 <SetMaxTimeCredits+0x160>)
 80152c6:	fb02 f303 	mul.w	r3, r2, r3
 80152ca:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80152d2:	3330      	adds	r3, #48	@ 0x30
 80152d4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80152d6:	2300      	movs	r3, #0
 80152d8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80152da:	f107 0314 	add.w	r3, r7, #20
 80152de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80152e2:	f007 f9ff 	bl	801c6e4 <SysTimeToMs>
 80152e6:	4602      	mov	r2, r0
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	609a      	str	r2, [r3, #8]
 80152ec:	e009      	b.n	8015302 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80152ee:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80152f2:	f083 0301 	eor.w	r3, r3, #1
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d002      	beq.n	8015302 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015300:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d102      	bne.n	8015310 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801530e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015314:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015316:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8015318:	4618      	mov	r0, r3
 801531a:	3730      	adds	r7, #48	@ 0x30
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	001b7740 	.word	0x001b7740
 8015324:	0112a880 	.word	0x0112a880
 8015328:	02932e00 	.word	0x02932e00
 801532c:	0001517f 	.word	0x0001517f
 8015330:	0001ec2f 	.word	0x0001ec2f
 8015334:	c22e4507 	.word	0xc22e4507
 8015338:	00015180 	.word	0x00015180

0801533c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b086      	sub	sp, #24
 8015340:	af02      	add	r7, sp, #8
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	4608      	mov	r0, r1
 8015346:	4611      	mov	r1, r2
 8015348:	461a      	mov	r2, r3
 801534a:	4603      	mov	r3, r0
 801534c:	70fb      	strb	r3, [r7, #3]
 801534e:	460b      	mov	r3, r1
 8015350:	70bb      	strb	r3, [r7, #2]
 8015352:	4613      	mov	r3, r2
 8015354:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015356:	78f9      	ldrb	r1, [r7, #3]
 8015358:	787b      	ldrb	r3, [r7, #1]
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	78bb      	ldrb	r3, [r7, #2]
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	f107 0318 	add.w	r3, r7, #24
 8015364:	cb0c      	ldmia	r3, {r2, r3}
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7ff ff36 	bl	80151d8 <SetMaxTimeCredits>
 801536c:	4603      	mov	r3, r0
 801536e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015370:	78fb      	ldrb	r3, [r7, #3]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00a      	beq.n	801538c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	4618      	mov	r0, r3
 801537c:	f007 fbf8 	bl	801cb70 <UTIL_TIMER_GetElapsedTime>
 8015380:	4602      	mov	r2, r0
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	441a      	add	r2, r3
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	68da      	ldr	r2, [r3, #12]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	429a      	cmp	r2, r3
 8015396:	d903      	bls.n	80153a0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	691a      	ldr	r2, [r3, #16]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6a3a      	ldr	r2, [r7, #32]
 80153a4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80153a6:	89fb      	ldrh	r3, [r7, #14]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80153b0:	b480      	push	{r7}
 80153b2:	b085      	sub	sp, #20
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	4603      	mov	r3, r0
 80153b8:	460a      	mov	r2, r1
 80153ba:	80fb      	strh	r3, [r7, #6]
 80153bc:	4613      	mov	r3, r2
 80153be:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80153c0:	2300      	movs	r3, #0
 80153c2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80153c4:	2300      	movs	r3, #0
 80153c6:	73bb      	strb	r3, [r7, #14]
 80153c8:	e011      	b.n	80153ee <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80153ca:	88fa      	ldrh	r2, [r7, #6]
 80153cc:	7bbb      	ldrb	r3, [r7, #14]
 80153ce:	2101      	movs	r1, #1
 80153d0:	fa01 f303 	lsl.w	r3, r1, r3
 80153d4:	401a      	ands	r2, r3
 80153d6:	7bbb      	ldrb	r3, [r7, #14]
 80153d8:	2101      	movs	r1, #1
 80153da:	fa01 f303 	lsl.w	r3, r1, r3
 80153de:	429a      	cmp	r2, r3
 80153e0:	d102      	bne.n	80153e8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80153e2:	7bfb      	ldrb	r3, [r7, #15]
 80153e4:	3301      	adds	r3, #1
 80153e6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80153e8:	7bbb      	ldrb	r3, [r7, #14]
 80153ea:	3301      	adds	r3, #1
 80153ec:	73bb      	strb	r3, [r7, #14]
 80153ee:	7bba      	ldrb	r2, [r7, #14]
 80153f0:	797b      	ldrb	r3, [r7, #5]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d3e9      	bcc.n	80153ca <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80153f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3714      	adds	r7, #20
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bc80      	pop	{r7}
 8015400:	4770      	bx	lr

08015402 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015402:	b580      	push	{r7, lr}
 8015404:	b084      	sub	sp, #16
 8015406:	af00      	add	r7, sp, #0
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	4611      	mov	r1, r2
 801540c:	461a      	mov	r2, r3
 801540e:	4603      	mov	r3, r0
 8015410:	71fb      	strb	r3, [r7, #7]
 8015412:	460b      	mov	r3, r1
 8015414:	71bb      	strb	r3, [r7, #6]
 8015416:	4613      	mov	r3, r2
 8015418:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801541a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801541e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015426:	4618      	mov	r0, r3
 8015428:	f000 f85d 	bl	80154e6 <RegionCommonValueInRange>
 801542c:	4603      	mov	r3, r0
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015432:	2300      	movs	r3, #0
 8015434:	e053      	b.n	80154de <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015436:	2300      	movs	r3, #0
 8015438:	73fb      	strb	r3, [r7, #15]
 801543a:	2300      	movs	r3, #0
 801543c:	73bb      	strb	r3, [r7, #14]
 801543e:	e049      	b.n	80154d4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015440:	2300      	movs	r3, #0
 8015442:	737b      	strb	r3, [r7, #13]
 8015444:	e03d      	b.n	80154c2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015446:	7bbb      	ldrb	r3, [r7, #14]
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	4413      	add	r3, r2
 801544e:	881b      	ldrh	r3, [r3, #0]
 8015450:	461a      	mov	r2, r3
 8015452:	7b7b      	ldrb	r3, [r7, #13]
 8015454:	fa42 f303 	asr.w	r3, r2, r3
 8015458:	f003 0301 	and.w	r3, r3, #1
 801545c:	2b00      	cmp	r3, #0
 801545e:	d02d      	beq.n	80154bc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015460:	7bfa      	ldrb	r2, [r7, #15]
 8015462:	7b7b      	ldrb	r3, [r7, #13]
 8015464:	4413      	add	r3, r2
 8015466:	461a      	mov	r2, r3
 8015468:	4613      	mov	r3, r2
 801546a:	005b      	lsls	r3, r3, #1
 801546c:	4413      	add	r3, r2
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	461a      	mov	r2, r3
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	4413      	add	r3, r2
 8015476:	7a1b      	ldrb	r3, [r3, #8]
 8015478:	f343 0303 	sbfx	r3, r3, #0, #4
 801547c:	b25b      	sxtb	r3, r3
 801547e:	f003 030f 	and.w	r3, r3, #15
 8015482:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015484:	7bfa      	ldrb	r2, [r7, #15]
 8015486:	7b7b      	ldrb	r3, [r7, #13]
 8015488:	4413      	add	r3, r2
 801548a:	461a      	mov	r2, r3
 801548c:	4613      	mov	r3, r2
 801548e:	005b      	lsls	r3, r3, #1
 8015490:	4413      	add	r3, r2
 8015492:	009b      	lsls	r3, r3, #2
 8015494:	461a      	mov	r2, r3
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	4413      	add	r3, r2
 801549a:	7a1b      	ldrb	r3, [r3, #8]
 801549c:	f343 1303 	sbfx	r3, r3, #4, #4
 80154a0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80154a2:	f003 030f 	and.w	r3, r3, #15
 80154a6:	b25a      	sxtb	r2, r3
 80154a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 f81a 	bl	80154e6 <RegionCommonValueInRange>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d101      	bne.n	80154bc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80154b8:	2301      	movs	r3, #1
 80154ba:	e010      	b.n	80154de <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80154bc:	7b7b      	ldrb	r3, [r7, #13]
 80154be:	3301      	adds	r3, #1
 80154c0:	737b      	strb	r3, [r7, #13]
 80154c2:	7b7b      	ldrb	r3, [r7, #13]
 80154c4:	2b0f      	cmp	r3, #15
 80154c6:	d9be      	bls.n	8015446 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80154c8:	7bfb      	ldrb	r3, [r7, #15]
 80154ca:	3310      	adds	r3, #16
 80154cc:	73fb      	strb	r3, [r7, #15]
 80154ce:	7bbb      	ldrb	r3, [r7, #14]
 80154d0:	3301      	adds	r3, #1
 80154d2:	73bb      	strb	r3, [r7, #14]
 80154d4:	7bfa      	ldrb	r2, [r7, #15]
 80154d6:	79fb      	ldrb	r3, [r7, #7]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d3b1      	bcc.n	8015440 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3710      	adds	r7, #16
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80154e6:	b480      	push	{r7}
 80154e8:	b083      	sub	sp, #12
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	4603      	mov	r3, r0
 80154ee:	71fb      	strb	r3, [r7, #7]
 80154f0:	460b      	mov	r3, r1
 80154f2:	71bb      	strb	r3, [r7, #6]
 80154f4:	4613      	mov	r3, r2
 80154f6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80154f8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80154fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015500:	429a      	cmp	r2, r3
 8015502:	db07      	blt.n	8015514 <RegionCommonValueInRange+0x2e>
 8015504:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015508:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801550c:	429a      	cmp	r2, r3
 801550e:	dc01      	bgt.n	8015514 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015510:	2301      	movs	r3, #1
 8015512:	e000      	b.n	8015516 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	370c      	adds	r7, #12
 801551a:	46bd      	mov	sp, r7
 801551c:	bc80      	pop	{r7}
 801551e:	4770      	bx	lr

08015520 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015520:	b480      	push	{r7}
 8015522:	b085      	sub	sp, #20
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	460b      	mov	r3, r1
 801552a:	70fb      	strb	r3, [r7, #3]
 801552c:	4613      	mov	r3, r2
 801552e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015530:	78fb      	ldrb	r3, [r7, #3]
 8015532:	091b      	lsrs	r3, r3, #4
 8015534:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015536:	78bb      	ldrb	r3, [r7, #2]
 8015538:	091b      	lsrs	r3, r3, #4
 801553a:	b2db      	uxtb	r3, r3
 801553c:	7bfa      	ldrb	r2, [r7, #15]
 801553e:	429a      	cmp	r2, r3
 8015540:	d803      	bhi.n	801554a <RegionCommonChanDisable+0x2a>
 8015542:	78fa      	ldrb	r2, [r7, #3]
 8015544:	78bb      	ldrb	r3, [r7, #2]
 8015546:	429a      	cmp	r2, r3
 8015548:	d301      	bcc.n	801554e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801554a:	2300      	movs	r3, #0
 801554c:	e017      	b.n	801557e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801554e:	7bfb      	ldrb	r3, [r7, #15]
 8015550:	005b      	lsls	r3, r3, #1
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	4413      	add	r3, r2
 8015556:	881b      	ldrh	r3, [r3, #0]
 8015558:	b21a      	sxth	r2, r3
 801555a:	78fb      	ldrb	r3, [r7, #3]
 801555c:	f003 030f 	and.w	r3, r3, #15
 8015560:	2101      	movs	r1, #1
 8015562:	fa01 f303 	lsl.w	r3, r1, r3
 8015566:	b21b      	sxth	r3, r3
 8015568:	43db      	mvns	r3, r3
 801556a:	b21b      	sxth	r3, r3
 801556c:	4013      	ands	r3, r2
 801556e:	b219      	sxth	r1, r3
 8015570:	7bfb      	ldrb	r3, [r7, #15]
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	687a      	ldr	r2, [r7, #4]
 8015576:	4413      	add	r3, r2
 8015578:	b28a      	uxth	r2, r1
 801557a:	801a      	strh	r2, [r3, #0]

    return true;
 801557c:	2301      	movs	r3, #1
}
 801557e:	4618      	mov	r0, r3
 8015580:	3714      	adds	r7, #20
 8015582:	46bd      	mov	sp, r7
 8015584:	bc80      	pop	{r7}
 8015586:	4770      	bx	lr

08015588 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b084      	sub	sp, #16
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	460b      	mov	r3, r1
 8015592:	70fb      	strb	r3, [r7, #3]
 8015594:	4613      	mov	r3, r2
 8015596:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015598:	2300      	movs	r3, #0
 801559a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	e018      	b.n	80155d8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80155a6:	78fb      	ldrb	r3, [r7, #3]
 80155a8:	73bb      	strb	r3, [r7, #14]
 80155aa:	e010      	b.n	80155ce <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80155ac:	7bbb      	ldrb	r3, [r7, #14]
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	687a      	ldr	r2, [r7, #4]
 80155b2:	4413      	add	r3, r2
 80155b4:	881b      	ldrh	r3, [r3, #0]
 80155b6:	2110      	movs	r1, #16
 80155b8:	4618      	mov	r0, r3
 80155ba:	f7ff fef9 	bl	80153b0 <CountChannels>
 80155be:	4603      	mov	r3, r0
 80155c0:	461a      	mov	r2, r3
 80155c2:	7bfb      	ldrb	r3, [r7, #15]
 80155c4:	4413      	add	r3, r2
 80155c6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80155c8:	7bbb      	ldrb	r3, [r7, #14]
 80155ca:	3301      	adds	r3, #1
 80155cc:	73bb      	strb	r3, [r7, #14]
 80155ce:	7bba      	ldrb	r2, [r7, #14]
 80155d0:	78bb      	ldrb	r3, [r7, #2]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d3ea      	bcc.n	80155ac <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80155d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3710      	adds	r7, #16
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80155e0:	b480      	push	{r7}
 80155e2:	b087      	sub	sp, #28
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	4613      	mov	r3, r2
 80155ec:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d016      	beq.n	8015622 <RegionCommonChanMaskCopy+0x42>
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d013      	beq.n	8015622 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80155fa:	2300      	movs	r3, #0
 80155fc:	75fb      	strb	r3, [r7, #23]
 80155fe:	e00c      	b.n	801561a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015600:	7dfb      	ldrb	r3, [r7, #23]
 8015602:	005b      	lsls	r3, r3, #1
 8015604:	68ba      	ldr	r2, [r7, #8]
 8015606:	441a      	add	r2, r3
 8015608:	7dfb      	ldrb	r3, [r7, #23]
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	68f9      	ldr	r1, [r7, #12]
 801560e:	440b      	add	r3, r1
 8015610:	8812      	ldrh	r2, [r2, #0]
 8015612:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015614:	7dfb      	ldrb	r3, [r7, #23]
 8015616:	3301      	adds	r3, #1
 8015618:	75fb      	strb	r3, [r7, #23]
 801561a:	7dfa      	ldrb	r2, [r7, #23]
 801561c:	79fb      	ldrb	r3, [r7, #7]
 801561e:	429a      	cmp	r2, r3
 8015620:	d3ee      	bcc.n	8015600 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015622:	bf00      	nop
 8015624:	371c      	adds	r7, #28
 8015626:	46bd      	mov	sp, r7
 8015628:	bc80      	pop	{r7}
 801562a:	4770      	bx	lr

0801562c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801562c:	b082      	sub	sp, #8
 801562e:	b580      	push	{r7, lr}
 8015630:	b086      	sub	sp, #24
 8015632:	af00      	add	r7, sp, #0
 8015634:	60f8      	str	r0, [r7, #12]
 8015636:	60b9      	str	r1, [r7, #8]
 8015638:	627b      	str	r3, [r7, #36]	@ 0x24
 801563a:	4613      	mov	r3, r2
 801563c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801563e:	79f9      	ldrb	r1, [r7, #7]
 8015640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015644:	cb0c      	ldmia	r3, {r2, r3}
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	f7ff fd8b 	bl	8015162 <GetDutyCycle>
 801564c:	4603      	mov	r3, r0
 801564e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	68da      	ldr	r2, [r3, #12]
 8015654:	8afb      	ldrh	r3, [r7, #22]
 8015656:	68b9      	ldr	r1, [r7, #8]
 8015658:	fb01 f303 	mul.w	r3, r1, r3
 801565c:	429a      	cmp	r2, r3
 801565e:	d909      	bls.n	8015674 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	68da      	ldr	r2, [r3, #12]
 8015664:	8afb      	ldrh	r3, [r7, #22]
 8015666:	68b9      	ldr	r1, [r7, #8]
 8015668:	fb01 f303 	mul.w	r3, r1, r3
 801566c:	1ad2      	subs	r2, r2, r3
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015672:	e002      	b.n	801567a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2200      	movs	r2, #0
 8015678:	60da      	str	r2, [r3, #12]
}
 801567a:	bf00      	nop
 801567c:	3718      	adds	r7, #24
 801567e:	46bd      	mov	sp, r7
 8015680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015684:	b002      	add	sp, #8
 8015686:	4770      	bx	lr

08015688 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801568a:	b08f      	sub	sp, #60	@ 0x3c
 801568c:	af04      	add	r7, sp, #16
 801568e:	6039      	str	r1, [r7, #0]
 8015690:	4611      	mov	r1, r2
 8015692:	461a      	mov	r2, r3
 8015694:	4603      	mov	r3, r0
 8015696:	71fb      	strb	r3, [r7, #7]
 8015698:	460b      	mov	r3, r1
 801569a:	71bb      	strb	r3, [r7, #6]
 801569c:	4613      	mov	r3, r2
 801569e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80156a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80156a4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80156a6:	f007 fa51 	bl	801cb4c <UTIL_TIMER_GetCurrentTime>
 80156aa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80156ac:	2300      	movs	r3, #0
 80156ae:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80156b0:	2301      	movs	r3, #1
 80156b2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80156ba:	2300      	movs	r3, #0
 80156bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80156c0:	e0ba      	b.n	8015838 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80156c2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80156c6:	4613      	mov	r3, r2
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	4413      	add	r3, r2
 80156cc:	00db      	lsls	r3, r3, #3
 80156ce:	461a      	mov	r2, r3
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	189c      	adds	r4, r3, r2
 80156d4:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80156d8:	797a      	ldrb	r2, [r7, #5]
 80156da:	79fd      	ldrb	r5, [r7, #7]
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	9302      	str	r3, [sp, #8]
 80156e0:	46ec      	mov	ip, sp
 80156e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80156e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80156ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80156ee:	4633      	mov	r3, r6
 80156f0:	4629      	mov	r1, r5
 80156f2:	4620      	mov	r0, r4
 80156f4:	f7ff fe22 	bl	801533c <UpdateTimeCredits>
 80156f8:	4603      	mov	r3, r0
 80156fa:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80156fc:	8afa      	ldrh	r2, [r7, #22]
 80156fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015700:	fb02 f303 	mul.w	r3, r2, r3
 8015704:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015706:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801570a:	4613      	mov	r3, r2
 801570c:	005b      	lsls	r3, r3, #1
 801570e:	4413      	add	r3, r2
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	461a      	mov	r2, r3
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	4413      	add	r3, r2
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	69ba      	ldr	r2, [r7, #24]
 801571c:	429a      	cmp	r2, r3
 801571e:	d308      	bcc.n	8015732 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015720:	797b      	ldrb	r3, [r7, #5]
 8015722:	f083 0301 	eor.w	r3, r3, #1
 8015726:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015728:	2b00      	cmp	r3, #0
 801572a:	d013      	beq.n	8015754 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801572c:	79fb      	ldrb	r3, [r7, #7]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d010      	beq.n	8015754 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015732:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015736:	4613      	mov	r3, r2
 8015738:	005b      	lsls	r3, r3, #1
 801573a:	4413      	add	r3, r2
 801573c:	00db      	lsls	r3, r3, #3
 801573e:	461a      	mov	r2, r3
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	4413      	add	r3, r2
 8015744:	2201      	movs	r2, #1
 8015746:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015748:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801574c:	3301      	adds	r3, #1
 801574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015752:	e06c      	b.n	801582e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015754:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015758:	4613      	mov	r3, r2
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	461a      	mov	r2, r3
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	4413      	add	r3, r2
 8015766:	2200      	movs	r2, #0
 8015768:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801576a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801576e:	4613      	mov	r3, r2
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4413      	add	r3, r2
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	461a      	mov	r2, r3
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	4413      	add	r3, r2
 801577c:	691b      	ldr	r3, [r3, #16]
 801577e:	69ba      	ldr	r2, [r7, #24]
 8015780:	429a      	cmp	r2, r3
 8015782:	d215      	bcs.n	80157b0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015784:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015788:	4613      	mov	r3, r2
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	4413      	add	r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	461a      	mov	r2, r3
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	4413      	add	r3, r2
 8015796:	68db      	ldr	r3, [r3, #12]
 8015798:	69ba      	ldr	r2, [r7, #24]
 801579a:	1ad3      	subs	r3, r2, r3
 801579c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801579e:	4293      	cmp	r3, r2
 80157a0:	bf28      	it	cs
 80157a2:	4613      	movcs	r3, r2
 80157a4:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80157a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80157aa:	3301      	adds	r3, #1
 80157ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80157b0:	79fb      	ldrb	r3, [r7, #7]
 80157b2:	f083 0301 	eor.w	r3, r3, #1
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d038      	beq.n	801582e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80157bc:	2300      	movs	r3, #0
 80157be:	60fb      	str	r3, [r7, #12]
 80157c0:	2300      	movs	r3, #0
 80157c2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80157c4:	8afb      	ldrh	r3, [r7, #22]
 80157c6:	2b64      	cmp	r3, #100	@ 0x64
 80157c8:	d103      	bne.n	80157d2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80157ca:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80157ce:	60fb      	str	r3, [r7, #12]
 80157d0:	e009      	b.n	80157e6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80157d2:	8afb      	ldrh	r3, [r7, #22]
 80157d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80157d8:	d103      	bne.n	80157e2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80157da:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80157de:	60fb      	str	r3, [r7, #12]
 80157e0:	e001      	b.n	80157e6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80157e2:	4b1e      	ldr	r3, [pc, #120]	@ (801585c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80157e4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80157e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157e8:	4a1c      	ldr	r2, [pc, #112]	@ (801585c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80157ea:	4293      	cmp	r3, r2
 80157ec:	d90e      	bls.n	801580c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157f2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80157f6:	3b30      	subs	r3, #48	@ 0x30
 80157f8:	4919      	ldr	r1, [pc, #100]	@ (8015860 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80157fa:	fba1 1303 	umull	r1, r3, r1, r3
 80157fe:	0c1b      	lsrs	r3, r3, #16
 8015800:	3301      	adds	r3, #1
 8015802:	4918      	ldr	r1, [pc, #96]	@ (8015864 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015804:	fb01 f303 	mul.w	r3, r1, r3
 8015808:	4413      	add	r3, r2
 801580a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801580c:	f107 000c 	add.w	r0, r7, #12
 8015810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015816:	f107 020c 	add.w	r2, r7, #12
 801581a:	ca06      	ldmia	r2, {r1, r2}
 801581c:	f006 fea3 	bl	801c566 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015820:	f107 030c 	add.w	r3, r7, #12
 8015824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015828:	f006 ff5c 	bl	801c6e4 <SysTimeToMs>
 801582c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801582e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015832:	3301      	adds	r3, #1
 8015834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015838:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801583c:	79bb      	ldrb	r3, [r7, #6]
 801583e:	429a      	cmp	r2, r3
 8015840:	f4ff af3f 	bcc.w	80156c2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8015844:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015848:	2b00      	cmp	r3, #0
 801584a:	d102      	bne.n	8015852 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801584c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015850:	e000      	b.n	8015854 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015854:	4618      	mov	r0, r3
 8015856:	372c      	adds	r7, #44	@ 0x2c
 8015858:	46bd      	mov	sp, r7
 801585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801585c:	0001ec30 	.word	0x0001ec30
 8015860:	c22e4507 	.word	0xc22e4507
 8015864:	00015180 	.word	0x00015180

08015868 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015868:	b480      	push	{r7}
 801586a:	b085      	sub	sp, #20
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015872:	2300      	movs	r3, #0
 8015874:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	2b03      	cmp	r3, #3
 801587c:	d13f      	bne.n	80158fe <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	3301      	adds	r3, #1
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	b25a      	sxtb	r2, r3
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015890:	f003 030f 	and.w	r3, r3, #15
 8015894:	b25a      	sxtb	r2, r3
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	091b      	lsrs	r3, r3, #4
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	b25a      	sxtb	r2, r3
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3302      	adds	r3, #2
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	461a      	mov	r2, r3
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	889b      	ldrh	r3, [r3, #4]
 80158bc:	b21a      	sxth	r2, r3
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	3303      	adds	r3, #3
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	021b      	lsls	r3, r3, #8
 80158c6:	b21b      	sxth	r3, r3
 80158c8:	4313      	orrs	r3, r2
 80158ca:	b21b      	sxth	r3, r3
 80158cc:	b29a      	uxth	r2, r3
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	791a      	ldrb	r2, [r3, #4]
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	091b      	lsrs	r3, r3, #4
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	f003 0307 	and.w	r3, r3, #7
 80158e6:	b2da      	uxtb	r2, r3
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	f003 030f 	and.w	r3, r3, #15
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80158fa:	2305      	movs	r3, #5
 80158fc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80158fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015900:	4618      	mov	r0, r3
 8015902:	3714      	adds	r7, #20
 8015904:	46bd      	mov	sp, r7
 8015906:	bc80      	pop	{r7}
 8015908:	4770      	bx	lr

0801590a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801590a:	b5b0      	push	{r4, r5, r7, lr}
 801590c:	b088      	sub	sp, #32
 801590e:	af02      	add	r7, sp, #8
 8015910:	60f8      	str	r0, [r7, #12]
 8015912:	60b9      	str	r1, [r7, #8]
 8015914:	607a      	str	r2, [r7, #4]
 8015916:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	791b      	ldrb	r3, [r3, #4]
 801591c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	799b      	ldrb	r3, [r3, #6]
 8015922:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	79db      	ldrb	r3, [r3, #7]
 8015928:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	7a1b      	ldrb	r3, [r3, #8]
 801592e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	795b      	ldrb	r3, [r3, #5]
 8015934:	f083 0301 	eor.w	r3, r3, #1
 8015938:	b2db      	uxtb	r3, r3
 801593a:	2b00      	cmp	r3, #0
 801593c:	d008      	beq.n	8015950 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	7adb      	ldrb	r3, [r3, #11]
 8015942:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	7a5b      	ldrb	r3, [r3, #9]
 8015948:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	7a9b      	ldrb	r3, [r3, #10]
 801594e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015950:	7dfb      	ldrb	r3, [r7, #23]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d03a      	beq.n	80159cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	7b18      	ldrb	r0, [r3, #12]
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	6919      	ldr	r1, [r3, #16]
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	6992      	ldr	r2, [r2, #24]
 801596e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015972:	9201      	str	r2, [sp, #4]
 8015974:	9300      	str	r3, [sp, #0]
 8015976:	462b      	mov	r3, r5
 8015978:	4622      	mov	r2, r4
 801597a:	f7ff fd42 	bl	8015402 <RegionCommonChanVerifyDr>
 801597e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015980:	f083 0301 	eor.w	r3, r3, #1
 8015984:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015986:	2b00      	cmp	r3, #0
 8015988:	d003      	beq.n	8015992 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 801598a:	7dfb      	ldrb	r3, [r7, #23]
 801598c:	f023 0302 	bic.w	r3, r3, #2
 8015990:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801599e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f7ff fd9f 	bl	80154e6 <RegionCommonValueInRange>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d10e      	bne.n	80159cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80159b4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	da03      	bge.n	80159c4 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	7f5b      	ldrb	r3, [r3, #29]
 80159c0:	757b      	strb	r3, [r7, #21]
 80159c2:	e003      	b.n	80159cc <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80159c4:	7dfb      	ldrb	r3, [r7, #23]
 80159c6:	f023 0304 	bic.w	r3, r3, #4
 80159ca:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80159cc:	7dfb      	ldrb	r3, [r7, #23]
 80159ce:	2b07      	cmp	r3, #7
 80159d0:	d105      	bne.n	80159de <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 80159d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d101      	bne.n	80159de <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80159da:	2301      	movs	r3, #1
 80159dc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	7dba      	ldrb	r2, [r7, #22]
 80159e2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	7d7a      	ldrb	r2, [r7, #21]
 80159e8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80159ea:	7d3a      	ldrb	r2, [r7, #20]
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	701a      	strb	r2, [r3, #0]

    return status;
 80159f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3718      	adds	r7, #24
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080159fc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	4603      	mov	r3, r0
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015a08:	79fb      	ldrb	r3, [r7, #7]
 8015a0a:	4a06      	ldr	r2, [pc, #24]	@ (8015a24 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a10:	461a      	mov	r2, r3
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	370c      	adds	r7, #12
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bc80      	pop	{r7}
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	000f4240 	.word	0x000f4240

08015a28 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015a32:	79fb      	ldrb	r3, [r7, #7]
 8015a34:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8015a38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	370c      	adds	r7, #12
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bc80      	pop	{r7}
 8015a44:	4770      	bx	lr
	...

08015a48 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b085      	sub	sp, #20
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	60f8      	str	r0, [r7, #12]
 8015a50:	607a      	str	r2, [r7, #4]
 8015a52:	603b      	str	r3, [r7, #0]
 8015a54:	460b      	mov	r3, r1
 8015a56:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015a58:	7afa      	ldrb	r2, [r7, #11]
 8015a5a:	7afb      	ldrb	r3, [r7, #11]
 8015a5c:	3b04      	subs	r3, #4
 8015a5e:	4619      	mov	r1, r3
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	fb03 f101 	mul.w	r1, r3, r1
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015a6c:	fb00 f303 	mul.w	r3, r0, r3
 8015a70:	440b      	add	r3, r1
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d013      	beq.n	8015aa0 <RegionCommonComputeRxWindowParameters+0x58>
 8015a78:	7afb      	ldrb	r3, [r7, #11]
 8015a7a:	3b04      	subs	r3, #4
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	fb03 f101 	mul.w	r1, r3, r1
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015a8a:	fb00 f303 	mul.w	r3, r0, r3
 8015a8e:	440b      	add	r3, r1
 8015a90:	0059      	lsls	r1, r3, #1
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	440b      	add	r3, r1
 8015a96:	1e59      	subs	r1, r3, #1
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8015a9e:	e00f      	b.n	8015ac0 <RegionCommonComputeRxWindowParameters+0x78>
 8015aa0:	7afb      	ldrb	r3, [r7, #11]
 8015aa2:	3b04      	subs	r3, #4
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	fb03 f101 	mul.w	r1, r3, r1
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015ab2:	fb00 f303 	mul.w	r3, r0, r3
 8015ab6:	440b      	add	r3, r1
 8015ab8:	0059      	lsls	r1, r3, #1
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	bf38      	it	cc
 8015ac4:	461a      	movcc	r2, r3
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	4619      	mov	r1, r3
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	68fa      	ldr	r2, [r7, #12]
 8015ad6:	fb02 f303 	mul.w	r3, r2, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d007      	beq.n	8015aee <RegionCommonComputeRxWindowParameters+0xa6>
 8015ade:	69bb      	ldr	r3, [r7, #24]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	68fa      	ldr	r2, [r7, #12]
 8015ae4:	fb02 f303 	mul.w	r3, r2, r3
 8015ae8:	3301      	adds	r3, #1
 8015aea:	085b      	lsrs	r3, r3, #1
 8015aec:	e005      	b.n	8015afa <RegionCommonComputeRxWindowParameters+0xb2>
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	68fa      	ldr	r2, [r7, #12]
 8015af4:	fb02 f303 	mul.w	r3, r2, r3
 8015af8:	085b      	lsrs	r3, r3, #1
 8015afa:	1acb      	subs	r3, r1, r3
 8015afc:	683a      	ldr	r2, [r7, #0]
 8015afe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015b02:	fb01 f202 	mul.w	r2, r1, r2
 8015b06:	1a9b      	subs	r3, r3, r2
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	dd27      	ble.n	8015b5c <RegionCommonComputeRxWindowParameters+0x114>
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4619      	mov	r1, r3
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	68fa      	ldr	r2, [r7, #12]
 8015b18:	fb02 f303 	mul.w	r3, r2, r3
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d007      	beq.n	8015b30 <RegionCommonComputeRxWindowParameters+0xe8>
 8015b20:	69bb      	ldr	r3, [r7, #24]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	68fa      	ldr	r2, [r7, #12]
 8015b26:	fb02 f303 	mul.w	r3, r2, r3
 8015b2a:	3301      	adds	r3, #1
 8015b2c:	085b      	lsrs	r3, r3, #1
 8015b2e:	e005      	b.n	8015b3c <RegionCommonComputeRxWindowParameters+0xf4>
 8015b30:	69bb      	ldr	r3, [r7, #24]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	68fa      	ldr	r2, [r7, #12]
 8015b36:	fb02 f303 	mul.w	r3, r2, r3
 8015b3a:	085b      	lsrs	r3, r3, #1
 8015b3c:	1acb      	subs	r3, r1, r3
 8015b3e:	683a      	ldr	r2, [r7, #0]
 8015b40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015b44:	fb01 f202 	mul.w	r2, r1, r2
 8015b48:	1a9b      	subs	r3, r3, r2
 8015b4a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8015b4e:	4a19      	ldr	r2, [pc, #100]	@ (8015bb4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015b50:	fb82 1203 	smull	r1, r2, r2, r3
 8015b54:	1192      	asrs	r2, r2, #6
 8015b56:	17db      	asrs	r3, r3, #31
 8015b58:	1ad3      	subs	r3, r2, r3
 8015b5a:	e024      	b.n	8015ba6 <RegionCommonComputeRxWindowParameters+0x15e>
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4619      	mov	r1, r3
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	68fa      	ldr	r2, [r7, #12]
 8015b68:	fb02 f303 	mul.w	r3, r2, r3
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d007      	beq.n	8015b80 <RegionCommonComputeRxWindowParameters+0x138>
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	68fa      	ldr	r2, [r7, #12]
 8015b76:	fb02 f303 	mul.w	r3, r2, r3
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	085b      	lsrs	r3, r3, #1
 8015b7e:	e005      	b.n	8015b8c <RegionCommonComputeRxWindowParameters+0x144>
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68fa      	ldr	r2, [r7, #12]
 8015b86:	fb02 f303 	mul.w	r3, r2, r3
 8015b8a:	085b      	lsrs	r3, r3, #1
 8015b8c:	1acb      	subs	r3, r1, r3
 8015b8e:	683a      	ldr	r2, [r7, #0]
 8015b90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015b94:	fb01 f202 	mul.w	r2, r1, r2
 8015b98:	1a9b      	subs	r3, r3, r2
 8015b9a:	4a06      	ldr	r2, [pc, #24]	@ (8015bb4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8015ba0:	1192      	asrs	r2, r2, #6
 8015ba2:	17db      	asrs	r3, r3, #31
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	69fa      	ldr	r2, [r7, #28]
 8015ba8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015baa:	bf00      	nop
 8015bac:	3714      	adds	r7, #20
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bc80      	pop	{r7}
 8015bb2:	4770      	bx	lr
 8015bb4:	10624dd3 	.word	0x10624dd3

08015bb8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b086      	sub	sp, #24
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ea fdff 	bl	80007d4 <__aeabi_ui2f>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	4619      	mov	r1, r3
 8015bda:	68b8      	ldr	r0, [r7, #8]
 8015bdc:	f7ea fd48 	bl	8000670 <__aeabi_fsub>
 8015be0:	4603      	mov	r3, r0
 8015be2:	6879      	ldr	r1, [r7, #4]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7ea fd43 	bl	8000670 <__aeabi_fsub>
 8015bea:	4603      	mov	r3, r0
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7ea fc33 	bl	8000458 <__aeabi_f2d>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	4610      	mov	r0, r2
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	f007 fafd 	bl	801d1f8 <floor>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	460b      	mov	r3, r1
 8015c02:	4610      	mov	r0, r2
 8015c04:	4619      	mov	r1, r3
 8015c06:	f7ea fd07 	bl	8000618 <__aeabi_d2iz>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8015c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3718      	adds	r7, #24
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}

08015c1a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8015c1a:	b590      	push	{r4, r7, lr}
 8015c1c:	b087      	sub	sp, #28
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	60f8      	str	r0, [r7, #12]
 8015c22:	60b9      	str	r1, [r7, #8]
 8015c24:	607a      	str	r2, [r7, #4]
 8015c26:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015c30:	2300      	movs	r3, #0
 8015c32:	757b      	strb	r3, [r7, #21]
 8015c34:	2300      	movs	r3, #0
 8015c36:	753b      	strb	r3, [r7, #20]
 8015c38:	e09c      	b.n	8015d74 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	74fb      	strb	r3, [r7, #19]
 8015c3e:	e08f      	b.n	8015d60 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	685a      	ldr	r2, [r3, #4]
 8015c44:	7d3b      	ldrb	r3, [r7, #20]
 8015c46:	005b      	lsls	r3, r3, #1
 8015c48:	4413      	add	r3, r2
 8015c4a:	881b      	ldrh	r3, [r3, #0]
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	7cfb      	ldrb	r3, [r7, #19]
 8015c50:	fa42 f303 	asr.w	r3, r2, r3
 8015c54:	f003 0301 	and.w	r3, r3, #1
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d07e      	beq.n	8015d5a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	689a      	ldr	r2, [r3, #8]
 8015c60:	7d79      	ldrb	r1, [r7, #21]
 8015c62:	7cfb      	ldrb	r3, [r7, #19]
 8015c64:	440b      	add	r3, r1
 8015c66:	4619      	mov	r1, r3
 8015c68:	460b      	mov	r3, r1
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	440b      	add	r3, r1
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	4413      	add	r3, r2
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d06b      	beq.n	8015d50 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f083 0301 	eor.w	r3, r3, #1
 8015c80:	b2db      	uxtb	r3, r3
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d011      	beq.n	8015caa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d00d      	beq.n	8015caa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	695a      	ldr	r2, [r3, #20]
 8015c92:	7d3b      	ldrb	r3, [r7, #20]
 8015c94:	005b      	lsls	r3, r3, #1
 8015c96:	4413      	add	r3, r2
 8015c98:	881b      	ldrh	r3, [r3, #0]
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	7cfb      	ldrb	r3, [r7, #19]
 8015c9e:	fa42 f303 	asr.w	r3, r2, r3
 8015ca2:	f003 0301 	and.w	r3, r3, #1
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d054      	beq.n	8015d54 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	785b      	ldrb	r3, [r3, #1]
 8015cae:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	689a      	ldr	r2, [r3, #8]
 8015cb4:	7d79      	ldrb	r1, [r7, #21]
 8015cb6:	7cfb      	ldrb	r3, [r7, #19]
 8015cb8:	440b      	add	r3, r1
 8015cba:	4619      	mov	r1, r3
 8015cbc:	460b      	mov	r3, r1
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	440b      	add	r3, r1
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	4413      	add	r3, r2
 8015cc6:	7a1b      	ldrb	r3, [r3, #8]
 8015cc8:	f343 0303 	sbfx	r3, r3, #0, #4
 8015ccc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015cce:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	689a      	ldr	r2, [r3, #8]
 8015cd4:	7d79      	ldrb	r1, [r7, #21]
 8015cd6:	7cfb      	ldrb	r3, [r7, #19]
 8015cd8:	440b      	add	r3, r1
 8015cda:	4619      	mov	r1, r3
 8015cdc:	460b      	mov	r3, r1
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	440b      	add	r3, r1
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	4413      	add	r3, r2
 8015ce6:	7a1b      	ldrb	r3, [r3, #8]
 8015ce8:	f343 1303 	sbfx	r3, r3, #4, #4
 8015cec:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015cee:	461a      	mov	r2, r3
 8015cf0:	4621      	mov	r1, r4
 8015cf2:	f7ff fbf8 	bl	80154e6 <RegionCommonValueInRange>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d02d      	beq.n	8015d58 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	68da      	ldr	r2, [r3, #12]
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	6899      	ldr	r1, [r3, #8]
 8015d04:	7d78      	ldrb	r0, [r7, #21]
 8015d06:	7cfb      	ldrb	r3, [r7, #19]
 8015d08:	4403      	add	r3, r0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4403      	add	r3, r0
 8015d12:	009b      	lsls	r3, r3, #2
 8015d14:	440b      	add	r3, r1
 8015d16:	7a5b      	ldrb	r3, [r3, #9]
 8015d18:	4619      	mov	r1, r3
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	005b      	lsls	r3, r3, #1
 8015d1e:	440b      	add	r3, r1
 8015d20:	00db      	lsls	r3, r3, #3
 8015d22:	4413      	add	r3, r2
 8015d24:	7d1b      	ldrb	r3, [r3, #20]
 8015d26:	f083 0301 	eor.w	r3, r3, #1
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d003      	beq.n	8015d38 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8015d30:	7dbb      	ldrb	r3, [r7, #22]
 8015d32:	3301      	adds	r3, #1
 8015d34:	75bb      	strb	r3, [r7, #22]
                    continue;
 8015d36:	e010      	b.n	8015d5a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015d38:	7dfb      	ldrb	r3, [r7, #23]
 8015d3a:	1c5a      	adds	r2, r3, #1
 8015d3c:	75fa      	strb	r2, [r7, #23]
 8015d3e:	461a      	mov	r2, r3
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	4413      	add	r3, r2
 8015d44:	7d79      	ldrb	r1, [r7, #21]
 8015d46:	7cfa      	ldrb	r2, [r7, #19]
 8015d48:	440a      	add	r2, r1
 8015d4a:	b2d2      	uxtb	r2, r2
 8015d4c:	701a      	strb	r2, [r3, #0]
 8015d4e:	e004      	b.n	8015d5a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015d50:	bf00      	nop
 8015d52:	e002      	b.n	8015d5a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015d54:	bf00      	nop
 8015d56:	e000      	b.n	8015d5a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015d58:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015d5a:	7cfb      	ldrb	r3, [r7, #19]
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	74fb      	strb	r3, [r7, #19]
 8015d60:	7cfb      	ldrb	r3, [r7, #19]
 8015d62:	2b0f      	cmp	r3, #15
 8015d64:	f67f af6c 	bls.w	8015c40 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015d68:	7d7b      	ldrb	r3, [r7, #21]
 8015d6a:	3310      	adds	r3, #16
 8015d6c:	757b      	strb	r3, [r7, #21]
 8015d6e:	7d3b      	ldrb	r3, [r7, #20]
 8015d70:	3301      	adds	r3, #1
 8015d72:	753b      	strb	r3, [r7, #20]
 8015d74:	7d7b      	ldrb	r3, [r7, #21]
 8015d76:	b29a      	uxth	r2, r3
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	8a1b      	ldrh	r3, [r3, #16]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	f4ff af5c 	bcc.w	8015c3a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	7dfa      	ldrb	r2, [r7, #23]
 8015d86:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	7dba      	ldrb	r2, [r7, #22]
 8015d8c:	701a      	strb	r2, [r3, #0]
}
 8015d8e:	bf00      	nop
 8015d90:	371c      	adds	r7, #28
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd90      	pop	{r4, r7, pc}

08015d96 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d98:	b08b      	sub	sp, #44	@ 0x2c
 8015d9a:	af04      	add	r7, sp, #16
 8015d9c:	60f8      	str	r0, [r7, #12]
 8015d9e:	60b9      	str	r1, [r7, #8]
 8015da0:	607a      	str	r2, [r7, #4]
 8015da2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f006 fee1 	bl	801cb70 <UTIL_TIMER_GetElapsedTime>
 8015dae:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	681a      	ldr	r2, [r3, #0]
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	1ad2      	subs	r2, r2, r3
 8015db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dba:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dbe:	2201      	movs	r2, #1
 8015dc0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d004      	beq.n	8015dda <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015dd4:	697a      	ldr	r2, [r7, #20]
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d32b      	bcc.n	8015e32 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	69db      	ldr	r3, [r3, #28]
 8015de4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015dea:	68dd      	ldr	r5, [r3, #12]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	7a5e      	ldrb	r6, [r3, #9]
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	7d1b      	ldrb	r3, [r3, #20]
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	6992      	ldr	r2, [r2, #24]
 8015dfe:	9203      	str	r2, [sp, #12]
 8015e00:	68fa      	ldr	r2, [r7, #12]
 8015e02:	f10d 0e04 	add.w	lr, sp, #4
 8015e06:	320c      	adds	r2, #12
 8015e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e0c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015e10:	9300      	str	r3, [sp, #0]
 8015e12:	4663      	mov	r3, ip
 8015e14:	4632      	mov	r2, r6
 8015e16:	4629      	mov	r1, r5
 8015e18:	4620      	mov	r0, r4
 8015e1a:	f7ff fc35 	bl	8015688 <RegionCommonUpdateBandTimeOff>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e22:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	69d8      	ldr	r0, [r3, #28]
 8015e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e2a:	683a      	ldr	r2, [r7, #0]
 8015e2c:	6879      	ldr	r1, [r7, #4]
 8015e2e:	f7ff fef4 	bl	8015c1a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d004      	beq.n	8015e44 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015e40:	2300      	movs	r3, #0
 8015e42:	e006      	b.n	8015e52 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8015e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d001      	beq.n	8015e50 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015e4c:	230b      	movs	r3, #11
 8015e4e:	e000      	b.n	8015e52 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015e50:	230c      	movs	r3, #12
    }
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	371c      	adds	r7, #28
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e5a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015e5a:	b5b0      	push	{r4, r5, r7, lr}
 8015e5c:	b086      	sub	sp, #24
 8015e5e:	af02      	add	r7, sp, #8
 8015e60:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f993 2000 	ldrsb.w	r2, [r3]
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d103      	bne.n	8015e80 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015e7e:	e026      	b.n	8015ece <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015e80:	7bfb      	ldrb	r3, [r7, #15]
 8015e82:	3b01      	subs	r3, #1
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015e8e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d019      	beq.n	8015eca <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	78d8      	ldrb	r0, [r3, #3]
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6859      	ldr	r1, [r3, #4]
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	6892      	ldr	r2, [r2, #8]
 8015eae:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015eb2:	9201      	str	r2, [sp, #4]
 8015eb4:	9300      	str	r3, [sp, #0]
 8015eb6:	462b      	mov	r3, r5
 8015eb8:	4622      	mov	r2, r4
 8015eba:	f7ff faa2 	bl	8015402 <RegionCommonChanVerifyDr>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	f083 0301 	eor.w	r3, r3, #1
 8015ec4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d1da      	bne.n	8015e80 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3710      	adds	r7, #16
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bdb0      	pop	{r4, r5, r7, pc}

08015ed6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015ed6:	b480      	push	{r7}
 8015ed8:	b083      	sub	sp, #12
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	4603      	mov	r3, r0
 8015ede:	460a      	mov	r2, r1
 8015ee0:	71fb      	strb	r3, [r7, #7]
 8015ee2:	4613      	mov	r3, r2
 8015ee4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015ee6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	bfb8      	it	lt
 8015ef2:	4613      	movlt	r3, r2
 8015ef4:	b25b      	sxtb	r3, r3
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	370c      	adds	r7, #12
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bc80      	pop	{r7}
 8015efe:	4770      	bx	lr

08015f00 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8015f00:	b480      	push	{r7}
 8015f02:	b083      	sub	sp, #12
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	009b      	lsls	r3, r3, #2
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	4413      	add	r3, r2
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4a07      	ldr	r2, [pc, #28]	@ (8015f34 <RegionCommonGetBandwidth+0x34>)
 8015f16:	4293      	cmp	r3, r2
 8015f18:	d004      	beq.n	8015f24 <RegionCommonGetBandwidth+0x24>
 8015f1a:	4a07      	ldr	r2, [pc, #28]	@ (8015f38 <RegionCommonGetBandwidth+0x38>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	d003      	beq.n	8015f28 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8015f20:	2300      	movs	r3, #0
 8015f22:	e002      	b.n	8015f2a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8015f24:	2301      	movs	r3, #1
 8015f26:	e000      	b.n	8015f2a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8015f28:	2302      	movs	r3, #2
    }
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	370c      	adds	r7, #12
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bc80      	pop	{r7}
 8015f32:	4770      	bx	lr
 8015f34:	0003d090 	.word	0x0003d090
 8015f38:	0007a120 	.word	0x0007a120

08015f3c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015f3c:	b5b0      	push	{r4, r5, r7, lr}
 8015f3e:	b08c      	sub	sp, #48	@ 0x30
 8015f40:	af04      	add	r7, sp, #16
 8015f42:	4603      	mov	r3, r0
 8015f44:	6039      	str	r1, [r7, #0]
 8015f46:	71fb      	strb	r3, [r7, #7]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8015f4c:	4b17      	ldr	r3, [pc, #92]	@ (8015fac <RegionCommonRxConfigPrint+0x70>)
 8015f4e:	f107 0408 	add.w	r4, r7, #8
 8015f52:	461d      	mov	r5, r3
 8015f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f5c:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8015f60:	79fb      	ldrb	r3, [r7, #7]
 8015f62:	2b05      	cmp	r3, #5
 8015f64:	d812      	bhi.n	8015f8c <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8015f66:	79fb      	ldrb	r3, [r7, #7]
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	3320      	adds	r3, #32
 8015f6c:	443b      	add	r3, r7
 8015f6e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8015f72:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015f76:	9202      	str	r2, [sp, #8]
 8015f78:	683a      	ldr	r2, [r7, #0]
 8015f7a:	9201      	str	r2, [sp, #4]
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8015fb0 <RegionCommonRxConfigPrint+0x74>)
 8015f80:	2201      	movs	r2, #1
 8015f82:	2100      	movs	r1, #0
 8015f84:	2002      	movs	r0, #2
 8015f86:	f005 fe1f 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015f8a:	e00a      	b.n	8015fa2 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015f8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015f90:	9301      	str	r3, [sp, #4]
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	4b07      	ldr	r3, [pc, #28]	@ (8015fb4 <RegionCommonRxConfigPrint+0x78>)
 8015f98:	2201      	movs	r2, #1
 8015f9a:	2100      	movs	r1, #0
 8015f9c:	2002      	movs	r0, #2
 8015f9e:	f005 fe13 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8015fa2:	bf00      	nop
 8015fa4:	3720      	adds	r7, #32
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8015faa:	bf00      	nop
 8015fac:	0801d9f8 	.word	0x0801d9f8
 8015fb0:	0801d99c 	.word	0x0801d99c
 8015fb4:	0801d9bc 	.word	0x0801d9bc

08015fb8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b084      	sub	sp, #16
 8015fbc:	af02      	add	r7, sp, #8
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	460b      	mov	r3, r1
 8015fc2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	4b05      	ldr	r3, [pc, #20]	@ (8015fe4 <RegionCommonTxConfigPrint+0x2c>)
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	2002      	movs	r0, #2
 8015fd6:	f005 fdf7 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
}
 8015fda:	bf00      	nop
 8015fdc:	3708      	adds	r7, #8
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	0801da10 	.word	0x0801da10

08015fe8 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80160a8 <VerifyRfFreq+0xc0>)
 8015ff4:	6a1b      	ldr	r3, [r3, #32]
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	4798      	blx	r3
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	f083 0301 	eor.w	r3, r3, #1
 8016000:	b2db      	uxtb	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	d001      	beq.n	801600a <VerifyRfFreq+0x22>
    {
        return false;
 8016006:	2300      	movs	r3, #0
 8016008:	e04a      	b.n	80160a0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4a27      	ldr	r2, [pc, #156]	@ (80160ac <VerifyRfFreq+0xc4>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d307      	bcc.n	8016022 <VerifyRfFreq+0x3a>
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	4a26      	ldr	r2, [pc, #152]	@ (80160b0 <VerifyRfFreq+0xc8>)
 8016016:	4293      	cmp	r3, r2
 8016018:	d803      	bhi.n	8016022 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	2202      	movs	r2, #2
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	e03d      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	4a22      	ldr	r2, [pc, #136]	@ (80160b0 <VerifyRfFreq+0xc8>)
 8016026:	4293      	cmp	r3, r2
 8016028:	d907      	bls.n	801603a <VerifyRfFreq+0x52>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	4a21      	ldr	r2, [pc, #132]	@ (80160b4 <VerifyRfFreq+0xcc>)
 801602e:	4293      	cmp	r3, r2
 8016030:	d803      	bhi.n	801603a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	2200      	movs	r2, #0
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	e031      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	4a1d      	ldr	r2, [pc, #116]	@ (80160b4 <VerifyRfFreq+0xcc>)
 801603e:	4293      	cmp	r3, r2
 8016040:	d907      	bls.n	8016052 <VerifyRfFreq+0x6a>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4a1c      	ldr	r2, [pc, #112]	@ (80160b8 <VerifyRfFreq+0xd0>)
 8016046:	4293      	cmp	r3, r2
 8016048:	d803      	bhi.n	8016052 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	2201      	movs	r2, #1
 801604e:	701a      	strb	r2, [r3, #0]
 8016050:	e025      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4a19      	ldr	r2, [pc, #100]	@ (80160bc <VerifyRfFreq+0xd4>)
 8016056:	4293      	cmp	r3, r2
 8016058:	d907      	bls.n	801606a <VerifyRfFreq+0x82>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	4a18      	ldr	r2, [pc, #96]	@ (80160c0 <VerifyRfFreq+0xd8>)
 801605e:	4293      	cmp	r3, r2
 8016060:	d803      	bhi.n	801606a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	2205      	movs	r2, #5
 8016066:	701a      	strb	r2, [r3, #0]
 8016068:	e019      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	4a15      	ldr	r2, [pc, #84]	@ (80160c4 <VerifyRfFreq+0xdc>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d907      	bls.n	8016082 <VerifyRfFreq+0x9a>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4a14      	ldr	r2, [pc, #80]	@ (80160c8 <VerifyRfFreq+0xe0>)
 8016076:	4293      	cmp	r3, r2
 8016078:	d803      	bhi.n	8016082 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	2203      	movs	r2, #3
 801607e:	701a      	strb	r2, [r3, #0]
 8016080:	e00d      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	4a11      	ldr	r2, [pc, #68]	@ (80160cc <VerifyRfFreq+0xe4>)
 8016086:	4293      	cmp	r3, r2
 8016088:	d307      	bcc.n	801609a <VerifyRfFreq+0xb2>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	4a10      	ldr	r2, [pc, #64]	@ (80160d0 <VerifyRfFreq+0xe8>)
 801608e:	4293      	cmp	r3, r2
 8016090:	d803      	bhi.n	801609a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	2204      	movs	r2, #4
 8016096:	701a      	strb	r2, [r3, #0]
 8016098:	e001      	b.n	801609e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801609a:	2300      	movs	r3, #0
 801609c:	e000      	b.n	80160a0 <VerifyRfFreq+0xb8>
    }
    return true;
 801609e:	2301      	movs	r3, #1
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	0801e020 	.word	0x0801e020
 80160ac:	337055c0 	.word	0x337055c0
 80160b0:	338eda3f 	.word	0x338eda3f
 80160b4:	33bca100 	.word	0x33bca100
 80160b8:	33c5c8c0 	.word	0x33c5c8c0
 80160bc:	33c74f5f 	.word	0x33c74f5f
 80160c0:	33cef080 	.word	0x33cef080
 80160c4:	33d1fdbf 	.word	0x33d1fdbf
 80160c8:	33d5ce50 	.word	0x33d5ce50
 80160cc:	33d691a0 	.word	0x33d691a0
 80160d0:	33db2580 	.word	0x33db2580

080160d4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80160d4:	b590      	push	{r4, r7, lr}
 80160d6:	b08b      	sub	sp, #44	@ 0x2c
 80160d8:	af04      	add	r7, sp, #16
 80160da:	4603      	mov	r3, r0
 80160dc:	460a      	mov	r2, r1
 80160de:	71fb      	strb	r3, [r7, #7]
 80160e0:	4613      	mov	r3, r2
 80160e2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80160e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160e8:	4a1f      	ldr	r2, [pc, #124]	@ (8016168 <GetTimeOnAir+0x94>)
 80160ea:	5cd3      	ldrb	r3, [r2, r3]
 80160ec:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80160ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160f2:	491e      	ldr	r1, [pc, #120]	@ (801616c <GetTimeOnAir+0x98>)
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7ff ff03 	bl	8015f00 <RegionCommonGetBandwidth>
 80160fa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80160fc:	2300      	movs	r3, #0
 80160fe:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8016100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016104:	2b07      	cmp	r3, #7
 8016106:	d118      	bne.n	801613a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016108:	4b19      	ldr	r3, [pc, #100]	@ (8016170 <GetTimeOnAir+0x9c>)
 801610a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801610c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016110:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016114:	fb02 f303 	mul.w	r3, r2, r3
 8016118:	4619      	mov	r1, r3
 801611a:	88bb      	ldrh	r3, [r7, #4]
 801611c:	b2db      	uxtb	r3, r3
 801611e:	2201      	movs	r2, #1
 8016120:	9203      	str	r2, [sp, #12]
 8016122:	9302      	str	r3, [sp, #8]
 8016124:	2300      	movs	r3, #0
 8016126:	9301      	str	r3, [sp, #4]
 8016128:	2305      	movs	r3, #5
 801612a:	9300      	str	r3, [sp, #0]
 801612c:	2300      	movs	r3, #0
 801612e:	460a      	mov	r2, r1
 8016130:	68f9      	ldr	r1, [r7, #12]
 8016132:	2000      	movs	r0, #0
 8016134:	47a0      	blx	r4
 8016136:	6178      	str	r0, [r7, #20]
 8016138:	e011      	b.n	801615e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801613a:	4b0d      	ldr	r3, [pc, #52]	@ (8016170 <GetTimeOnAir+0x9c>)
 801613c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801613e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016142:	88bb      	ldrh	r3, [r7, #4]
 8016144:	b2db      	uxtb	r3, r3
 8016146:	2101      	movs	r1, #1
 8016148:	9103      	str	r1, [sp, #12]
 801614a:	9302      	str	r3, [sp, #8]
 801614c:	2300      	movs	r3, #0
 801614e:	9301      	str	r3, [sp, #4]
 8016150:	2308      	movs	r3, #8
 8016152:	9300      	str	r3, [sp, #0]
 8016154:	2301      	movs	r3, #1
 8016156:	68f9      	ldr	r1, [r7, #12]
 8016158:	2001      	movs	r0, #1
 801615a:	47a0      	blx	r4
 801615c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801615e:	697b      	ldr	r3, [r7, #20]
}
 8016160:	4618      	mov	r0, r3
 8016162:	371c      	adds	r7, #28
 8016164:	46bd      	mov	sp, r7
 8016166:	bd90      	pop	{r4, r7, pc}
 8016168:	0801df64 	.word	0x0801df64
 801616c:	0801df6c 	.word	0x0801df6c
 8016170:	0801e020 	.word	0x0801e020

08016174 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b088      	sub	sp, #32
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801617c:	2300      	movs	r3, #0
 801617e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	3b01      	subs	r3, #1
 8016186:	2b38      	cmp	r3, #56	@ 0x38
 8016188:	f200 8128 	bhi.w	80163dc <RegionEU868GetPhyParam+0x268>
 801618c:	a201      	add	r2, pc, #4	@ (adr r2, 8016194 <RegionEU868GetPhyParam+0x20>)
 801618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016192:	bf00      	nop
 8016194:	08016279 	.word	0x08016279
 8016198:	0801627f 	.word	0x0801627f
 801619c:	080163dd 	.word	0x080163dd
 80161a0:	080163dd 	.word	0x080163dd
 80161a4:	080163dd 	.word	0x080163dd
 80161a8:	08016285 	.word	0x08016285
 80161ac:	080163dd 	.word	0x080163dd
 80161b0:	080162bf 	.word	0x080162bf
 80161b4:	080163dd 	.word	0x080163dd
 80161b8:	080162c5 	.word	0x080162c5
 80161bc:	080162cb 	.word	0x080162cb
 80161c0:	080162d1 	.word	0x080162d1
 80161c4:	080162d7 	.word	0x080162d7
 80161c8:	080162e7 	.word	0x080162e7
 80161cc:	080162f7 	.word	0x080162f7
 80161d0:	080162fd 	.word	0x080162fd
 80161d4:	08016305 	.word	0x08016305
 80161d8:	0801630d 	.word	0x0801630d
 80161dc:	08016315 	.word	0x08016315
 80161e0:	0801631d 	.word	0x0801631d
 80161e4:	08016325 	.word	0x08016325
 80161e8:	0801632d 	.word	0x0801632d
 80161ec:	08016341 	.word	0x08016341
 80161f0:	08016347 	.word	0x08016347
 80161f4:	0801634d 	.word	0x0801634d
 80161f8:	08016353 	.word	0x08016353
 80161fc:	0801635f 	.word	0x0801635f
 8016200:	0801636b 	.word	0x0801636b
 8016204:	08016371 	.word	0x08016371
 8016208:	08016379 	.word	0x08016379
 801620c:	0801637f 	.word	0x0801637f
 8016210:	08016385 	.word	0x08016385
 8016214:	0801638d 	.word	0x0801638d
 8016218:	0801628b 	.word	0x0801628b
 801621c:	080163dd 	.word	0x080163dd
 8016220:	080163dd 	.word	0x080163dd
 8016224:	080163dd 	.word	0x080163dd
 8016228:	080163dd 	.word	0x080163dd
 801622c:	080163dd 	.word	0x080163dd
 8016230:	080163dd 	.word	0x080163dd
 8016234:	080163dd 	.word	0x080163dd
 8016238:	080163dd 	.word	0x080163dd
 801623c:	080163dd 	.word	0x080163dd
 8016240:	080163dd 	.word	0x080163dd
 8016244:	080163dd 	.word	0x080163dd
 8016248:	080163dd 	.word	0x080163dd
 801624c:	080163dd 	.word	0x080163dd
 8016250:	08016393 	.word	0x08016393
 8016254:	08016399 	.word	0x08016399
 8016258:	080163a7 	.word	0x080163a7
 801625c:	080163dd 	.word	0x080163dd
 8016260:	080163dd 	.word	0x080163dd
 8016264:	080163ad 	.word	0x080163ad
 8016268:	080163b3 	.word	0x080163b3
 801626c:	080163dd 	.word	0x080163dd
 8016270:	080163b9 	.word	0x080163b9
 8016274:	080163c9 	.word	0x080163c9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016278:	2300      	movs	r3, #0
 801627a:	61bb      	str	r3, [r7, #24]
            break;
 801627c:	e0af      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801627e:	2300      	movs	r3, #0
 8016280:	61bb      	str	r3, [r7, #24]
            break;
 8016282:	e0ac      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016284:	2300      	movs	r3, #0
 8016286:	61bb      	str	r3, [r7, #24]
            break;
 8016288:	e0a9      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016290:	733b      	strb	r3, [r7, #12]
 8016292:	2307      	movs	r3, #7
 8016294:	737b      	strb	r3, [r7, #13]
 8016296:	2300      	movs	r3, #0
 8016298:	73bb      	strb	r3, [r7, #14]
 801629a:	2310      	movs	r3, #16
 801629c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801629e:	4b53      	ldr	r3, [pc, #332]	@ (80163ec <RegionEU868GetPhyParam+0x278>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80162a6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80162a8:	4b50      	ldr	r3, [pc, #320]	@ (80163ec <RegionEU868GetPhyParam+0x278>)
 80162aa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80162ac:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80162ae:	f107 030c 	add.w	r3, r7, #12
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ff fdd1 	bl	8015e5a <RegionCommonGetNextLowerTxDr>
 80162b8:	4603      	mov	r3, r0
 80162ba:	61bb      	str	r3, [r7, #24]
            break;
 80162bc:	e08f      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80162be:	2300      	movs	r3, #0
 80162c0:	61bb      	str	r3, [r7, #24]
            break;
 80162c2:	e08c      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80162c4:	2300      	movs	r3, #0
 80162c6:	61bb      	str	r3, [r7, #24]
            break;
 80162c8:	e089      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80162ca:	2340      	movs	r3, #64	@ 0x40
 80162cc:	61bb      	str	r3, [r7, #24]
            break;
 80162ce:	e086      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80162d0:	2320      	movs	r3, #32
 80162d2:	61bb      	str	r3, [r7, #24]
            break;
 80162d4:	e083      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162dc:	461a      	mov	r2, r3
 80162de:	4b44      	ldr	r3, [pc, #272]	@ (80163f0 <RegionEU868GetPhyParam+0x27c>)
 80162e0:	5c9b      	ldrb	r3, [r3, r2]
 80162e2:	61bb      	str	r3, [r7, #24]
            break;
 80162e4:	e07b      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162ec:	461a      	mov	r2, r3
 80162ee:	4b41      	ldr	r3, [pc, #260]	@ (80163f4 <RegionEU868GetPhyParam+0x280>)
 80162f0:	5c9b      	ldrb	r3, [r3, r2]
 80162f2:	61bb      	str	r3, [r7, #24]
            break;
 80162f4:	e073      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80162f6:	2301      	movs	r3, #1
 80162f8:	61bb      	str	r3, [r7, #24]
            break;
 80162fa:	e070      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80162fc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016300:	61bb      	str	r3, [r7, #24]
            break;
 8016302:	e06c      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016304:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016308:	61bb      	str	r3, [r7, #24]
            break;
 801630a:	e068      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801630c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8016310:	61bb      	str	r3, [r7, #24]
            break;
 8016312:	e064      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016314:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016318:	61bb      	str	r3, [r7, #24]
            break;
 801631a:	e060      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801631c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8016320:	61bb      	str	r3, [r7, #24]
            break;
 8016322:	e05c      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8016324:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016328:	61bb      	str	r3, [r7, #24]
            break;
 801632a:	e058      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801632c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016330:	4831      	ldr	r0, [pc, #196]	@ (80163f8 <RegionEU868GetPhyParam+0x284>)
 8016332:	f002 fadd 	bl	80188f0 <randr>
 8016336:	4603      	mov	r3, r0
 8016338:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801633c:	61bb      	str	r3, [r7, #24]
            break;
 801633e:	e04e      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016340:	2300      	movs	r3, #0
 8016342:	61bb      	str	r3, [r7, #24]
            break;
 8016344:	e04b      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016346:	4b2d      	ldr	r3, [pc, #180]	@ (80163fc <RegionEU868GetPhyParam+0x288>)
 8016348:	61bb      	str	r3, [r7, #24]
            break;
 801634a:	e048      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801634c:	2300      	movs	r3, #0
 801634e:	61bb      	str	r3, [r7, #24]
            break;
 8016350:	e045      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016352:	4b26      	ldr	r3, [pc, #152]	@ (80163ec <RegionEU868GetPhyParam+0x278>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801635a:	61bb      	str	r3, [r7, #24]
            break;
 801635c:	e03f      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801635e:	4b23      	ldr	r3, [pc, #140]	@ (80163ec <RegionEU868GetPhyParam+0x278>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8016366:	61bb      	str	r3, [r7, #24]
            break;
 8016368:	e039      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801636a:	2310      	movs	r3, #16
 801636c:	61bb      	str	r3, [r7, #24]
            break;
 801636e:	e036      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016370:	4b1e      	ldr	r3, [pc, #120]	@ (80163ec <RegionEU868GetPhyParam+0x278>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	61bb      	str	r3, [r7, #24]
            break;
 8016376:	e032      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016378:	2300      	movs	r3, #0
 801637a:	61bb      	str	r3, [r7, #24]
            break;
 801637c:	e02f      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801637e:	2300      	movs	r3, #0
 8016380:	61bb      	str	r3, [r7, #24]
            break;
 8016382:	e02c      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016384:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8016388:	61bb      	str	r3, [r7, #24]
            break;
 801638a:	e028      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801638c:	4b1c      	ldr	r3, [pc, #112]	@ (8016400 <RegionEU868GetPhyParam+0x28c>)
 801638e:	61bb      	str	r3, [r7, #24]
            break;
 8016390:	e025      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016392:	4b1a      	ldr	r3, [pc, #104]	@ (80163fc <RegionEU868GetPhyParam+0x288>)
 8016394:	61bb      	str	r3, [r7, #24]
            break;
 8016396:	e022      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016398:	2311      	movs	r3, #17
 801639a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801639c:	2302      	movs	r3, #2
 801639e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80163a0:	2300      	movs	r3, #0
 80163a2:	76bb      	strb	r3, [r7, #26]
            break;
 80163a4:	e01b      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80163a6:	2303      	movs	r3, #3
 80163a8:	61bb      	str	r3, [r7, #24]
            break;
 80163aa:	e018      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80163ac:	4b13      	ldr	r3, [pc, #76]	@ (80163fc <RegionEU868GetPhyParam+0x288>)
 80163ae:	61bb      	str	r3, [r7, #24]
            break;
 80163b0:	e015      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80163b2:	2303      	movs	r3, #3
 80163b4:	61bb      	str	r3, [r7, #24]
            break;
 80163b6:	e012      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163be:	461a      	mov	r2, r3
 80163c0:	4b10      	ldr	r3, [pc, #64]	@ (8016404 <RegionEU868GetPhyParam+0x290>)
 80163c2:	5c9b      	ldrb	r3, [r3, r2]
 80163c4:	61bb      	str	r3, [r7, #24]
            break;
 80163c6:	e00a      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80163ce:	490e      	ldr	r1, [pc, #56]	@ (8016408 <RegionEU868GetPhyParam+0x294>)
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7ff fd95 	bl	8015f00 <RegionCommonGetBandwidth>
 80163d6:	4603      	mov	r3, r0
 80163d8:	61bb      	str	r3, [r7, #24]
            break;
 80163da:	e000      	b.n	80163de <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80163dc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	61fb      	str	r3, [r7, #28]
 80163e2:	69fb      	ldr	r3, [r7, #28]
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3720      	adds	r7, #32
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	20003c8c 	.word	0x20003c8c
 80163f0:	0801df8c 	.word	0x0801df8c
 80163f4:	0801df94 	.word	0x0801df94
 80163f8:	fffffc18 	.word	0xfffffc18
 80163fc:	33d3e608 	.word	0x33d3e608
 8016400:	4009999a 	.word	0x4009999a
 8016404:	0801df64 	.word	0x0801df64
 8016408:	0801df6c 	.word	0x0801df6c

0801640c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801640c:	b590      	push	{r4, r7, lr}
 801640e:	b085      	sub	sp, #20
 8016410:	af02      	add	r7, sp, #8
 8016412:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016414:	4b11      	ldr	r3, [pc, #68]	@ (801645c <RegionEU868SetBandTxDone+0x50>)
 8016416:	681a      	ldr	r2, [r3, #0]
 8016418:	4b11      	ldr	r3, [pc, #68]	@ (8016460 <RegionEU868SetBandTxDone+0x54>)
 801641a:	6819      	ldr	r1, [r3, #0]
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	4618      	mov	r0, r3
 8016422:	4603      	mov	r3, r0
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4403      	add	r3, r0
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	440b      	add	r3, r1
 801642c:	3309      	adds	r3, #9
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	4619      	mov	r1, r3
 8016432:	460b      	mov	r3, r1
 8016434:	005b      	lsls	r3, r3, #1
 8016436:	440b      	add	r3, r1
 8016438:	00db      	lsls	r3, r3, #3
 801643a:	18d0      	adds	r0, r2, r3
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6899      	ldr	r1, [r3, #8]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	785c      	ldrb	r4, [r3, #1]
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	691a      	ldr	r2, [r3, #16]
 8016448:	9200      	str	r2, [sp, #0]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	4622      	mov	r2, r4
 801644e:	f7ff f8ed 	bl	801562c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8016452:	bf00      	nop
 8016454:	370c      	adds	r7, #12
 8016456:	46bd      	mov	sp, r7
 8016458:	bd90      	pop	{r4, r7, pc}
 801645a:	bf00      	nop
 801645c:	20003c88 	.word	0x20003c88
 8016460:	20003c8c 	.word	0x20003c8c

08016464 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b0b0      	sub	sp, #192	@ 0xc0
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801646c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016470:	2290      	movs	r2, #144	@ 0x90
 8016472:	2100      	movs	r1, #0
 8016474:	4618      	mov	r0, r3
 8016476:	f006 fe91 	bl	801d19c <memset>
 801647a:	2364      	movs	r3, #100	@ 0x64
 801647c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801647e:	2364      	movs	r3, #100	@ 0x64
 8016480:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016488:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801648c:	230a      	movs	r3, #10
 801648e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8016492:	2364      	movs	r3, #100	@ 0x64
 8016494:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8016498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801649c:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	7a1b      	ldrb	r3, [r3, #8]
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	d05e      	beq.n	8016566 <RegionEU868InitDefaults+0x102>
 80164a8:	2b02      	cmp	r3, #2
 80164aa:	dc6b      	bgt.n	8016584 <RegionEU868InitDefaults+0x120>
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d002      	beq.n	80164b6 <RegionEU868InitDefaults+0x52>
 80164b0:	2b01      	cmp	r3, #1
 80164b2:	d03f      	beq.n	8016534 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80164b4:	e066      	b.n	8016584 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d063      	beq.n	8016586 <RegionEU868InitDefaults+0x122>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d05f      	beq.n	8016586 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4a30      	ldr	r2, [pc, #192]	@ (801658c <RegionEU868InitDefaults+0x128>)
 80164cc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	4a2f      	ldr	r2, [pc, #188]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 80164d4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80164d6:	4b2d      	ldr	r3, [pc, #180]	@ (801658c <RegionEU868InitDefaults+0x128>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4618      	mov	r0, r3
 80164dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80164e0:	2290      	movs	r2, #144	@ 0x90
 80164e2:	4619      	mov	r1, r3
 80164e4:	f002 fa1b 	bl	801891e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80164e8:	4b29      	ldr	r3, [pc, #164]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a29      	ldr	r2, [pc, #164]	@ (8016594 <RegionEU868InitDefaults+0x130>)
 80164ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80164f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80164f4:	4b26      	ldr	r3, [pc, #152]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4a27      	ldr	r2, [pc, #156]	@ (8016598 <RegionEU868InitDefaults+0x134>)
 80164fa:	330c      	adds	r3, #12
 80164fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80164fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016502:	4b23      	ldr	r3, [pc, #140]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	4a25      	ldr	r2, [pc, #148]	@ (801659c <RegionEU868InitDefaults+0x138>)
 8016508:	3318      	adds	r3, #24
 801650a:	ca07      	ldmia	r2, {r0, r1, r2}
 801650c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016510:	4b1f      	ldr	r3, [pc, #124]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	2207      	movs	r2, #7
 8016516:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801651a:	4b1d      	ldr	r3, [pc, #116]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016522:	4b1b      	ldr	r3, [pc, #108]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801652a:	2201      	movs	r2, #1
 801652c:	4619      	mov	r1, r3
 801652e:	f7ff f857 	bl	80155e0 <RegionCommonChanMaskCopy>
 8016532:	e028      	b.n	8016586 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016534:	4b16      	ldr	r3, [pc, #88]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2200      	movs	r2, #0
 801653a:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801653c:	4b14      	ldr	r3, [pc, #80]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2200      	movs	r2, #0
 8016542:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016544:	4b12      	ldr	r3, [pc, #72]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2200      	movs	r2, #0
 801654a:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801654c:	4b10      	ldr	r3, [pc, #64]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8016554:	4b0e      	ldr	r3, [pc, #56]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801655c:	2201      	movs	r2, #1
 801655e:	4619      	mov	r1, r3
 8016560:	f7ff f83e 	bl	80155e0 <RegionCommonChanMaskCopy>
            break;
 8016564:	e00f      	b.n	8016586 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016566:	4b0a      	ldr	r3, [pc, #40]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801656e:	4b08      	ldr	r3, [pc, #32]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8016576:	4b06      	ldr	r3, [pc, #24]	@ (8016590 <RegionEU868InitDefaults+0x12c>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	430a      	orrs	r2, r1
 801657c:	b292      	uxth	r2, r2
 801657e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8016582:	e000      	b.n	8016586 <RegionEU868InitDefaults+0x122>
            break;
 8016584:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016586:	37c0      	adds	r7, #192	@ 0xc0
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20003c88 	.word	0x20003c88
 8016590:	20003c8c 	.word	0x20003c8c
 8016594:	0801da2c 	.word	0x0801da2c
 8016598:	0801da38 	.word	0x0801da38
 801659c:	0801da44 	.word	0x0801da44

080165a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	460b      	mov	r3, r1
 80165aa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80165ac:	78fb      	ldrb	r3, [r7, #3]
 80165ae:	2b0f      	cmp	r3, #15
 80165b0:	d86c      	bhi.n	801668c <RegionEU868Verify+0xec>
 80165b2:	a201      	add	r2, pc, #4	@ (adr r2, 80165b8 <RegionEU868Verify+0x18>)
 80165b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b8:	080165f9 	.word	0x080165f9
 80165bc:	0801668d 	.word	0x0801668d
 80165c0:	0801668d 	.word	0x0801668d
 80165c4:	0801668d 	.word	0x0801668d
 80165c8:	0801668d 	.word	0x0801668d
 80165cc:	08016611 	.word	0x08016611
 80165d0:	0801662f 	.word	0x0801662f
 80165d4:	0801664d 	.word	0x0801664d
 80165d8:	0801668d 	.word	0x0801668d
 80165dc:	0801666b 	.word	0x0801666b
 80165e0:	0801666b 	.word	0x0801666b
 80165e4:	0801668d 	.word	0x0801668d
 80165e8:	0801668d 	.word	0x0801668d
 80165ec:	0801668d 	.word	0x0801668d
 80165f0:	0801668d 	.word	0x0801668d
 80165f4:	08016689 	.word	0x08016689
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80165f8:	2300      	movs	r3, #0
 80165fa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	f107 020f 	add.w	r2, r7, #15
 8016604:	4611      	mov	r1, r2
 8016606:	4618      	mov	r0, r3
 8016608:	f7ff fcee 	bl	8015fe8 <VerifyRfFreq>
 801660c:	4603      	mov	r3, r0
 801660e:	e03e      	b.n	801668e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f993 3000 	ldrsb.w	r3, [r3]
 8016616:	2207      	movs	r2, #7
 8016618:	2100      	movs	r1, #0
 801661a:	4618      	mov	r0, r3
 801661c:	f7fe ff63 	bl	80154e6 <RegionCommonValueInRange>
 8016620:	4603      	mov	r3, r0
 8016622:	2b00      	cmp	r3, #0
 8016624:	bf14      	ite	ne
 8016626:	2301      	movne	r3, #1
 8016628:	2300      	moveq	r3, #0
 801662a:	b2db      	uxtb	r3, r3
 801662c:	e02f      	b.n	801668e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f993 3000 	ldrsb.w	r3, [r3]
 8016634:	2205      	movs	r2, #5
 8016636:	2100      	movs	r1, #0
 8016638:	4618      	mov	r0, r3
 801663a:	f7fe ff54 	bl	80154e6 <RegionCommonValueInRange>
 801663e:	4603      	mov	r3, r0
 8016640:	2b00      	cmp	r3, #0
 8016642:	bf14      	ite	ne
 8016644:	2301      	movne	r3, #1
 8016646:	2300      	moveq	r3, #0
 8016648:	b2db      	uxtb	r3, r3
 801664a:	e020      	b.n	801668e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f993 3000 	ldrsb.w	r3, [r3]
 8016652:	2207      	movs	r2, #7
 8016654:	2100      	movs	r1, #0
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe ff45 	bl	80154e6 <RegionCommonValueInRange>
 801665c:	4603      	mov	r3, r0
 801665e:	2b00      	cmp	r3, #0
 8016660:	bf14      	ite	ne
 8016662:	2301      	movne	r3, #1
 8016664:	2300      	moveq	r3, #0
 8016666:	b2db      	uxtb	r3, r3
 8016668:	e011      	b.n	801668e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f993 3000 	ldrsb.w	r3, [r3]
 8016670:	2207      	movs	r2, #7
 8016672:	2100      	movs	r1, #0
 8016674:	4618      	mov	r0, r3
 8016676:	f7fe ff36 	bl	80154e6 <RegionCommonValueInRange>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	bf14      	ite	ne
 8016680:	2301      	movne	r3, #1
 8016682:	2300      	moveq	r3, #0
 8016684:	b2db      	uxtb	r3, r3
 8016686:	e002      	b.n	801668e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016688:	2301      	movs	r3, #1
 801668a:	e000      	b.n	801668e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801668c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop

08016698 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b08a      	sub	sp, #40	@ 0x28
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80166a0:	2350      	movs	r3, #80	@ 0x50
 80166a2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	791b      	ldrb	r3, [r3, #4]
 80166aa:	2b10      	cmp	r3, #16
 80166ac:	d162      	bne.n	8016774 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	330f      	adds	r3, #15
 80166b4:	781b      	ldrb	r3, [r3, #0]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d15e      	bne.n	8016778 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80166ba:	2300      	movs	r3, #0
 80166bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80166c0:	2303      	movs	r3, #3
 80166c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80166c6:	e050      	b.n	801676a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80166c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80166cc:	2b07      	cmp	r3, #7
 80166ce:	d824      	bhi.n	801671a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681a      	ldr	r2, [r3, #0]
 80166d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166d8:	4413      	add	r3, r2
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80166de:	69ba      	ldr	r2, [r7, #24]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6819      	ldr	r1, [r3, #0]
 80166e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166e8:	3301      	adds	r3, #1
 80166ea:	440b      	add	r3, r1
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	021b      	lsls	r3, r3, #8
 80166f0:	4313      	orrs	r3, r2
 80166f2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80166f4:	69ba      	ldr	r2, [r7, #24]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6819      	ldr	r1, [r3, #0]
 80166fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166fe:	3302      	adds	r3, #2
 8016700:	440b      	add	r3, r1
 8016702:	781b      	ldrb	r3, [r3, #0]
 8016704:	041b      	lsls	r3, r3, #16
 8016706:	4313      	orrs	r3, r2
 8016708:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	2264      	movs	r2, #100	@ 0x64
 801670e:	fb02 f303 	mul.w	r3, r2, r3
 8016712:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016714:	2300      	movs	r3, #0
 8016716:	61fb      	str	r3, [r7, #28]
 8016718:	e006      	b.n	8016728 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801671a:	2300      	movs	r3, #0
 801671c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801671e:	2300      	movs	r3, #0
 8016720:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016724:	2300      	movs	r3, #0
 8016726:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d00b      	beq.n	8016746 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801672e:	f107 0318 	add.w	r3, r7, #24
 8016732:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016734:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016738:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801673a:	f107 0310 	add.w	r3, r7, #16
 801673e:	4618      	mov	r0, r3
 8016740:	f000 fd0e 	bl	8017160 <RegionEU868ChannelAdd>
 8016744:	e007      	b.n	8016756 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016746:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801674a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801674c:	f107 030c 	add.w	r3, r7, #12
 8016750:	4618      	mov	r0, r3
 8016752:	f000 fda7 	bl	80172a4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801675a:	3303      	adds	r3, #3
 801675c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016764:	3301      	adds	r3, #1
 8016766:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801676a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801676e:	2b0f      	cmp	r3, #15
 8016770:	d9aa      	bls.n	80166c8 <RegionEU868ApplyCFList+0x30>
 8016772:	e002      	b.n	801677a <RegionEU868ApplyCFList+0xe2>
        return;
 8016774:	bf00      	nop
 8016776:	e000      	b.n	801677a <RegionEU868ApplyCFList+0xe2>
        return;
 8016778:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801677a:	3728      	adds	r7, #40	@ 0x28
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	791b      	ldrb	r3, [r3, #4]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d002      	beq.n	8016796 <RegionEU868ChanMaskSet+0x16>
 8016790:	2b01      	cmp	r3, #1
 8016792:	d00b      	beq.n	80167ac <RegionEU868ChanMaskSet+0x2c>
 8016794:	e015      	b.n	80167c2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016796:	4b0e      	ldr	r3, [pc, #56]	@ (80167d0 <RegionEU868ChanMaskSet+0x50>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	2201      	movs	r2, #1
 80167a4:	4619      	mov	r1, r3
 80167a6:	f7fe ff1b 	bl	80155e0 <RegionCommonChanMaskCopy>
            break;
 80167aa:	e00c      	b.n	80167c6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80167ac:	4b08      	ldr	r3, [pc, #32]	@ (80167d0 <RegionEU868ChanMaskSet+0x50>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2201      	movs	r2, #1
 80167ba:	4619      	mov	r1, r3
 80167bc:	f7fe ff10 	bl	80155e0 <RegionCommonChanMaskCopy>
            break;
 80167c0:	e001      	b.n	80167c6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80167c2:	2300      	movs	r3, #0
 80167c4:	e000      	b.n	80167c8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80167c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}
 80167d0:	20003c8c 	.word	0x20003c8c

080167d4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b088      	sub	sp, #32
 80167d8:	af02      	add	r7, sp, #8
 80167da:	60ba      	str	r2, [r7, #8]
 80167dc:	607b      	str	r3, [r7, #4]
 80167de:	4603      	mov	r3, r0
 80167e0:	73fb      	strb	r3, [r7, #15]
 80167e2:	460b      	mov	r3, r1
 80167e4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80167ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ee:	2b07      	cmp	r3, #7
 80167f0:	bfa8      	it	ge
 80167f2:	2307      	movge	r3, #7
 80167f4:	b25a      	sxtb	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016800:	491e      	ldr	r1, [pc, #120]	@ (801687c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016802:	4618      	mov	r0, r3
 8016804:	f7ff fb7c 	bl	8015f00 <RegionCommonGetBandwidth>
 8016808:	4603      	mov	r3, r0
 801680a:	b2da      	uxtb	r2, r3
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016816:	2b07      	cmp	r3, #7
 8016818:	d10a      	bne.n	8016830 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016820:	461a      	mov	r2, r3
 8016822:	4b17      	ldr	r3, [pc, #92]	@ (8016880 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016824:	5c9b      	ldrb	r3, [r3, r2]
 8016826:	4618      	mov	r0, r3
 8016828:	f7ff f8fe 	bl	8015a28 <RegionCommonComputeSymbolTimeFsk>
 801682c:	6178      	str	r0, [r7, #20]
 801682e:	e011      	b.n	8016854 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016836:	461a      	mov	r2, r3
 8016838:	4b11      	ldr	r3, [pc, #68]	@ (8016880 <RegionEU868ComputeRxWindowParameters+0xac>)
 801683a:	5c9a      	ldrb	r2, [r3, r2]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016842:	4619      	mov	r1, r3
 8016844:	4b0d      	ldr	r3, [pc, #52]	@ (801687c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016846:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801684a:	4619      	mov	r1, r3
 801684c:	4610      	mov	r0, r2
 801684e:	f7ff f8d5 	bl	80159fc <RegionCommonComputeSymbolTimeLoRa>
 8016852:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016854:	4b0b      	ldr	r3, [pc, #44]	@ (8016884 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016858:	4798      	blx	r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	3308      	adds	r3, #8
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	320c      	adds	r2, #12
 8016862:	7bb9      	ldrb	r1, [r7, #14]
 8016864:	9201      	str	r2, [sp, #4]
 8016866:	9300      	str	r3, [sp, #0]
 8016868:	4603      	mov	r3, r0
 801686a:	68ba      	ldr	r2, [r7, #8]
 801686c:	6978      	ldr	r0, [r7, #20]
 801686e:	f7ff f8eb 	bl	8015a48 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016872:	bf00      	nop
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	0801df6c 	.word	0x0801df6c
 8016880:	0801df64 	.word	0x0801df64
 8016884:	0801e020 	.word	0x0801e020

08016888 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016888:	b5b0      	push	{r4, r5, r7, lr}
 801688a:	b090      	sub	sp, #64	@ 0x40
 801688c:	af0a      	add	r7, sp, #40	@ 0x28
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	785b      	ldrb	r3, [r3, #1]
 8016896:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016898:	2300      	movs	r3, #0
 801689a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801689c:	2300      	movs	r3, #0
 801689e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80168a6:	4b5a      	ldr	r3, [pc, #360]	@ (8016a10 <RegionEU868RxConfig+0x188>)
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	4798      	blx	r3
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d001      	beq.n	80168b6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80168b2:	2300      	movs	r3, #0
 80168b4:	e0a8      	b.n	8016a08 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	7cdb      	ldrb	r3, [r3, #19]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d126      	bne.n	801690c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80168be:	4b55      	ldr	r3, [pc, #340]	@ (8016a14 <RegionEU868RxConfig+0x18c>)
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	781b      	ldrb	r3, [r3, #0]
 80168c6:	4619      	mov	r1, r3
 80168c8:	460b      	mov	r3, r1
 80168ca:	005b      	lsls	r3, r3, #1
 80168cc:	440b      	add	r3, r1
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	4413      	add	r3, r2
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80168d6:	4b4f      	ldr	r3, [pc, #316]	@ (8016a14 <RegionEU868RxConfig+0x18c>)
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	4619      	mov	r1, r3
 80168e0:	460b      	mov	r3, r1
 80168e2:	005b      	lsls	r3, r3, #1
 80168e4:	440b      	add	r3, r1
 80168e6:	009b      	lsls	r3, r3, #2
 80168e8:	4413      	add	r3, r2
 80168ea:	3304      	adds	r3, #4
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d00c      	beq.n	801690c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80168f2:	4b48      	ldr	r3, [pc, #288]	@ (8016a14 <RegionEU868RxConfig+0x18c>)
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	4619      	mov	r1, r3
 80168fc:	460b      	mov	r3, r1
 80168fe:	005b      	lsls	r3, r3, #1
 8016900:	440b      	add	r3, r1
 8016902:	009b      	lsls	r3, r3, #2
 8016904:	4413      	add	r3, r2
 8016906:	3304      	adds	r3, #4
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801690c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016910:	4a41      	ldr	r2, [pc, #260]	@ (8016a18 <RegionEU868RxConfig+0x190>)
 8016912:	5cd3      	ldrb	r3, [r2, r3]
 8016914:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016916:	4b3e      	ldr	r3, [pc, #248]	@ (8016a10 <RegionEU868RxConfig+0x188>)
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	6938      	ldr	r0, [r7, #16]
 801691c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801691e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016922:	2b07      	cmp	r3, #7
 8016924:	d128      	bne.n	8016978 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016926:	2300      	movs	r3, #0
 8016928:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801692a:	4b39      	ldr	r3, [pc, #228]	@ (8016a10 <RegionEU868RxConfig+0x188>)
 801692c:	699c      	ldr	r4, [r3, #24]
 801692e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016936:	fb02 f303 	mul.w	r3, r2, r3
 801693a:	4619      	mov	r1, r3
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	689b      	ldr	r3, [r3, #8]
 8016940:	b29b      	uxth	r3, r3
 8016942:	687a      	ldr	r2, [r7, #4]
 8016944:	7c92      	ldrb	r2, [r2, #18]
 8016946:	7df8      	ldrb	r0, [r7, #23]
 8016948:	9209      	str	r2, [sp, #36]	@ 0x24
 801694a:	2200      	movs	r2, #0
 801694c:	9208      	str	r2, [sp, #32]
 801694e:	2200      	movs	r2, #0
 8016950:	9207      	str	r2, [sp, #28]
 8016952:	2200      	movs	r2, #0
 8016954:	9206      	str	r2, [sp, #24]
 8016956:	2201      	movs	r2, #1
 8016958:	9205      	str	r2, [sp, #20]
 801695a:	2200      	movs	r2, #0
 801695c:	9204      	str	r2, [sp, #16]
 801695e:	2200      	movs	r2, #0
 8016960:	9203      	str	r2, [sp, #12]
 8016962:	9302      	str	r3, [sp, #8]
 8016964:	2305      	movs	r3, #5
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	4b2c      	ldr	r3, [pc, #176]	@ (8016a1c <RegionEU868RxConfig+0x194>)
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	2300      	movs	r3, #0
 801696e:	460a      	mov	r2, r1
 8016970:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016974:	47a0      	blx	r4
 8016976:	e024      	b.n	80169c2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016978:	2301      	movs	r3, #1
 801697a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801697c:	4b24      	ldr	r3, [pc, #144]	@ (8016a10 <RegionEU868RxConfig+0x188>)
 801697e:	699c      	ldr	r4, [r3, #24]
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	789b      	ldrb	r3, [r3, #2]
 8016984:	461d      	mov	r5, r3
 8016986:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	689b      	ldr	r3, [r3, #8]
 801698e:	b29b      	uxth	r3, r3
 8016990:	687a      	ldr	r2, [r7, #4]
 8016992:	7c92      	ldrb	r2, [r2, #18]
 8016994:	7df8      	ldrb	r0, [r7, #23]
 8016996:	9209      	str	r2, [sp, #36]	@ 0x24
 8016998:	2201      	movs	r2, #1
 801699a:	9208      	str	r2, [sp, #32]
 801699c:	2200      	movs	r2, #0
 801699e:	9207      	str	r2, [sp, #28]
 80169a0:	2200      	movs	r2, #0
 80169a2:	9206      	str	r2, [sp, #24]
 80169a4:	2200      	movs	r2, #0
 80169a6:	9205      	str	r2, [sp, #20]
 80169a8:	2200      	movs	r2, #0
 80169aa:	9204      	str	r2, [sp, #16]
 80169ac:	2200      	movs	r2, #0
 80169ae:	9203      	str	r2, [sp, #12]
 80169b0:	9302      	str	r3, [sp, #8]
 80169b2:	2308      	movs	r3, #8
 80169b4:	9301      	str	r3, [sp, #4]
 80169b6:	2300      	movs	r3, #0
 80169b8:	9300      	str	r3, [sp, #0]
 80169ba:	2301      	movs	r3, #1
 80169bc:	460a      	mov	r2, r1
 80169be:	4629      	mov	r1, r5
 80169c0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	7c5b      	ldrb	r3, [r3, #17]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d005      	beq.n	80169d6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80169ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169ce:	4a14      	ldr	r2, [pc, #80]	@ (8016a20 <RegionEU868RxConfig+0x198>)
 80169d0:	5cd3      	ldrb	r3, [r2, r3]
 80169d2:	75bb      	strb	r3, [r7, #22]
 80169d4:	e004      	b.n	80169e0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80169d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169da:	4a12      	ldr	r2, [pc, #72]	@ (8016a24 <RegionEU868RxConfig+0x19c>)
 80169dc:	5cd3      	ldrb	r3, [r2, r3]
 80169de:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80169e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016a10 <RegionEU868RxConfig+0x188>)
 80169e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80169e4:	7dba      	ldrb	r2, [r7, #22]
 80169e6:	320d      	adds	r2, #13
 80169e8:	b2d1      	uxtb	r1, r2
 80169ea:	7dfa      	ldrb	r2, [r7, #23]
 80169ec:	4610      	mov	r0, r2
 80169ee:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	7cdb      	ldrb	r3, [r3, #19]
 80169f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80169f8:	6939      	ldr	r1, [r7, #16]
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7ff fa9e 	bl	8015f3c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	7bfa      	ldrb	r2, [r7, #15]
 8016a04:	701a      	strb	r2, [r3, #0]
    return true;
 8016a06:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3718      	adds	r7, #24
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8016a10:	0801e020 	.word	0x0801e020
 8016a14:	20003c8c 	.word	0x20003c8c
 8016a18:	0801df64 	.word	0x0801df64
 8016a1c:	00014585 	.word	0x00014585
 8016a20:	0801df94 	.word	0x0801df94
 8016a24:	0801df8c 	.word	0x0801df8c

08016a28 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016a28:	b590      	push	{r4, r7, lr}
 8016a2a:	b093      	sub	sp, #76	@ 0x4c
 8016a2c:	af0a      	add	r7, sp, #40	@ 0x28
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8016bb4 <RegionEU868TxConfig+0x18c>)
 8016a3e:	5c9b      	ldrb	r3, [r3, r2]
 8016a40:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016a48:	4b5b      	ldr	r3, [pc, #364]	@ (8016bb8 <RegionEU868TxConfig+0x190>)
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8016bbc <RegionEU868TxConfig+0x194>)
 8016a4e:	6819      	ldr	r1, [r3, #0]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	461c      	mov	r4, r3
 8016a56:	4623      	mov	r3, r4
 8016a58:	005b      	lsls	r3, r3, #1
 8016a5a:	4423      	add	r3, r4
 8016a5c:	009b      	lsls	r3, r3, #2
 8016a5e:	440b      	add	r3, r1
 8016a60:	3309      	adds	r3, #9
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	4619      	mov	r1, r3
 8016a66:	460b      	mov	r3, r1
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	440b      	add	r3, r1
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	4413      	add	r3, r2
 8016a70:	3302      	adds	r3, #2
 8016a72:	f993 3000 	ldrsb.w	r3, [r3]
 8016a76:	4619      	mov	r1, r3
 8016a78:	f7ff fa2d 	bl	8015ed6 <RegionCommonLimitTxPower>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016a86:	494e      	ldr	r1, [pc, #312]	@ (8016bc0 <RegionEU868TxConfig+0x198>)
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7ff fa39 	bl	8015f00 <RegionCommonGetBandwidth>
 8016a8e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016a90:	2300      	movs	r3, #0
 8016a92:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	6859      	ldr	r1, [r3, #4]
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	689a      	ldr	r2, [r3, #8]
 8016a9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7ff f889 	bl	8015bb8 <RegionCommonComputeTxPower>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016aaa:	4b46      	ldr	r3, [pc, #280]	@ (8016bc4 <RegionEU868TxConfig+0x19c>)
 8016aac:	68da      	ldr	r2, [r3, #12]
 8016aae:	4b43      	ldr	r3, [pc, #268]	@ (8016bbc <RegionEU868TxConfig+0x194>)
 8016ab0:	6819      	ldr	r1, [r3, #0]
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	4603      	mov	r3, r0
 8016aba:	005b      	lsls	r3, r3, #1
 8016abc:	4403      	add	r3, r0
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	440b      	add	r3, r1
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016ace:	2b07      	cmp	r3, #7
 8016ad0:	d124      	bne.n	8016b1c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8016bc4 <RegionEU868TxConfig+0x19c>)
 8016ad8:	69dc      	ldr	r4, [r3, #28]
 8016ada:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016ade:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016ae2:	fb02 f303 	mul.w	r3, r2, r3
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016aec:	7ff8      	ldrb	r0, [r7, #31]
 8016aee:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016af2:	9308      	str	r3, [sp, #32]
 8016af4:	2300      	movs	r3, #0
 8016af6:	9307      	str	r3, [sp, #28]
 8016af8:	2300      	movs	r3, #0
 8016afa:	9306      	str	r3, [sp, #24]
 8016afc:	2300      	movs	r3, #0
 8016afe:	9305      	str	r3, [sp, #20]
 8016b00:	2301      	movs	r3, #1
 8016b02:	9304      	str	r3, [sp, #16]
 8016b04:	2300      	movs	r3, #0
 8016b06:	9303      	str	r3, [sp, #12]
 8016b08:	2305      	movs	r3, #5
 8016b0a:	9302      	str	r3, [sp, #8]
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	9301      	str	r3, [sp, #4]
 8016b10:	9200      	str	r2, [sp, #0]
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8016b18:	47a0      	blx	r4
 8016b1a:	e01d      	b.n	8016b58 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016b20:	4b28      	ldr	r3, [pc, #160]	@ (8016bc4 <RegionEU868TxConfig+0x19c>)
 8016b22:	69dc      	ldr	r4, [r3, #28]
 8016b24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016b28:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016b2c:	7ff8      	ldrb	r0, [r7, #31]
 8016b2e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016b32:	9208      	str	r2, [sp, #32]
 8016b34:	2200      	movs	r2, #0
 8016b36:	9207      	str	r2, [sp, #28]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	9206      	str	r2, [sp, #24]
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	9205      	str	r2, [sp, #20]
 8016b40:	2201      	movs	r2, #1
 8016b42:	9204      	str	r2, [sp, #16]
 8016b44:	2200      	movs	r2, #0
 8016b46:	9203      	str	r2, [sp, #12]
 8016b48:	2208      	movs	r2, #8
 8016b4a:	9202      	str	r2, [sp, #8]
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	9201      	str	r2, [sp, #4]
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	2200      	movs	r2, #0
 8016b56:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016b58:	4b18      	ldr	r3, [pc, #96]	@ (8016bbc <RegionEU868TxConfig+0x194>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	4619      	mov	r1, r3
 8016b62:	460b      	mov	r3, r1
 8016b64:	005b      	lsls	r3, r3, #1
 8016b66:	440b      	add	r3, r1
 8016b68:	009b      	lsls	r3, r3, #2
 8016b6a:	4413      	add	r3, r2
 8016b6c:	681a      	ldr	r2, [r3, #0]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b74:	4619      	mov	r1, r3
 8016b76:	4610      	mov	r0, r2
 8016b78:	f7ff fa1e 	bl	8015fb8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	899b      	ldrh	r3, [r3, #12]
 8016b86:	4619      	mov	r1, r3
 8016b88:	4610      	mov	r0, r2
 8016b8a:	f7ff faa3 	bl	80160d4 <GetTimeOnAir>
 8016b8e:	4602      	mov	r2, r0
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016b94:	4b0b      	ldr	r3, [pc, #44]	@ (8016bc4 <RegionEU868TxConfig+0x19c>)
 8016b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	8992      	ldrh	r2, [r2, #12]
 8016b9c:	b2d1      	uxtb	r1, r2
 8016b9e:	7ffa      	ldrb	r2, [r7, #31]
 8016ba0:	4610      	mov	r0, r2
 8016ba2:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	7f7a      	ldrb	r2, [r7, #29]
 8016ba8:	701a      	strb	r2, [r3, #0]
    return true;
 8016baa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3724      	adds	r7, #36	@ 0x24
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd90      	pop	{r4, r7, pc}
 8016bb4:	0801df64 	.word	0x0801df64
 8016bb8:	20003c88 	.word	0x20003c88
 8016bbc:	20003c8c 	.word	0x20003c8c
 8016bc0:	0801df6c 	.word	0x0801df6c
 8016bc4:	0801e020 	.word	0x0801e020

08016bc8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016bc8:	b590      	push	{r4, r7, lr}
 8016bca:	b093      	sub	sp, #76	@ 0x4c
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
 8016bd4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016bd6:	2307      	movs	r3, #7
 8016bd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016bdc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016be0:	2200      	movs	r2, #0
 8016be2:	601a      	str	r2, [r3, #0]
 8016be4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016be6:	2300      	movs	r3, #0
 8016be8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016bec:	2300      	movs	r3, #0
 8016bee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016bf6:	e085      	b.n	8016d04 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	685a      	ldr	r2, [r3, #4]
 8016bfc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016c00:	4413      	add	r3, r2
 8016c02:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016c06:	4611      	mov	r1, r2
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7fe fe2d 	bl	8015868 <RegionCommonParseLinkAdrReq>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8016c14:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d07b      	beq.n	8016d14 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016c1c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016c20:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016c24:	4413      	add	r3, r2
 8016c26:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016c2a:	2307      	movs	r3, #7
 8016c2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016c34:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8016c36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d109      	bne.n	8016c52 <RegionEU868LinkAdrReq+0x8a>
 8016c3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d106      	bne.n	8016c52 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8016c44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016c48:	f023 0301 	bic.w	r3, r3, #1
 8016c4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016c50:	e058      	b.n	8016d04 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016c52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d003      	beq.n	8016c62 <RegionEU868LinkAdrReq+0x9a>
 8016c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016c5e:	2b05      	cmp	r3, #5
 8016c60:	d903      	bls.n	8016c6a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016c62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8016c66:	2b06      	cmp	r3, #6
 8016c68:	d906      	bls.n	8016c78 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8016c6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016c6e:	f023 0301 	bic.w	r3, r3, #1
 8016c72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016c76:	e045      	b.n	8016d04 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016c78:	2300      	movs	r3, #0
 8016c7a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016c7e:	e03d      	b.n	8016cfc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016c80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016c84:	2b06      	cmp	r3, #6
 8016c86:	d118      	bne.n	8016cba <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016c88:	4b5f      	ldr	r3, [pc, #380]	@ (8016e08 <RegionEU868LinkAdrReq+0x240>)
 8016c8a:	6819      	ldr	r1, [r3, #0]
 8016c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016c90:	4613      	mov	r3, r2
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	4413      	add	r3, r2
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	440b      	add	r3, r1
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d028      	beq.n	8016cf2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016ca0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016ca4:	2201      	movs	r2, #1
 8016ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8016caa:	b21a      	sxth	r2, r3
 8016cac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016cae:	b21b      	sxth	r3, r3
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	b21b      	sxth	r3, r3
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016cb8:	e01b      	b.n	8016cf2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016cba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016cc2:	fa42 f303 	asr.w	r3, r2, r3
 8016cc6:	f003 0301 	and.w	r3, r3, #1
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d011      	beq.n	8016cf2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016cce:	4b4e      	ldr	r3, [pc, #312]	@ (8016e08 <RegionEU868LinkAdrReq+0x240>)
 8016cd0:	6819      	ldr	r1, [r3, #0]
 8016cd2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	005b      	lsls	r3, r3, #1
 8016cda:	4413      	add	r3, r2
 8016cdc:	009b      	lsls	r3, r3, #2
 8016cde:	440b      	add	r3, r1
 8016ce0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d105      	bne.n	8016cf2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016ce6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016cea:	f023 0301 	bic.w	r3, r3, #1
 8016cee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016cf2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016cfc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016d00:	2b0f      	cmp	r3, #15
 8016d02:	d9bd      	bls.n	8016c80 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	7a1b      	ldrb	r3, [r3, #8]
 8016d08:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	f4ff af73 	bcc.w	8016bf8 <RegionEU868LinkAdrReq+0x30>
 8016d12:	e000      	b.n	8016d16 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016d14:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016d16:	2302      	movs	r3, #2
 8016d18:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	7a5b      	ldrb	r3, [r3, #9]
 8016d20:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8016d24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7ff fa23 	bl	8016174 <RegionEU868GetPhyParam>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8016d32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016d36:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	7a9b      	ldrb	r3, [r3, #10]
 8016d3c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8016d3e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8016d42:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8016d44:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8016d48:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8016d4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016d4e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8016d56:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016d5e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	7b5b      	ldrb	r3, [r3, #13]
 8016d64:	b25b      	sxtb	r3, r3
 8016d66:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016d68:	2310      	movs	r3, #16
 8016d6a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016d6c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016d70:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d74:	b25b      	sxtb	r3, r3
 8016d76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016d7a:	2307      	movs	r3, #7
 8016d7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016d80:	4b21      	ldr	r3, [pc, #132]	@ (8016e08 <RegionEU868LinkAdrReq+0x240>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016d86:	2307      	movs	r3, #7
 8016d88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016d98:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016d9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016da0:	1c9a      	adds	r2, r3, #2
 8016da2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016da6:	1c59      	adds	r1, r3, #1
 8016da8:	f107 0010 	add.w	r0, r7, #16
 8016dac:	4623      	mov	r3, r4
 8016dae:	f7fe fdac 	bl	801590a <RegionCommonLinkAdrReqVerifyParams>
 8016db2:	4603      	mov	r3, r0
 8016db4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016db8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016dbc:	2b07      	cmp	r3, #7
 8016dbe:	d10d      	bne.n	8016ddc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016dc0:	4b11      	ldr	r3, [pc, #68]	@ (8016e08 <RegionEU868LinkAdrReq+0x240>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016dc8:	220c      	movs	r2, #12
 8016dca:	2100      	movs	r1, #0
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f001 fde1 	bl	8018994 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016e08 <RegionEU868LinkAdrReq+0x240>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016dd8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016ddc:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016de4:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016dec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016df6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016dfa:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	374c      	adds	r7, #76	@ 0x4c
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd90      	pop	{r4, r7, pc}
 8016e08:	20003c8c 	.word	0x20003c8c

08016e0c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b084      	sub	sp, #16
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016e14:	2307      	movs	r3, #7
 8016e16:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	f107 020e 	add.w	r2, r7, #14
 8016e24:	4611      	mov	r1, r2
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7ff f8de 	bl	8015fe8 <VerifyRfFreq>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	f083 0301 	eor.w	r3, r3, #1
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d003      	beq.n	8016e40 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8016e38:	7bfb      	ldrb	r3, [r7, #15]
 8016e3a:	f023 0301 	bic.w	r3, r3, #1
 8016e3e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f993 3000 	ldrsb.w	r3, [r3]
 8016e46:	2207      	movs	r2, #7
 8016e48:	2100      	movs	r1, #0
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7fe fb4b 	bl	80154e6 <RegionCommonValueInRange>
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d103      	bne.n	8016e5e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8016e56:	7bfb      	ldrb	r3, [r7, #15]
 8016e58:	f023 0302 	bic.w	r3, r3, #2
 8016e5c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e64:	2205      	movs	r2, #5
 8016e66:	2100      	movs	r1, #0
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7fe fb3c 	bl	80154e6 <RegionCommonValueInRange>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d103      	bne.n	8016e7c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016e74:	7bfb      	ldrb	r3, [r7, #15]
 8016e76:	f023 0304 	bic.w	r3, r3, #4
 8016e7a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3710      	adds	r7, #16
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
	...

08016e88 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b086      	sub	sp, #24
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016e90:	2303      	movs	r3, #3
 8016e92:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d114      	bne.n	8016ec8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016ea8:	f107 0308 	add.w	r3, r7, #8
 8016eac:	4618      	mov	r0, r3
 8016eae:	f000 f9f9 	bl	80172a4 <RegionEU868ChannelsRemove>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	f083 0301 	eor.w	r3, r3, #1
 8016eb8:	b2db      	uxtb	r3, r3
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d03b      	beq.n	8016f36 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016ebe:	7dfb      	ldrb	r3, [r7, #23]
 8016ec0:	f023 0303 	bic.w	r3, r3, #3
 8016ec4:	75fb      	strb	r3, [r7, #23]
 8016ec6:	e036      	b.n	8016f36 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016ed8:	f107 030c 	add.w	r3, r7, #12
 8016edc:	4618      	mov	r0, r3
 8016ede:	f000 f93f 	bl	8017160 <RegionEU868ChannelAdd>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	2b06      	cmp	r3, #6
 8016ee6:	d820      	bhi.n	8016f2a <RegionEU868NewChannelReq+0xa2>
 8016ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8016ef0 <RegionEU868NewChannelReq+0x68>)
 8016eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eee:	bf00      	nop
 8016ef0:	08016f35 	.word	0x08016f35
 8016ef4:	08016f2b 	.word	0x08016f2b
 8016ef8:	08016f2b 	.word	0x08016f2b
 8016efc:	08016f2b 	.word	0x08016f2b
 8016f00:	08016f0d 	.word	0x08016f0d
 8016f04:	08016f17 	.word	0x08016f17
 8016f08:	08016f21 	.word	0x08016f21
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016f0c:	7dfb      	ldrb	r3, [r7, #23]
 8016f0e:	f023 0301 	bic.w	r3, r3, #1
 8016f12:	75fb      	strb	r3, [r7, #23]
                break;
 8016f14:	e00f      	b.n	8016f36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016f16:	7dfb      	ldrb	r3, [r7, #23]
 8016f18:	f023 0302 	bic.w	r3, r3, #2
 8016f1c:	75fb      	strb	r3, [r7, #23]
                break;
 8016f1e:	e00a      	b.n	8016f36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016f20:	7dfb      	ldrb	r3, [r7, #23]
 8016f22:	f023 0303 	bic.w	r3, r3, #3
 8016f26:	75fb      	strb	r3, [r7, #23]
                break;
 8016f28:	e005      	b.n	8016f36 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016f2a:	7dfb      	ldrb	r3, [r7, #23]
 8016f2c:	f023 0303 	bic.w	r3, r3, #3
 8016f30:	75fb      	strb	r3, [r7, #23]
                break;
 8016f32:	e000      	b.n	8016f36 <RegionEU868NewChannelReq+0xae>
                break;
 8016f34:	bf00      	nop
            }
        }
    }

    return status;
 8016f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3718      	adds	r7, #24
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop

08016f44 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016f44:	b480      	push	{r7}
 8016f46:	b083      	sub	sp, #12
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8016f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	370c      	adds	r7, #12
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bc80      	pop	{r7}
 8016f58:	4770      	bx	lr
	...

08016f5c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b084      	sub	sp, #16
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016f64:	2303      	movs	r3, #3
 8016f66:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	f107 020e 	add.w	r2, r7, #14
 8016f74:	4611      	mov	r1, r2
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7ff f836 	bl	8015fe8 <VerifyRfFreq>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	f083 0301 	eor.w	r3, r3, #1
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d003      	beq.n	8016f90 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016f88:	7bfb      	ldrb	r3, [r7, #15]
 8016f8a:	f023 0301 	bic.w	r3, r3, #1
 8016f8e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016f90:	4b13      	ldr	r3, [pc, #76]	@ (8016fe0 <RegionEU868DlChannelReq+0x84>)
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	4619      	mov	r1, r3
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	005b      	lsls	r3, r3, #1
 8016f9e:	440b      	add	r3, r1
 8016fa0:	009b      	lsls	r3, r3, #2
 8016fa2:	4413      	add	r3, r2
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d103      	bne.n	8016fb2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016faa:	7bfb      	ldrb	r3, [r7, #15]
 8016fac:	f023 0302 	bic.w	r3, r3, #2
 8016fb0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016fb2:	7bfb      	ldrb	r3, [r7, #15]
 8016fb4:	2b03      	cmp	r3, #3
 8016fb6:	d10d      	bne.n	8016fd4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016fb8:	4b09      	ldr	r3, [pc, #36]	@ (8016fe0 <RegionEU868DlChannelReq+0x84>)
 8016fba:	6819      	ldr	r1, [r3, #0]
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	685a      	ldr	r2, [r3, #4]
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	4403      	add	r3, r0
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	440b      	add	r3, r1
 8016fd0:	3304      	adds	r3, #4
 8016fd2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3710      	adds	r7, #16
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	20003c8c 	.word	0x20003c8c

08016fe4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	4603      	mov	r3, r0
 8016fec:	460a      	mov	r2, r1
 8016fee:	71fb      	strb	r3, [r7, #7]
 8016ff0:	4613      	mov	r3, r2
 8016ff2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	370c      	adds	r7, #12
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bc80      	pop	{r7}
 8017000:	4770      	bx	lr
	...

08017004 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b09a      	sub	sp, #104	@ 0x68
 8017008:	af02      	add	r7, sp, #8
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
 8017010:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017012:	2300      	movs	r3, #0
 8017014:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017018:	2300      	movs	r3, #0
 801701a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801701e:	2300      	movs	r3, #0
 8017020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017022:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8017026:	2200      	movs	r2, #0
 8017028:	601a      	str	r2, [r3, #0]
 801702a:	605a      	str	r2, [r3, #4]
 801702c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801702e:	230c      	movs	r3, #12
 8017030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017034:	2307      	movs	r3, #7
 8017036:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017038:	4b47      	ldr	r3, [pc, #284]	@ (8017158 <RegionEU868NextChannel+0x154>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017040:	2201      	movs	r2, #1
 8017042:	2100      	movs	r1, #0
 8017044:	4618      	mov	r0, r3
 8017046:	f7fe fa9f 	bl	8015588 <RegionCommonCountChannels>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10a      	bne.n	8017066 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017050:	4b41      	ldr	r3, [pc, #260]	@ (8017158 <RegionEU868NextChannel+0x154>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8017058:	4b3f      	ldr	r3, [pc, #252]	@ (8017158 <RegionEU868NextChannel+0x154>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f042 0207 	orr.w	r2, r2, #7
 8017060:	b292      	uxth	r2, r2
 8017062:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	7a5b      	ldrb	r3, [r3, #9]
 801706a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017072:	b2db      	uxtb	r3, r3
 8017074:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017076:	4b38      	ldr	r3, [pc, #224]	@ (8017158 <RegionEU868NextChannel+0x154>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801707e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017080:	4b35      	ldr	r3, [pc, #212]	@ (8017158 <RegionEU868NextChannel+0x154>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8017086:	4b35      	ldr	r3, [pc, #212]	@ (801715c <RegionEU868NextChannel+0x158>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801708c:	2310      	movs	r3, #16
 801708e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017090:	f107 0312 	add.w	r3, r7, #18
 8017094:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	7a9b      	ldrb	r3, [r3, #10]
 80170a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80170aa:	2306      	movs	r3, #6
 80170ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80170b0:	68fa      	ldr	r2, [r7, #12]
 80170b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80170b6:	320c      	adds	r2, #12
 80170b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80170bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	7d1b      	ldrb	r3, [r3, #20]
 80170c4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	8adb      	ldrh	r3, [r3, #22]
 80170d2:	4619      	mov	r1, r3
 80170d4:	4610      	mov	r0, r2
 80170d6:	f7fe fffd 	bl	80160d4 <GetTimeOnAir>
 80170da:	4603      	mov	r3, r0
 80170dc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80170de:	f107 0314 	add.w	r3, r7, #20
 80170e2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80170e4:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 80170e8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80170ec:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	9301      	str	r3, [sp, #4]
 80170f4:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 80170f8:	9300      	str	r3, [sp, #0]
 80170fa:	460b      	mov	r3, r1
 80170fc:	6839      	ldr	r1, [r7, #0]
 80170fe:	f7fe fe4a 	bl	8015d96 <RegionCommonIdentifyChannels>
 8017102:	4603      	mov	r3, r0
 8017104:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017108:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801710c:	2b00      	cmp	r3, #0
 801710e:	d10e      	bne.n	801712e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017110:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8017114:	3b01      	subs	r3, #1
 8017116:	4619      	mov	r1, r3
 8017118:	2000      	movs	r0, #0
 801711a:	f001 fbe9 	bl	80188f0 <randr>
 801711e:	4603      	mov	r3, r0
 8017120:	3360      	adds	r3, #96	@ 0x60
 8017122:	443b      	add	r3, r7
 8017124:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	701a      	strb	r2, [r3, #0]
 801712c:	e00e      	b.n	801714c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801712e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8017132:	2b0c      	cmp	r3, #12
 8017134:	d10a      	bne.n	801714c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017136:	4b08      	ldr	r3, [pc, #32]	@ (8017158 <RegionEU868NextChannel+0x154>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801713e:	4b06      	ldr	r3, [pc, #24]	@ (8017158 <RegionEU868NextChannel+0x154>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	f042 0207 	orr.w	r2, r2, #7
 8017146:	b292      	uxth	r2, r2
 8017148:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801714c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017150:	4618      	mov	r0, r3
 8017152:	3760      	adds	r7, #96	@ 0x60
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}
 8017158:	20003c8c 	.word	0x20003c8c
 801715c:	20003c88 	.word	0x20003c88

08017160 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017168:	2300      	movs	r3, #0
 801716a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801716c:	2300      	movs	r3, #0
 801716e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017170:	2300      	movs	r3, #0
 8017172:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	791b      	ldrb	r3, [r3, #4]
 8017178:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801717a:	7b7b      	ldrb	r3, [r7, #13]
 801717c:	2b02      	cmp	r3, #2
 801717e:	d801      	bhi.n	8017184 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017180:	2306      	movs	r3, #6
 8017182:	e089      	b.n	8017298 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017184:	7b7b      	ldrb	r3, [r7, #13]
 8017186:	2b0f      	cmp	r3, #15
 8017188:	d901      	bls.n	801718e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801718a:	2303      	movs	r3, #3
 801718c:	e084      	b.n	8017298 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	7a1b      	ldrb	r3, [r3, #8]
 8017194:	f343 0303 	sbfx	r3, r3, #0, #4
 8017198:	b25b      	sxtb	r3, r3
 801719a:	2207      	movs	r2, #7
 801719c:	2100      	movs	r1, #0
 801719e:	4618      	mov	r0, r3
 80171a0:	f7fe f9a1 	bl	80154e6 <RegionCommonValueInRange>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d101      	bne.n	80171ae <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80171aa:	2301      	movs	r3, #1
 80171ac:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	7a1b      	ldrb	r3, [r3, #8]
 80171b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80171b8:	b25b      	sxtb	r3, r3
 80171ba:	2207      	movs	r2, #7
 80171bc:	2100      	movs	r1, #0
 80171be:	4618      	mov	r0, r3
 80171c0:	f7fe f991 	bl	80154e6 <RegionCommonValueInRange>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d101      	bne.n	80171ce <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80171ca:	2301      	movs	r3, #1
 80171cc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	7a1b      	ldrb	r3, [r3, #8]
 80171d4:	f343 0303 	sbfx	r3, r3, #0, #4
 80171d8:	b25a      	sxtb	r2, r3
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	7a1b      	ldrb	r3, [r3, #8]
 80171e0:	f343 1303 	sbfx	r3, r3, #4, #4
 80171e4:	b25b      	sxtb	r3, r3
 80171e6:	429a      	cmp	r2, r3
 80171e8:	dd01      	ble.n	80171ee <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80171ea:	2301      	movs	r3, #1
 80171ec:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80171ee:	7bbb      	ldrb	r3, [r7, #14]
 80171f0:	f083 0301 	eor.w	r3, r3, #1
 80171f4:	b2db      	uxtb	r3, r3
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d010      	beq.n	801721c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	f107 020c 	add.w	r2, r7, #12
 8017204:	4611      	mov	r1, r2
 8017206:	4618      	mov	r0, r3
 8017208:	f7fe feee 	bl	8015fe8 <VerifyRfFreq>
 801720c:	4603      	mov	r3, r0
 801720e:	f083 0301 	eor.w	r3, r3, #1
 8017212:	b2db      	uxtb	r3, r3
 8017214:	2b00      	cmp	r3, #0
 8017216:	d001      	beq.n	801721c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017218:	2301      	movs	r3, #1
 801721a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801721c:	7bfb      	ldrb	r3, [r7, #15]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d004      	beq.n	801722c <RegionEU868ChannelAdd+0xcc>
 8017222:	7bbb      	ldrb	r3, [r7, #14]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d001      	beq.n	801722c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017228:	2306      	movs	r3, #6
 801722a:	e035      	b.n	8017298 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801722c:	7bfb      	ldrb	r3, [r7, #15]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d001      	beq.n	8017236 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017232:	2305      	movs	r3, #5
 8017234:	e030      	b.n	8017298 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017236:	7bbb      	ldrb	r3, [r7, #14]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d001      	beq.n	8017240 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801723c:	2304      	movs	r3, #4
 801723e:	e02b      	b.n	8017298 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017240:	4b17      	ldr	r3, [pc, #92]	@ (80172a0 <RegionEU868ChannelAdd+0x140>)
 8017242:	6819      	ldr	r1, [r3, #0]
 8017244:	7b7a      	ldrb	r2, [r7, #13]
 8017246:	4613      	mov	r3, r2
 8017248:	005b      	lsls	r3, r3, #1
 801724a:	4413      	add	r3, r2
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	18c8      	adds	r0, r1, r3
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	220c      	movs	r2, #12
 8017256:	4619      	mov	r1, r3
 8017258:	f001 fb61 	bl	801891e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801725c:	4b10      	ldr	r3, [pc, #64]	@ (80172a0 <RegionEU868ChannelAdd+0x140>)
 801725e:	6819      	ldr	r1, [r3, #0]
 8017260:	7b7a      	ldrb	r2, [r7, #13]
 8017262:	7b38      	ldrb	r0, [r7, #12]
 8017264:	4613      	mov	r3, r2
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	4413      	add	r3, r2
 801726a:	009b      	lsls	r3, r3, #2
 801726c:	440b      	add	r3, r1
 801726e:	3309      	adds	r3, #9
 8017270:	4602      	mov	r2, r0
 8017272:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017274:	4b0a      	ldr	r3, [pc, #40]	@ (80172a0 <RegionEU868ChannelAdd+0x140>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 801727c:	b21a      	sxth	r2, r3
 801727e:	7b7b      	ldrb	r3, [r7, #13]
 8017280:	2101      	movs	r1, #1
 8017282:	fa01 f303 	lsl.w	r3, r1, r3
 8017286:	b21b      	sxth	r3, r3
 8017288:	4313      	orrs	r3, r2
 801728a:	b21a      	sxth	r2, r3
 801728c:	4b04      	ldr	r3, [pc, #16]	@ (80172a0 <RegionEU868ChannelAdd+0x140>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	b292      	uxth	r2, r2
 8017292:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8017296:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017298:	4618      	mov	r0, r3
 801729a:	3710      	adds	r7, #16
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	20003c8c 	.word	0x20003c8c

080172a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80172b2:	7dfb      	ldrb	r3, [r7, #23]
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	d801      	bhi.n	80172bc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80172b8:	2300      	movs	r3, #0
 80172ba:	e016      	b.n	80172ea <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80172bc:	4b0d      	ldr	r3, [pc, #52]	@ (80172f4 <RegionEU868ChannelsRemove+0x50>)
 80172be:	6819      	ldr	r1, [r3, #0]
 80172c0:	7dfa      	ldrb	r2, [r7, #23]
 80172c2:	4613      	mov	r3, r2
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	4413      	add	r3, r2
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	440b      	add	r3, r1
 80172cc:	461a      	mov	r2, r3
 80172ce:	2300      	movs	r3, #0
 80172d0:	6013      	str	r3, [r2, #0]
 80172d2:	6053      	str	r3, [r2, #4]
 80172d4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80172d6:	4b07      	ldr	r3, [pc, #28]	@ (80172f4 <RegionEU868ChannelsRemove+0x50>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80172de:	7df9      	ldrb	r1, [r7, #23]
 80172e0:	2210      	movs	r2, #16
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7fe f91c 	bl	8015520 <RegionCommonChanDisable>
 80172e8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	3718      	adds	r7, #24
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	20003c8c 	.word	0x20003c8c

080172f8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80172f8:	b590      	push	{r4, r7, lr}
 80172fa:	b085      	sub	sp, #20
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017306:	4b20      	ldr	r3, [pc, #128]	@ (8017388 <RegionEU868SetContinuousWave+0x90>)
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	4b20      	ldr	r3, [pc, #128]	@ (801738c <RegionEU868SetContinuousWave+0x94>)
 801730c:	6819      	ldr	r1, [r3, #0]
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	461c      	mov	r4, r3
 8017314:	4623      	mov	r3, r4
 8017316:	005b      	lsls	r3, r3, #1
 8017318:	4423      	add	r3, r4
 801731a:	009b      	lsls	r3, r3, #2
 801731c:	440b      	add	r3, r1
 801731e:	3309      	adds	r3, #9
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	4619      	mov	r1, r3
 8017324:	460b      	mov	r3, r1
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	440b      	add	r3, r1
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	4413      	add	r3, r2
 801732e:	3302      	adds	r3, #2
 8017330:	f993 3000 	ldrsb.w	r3, [r3]
 8017334:	4619      	mov	r1, r3
 8017336:	f7fe fdce 	bl	8015ed6 <RegionCommonLimitTxPower>
 801733a:	4603      	mov	r3, r0
 801733c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801733e:	2300      	movs	r3, #0
 8017340:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8017342:	4b12      	ldr	r3, [pc, #72]	@ (801738c <RegionEU868SetContinuousWave+0x94>)
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	4619      	mov	r1, r3
 801734c:	460b      	mov	r3, r1
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	440b      	add	r3, r1
 8017352:	009b      	lsls	r3, r3, #2
 8017354:	4413      	add	r3, r2
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6859      	ldr	r1, [r3, #4]
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	689a      	ldr	r2, [r3, #8]
 8017362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017366:	4618      	mov	r0, r3
 8017368:	f7fe fc26 	bl	8015bb8 <RegionCommonComputeTxPower>
 801736c:	4603      	mov	r3, r0
 801736e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017370:	4b07      	ldr	r3, [pc, #28]	@ (8017390 <RegionEU868SetContinuousWave+0x98>)
 8017372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	8992      	ldrh	r2, [r2, #12]
 8017378:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801737c:	68b8      	ldr	r0, [r7, #8]
 801737e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8017380:	bf00      	nop
 8017382:	3714      	adds	r7, #20
 8017384:	46bd      	mov	sp, r7
 8017386:	bd90      	pop	{r4, r7, pc}
 8017388:	20003c88 	.word	0x20003c88
 801738c:	20003c8c 	.word	0x20003c8c
 8017390:	0801e020 	.word	0x0801e020

08017394 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017394:	b480      	push	{r7}
 8017396:	b085      	sub	sp, #20
 8017398:	af00      	add	r7, sp, #0
 801739a:	4603      	mov	r3, r0
 801739c:	71fb      	strb	r3, [r7, #7]
 801739e:	460b      	mov	r3, r1
 80173a0:	71bb      	strb	r3, [r7, #6]
 80173a2:	4613      	mov	r3, r2
 80173a4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80173a6:	79ba      	ldrb	r2, [r7, #6]
 80173a8:	797b      	ldrb	r3, [r7, #5]
 80173aa:	1ad3      	subs	r3, r2, r3
 80173ac:	b2db      	uxtb	r3, r3
 80173ae:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80173b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	da01      	bge.n	80173bc <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80173b8:	2300      	movs	r3, #0
 80173ba:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3714      	adds	r7, #20
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bc80      	pop	{r7}
 80173c6:	4770      	bx	lr

080173c8 <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	603b      	str	r3, [r7, #0]
 80173d0:	4603      	mov	r3, r0
 80173d2:	71fb      	strb	r3, [r7, #7]
 80173d4:	460b      	mov	r3, r1
 80173d6:	71bb      	strb	r3, [r7, #6]
 80173d8:	4613      	mov	r3, r2
 80173da:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80173e0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80173e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80173e8:	4611      	mov	r1, r2
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7fe fd73 	bl	8015ed6 <RegionCommonLimitTxPower>
 80173f0:	4603      	mov	r3, r0
 80173f2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 80173f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80173f8:	2b04      	cmp	r3, #4
 80173fa:	d106      	bne.n	801740a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80173fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017400:	2b02      	cmp	r3, #2
 8017402:	bfb8      	it	lt
 8017404:	2302      	movlt	r3, #2
 8017406:	73fb      	strb	r3, [r7, #15]
 8017408:	e00d      	b.n	8017426 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801740a:	2204      	movs	r2, #4
 801740c:	2100      	movs	r1, #0
 801740e:	6838      	ldr	r0, [r7, #0]
 8017410:	f7fe f8ba 	bl	8015588 <RegionCommonCountChannels>
 8017414:	4603      	mov	r3, r0
 8017416:	2b31      	cmp	r3, #49	@ 0x31
 8017418:	d805      	bhi.n	8017426 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801741a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801741e:	2b05      	cmp	r3, #5
 8017420:	bfb8      	it	lt
 8017422:	2305      	movlt	r3, #5
 8017424:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3710      	adds	r7, #16
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}
	...

08017434 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801743c:	4b18      	ldr	r3, [pc, #96]	@ (80174a0 <VerifyRfFreq+0x6c>)
 801743e:	6a1b      	ldr	r3, [r3, #32]
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	4798      	blx	r3
 8017444:	4603      	mov	r3, r0
 8017446:	f083 0301 	eor.w	r3, r3, #1
 801744a:	b2db      	uxtb	r3, r3
 801744c:	2b00      	cmp	r3, #0
 801744e:	d001      	beq.n	8017454 <VerifyRfFreq+0x20>
    {
        return false;
 8017450:	2300      	movs	r3, #0
 8017452:	e021      	b.n	8017498 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	4a13      	ldr	r2, [pc, #76]	@ (80174a4 <VerifyRfFreq+0x70>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d910      	bls.n	801747e <VerifyRfFreq+0x4a>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	4a12      	ldr	r2, [pc, #72]	@ (80174a8 <VerifyRfFreq+0x74>)
 8017460:	4293      	cmp	r3, r2
 8017462:	d80c      	bhi.n	801747e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	4b11      	ldr	r3, [pc, #68]	@ (80174ac <VerifyRfFreq+0x78>)
 8017468:	4413      	add	r3, r2
 801746a:	4a11      	ldr	r2, [pc, #68]	@ (80174b0 <VerifyRfFreq+0x7c>)
 801746c:	fba2 1203 	umull	r1, r2, r2, r3
 8017470:	0c92      	lsrs	r2, r2, #18
 8017472:	4910      	ldr	r1, [pc, #64]	@ (80174b4 <VerifyRfFreq+0x80>)
 8017474:	fb01 f202 	mul.w	r2, r1, r2
 8017478:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801747a:	2a00      	cmp	r2, #0
 801747c:	d001      	beq.n	8017482 <VerifyRfFreq+0x4e>
    {
        return false;
 801747e:	2300      	movs	r3, #0
 8017480:	e00a      	b.n	8017498 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	4a0c      	ldr	r2, [pc, #48]	@ (80174b8 <VerifyRfFreq+0x84>)
 8017486:	4293      	cmp	r3, r2
 8017488:	d903      	bls.n	8017492 <VerifyRfFreq+0x5e>
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	4a06      	ldr	r2, [pc, #24]	@ (80174a8 <VerifyRfFreq+0x74>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d901      	bls.n	8017496 <VerifyRfFreq+0x62>
    {
        return false;
 8017492:	2300      	movs	r3, #0
 8017494:	e000      	b.n	8017498 <VerifyRfFreq+0x64>
    }
    return true;
 8017496:	2301      	movs	r3, #1
}
 8017498:	4618      	mov	r0, r3
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	0801e020 	.word	0x0801e020
 80174a4:	3708709f 	.word	0x3708709f
 80174a8:	374886e0 	.word	0x374886e0
 80174ac:	c8f78f60 	.word	0xc8f78f60
 80174b0:	6fd91d85 	.word	0x6fd91d85
 80174b4:	000927c0 	.word	0x000927c0
 80174b8:	35c8015f 	.word	0x35c8015f

080174bc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80174bc:	b590      	push	{r4, r7, lr}
 80174be:	b089      	sub	sp, #36	@ 0x24
 80174c0:	af04      	add	r7, sp, #16
 80174c2:	4603      	mov	r3, r0
 80174c4:	460a      	mov	r2, r1
 80174c6:	71fb      	strb	r3, [r7, #7]
 80174c8:	4613      	mov	r3, r2
 80174ca:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80174cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174d0:	4a0f      	ldr	r2, [pc, #60]	@ (8017510 <GetTimeOnAir+0x54>)
 80174d2:	5cd3      	ldrb	r3, [r2, r3]
 80174d4:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80174d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80174da:	490e      	ldr	r1, [pc, #56]	@ (8017514 <GetTimeOnAir+0x58>)
 80174dc:	4618      	mov	r0, r3
 80174de:	f7fe fd0f 	bl	8015f00 <RegionCommonGetBandwidth>
 80174e2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80174e4:	4b0c      	ldr	r3, [pc, #48]	@ (8017518 <GetTimeOnAir+0x5c>)
 80174e6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80174e8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80174ec:	88bb      	ldrh	r3, [r7, #4]
 80174ee:	b2db      	uxtb	r3, r3
 80174f0:	2101      	movs	r1, #1
 80174f2:	9103      	str	r1, [sp, #12]
 80174f4:	9302      	str	r3, [sp, #8]
 80174f6:	2300      	movs	r3, #0
 80174f8:	9301      	str	r3, [sp, #4]
 80174fa:	2308      	movs	r3, #8
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	2301      	movs	r3, #1
 8017500:	68b9      	ldr	r1, [r7, #8]
 8017502:	2001      	movs	r0, #1
 8017504:	47a0      	blx	r4
 8017506:	4603      	mov	r3, r0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3714      	adds	r7, #20
 801750c:	46bd      	mov	sp, r7
 801750e:	bd90      	pop	{r4, r7, pc}
 8017510:	0801df9c 	.word	0x0801df9c
 8017514:	0801dfac 	.word	0x0801dfac
 8017518:	0801e020 	.word	0x0801e020

0801751c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b088      	sub	sp, #32
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017524:	2300      	movs	r3, #0
 8017526:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	3b01      	subs	r3, #1
 801752e:	2b38      	cmp	r3, #56	@ 0x38
 8017530:	f200 813c 	bhi.w	80177ac <RegionUS915GetPhyParam+0x290>
 8017534:	a201      	add	r2, pc, #4	@ (adr r2, 801753c <RegionUS915GetPhyParam+0x20>)
 8017536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801753a:	bf00      	nop
 801753c:	08017621 	.word	0x08017621
 8017540:	08017627 	.word	0x08017627
 8017544:	080177ad 	.word	0x080177ad
 8017548:	080177ad 	.word	0x080177ad
 801754c:	080177ad 	.word	0x080177ad
 8017550:	0801762d 	.word	0x0801762d
 8017554:	080177ad 	.word	0x080177ad
 8017558:	08017667 	.word	0x08017667
 801755c:	080177ad 	.word	0x080177ad
 8017560:	0801766d 	.word	0x0801766d
 8017564:	08017673 	.word	0x08017673
 8017568:	08017679 	.word	0x08017679
 801756c:	0801767f 	.word	0x0801767f
 8017570:	0801768f 	.word	0x0801768f
 8017574:	0801769f 	.word	0x0801769f
 8017578:	080176a5 	.word	0x080176a5
 801757c:	080176ad 	.word	0x080176ad
 8017580:	080176b5 	.word	0x080176b5
 8017584:	080176bd 	.word	0x080176bd
 8017588:	080176c5 	.word	0x080176c5
 801758c:	080176cd 	.word	0x080176cd
 8017590:	080176d5 	.word	0x080176d5
 8017594:	080176e9 	.word	0x080176e9
 8017598:	080176ef 	.word	0x080176ef
 801759c:	080176f5 	.word	0x080176f5
 80175a0:	080176fb 	.word	0x080176fb
 80175a4:	08017707 	.word	0x08017707
 80175a8:	08017713 	.word	0x08017713
 80175ac:	08017719 	.word	0x08017719
 80175b0:	08017721 	.word	0x08017721
 80175b4:	08017727 	.word	0x08017727
 80175b8:	0801772d 	.word	0x0801772d
 80175bc:	08017733 	.word	0x08017733
 80175c0:	08017633 	.word	0x08017633
 80175c4:	080177ad 	.word	0x080177ad
 80175c8:	080177ad 	.word	0x080177ad
 80175cc:	080177ad 	.word	0x080177ad
 80175d0:	080177ad 	.word	0x080177ad
 80175d4:	080177ad 	.word	0x080177ad
 80175d8:	080177ad 	.word	0x080177ad
 80175dc:	080177ad 	.word	0x080177ad
 80175e0:	080177ad 	.word	0x080177ad
 80175e4:	080177ad 	.word	0x080177ad
 80175e8:	080177ad 	.word	0x080177ad
 80175ec:	080177ad 	.word	0x080177ad
 80175f0:	080177ad 	.word	0x080177ad
 80175f4:	080177ad 	.word	0x080177ad
 80175f8:	0801773b 	.word	0x0801773b
 80175fc:	0801774f 	.word	0x0801774f
 8017600:	0801775d 	.word	0x0801775d
 8017604:	08017763 	.word	0x08017763
 8017608:	080177ad 	.word	0x080177ad
 801760c:	08017769 	.word	0x08017769
 8017610:	0801777d 	.word	0x0801777d
 8017614:	08017783 	.word	0x08017783
 8017618:	08017789 	.word	0x08017789
 801761c:	08017799 	.word	0x08017799
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017620:	2308      	movs	r3, #8
 8017622:	61bb      	str	r3, [r7, #24]
            break;
 8017624:	e0c3      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017626:	2300      	movs	r3, #0
 8017628:	61bb      	str	r3, [r7, #24]
            break;
 801762a:	e0c0      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801762c:	2300      	movs	r3, #0
 801762e:	61bb      	str	r3, [r7, #24]
            break;
 8017630:	e0bd      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017638:	733b      	strb	r3, [r7, #12]
 801763a:	2304      	movs	r3, #4
 801763c:	737b      	strb	r3, [r7, #13]
 801763e:	2300      	movs	r3, #0
 8017640:	73bb      	strb	r3, [r7, #14]
 8017642:	2348      	movs	r3, #72	@ 0x48
 8017644:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017646:	4b5d      	ldr	r3, [pc, #372]	@ (80177bc <RegionUS915GetPhyParam+0x2a0>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801764e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017650:	4b5a      	ldr	r3, [pc, #360]	@ (80177bc <RegionUS915GetPhyParam+0x2a0>)
 8017652:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017654:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017656:	f107 030c 	add.w	r3, r7, #12
 801765a:	4618      	mov	r0, r3
 801765c:	f7fe fbfd 	bl	8015e5a <RegionCommonGetNextLowerTxDr>
 8017660:	4603      	mov	r3, r0
 8017662:	61bb      	str	r3, [r7, #24]
            break;
 8017664:	e0a3      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017666:	2300      	movs	r3, #0
 8017668:	61bb      	str	r3, [r7, #24]
            break;
 801766a:	e0a0      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801766c:	2300      	movs	r3, #0
 801766e:	61bb      	str	r3, [r7, #24]
            break;
 8017670:	e09d      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017672:	2340      	movs	r3, #64	@ 0x40
 8017674:	61bb      	str	r3, [r7, #24]
            break;
 8017676:	e09a      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017678:	2320      	movs	r3, #32
 801767a:	61bb      	str	r3, [r7, #24]
            break;
 801767c:	e097      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017684:	461a      	mov	r2, r3
 8017686:	4b4e      	ldr	r3, [pc, #312]	@ (80177c0 <RegionUS915GetPhyParam+0x2a4>)
 8017688:	5c9b      	ldrb	r3, [r3, r2]
 801768a:	61bb      	str	r3, [r7, #24]
            break;
 801768c:	e08f      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017694:	461a      	mov	r2, r3
 8017696:	4b4b      	ldr	r3, [pc, #300]	@ (80177c4 <RegionUS915GetPhyParam+0x2a8>)
 8017698:	5c9b      	ldrb	r3, [r3, r2]
 801769a:	61bb      	str	r3, [r7, #24]
            break;
 801769c:	e087      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801769e:	2300      	movs	r3, #0
 80176a0:	61bb      	str	r3, [r7, #24]
            break;
 80176a2:	e084      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 80176a4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80176a8:	61bb      	str	r3, [r7, #24]
            break;
 80176aa:	e080      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80176ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80176b0:	61bb      	str	r3, [r7, #24]
            break;
 80176b2:	e07c      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80176b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80176b8:	61bb      	str	r3, [r7, #24]
            break;
 80176ba:	e078      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80176bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80176c0:	61bb      	str	r3, [r7, #24]
            break;
 80176c2:	e074      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80176c4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80176c8:	61bb      	str	r3, [r7, #24]
            break;
 80176ca:	e070      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80176cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80176d0:	61bb      	str	r3, [r7, #24]
            break;
 80176d2:	e06c      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80176d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80176d8:	483b      	ldr	r0, [pc, #236]	@ (80177c8 <RegionUS915GetPhyParam+0x2ac>)
 80176da:	f001 f909 	bl	80188f0 <randr>
 80176de:	4603      	mov	r3, r0
 80176e0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80176e4:	61bb      	str	r3, [r7, #24]
            break;
 80176e6:	e062      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80176e8:	2300      	movs	r3, #0
 80176ea:	61bb      	str	r3, [r7, #24]
            break;
 80176ec:	e05f      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80176ee:	4b37      	ldr	r3, [pc, #220]	@ (80177cc <RegionUS915GetPhyParam+0x2b0>)
 80176f0:	61bb      	str	r3, [r7, #24]
            break;
 80176f2:	e05c      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80176f4:	2308      	movs	r3, #8
 80176f6:	61bb      	str	r3, [r7, #24]
            break;
 80176f8:	e059      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80176fa:	4b30      	ldr	r3, [pc, #192]	@ (80177bc <RegionUS915GetPhyParam+0x2a0>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017702:	61bb      	str	r3, [r7, #24]
            break;
 8017704:	e053      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017706:	4b2d      	ldr	r3, [pc, #180]	@ (80177bc <RegionUS915GetPhyParam+0x2a0>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801770e:	61bb      	str	r3, [r7, #24]
            break;
 8017710:	e04d      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017712:	2348      	movs	r3, #72	@ 0x48
 8017714:	61bb      	str	r3, [r7, #24]
            break;
 8017716:	e04a      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017718:	4b28      	ldr	r3, [pc, #160]	@ (80177bc <RegionUS915GetPhyParam+0x2a0>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	61bb      	str	r3, [r7, #24]
            break;
 801771e:	e046      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017720:	2300      	movs	r3, #0
 8017722:	61bb      	str	r3, [r7, #24]
            break;
 8017724:	e043      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017726:	2300      	movs	r3, #0
 8017728:	61bb      	str	r3, [r7, #24]
            break;
 801772a:	e040      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801772c:	4b28      	ldr	r3, [pc, #160]	@ (80177d0 <RegionUS915GetPhyParam+0x2b4>)
 801772e:	61bb      	str	r3, [r7, #24]
            break;
 8017730:	e03d      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017732:	f04f 0300 	mov.w	r3, #0
 8017736:	61bb      	str	r3, [r7, #24]
            break;
 8017738:	e039      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	791b      	ldrb	r3, [r3, #4]
 801773e:	4a25      	ldr	r2, [pc, #148]	@ (80177d4 <RegionUS915GetPhyParam+0x2b8>)
 8017740:	4922      	ldr	r1, [pc, #136]	@ (80177cc <RegionUS915GetPhyParam+0x2b0>)
 8017742:	4618      	mov	r0, r3
 8017744:	f7fd fcfb 	bl	801513e <RegionBaseUSCalcDownlinkFrequency>
 8017748:	4603      	mov	r3, r0
 801774a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801774c:	e02f      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801774e:	2317      	movs	r3, #23
 8017750:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017752:	2305      	movs	r3, #5
 8017754:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017756:	2303      	movs	r3, #3
 8017758:	76bb      	strb	r3, [r7, #26]
            break;
 801775a:	e028      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801775c:	2308      	movs	r3, #8
 801775e:	61bb      	str	r3, [r7, #24]
            break;
 8017760:	e025      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017762:	2308      	movs	r3, #8
 8017764:	61bb      	str	r3, [r7, #24]
            break;
 8017766:	e022      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	791b      	ldrb	r3, [r3, #4]
 801776c:	4a19      	ldr	r2, [pc, #100]	@ (80177d4 <RegionUS915GetPhyParam+0x2b8>)
 801776e:	4917      	ldr	r1, [pc, #92]	@ (80177cc <RegionUS915GetPhyParam+0x2b0>)
 8017770:	4618      	mov	r0, r3
 8017772:	f7fd fce4 	bl	801513e <RegionBaseUSCalcDownlinkFrequency>
 8017776:	4603      	mov	r3, r0
 8017778:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801777a:	e018      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801777c:	2308      	movs	r3, #8
 801777e:	61bb      	str	r3, [r7, #24]
            break;
 8017780:	e015      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017782:	2308      	movs	r3, #8
 8017784:	61bb      	str	r3, [r7, #24]
            break;
 8017786:	e012      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801778e:	461a      	mov	r2, r3
 8017790:	4b11      	ldr	r3, [pc, #68]	@ (80177d8 <RegionUS915GetPhyParam+0x2bc>)
 8017792:	5c9b      	ldrb	r3, [r3, r2]
 8017794:	61bb      	str	r3, [r7, #24]
            break;
 8017796:	e00a      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801779e:	490f      	ldr	r1, [pc, #60]	@ (80177dc <RegionUS915GetPhyParam+0x2c0>)
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7fe fbad 	bl	8015f00 <RegionCommonGetBandwidth>
 80177a6:	4603      	mov	r3, r0
 80177a8:	61bb      	str	r3, [r7, #24]
            break;
 80177aa:	e000      	b.n	80177ae <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 80177ac:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	61fb      	str	r3, [r7, #28]
 80177b2:	69fb      	ldr	r3, [r7, #28]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	3720      	adds	r7, #32
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	20003c94 	.word	0x20003c94
 80177c0:	0801e000 	.word	0x0801e000
 80177c4:	0801e010 	.word	0x0801e010
 80177c8:	fffffc18 	.word	0xfffffc18
 80177cc:	370870a0 	.word	0x370870a0
 80177d0:	4200999a 	.word	0x4200999a
 80177d4:	000927c0 	.word	0x000927c0
 80177d8:	0801df9c 	.word	0x0801df9c
 80177dc:	0801dfac 	.word	0x0801dfac

080177e0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80177e0:	b590      	push	{r4, r7, lr}
 80177e2:	b085      	sub	sp, #20
 80177e4:	af02      	add	r7, sp, #8
 80177e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80177e8:	4b11      	ldr	r3, [pc, #68]	@ (8017830 <RegionUS915SetBandTxDone+0x50>)
 80177ea:	681a      	ldr	r2, [r3, #0]
 80177ec:	4b11      	ldr	r3, [pc, #68]	@ (8017834 <RegionUS915SetBandTxDone+0x54>)
 80177ee:	6819      	ldr	r1, [r3, #0]
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	4618      	mov	r0, r3
 80177f6:	4603      	mov	r3, r0
 80177f8:	005b      	lsls	r3, r3, #1
 80177fa:	4403      	add	r3, r0
 80177fc:	009b      	lsls	r3, r3, #2
 80177fe:	440b      	add	r3, r1
 8017800:	3309      	adds	r3, #9
 8017802:	781b      	ldrb	r3, [r3, #0]
 8017804:	4619      	mov	r1, r3
 8017806:	460b      	mov	r3, r1
 8017808:	005b      	lsls	r3, r3, #1
 801780a:	440b      	add	r3, r1
 801780c:	00db      	lsls	r3, r3, #3
 801780e:	18d0      	adds	r0, r2, r3
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6899      	ldr	r1, [r3, #8]
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	785c      	ldrb	r4, [r3, #1]
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	691a      	ldr	r2, [r3, #16]
 801781c:	9200      	str	r2, [sp, #0]
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	4622      	mov	r2, r4
 8017822:	f7fd ff03 	bl	801562c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 8017826:	bf00      	nop
 8017828:	370c      	adds	r7, #12
 801782a:	46bd      	mov	sp, r7
 801782c:	bd90      	pop	{r4, r7, pc}
 801782e:	bf00      	nop
 8017830:	20003c90 	.word	0x20003c90
 8017834:	20003c94 	.word	0x20003c94

08017838 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b08a      	sub	sp, #40	@ 0x28
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017840:	2301      	movs	r3, #1
 8017842:	81bb      	strh	r3, [r7, #12]
 8017844:	2300      	movs	r3, #0
 8017846:	73bb      	strb	r3, [r7, #14]
 8017848:	2300      	movs	r3, #0
 801784a:	613b      	str	r3, [r7, #16]
 801784c:	2300      	movs	r3, #0
 801784e:	617b      	str	r3, [r7, #20]
 8017850:	2300      	movs	r3, #0
 8017852:	61bb      	str	r3, [r7, #24]
 8017854:	2300      	movs	r3, #0
 8017856:	61fb      	str	r3, [r7, #28]
 8017858:	2300      	movs	r3, #0
 801785a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	7a1b      	ldrb	r3, [r3, #8]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d007      	beq.n	8017876 <RegionUS915InitDefaults+0x3e>
 8017866:	2b00      	cmp	r3, #0
 8017868:	f2c0 8106 	blt.w	8017a78 <RegionUS915InitDefaults+0x240>
 801786c:	3b01      	subs	r3, #1
 801786e:	2b01      	cmp	r3, #1
 8017870:	f200 8102 	bhi.w	8017a78 <RegionUS915InitDefaults+0x240>
 8017874:	e0ce      	b.n	8017a14 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	f000 80fe 	beq.w	8017a7c <RegionUS915InitDefaults+0x244>
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	685b      	ldr	r3, [r3, #4]
 8017884:	2b00      	cmp	r3, #0
 8017886:	f000 80f9 	beq.w	8017a7c <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4a7d      	ldr	r2, [pc, #500]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 8017890:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	685b      	ldr	r3, [r3, #4]
 8017896:	4a7c      	ldr	r2, [pc, #496]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017898:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801789a:	4b7a      	ldr	r3, [pc, #488]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2200      	movs	r2, #0
 80178a0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80178a4:	4b77      	ldr	r3, [pc, #476]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	2200      	movs	r2, #0
 80178aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80178ae:	4b75      	ldr	r3, [pc, #468]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	4618      	mov	r0, r3
 80178b4:	f107 030c 	add.w	r3, r7, #12
 80178b8:	2218      	movs	r2, #24
 80178ba:	4619      	mov	r1, r3
 80178bc:	f001 f82f 	bl	801891e <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80178c0:	2300      	movs	r3, #0
 80178c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80178c6:	e02e      	b.n	8017926 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80178c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80178cc:	4a6f      	ldr	r2, [pc, #444]	@ (8017a8c <RegionUS915InitDefaults+0x254>)
 80178ce:	fb03 f202 	mul.w	r2, r3, r2
 80178d2:	4b6f      	ldr	r3, [pc, #444]	@ (8017a90 <RegionUS915InitDefaults+0x258>)
 80178d4:	4413      	add	r3, r2
 80178d6:	4a6c      	ldr	r2, [pc, #432]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80178d8:	6811      	ldr	r1, [r2, #0]
 80178da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80178de:	4618      	mov	r0, r3
 80178e0:	4613      	mov	r3, r2
 80178e2:	005b      	lsls	r3, r3, #1
 80178e4:	4413      	add	r3, r2
 80178e6:	009b      	lsls	r3, r3, #2
 80178e8:	440b      	add	r3, r1
 80178ea:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80178ec:	4b66      	ldr	r3, [pc, #408]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80178ee:	6819      	ldr	r1, [r3, #0]
 80178f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80178f4:	4613      	mov	r3, r2
 80178f6:	005b      	lsls	r3, r3, #1
 80178f8:	4413      	add	r3, r2
 80178fa:	009b      	lsls	r3, r3, #2
 80178fc:	440b      	add	r3, r1
 80178fe:	3308      	adds	r3, #8
 8017900:	2230      	movs	r2, #48	@ 0x30
 8017902:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017904:	4b60      	ldr	r3, [pc, #384]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017906:	6819      	ldr	r1, [r3, #0]
 8017908:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801790c:	4613      	mov	r3, r2
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	4413      	add	r3, r2
 8017912:	009b      	lsls	r3, r3, #2
 8017914:	440b      	add	r3, r1
 8017916:	3309      	adds	r3, #9
 8017918:	2200      	movs	r2, #0
 801791a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801791c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017920:	3301      	adds	r3, #1
 8017922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801792a:	2b3f      	cmp	r3, #63	@ 0x3f
 801792c:	d9cc      	bls.n	80178c8 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801792e:	2340      	movs	r3, #64	@ 0x40
 8017930:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017934:	e02f      	b.n	8017996 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017936:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801793a:	3b40      	subs	r3, #64	@ 0x40
 801793c:	4a55      	ldr	r2, [pc, #340]	@ (8017a94 <RegionUS915InitDefaults+0x25c>)
 801793e:	fb03 f202 	mul.w	r2, r3, r2
 8017942:	4b55      	ldr	r3, [pc, #340]	@ (8017a98 <RegionUS915InitDefaults+0x260>)
 8017944:	4413      	add	r3, r2
 8017946:	4a50      	ldr	r2, [pc, #320]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017948:	6811      	ldr	r1, [r2, #0]
 801794a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801794e:	4618      	mov	r0, r3
 8017950:	4613      	mov	r3, r2
 8017952:	005b      	lsls	r3, r3, #1
 8017954:	4413      	add	r3, r2
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	440b      	add	r3, r1
 801795a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801795c:	4b4a      	ldr	r3, [pc, #296]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 801795e:	6819      	ldr	r1, [r3, #0]
 8017960:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017964:	4613      	mov	r3, r2
 8017966:	005b      	lsls	r3, r3, #1
 8017968:	4413      	add	r3, r2
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	440b      	add	r3, r1
 801796e:	3308      	adds	r3, #8
 8017970:	2244      	movs	r2, #68	@ 0x44
 8017972:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017974:	4b44      	ldr	r3, [pc, #272]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017976:	6819      	ldr	r1, [r3, #0]
 8017978:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801797c:	4613      	mov	r3, r2
 801797e:	005b      	lsls	r3, r3, #1
 8017980:	4413      	add	r3, r2
 8017982:	009b      	lsls	r3, r3, #2
 8017984:	440b      	add	r3, r1
 8017986:	3309      	adds	r3, #9
 8017988:	2200      	movs	r2, #0
 801798a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801798c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017990:	3301      	adds	r3, #1
 8017992:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017996:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801799a:	2b47      	cmp	r3, #71	@ 0x47
 801799c:	d9cb      	bls.n	8017936 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801799e:	4b3a      	ldr	r3, [pc, #232]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179a6:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80179aa:	4b37      	ldr	r3, [pc, #220]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179b2:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80179b6:	4b34      	ldr	r3, [pc, #208]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179be:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80179c2:	4b31      	ldr	r3, [pc, #196]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179ca:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80179ce:	4b2e      	ldr	r3, [pc, #184]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	22ff      	movs	r2, #255	@ 0xff
 80179d4:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80179d8:	4b2b      	ldr	r3, [pc, #172]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2200      	movs	r2, #0
 80179de:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80179e2:	4b29      	ldr	r3, [pc, #164]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80179ea:	4b27      	ldr	r3, [pc, #156]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80179f2:	2206      	movs	r2, #6
 80179f4:	4619      	mov	r1, r3
 80179f6:	f7fd fdf3 	bl	80155e0 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80179fa:	4b22      	ldr	r3, [pc, #136]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8017a02:	4b21      	ldr	r3, [pc, #132]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017a0a:	2206      	movs	r2, #6
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	f7fd fde7 	bl	80155e0 <RegionCommonChanMaskCopy>
            break;
 8017a12:	e034      	b.n	8017a7e <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017a14:	4b1c      	ldr	r3, [pc, #112]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017a24:	2206      	movs	r2, #6
 8017a26:	4619      	mov	r1, r3
 8017a28:	f7fd fdda 	bl	80155e0 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017a32:	e01c      	b.n	8017a6e <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017a34:	4b13      	ldr	r3, [pc, #76]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017a3c:	3248      	adds	r2, #72	@ 0x48
 8017a3e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017a42:	4b11      	ldr	r3, [pc, #68]	@ (8017a88 <RegionUS915InitDefaults+0x250>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017a4a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017a4e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017a52:	4b0c      	ldr	r3, [pc, #48]	@ (8017a84 <RegionUS915InitDefaults+0x24c>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017a5a:	4001      	ands	r1, r0
 8017a5c:	b289      	uxth	r1, r1
 8017a5e:	3248      	adds	r2, #72	@ 0x48
 8017a60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017a64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017a68:	3301      	adds	r3, #1
 8017a6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8017a6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8017a72:	2b05      	cmp	r3, #5
 8017a74:	d9de      	bls.n	8017a34 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017a76:	e002      	b.n	8017a7e <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8017a78:	bf00      	nop
 8017a7a:	e000      	b.n	8017a7e <RegionUS915InitDefaults+0x246>
                return;
 8017a7c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8017a7e:	3728      	adds	r7, #40	@ 0x28
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}
 8017a84:	20003c90 	.word	0x20003c90
 8017a88:	20003c94 	.word	0x20003c94
 8017a8c:	00030d40 	.word	0x00030d40
 8017a90:	35c80160 	.word	0x35c80160
 8017a94:	00186a00 	.word	0x00186a00
 8017a98:	35d2afc0 	.word	0x35d2afc0

08017a9c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b082      	sub	sp, #8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8017aa8:	78fb      	ldrb	r3, [r7, #3]
 8017aaa:	2b0f      	cmp	r3, #15
 8017aac:	d858      	bhi.n	8017b60 <RegionUS915Verify+0xc4>
 8017aae:	a201      	add	r2, pc, #4	@ (adr r2, 8017ab4 <RegionUS915Verify+0x18>)
 8017ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ab4:	08017af5 	.word	0x08017af5
 8017ab8:	08017b61 	.word	0x08017b61
 8017abc:	08017b61 	.word	0x08017b61
 8017ac0:	08017b61 	.word	0x08017b61
 8017ac4:	08017b61 	.word	0x08017b61
 8017ac8:	08017b03 	.word	0x08017b03
 8017acc:	08017b03 	.word	0x08017b03
 8017ad0:	08017b21 	.word	0x08017b21
 8017ad4:	08017b61 	.word	0x08017b61
 8017ad8:	08017b3f 	.word	0x08017b3f
 8017adc:	08017b3f 	.word	0x08017b3f
 8017ae0:	08017b61 	.word	0x08017b61
 8017ae4:	08017b61 	.word	0x08017b61
 8017ae8:	08017b61 	.word	0x08017b61
 8017aec:	08017b61 	.word	0x08017b61
 8017af0:	08017b5d 	.word	0x08017b5d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7ff fc9b 	bl	8017434 <VerifyRfFreq>
 8017afe:	4603      	mov	r3, r0
 8017b00:	e02f      	b.n	8017b62 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f993 3000 	ldrsb.w	r3, [r3]
 8017b08:	2204      	movs	r2, #4
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fd fcea 	bl	80154e6 <RegionCommonValueInRange>
 8017b12:	4603      	mov	r3, r0
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	bf14      	ite	ne
 8017b18:	2301      	movne	r3, #1
 8017b1a:	2300      	moveq	r3, #0
 8017b1c:	b2db      	uxtb	r3, r3
 8017b1e:	e020      	b.n	8017b62 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	f993 3000 	ldrsb.w	r3, [r3]
 8017b26:	220d      	movs	r2, #13
 8017b28:	2108      	movs	r1, #8
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f7fd fcdb 	bl	80154e6 <RegionCommonValueInRange>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	bf14      	ite	ne
 8017b36:	2301      	movne	r3, #1
 8017b38:	2300      	moveq	r3, #0
 8017b3a:	b2db      	uxtb	r3, r3
 8017b3c:	e011      	b.n	8017b62 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f993 3000 	ldrsb.w	r3, [r3]
 8017b44:	220e      	movs	r2, #14
 8017b46:	2100      	movs	r1, #0
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7fd fccc 	bl	80154e6 <RegionCommonValueInRange>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	bf14      	ite	ne
 8017b54:	2301      	movne	r3, #1
 8017b56:	2300      	moveq	r3, #0
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	e002      	b.n	8017b62 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	e000      	b.n	8017b62 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8017b60:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop

08017b6c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b085      	sub	sp, #20
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	791b      	ldrb	r3, [r3, #4]
 8017b78:	2b10      	cmp	r3, #16
 8017b7a:	d160      	bne.n	8017c3e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	330f      	adds	r3, #15
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	2b01      	cmp	r3, #1
 8017b86:	d15c      	bne.n	8017c42 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017b88:	2300      	movs	r3, #0
 8017b8a:	73fb      	strb	r3, [r7, #15]
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	73bb      	strb	r3, [r7, #14]
 8017b90:	e051      	b.n	8017c36 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	7bbb      	ldrb	r3, [r7, #14]
 8017b98:	4413      	add	r3, r2
 8017b9a:	7819      	ldrb	r1, [r3, #0]
 8017b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	7bfa      	ldrb	r2, [r7, #15]
 8017ba2:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017ba6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8017baa:	4b28      	ldr	r3, [pc, #160]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	7bfa      	ldrb	r2, [r7, #15]
 8017bb0:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017bb4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	7bbb      	ldrb	r3, [r7, #14]
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	4413      	add	r3, r2
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	021b      	lsls	r3, r3, #8
 8017bc6:	b299      	uxth	r1, r3
 8017bc8:	4b20      	ldr	r3, [pc, #128]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	7bfa      	ldrb	r2, [r7, #15]
 8017bce:	4301      	orrs	r1, r0
 8017bd0:	b289      	uxth	r1, r1
 8017bd2:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8017bda:	7bfb      	ldrb	r3, [r7, #15]
 8017bdc:	2b04      	cmp	r3, #4
 8017bde:	d10f      	bne.n	8017c00 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8017be0:	4b1a      	ldr	r3, [pc, #104]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	7bfa      	ldrb	r2, [r7, #15]
 8017be6:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017bea:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017bee:	4b17      	ldr	r3, [pc, #92]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	7bfa      	ldrb	r2, [r7, #15]
 8017bf4:	b2c9      	uxtb	r1, r1
 8017bf6:	b289      	uxth	r1, r1
 8017bf8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017bfc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8017c00:	4b13      	ldr	r3, [pc, #76]	@ (8017c50 <RegionUS915ApplyCFList+0xe4>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	7bfa      	ldrb	r2, [r7, #15]
 8017c06:	3248      	adds	r2, #72	@ 0x48
 8017c08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8017c4c <RegionUS915ApplyCFList+0xe0>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	7bfa      	ldrb	r2, [r7, #15]
 8017c12:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017c16:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8017c50 <RegionUS915ApplyCFList+0xe4>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	7bfa      	ldrb	r2, [r7, #15]
 8017c20:	4001      	ands	r1, r0
 8017c22:	b289      	uxth	r1, r1
 8017c24:	3248      	adds	r2, #72	@ 0x48
 8017c26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017c2a:	7bfb      	ldrb	r3, [r7, #15]
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	73fb      	strb	r3, [r7, #15]
 8017c30:	7bbb      	ldrb	r3, [r7, #14]
 8017c32:	3302      	adds	r3, #2
 8017c34:	73bb      	strb	r3, [r7, #14]
 8017c36:	7bfb      	ldrb	r3, [r7, #15]
 8017c38:	2b04      	cmp	r3, #4
 8017c3a:	d9aa      	bls.n	8017b92 <RegionUS915ApplyCFList+0x26>
 8017c3c:	e002      	b.n	8017c44 <RegionUS915ApplyCFList+0xd8>
        return;
 8017c3e:	bf00      	nop
 8017c40:	e000      	b.n	8017c44 <RegionUS915ApplyCFList+0xd8>
        return;
 8017c42:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8017c44:	3714      	adds	r7, #20
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bc80      	pop	{r7}
 8017c4a:	4770      	bx	lr
 8017c4c:	20003c94 	.word	0x20003c94
 8017c50:	20003c90 	.word	0x20003c90

08017c54 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b084      	sub	sp, #16
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2204      	movs	r2, #4
 8017c62:	2100      	movs	r1, #0
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7fd fc8f 	bl	8015588 <RegionCommonCountChannels>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8017c6e:	7bbb      	ldrb	r3, [r7, #14]
 8017c70:	2b01      	cmp	r3, #1
 8017c72:	d804      	bhi.n	8017c7e <RegionUS915ChanMaskSet+0x2a>
 8017c74:	7bbb      	ldrb	r3, [r7, #14]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d001      	beq.n	8017c7e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e04c      	b.n	8017d18 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	791b      	ldrb	r3, [r3, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d002      	beq.n	8017c8c <RegionUS915ChanMaskSet+0x38>
 8017c86:	2b01      	cmp	r3, #1
 8017c88:	d038      	beq.n	8017cfc <RegionUS915ChanMaskSet+0xa8>
 8017c8a:	e042      	b.n	8017d12 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017c8c:	4b24      	ldr	r3, [pc, #144]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2206      	movs	r2, #6
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	f7fd fca0 	bl	80155e0 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8017ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 8017ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	b2d2      	uxtb	r2, r2
 8017cae:	b292      	uxth	r2, r2
 8017cb0:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	73fb      	strb	r3, [r7, #15]
 8017cc2:	e017      	b.n	8017cf4 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017cc4:	4b17      	ldr	r3, [pc, #92]	@ (8017d24 <RegionUS915ChanMaskSet+0xd0>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	7bfa      	ldrb	r2, [r7, #15]
 8017cca:	3248      	adds	r2, #72	@ 0x48
 8017ccc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017cd0:	4b13      	ldr	r3, [pc, #76]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	7bfa      	ldrb	r2, [r7, #15]
 8017cd6:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8017cda:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017cde:	4b11      	ldr	r3, [pc, #68]	@ (8017d24 <RegionUS915ChanMaskSet+0xd0>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	7bfa      	ldrb	r2, [r7, #15]
 8017ce4:	4001      	ands	r1, r0
 8017ce6:	b289      	uxth	r1, r1
 8017ce8:	3248      	adds	r2, #72	@ 0x48
 8017cea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8017cee:	7bfb      	ldrb	r3, [r7, #15]
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	73fb      	strb	r3, [r7, #15]
 8017cf4:	7bfb      	ldrb	r3, [r7, #15]
 8017cf6:	2b05      	cmp	r3, #5
 8017cf8:	d9e4      	bls.n	8017cc4 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8017cfa:	e00c      	b.n	8017d16 <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017cfc:	4b08      	ldr	r3, [pc, #32]	@ (8017d20 <RegionUS915ChanMaskSet+0xcc>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2206      	movs	r2, #6
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	f7fd fc68 	bl	80155e0 <RegionCommonChanMaskCopy>
            break;
 8017d10:	e001      	b.n	8017d16 <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8017d12:	2300      	movs	r3, #0
 8017d14:	e000      	b.n	8017d18 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 8017d16:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3710      	adds	r7, #16
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}
 8017d20:	20003c94 	.word	0x20003c94
 8017d24:	20003c90 	.word	0x20003c90

08017d28 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b088      	sub	sp, #32
 8017d2c:	af02      	add	r7, sp, #8
 8017d2e:	60ba      	str	r2, [r7, #8]
 8017d30:	607b      	str	r3, [r7, #4]
 8017d32:	4603      	mov	r3, r0
 8017d34:	73fb      	strb	r3, [r7, #15]
 8017d36:	460b      	mov	r3, r1
 8017d38:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8017d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d42:	2b0d      	cmp	r3, #13
 8017d44:	bfa8      	it	ge
 8017d46:	230d      	movge	r3, #13
 8017d48:	b25a      	sxtb	r2, r3
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d54:	4916      	ldr	r1, [pc, #88]	@ (8017db0 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7fe f8d2 	bl	8015f00 <RegionCommonGetBandwidth>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	b2da      	uxtb	r2, r3
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	4b11      	ldr	r3, [pc, #68]	@ (8017db4 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8017d6e:	5c9a      	ldrb	r2, [r3, r2]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017d76:	4619      	mov	r1, r3
 8017d78:	4b0d      	ldr	r3, [pc, #52]	@ (8017db0 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017d7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d7e:	4619      	mov	r1, r3
 8017d80:	4610      	mov	r0, r2
 8017d82:	f7fd fe3b 	bl	80159fc <RegionCommonComputeSymbolTimeLoRa>
 8017d86:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017d88:	4b0b      	ldr	r3, [pc, #44]	@ (8017db8 <RegionUS915ComputeRxWindowParameters+0x90>)
 8017d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017d8c:	4798      	blx	r3
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	3308      	adds	r3, #8
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	320c      	adds	r2, #12
 8017d96:	7bb9      	ldrb	r1, [r7, #14]
 8017d98:	9201      	str	r2, [sp, #4]
 8017d9a:	9300      	str	r3, [sp, #0]
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	68ba      	ldr	r2, [r7, #8]
 8017da0:	6978      	ldr	r0, [r7, #20]
 8017da2:	f7fd fe51 	bl	8015a48 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8017da6:	bf00      	nop
 8017da8:	3718      	adds	r7, #24
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
 8017dae:	bf00      	nop
 8017db0:	0801dfac 	.word	0x0801dfac
 8017db4:	0801df9c 	.word	0x0801df9c
 8017db8:	0801e020 	.word	0x0801e020

08017dbc <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017dbc:	b590      	push	{r4, r7, lr}
 8017dbe:	b091      	sub	sp, #68	@ 0x44
 8017dc0:	af0a      	add	r7, sp, #40	@ 0x28
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	785b      	ldrb	r3, [r3, #1]
 8017dca:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017dda:	4b34      	ldr	r3, [pc, #208]	@ (8017eac <RegionUS915RxConfig+0xf0>)
 8017ddc:	685b      	ldr	r3, [r3, #4]
 8017dde:	4798      	blx	r3
 8017de0:	4603      	mov	r3, r0
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d001      	beq.n	8017dea <RegionUS915RxConfig+0x2e>
    {
        return false;
 8017de6:	2300      	movs	r3, #0
 8017de8:	e05c      	b.n	8017ea4 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	7cdb      	ldrb	r3, [r3, #19]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d109      	bne.n	8017e06 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	f003 0307 	and.w	r3, r3, #7
 8017dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8017eb0 <RegionUS915RxConfig+0xf4>)
 8017dfc:	fb03 f202 	mul.w	r2, r3, r2
 8017e00:	4b2c      	ldr	r3, [pc, #176]	@ (8017eb4 <RegionUS915RxConfig+0xf8>)
 8017e02:	4413      	add	r3, r2
 8017e04:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8017e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8017eb8 <RegionUS915RxConfig+0xfc>)
 8017e0c:	5cd3      	ldrb	r3, [r2, r3]
 8017e0e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017e10:	4b26      	ldr	r3, [pc, #152]	@ (8017eac <RegionUS915RxConfig+0xf0>)
 8017e12:	68db      	ldr	r3, [r3, #12]
 8017e14:	6938      	ldr	r0, [r7, #16]
 8017e16:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017e18:	4b24      	ldr	r3, [pc, #144]	@ (8017eac <RegionUS915RxConfig+0xf0>)
 8017e1a:	699c      	ldr	r4, [r3, #24]
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	789b      	ldrb	r3, [r3, #2]
 8017e20:	4618      	mov	r0, r3
 8017e22:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	7c92      	ldrb	r2, [r2, #18]
 8017e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e32:	2201      	movs	r2, #1
 8017e34:	9208      	str	r2, [sp, #32]
 8017e36:	2200      	movs	r2, #0
 8017e38:	9207      	str	r2, [sp, #28]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	9206      	str	r2, [sp, #24]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	9205      	str	r2, [sp, #20]
 8017e42:	2200      	movs	r2, #0
 8017e44:	9204      	str	r2, [sp, #16]
 8017e46:	2200      	movs	r2, #0
 8017e48:	9203      	str	r2, [sp, #12]
 8017e4a:	9302      	str	r3, [sp, #8]
 8017e4c:	2308      	movs	r3, #8
 8017e4e:	9301      	str	r3, [sp, #4]
 8017e50:	2300      	movs	r3, #0
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	2301      	movs	r3, #1
 8017e56:	460a      	mov	r2, r1
 8017e58:	4601      	mov	r1, r0
 8017e5a:	2001      	movs	r0, #1
 8017e5c:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	7c5b      	ldrb	r3, [r3, #17]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d005      	beq.n	8017e72 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8017e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e6a:	4a14      	ldr	r2, [pc, #80]	@ (8017ebc <RegionUS915RxConfig+0x100>)
 8017e6c:	5cd3      	ldrb	r3, [r2, r3]
 8017e6e:	75fb      	strb	r3, [r7, #23]
 8017e70:	e004      	b.n	8017e7c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8017e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e76:	4a12      	ldr	r2, [pc, #72]	@ (8017ec0 <RegionUS915RxConfig+0x104>)
 8017e78:	5cd3      	ldrb	r3, [r2, r3]
 8017e7a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8017eac <RegionUS915RxConfig+0xf0>)
 8017e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017e80:	7dfa      	ldrb	r2, [r7, #23]
 8017e82:	320d      	adds	r2, #13
 8017e84:	b2d2      	uxtb	r2, r2
 8017e86:	4611      	mov	r1, r2
 8017e88:	2001      	movs	r0, #1
 8017e8a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	7cdb      	ldrb	r3, [r3, #19]
 8017e90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017e94:	6939      	ldr	r1, [r7, #16]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fe f850 	bl	8015f3c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	7bfa      	ldrb	r2, [r7, #15]
 8017ea0:	701a      	strb	r2, [r3, #0]
    return true;
 8017ea2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	371c      	adds	r7, #28
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd90      	pop	{r4, r7, pc}
 8017eac:	0801e020 	.word	0x0801e020
 8017eb0:	000927c0 	.word	0x000927c0
 8017eb4:	370870a0 	.word	0x370870a0
 8017eb8:	0801df9c 	.word	0x0801df9c
 8017ebc:	0801e010 	.word	0x0801e010
 8017ec0:	0801e000 	.word	0x0801e000

08017ec4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017ec4:	b590      	push	{r4, r7, lr}
 8017ec6:	b093      	sub	sp, #76	@ 0x4c
 8017ec8:	af0a      	add	r7, sp, #40	@ 0x28
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8018004 <RegionUS915TxConfig+0x140>)
 8017eda:	5c9b      	ldrb	r3, [r3, r2]
 8017edc:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017ee4:	4b48      	ldr	r3, [pc, #288]	@ (8018008 <RegionUS915TxConfig+0x144>)
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	4b48      	ldr	r3, [pc, #288]	@ (801800c <RegionUS915TxConfig+0x148>)
 8017eea:	6819      	ldr	r1, [r3, #0]
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	781b      	ldrb	r3, [r3, #0]
 8017ef0:	461c      	mov	r4, r3
 8017ef2:	4623      	mov	r3, r4
 8017ef4:	005b      	lsls	r3, r3, #1
 8017ef6:	4423      	add	r3, r4
 8017ef8:	009b      	lsls	r3, r3, #2
 8017efa:	440b      	add	r3, r1
 8017efc:	3309      	adds	r3, #9
 8017efe:	781b      	ldrb	r3, [r3, #0]
 8017f00:	4619      	mov	r1, r3
 8017f02:	460b      	mov	r3, r1
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	440b      	add	r3, r1
 8017f08:	00db      	lsls	r3, r3, #3
 8017f0a:	4413      	add	r3, r2
 8017f0c:	3302      	adds	r3, #2
 8017f0e:	f993 1000 	ldrsb.w	r1, [r3]
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017f18:	4b3c      	ldr	r3, [pc, #240]	@ (801800c <RegionUS915TxConfig+0x148>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017f20:	f7ff fa52 	bl	80173c8 <LimitTxPower>
 8017f24:	4603      	mov	r3, r0
 8017f26:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017f2e:	4938      	ldr	r1, [pc, #224]	@ (8018010 <RegionUS915TxConfig+0x14c>)
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fd ffe5 	bl	8015f00 <RegionCommonGetBandwidth>
 8017f36:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8017f3c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017f40:	f04f 0200 	mov.w	r2, #0
 8017f44:	4933      	ldr	r1, [pc, #204]	@ (8018014 <RegionUS915TxConfig+0x150>)
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7fd fe36 	bl	8015bb8 <RegionCommonComputeTxPower>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017f50:	4b31      	ldr	r3, [pc, #196]	@ (8018018 <RegionUS915TxConfig+0x154>)
 8017f52:	68da      	ldr	r2, [r3, #12]
 8017f54:	4b2d      	ldr	r3, [pc, #180]	@ (801800c <RegionUS915TxConfig+0x148>)
 8017f56:	6819      	ldr	r1, [r3, #0]
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	4603      	mov	r3, r0
 8017f60:	005b      	lsls	r3, r3, #1
 8017f62:	4403      	add	r3, r0
 8017f64:	009b      	lsls	r3, r3, #2
 8017f66:	440b      	add	r3, r1
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8018018 <RegionUS915TxConfig+0x154>)
 8017f70:	69dc      	ldr	r4, [r3, #28]
 8017f72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017f76:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017f7a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8017f7e:	9208      	str	r2, [sp, #32]
 8017f80:	2200      	movs	r2, #0
 8017f82:	9207      	str	r2, [sp, #28]
 8017f84:	2200      	movs	r2, #0
 8017f86:	9206      	str	r2, [sp, #24]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	9205      	str	r2, [sp, #20]
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	9204      	str	r2, [sp, #16]
 8017f90:	2200      	movs	r2, #0
 8017f92:	9203      	str	r2, [sp, #12]
 8017f94:	2208      	movs	r2, #8
 8017f96:	9202      	str	r2, [sp, #8]
 8017f98:	2201      	movs	r2, #1
 8017f9a:	9201      	str	r2, [sp, #4]
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	69bb      	ldr	r3, [r7, #24]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	2001      	movs	r0, #1
 8017fa4:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017fa6:	4b19      	ldr	r3, [pc, #100]	@ (801800c <RegionUS915TxConfig+0x148>)
 8017fa8:	681a      	ldr	r2, [r3, #0]
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	4619      	mov	r1, r3
 8017fb0:	460b      	mov	r3, r1
 8017fb2:	005b      	lsls	r3, r3, #1
 8017fb4:	440b      	add	r3, r1
 8017fb6:	009b      	lsls	r3, r3, #2
 8017fb8:	4413      	add	r3, r2
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	4610      	mov	r0, r2
 8017fc6:	f7fd fff7 	bl	8015fb8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8017fca:	4b13      	ldr	r3, [pc, #76]	@ (8018018 <RegionUS915TxConfig+0x154>)
 8017fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017fce:	68fa      	ldr	r2, [r7, #12]
 8017fd0:	8992      	ldrh	r2, [r2, #12]
 8017fd2:	b2d2      	uxtb	r2, r2
 8017fd4:	4611      	mov	r1, r2
 8017fd6:	2001      	movs	r0, #1
 8017fd8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	899b      	ldrh	r3, [r3, #12]
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	4610      	mov	r0, r2
 8017fe8:	f7ff fa68 	bl	80174bc <GetTimeOnAir>
 8017fec:	4602      	mov	r2, r0
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	7fba      	ldrb	r2, [r7, #30]
 8017ff6:	701a      	strb	r2, [r3, #0]
    return true;
 8017ff8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3724      	adds	r7, #36	@ 0x24
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd90      	pop	{r4, r7, pc}
 8018002:	bf00      	nop
 8018004:	0801df9c 	.word	0x0801df9c
 8018008:	20003c90 	.word	0x20003c90
 801800c:	20003c94 	.word	0x20003c94
 8018010:	0801dfac 	.word	0x0801dfac
 8018014:	41f00000 	.word	0x41f00000
 8018018:	0801e020 	.word	0x0801e020

0801801c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801801c:	b590      	push	{r4, r7, lr}
 801801e:	b097      	sub	sp, #92	@ 0x5c
 8018020:	af00      	add	r7, sp, #0
 8018022:	60f8      	str	r0, [r7, #12]
 8018024:	60b9      	str	r1, [r7, #8]
 8018026:	607a      	str	r2, [r7, #4]
 8018028:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801802a:	2307      	movs	r3, #7
 801802c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018030:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018034:	2200      	movs	r2, #0
 8018036:	601a      	str	r2, [r3, #0]
 8018038:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801803a:	2300      	movs	r3, #0
 801803c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8018040:	2300      	movs	r3, #0
 8018042:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8018046:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801804a:	2200      	movs	r2, #0
 801804c:	601a      	str	r2, [r3, #0]
 801804e:	605a      	str	r2, [r3, #4]
 8018050:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018052:	4b97      	ldr	r3, [pc, #604]	@ (80182b0 <RegionUS915LinkAdrReq+0x294>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 801805a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801805e:	2206      	movs	r2, #6
 8018060:	4618      	mov	r0, r3
 8018062:	f7fd fabd 	bl	80155e0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018066:	e11b      	b.n	80182a0 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	685a      	ldr	r2, [r3, #4]
 801806c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8018070:	4413      	add	r3, r2
 8018072:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8018076:	4611      	mov	r1, r2
 8018078:	4618      	mov	r0, r3
 801807a:	f7fd fbf5 	bl	8015868 <RegionCommonParseLinkAdrReq>
 801807e:	4603      	mov	r3, r0
 8018080:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8018084:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8018088:	2b00      	cmp	r3, #0
 801808a:	f000 8113 	beq.w	80182b4 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801808e:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8018092:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8018096:	4413      	add	r3, r2
 8018098:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801809c:	2307      	movs	r3, #7
 801809e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80180a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80180a6:	2b06      	cmp	r3, #6
 80180a8:	d116      	bne.n	80180d8 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80180aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 80180b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 80180ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 80180c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80180ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80180d6:	e0e3      	b.n	80182a0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80180d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80180dc:	2b07      	cmp	r3, #7
 80180de:	d112      	bne.n	8018106 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80180e0:	2300      	movs	r3, #0
 80180e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 80180e6:	2300      	movs	r3, #0
 80180e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 80180ec:	2300      	movs	r3, #0
 80180ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 80180f2:	2300      	movs	r3, #0
 80180f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80180f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80180fc:	b2db      	uxtb	r3, r3
 80180fe:	b29b      	uxth	r3, r3
 8018100:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8018104:	e0cc      	b.n	80182a0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8018106:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801810a:	2b05      	cmp	r3, #5
 801810c:	f040 80bf 	bne.w	801828e <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018110:	2301      	movs	r3, #1
 8018112:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801811c:	2300      	movs	r3, #0
 801811e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8018122:	e0ae      	b.n	8018282 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018124:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8018128:	b2da      	uxtb	r2, r3
 801812a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801812e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018132:	fa01 f303 	lsl.w	r3, r1, r3
 8018136:	4013      	ands	r3, r2
 8018138:	2b00      	cmp	r3, #0
 801813a:	d04d      	beq.n	80181d8 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801813c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018140:	f003 0301 	and.w	r3, r3, #1
 8018144:	b2db      	uxtb	r3, r3
 8018146:	2b00      	cmp	r3, #0
 8018148:	d120      	bne.n	801818c <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801814a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	3358      	adds	r3, #88	@ 0x58
 8018152:	443b      	add	r3, r7
 8018154:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018158:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801815c:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8018160:	b292      	uxth	r2, r2
 8018162:	005b      	lsls	r3, r3, #1
 8018164:	3358      	adds	r3, #88	@ 0x58
 8018166:	443b      	add	r3, r7
 8018168:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801816c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018170:	b21a      	sxth	r2, r3
 8018172:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8018176:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801817a:	fa01 f303 	lsl.w	r3, r1, r3
 801817e:	b21b      	sxth	r3, r3
 8018180:	4313      	orrs	r3, r2
 8018182:	b21b      	sxth	r3, r3
 8018184:	b29b      	uxth	r3, r3
 8018186:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801818a:	e075      	b.n	8018278 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801818c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018190:	005b      	lsls	r3, r3, #1
 8018192:	3358      	adds	r3, #88	@ 0x58
 8018194:	443b      	add	r3, r7
 8018196:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801819a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801819e:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 80181a2:	b292      	uxth	r2, r2
 80181a4:	005b      	lsls	r3, r3, #1
 80181a6:	3358      	adds	r3, #88	@ 0x58
 80181a8:	443b      	add	r3, r7
 80181aa:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80181ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80181b2:	b21a      	sxth	r2, r3
 80181b4:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80181b8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80181bc:	fa01 f303 	lsl.w	r3, r1, r3
 80181c0:	b21b      	sxth	r3, r3
 80181c2:	4313      	orrs	r3, r2
 80181c4:	b21b      	sxth	r3, r3
 80181c6:	b29b      	uxth	r3, r3
 80181c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80181cc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80181d0:	3301      	adds	r3, #1
 80181d2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80181d6:	e04f      	b.n	8018278 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80181d8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80181dc:	f003 0301 	and.w	r3, r3, #1
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d122      	bne.n	801822c <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80181e6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80181ea:	005b      	lsls	r3, r3, #1
 80181ec:	3358      	adds	r3, #88	@ 0x58
 80181ee:	443b      	add	r3, r7
 80181f0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80181f4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80181f8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80181fc:	b292      	uxth	r2, r2
 80181fe:	005b      	lsls	r3, r3, #1
 8018200:	3358      	adds	r3, #88	@ 0x58
 8018202:	443b      	add	r3, r7
 8018204:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018208:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801820c:	b21a      	sxth	r2, r3
 801820e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8018212:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018216:	fa01 f303 	lsl.w	r3, r1, r3
 801821a:	b21b      	sxth	r3, r3
 801821c:	43db      	mvns	r3, r3
 801821e:	b21b      	sxth	r3, r3
 8018220:	4013      	ands	r3, r2
 8018222:	b21b      	sxth	r3, r3
 8018224:	b29b      	uxth	r3, r3
 8018226:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801822a:	e025      	b.n	8018278 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801822c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018230:	005b      	lsls	r3, r3, #1
 8018232:	3358      	adds	r3, #88	@ 0x58
 8018234:	443b      	add	r3, r7
 8018236:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801823a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801823e:	b2d2      	uxtb	r2, r2
 8018240:	b292      	uxth	r2, r2
 8018242:	005b      	lsls	r3, r3, #1
 8018244:	3358      	adds	r3, #88	@ 0x58
 8018246:	443b      	add	r3, r7
 8018248:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801824c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8018250:	b21a      	sxth	r2, r3
 8018252:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8018256:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801825a:	fa01 f303 	lsl.w	r3, r1, r3
 801825e:	b21b      	sxth	r3, r3
 8018260:	43db      	mvns	r3, r3
 8018262:	b21b      	sxth	r3, r3
 8018264:	4013      	ands	r3, r2
 8018266:	b21b      	sxth	r3, r3
 8018268:	b29b      	uxth	r3, r3
 801826a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801826e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8018272:	3301      	adds	r3, #1
 8018274:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8018278:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801827c:	3301      	adds	r3, #1
 801827e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8018282:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018286:	2b07      	cmp	r3, #7
 8018288:	f67f af4c 	bls.w	8018124 <RegionUS915LinkAdrReq+0x108>
 801828c:	e008      	b.n	80182a0 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801828e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8018292:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	3358      	adds	r3, #88	@ 0x58
 801829a:	443b      	add	r3, r7
 801829c:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	7a1b      	ldrb	r3, [r3, #8]
 80182a4:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80182a8:	429a      	cmp	r2, r3
 80182aa:	f4ff aedd 	bcc.w	8018068 <RegionUS915LinkAdrReq+0x4c>
 80182ae:	e002      	b.n	80182b6 <RegionUS915LinkAdrReq+0x29a>
 80182b0:	20003c94 	.word	0x20003c94
            break; // break loop, since no more request has been found
 80182b4:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80182b6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80182ba:	2b03      	cmp	r3, #3
 80182bc:	dc0f      	bgt.n	80182de <RegionUS915LinkAdrReq+0x2c2>
 80182be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80182c2:	2204      	movs	r2, #4
 80182c4:	2100      	movs	r1, #0
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7fd f95e 	bl	8015588 <RegionCommonCountChannels>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d805      	bhi.n	80182de <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80182d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80182d6:	f023 0301 	bic.w	r3, r3, #1
 80182da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80182de:	2302      	movs	r3, #2
 80182e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	7a5b      	ldrb	r3, [r3, #9]
 80182e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80182ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7ff f913 	bl	801751c <RegionUS915GetPhyParam>
 80182f6:	4603      	mov	r3, r0
 80182f8:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80182fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80182fe:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	7a9b      	ldrb	r3, [r3, #10]
 8018304:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018306:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801830a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801830c:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8018310:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018312:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8018316:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801831e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018326:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	7b5b      	ldrb	r3, [r3, #13]
 801832c:	b25b      	sxtb	r3, r3
 801832e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018330:	2348      	movs	r3, #72	@ 0x48
 8018332:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018336:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801833a:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801833c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801833e:	b25b      	sxtb	r3, r3
 8018340:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018344:	2304      	movs	r3, #4
 8018346:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801834a:	4b44      	ldr	r3, [pc, #272]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018350:	230e      	movs	r3, #14
 8018352:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018356:	2300      	movs	r3, #0
 8018358:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018362:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8018366:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801836a:	1c9a      	adds	r2, r3, #2
 801836c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8018370:	1c59      	adds	r1, r3, #1
 8018372:	f107 0014 	add.w	r0, r7, #20
 8018376:	4623      	mov	r3, r4
 8018378:	f7fd fac7 	bl	801590a <RegionCommonLinkAdrReqVerifyParams>
 801837c:	4603      	mov	r3, r0
 801837e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018382:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8018386:	2b07      	cmp	r3, #7
 8018388:	d151      	bne.n	801842e <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801838a:	4b34      	ldr	r3, [pc, #208]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018392:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8018396:	2206      	movs	r2, #6
 8018398:	4618      	mov	r0, r3
 801839a:	f7fd f921 	bl	80155e0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801839e:	4b30      	ldr	r3, [pc, #192]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 80183a6:	4b2d      	ldr	r3, [pc, #180]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80183ae:	4b2c      	ldr	r3, [pc, #176]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	400a      	ands	r2, r1
 80183b4:	b292      	uxth	r2, r2
 80183b6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80183ba:	4b29      	ldr	r3, [pc, #164]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 80183c2:	4b26      	ldr	r3, [pc, #152]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 80183ca:	4b25      	ldr	r3, [pc, #148]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	400a      	ands	r2, r1
 80183d0:	b292      	uxth	r2, r2
 80183d2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80183d6:	4b22      	ldr	r3, [pc, #136]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 80183de:	4b1f      	ldr	r3, [pc, #124]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 80183e6:	4b1e      	ldr	r3, [pc, #120]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	400a      	ands	r2, r1
 80183ec:	b292      	uxth	r2, r2
 80183ee:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80183f2:	4b1b      	ldr	r3, [pc, #108]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 80183fa:	4b18      	ldr	r3, [pc, #96]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8018402:	4b17      	ldr	r3, [pc, #92]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	400a      	ands	r2, r1
 8018408:	b292      	uxth	r2, r2
 801840a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801840e:	4b13      	ldr	r3, [pc, #76]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	4b13      	ldr	r3, [pc, #76]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 801841a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801841e:	4b0f      	ldr	r3, [pc, #60]	@ (801845c <RegionUS915LinkAdrReq+0x440>)
 8018420:	681a      	ldr	r2, [r3, #0]
 8018422:	4b0f      	ldr	r3, [pc, #60]	@ (8018460 <RegionUS915LinkAdrReq+0x444>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 801842a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801842e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018436:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801843e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018448:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801844c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801844e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8018452:	4618      	mov	r0, r3
 8018454:	375c      	adds	r7, #92	@ 0x5c
 8018456:	46bd      	mov	sp, r7
 8018458:	bd90      	pop	{r4, r7, pc}
 801845a:	bf00      	nop
 801845c:	20003c94 	.word	0x20003c94
 8018460:	20003c90 	.word	0x20003c90

08018464 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b084      	sub	sp, #16
 8018468:	af00      	add	r7, sp, #0
 801846a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801846c:	2307      	movs	r3, #7
 801846e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	4618      	mov	r0, r3
 8018476:	f7fe ffdd 	bl	8017434 <VerifyRfFreq>
 801847a:	4603      	mov	r3, r0
 801847c:	f083 0301 	eor.w	r3, r3, #1
 8018480:	b2db      	uxtb	r3, r3
 8018482:	2b00      	cmp	r3, #0
 8018484:	d003      	beq.n	801848e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018486:	7bfb      	ldrb	r3, [r7, #15]
 8018488:	f023 0301 	bic.w	r3, r3, #1
 801848c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f993 3000 	ldrsb.w	r3, [r3]
 8018494:	220d      	movs	r2, #13
 8018496:	2108      	movs	r1, #8
 8018498:	4618      	mov	r0, r3
 801849a:	f7fd f824 	bl	80154e6 <RegionCommonValueInRange>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d103      	bne.n	80184ac <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80184a4:	7bfb      	ldrb	r3, [r7, #15]
 80184a6:	f023 0302 	bic.w	r3, r3, #2
 80184aa:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f993 3000 	ldrsb.w	r3, [r3]
 80184b2:	2207      	movs	r2, #7
 80184b4:	2105      	movs	r1, #5
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7fd f815 	bl	80154e6 <RegionCommonValueInRange>
 80184bc:	4603      	mov	r3, r0
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d004      	beq.n	80184cc <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80184c8:	2b0d      	cmp	r3, #13
 80184ca:	dd03      	ble.n	80184d4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80184cc:	7bfb      	ldrb	r3, [r7, #15]
 80184ce:	f023 0302 	bic.w	r3, r3, #2
 80184d2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184da:	2203      	movs	r2, #3
 80184dc:	2100      	movs	r1, #0
 80184de:	4618      	mov	r0, r3
 80184e0:	f7fd f801 	bl	80154e6 <RegionCommonValueInRange>
 80184e4:	4603      	mov	r3, r0
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d103      	bne.n	80184f2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80184ea:	7bfb      	ldrb	r3, [r7, #15]
 80184ec:	f023 0304 	bic.w	r3, r3, #4
 80184f0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80184f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80184fc:	b480      	push	{r7}
 80184fe:	b083      	sub	sp, #12
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8018508:	4618      	mov	r0, r3
 801850a:	370c      	adds	r7, #12
 801850c:	46bd      	mov	sp, r7
 801850e:	bc80      	pop	{r7}
 8018510:	4770      	bx	lr

08018512 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018512:	b480      	push	{r7}
 8018514:	b083      	sub	sp, #12
 8018516:	af00      	add	r7, sp, #0
 8018518:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801851a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801851e:	4618      	mov	r0, r3
 8018520:	370c      	adds	r7, #12
 8018522:	46bd      	mov	sp, r7
 8018524:	bc80      	pop	{r7}
 8018526:	4770      	bx	lr

08018528 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018528:	b480      	push	{r7}
 801852a:	b083      	sub	sp, #12
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8018534:	4618      	mov	r0, r3
 8018536:	370c      	adds	r7, #12
 8018538:	46bd      	mov	sp, r7
 801853a:	bc80      	pop	{r7}
 801853c:	4770      	bx	lr
	...

08018540 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018540:	b480      	push	{r7}
 8018542:	b083      	sub	sp, #12
 8018544:	af00      	add	r7, sp, #0
 8018546:	4603      	mov	r3, r0
 8018548:	460a      	mov	r2, r1
 801854a:	71fb      	strb	r3, [r7, #7]
 801854c:	4613      	mov	r3, r2
 801854e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018550:	79bb      	ldrb	r3, [r7, #6]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d108      	bne.n	8018568 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018556:	4b16      	ldr	r3, [pc, #88]	@ (80185b0 <RegionUS915AlternateDr+0x70>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 801855e:	3201      	adds	r2, #1
 8018560:	b2d2      	uxtb	r2, r2
 8018562:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 8018566:	e007      	b.n	8018578 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018568:	4b11      	ldr	r3, [pc, #68]	@ (80185b0 <RegionUS915AlternateDr+0x70>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8018570:	3a01      	subs	r2, #1
 8018572:	b2d2      	uxtb	r2, r2
 8018574:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018578:	4b0d      	ldr	r3, [pc, #52]	@ (80185b0 <RegionUS915AlternateDr+0x70>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8018580:	4b0c      	ldr	r3, [pc, #48]	@ (80185b4 <RegionUS915AlternateDr+0x74>)
 8018582:	fba3 1302 	umull	r1, r3, r3, r2
 8018586:	0859      	lsrs	r1, r3, #1
 8018588:	460b      	mov	r3, r1
 801858a:	00db      	lsls	r3, r3, #3
 801858c:	440b      	add	r3, r1
 801858e:	1ad3      	subs	r3, r2, r3
 8018590:	b2db      	uxtb	r3, r3
 8018592:	2b00      	cmp	r3, #0
 8018594:	d102      	bne.n	801859c <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018596:	2304      	movs	r3, #4
 8018598:	71fb      	strb	r3, [r7, #7]
 801859a:	e001      	b.n	80185a0 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 801859c:	2300      	movs	r3, #0
 801859e:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80185a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	370c      	adds	r7, #12
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bc80      	pop	{r7}
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	20003c90 	.word	0x20003c90
 80185b4:	38e38e39 	.word	0x38e38e39

080185b8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b0a8      	sub	sp, #160	@ 0xa0
 80185bc:	af02      	add	r7, sp, #8
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
 80185c4:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80185c6:	2300      	movs	r3, #0
 80185c8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 80185cc:	2300      	movs	r3, #0
 80185ce:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80185d2:	2300      	movs	r3, #0
 80185d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80185d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80185da:	2244      	movs	r2, #68	@ 0x44
 80185dc:	2100      	movs	r1, #0
 80185de:	4618      	mov	r0, r3
 80185e0:	f004 fddc 	bl	801d19c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80185e4:	230c      	movs	r3, #12
 80185e6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80185ea:	4b6b      	ldr	r3, [pc, #428]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	3390      	adds	r3, #144	@ 0x90
 80185f0:	2204      	movs	r2, #4
 80185f2:	2100      	movs	r1, #0
 80185f4:	4618      	mov	r0, r3
 80185f6:	f7fc ffc7 	bl	8015588 <RegionCommonCountChannels>
 80185fa:	4603      	mov	r3, r0
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d110      	bne.n	8018622 <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018600:	4b65      	ldr	r3, [pc, #404]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8018608:	4b64      	ldr	r3, [pc, #400]	@ (801879c <RegionUS915NextChannel+0x1e4>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018610:	2204      	movs	r2, #4
 8018612:	4619      	mov	r1, r3
 8018614:	f7fc ffe4 	bl	80155e0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018618:	4b5f      	ldr	r3, [pc, #380]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	2200      	movs	r2, #0
 801861e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018628:	2b03      	cmp	r3, #3
 801862a:	dd0e      	ble.n	801864a <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801862c:	4b5a      	ldr	r3, [pc, #360]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d107      	bne.n	801864a <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801863a:	4b58      	ldr	r3, [pc, #352]	@ (801879c <RegionUS915NextChannel+0x1e4>)
 801863c:	681a      	ldr	r2, [r3, #0]
 801863e:	4b56      	ldr	r3, [pc, #344]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8018646:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	7a5b      	ldrb	r3, [r3, #9]
 801864e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018656:	b2db      	uxtb	r3, r3
 8018658:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801865a:	4b4f      	ldr	r3, [pc, #316]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	3390      	adds	r3, #144	@ 0x90
 8018660:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018662:	4b4e      	ldr	r3, [pc, #312]	@ (801879c <RegionUS915NextChannel+0x1e4>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8018668:	4b4b      	ldr	r3, [pc, #300]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801866e:	2348      	movs	r3, #72	@ 0x48
 8018670:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8018672:	2300      	movs	r3, #0
 8018674:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	7a9b      	ldrb	r3, [r3, #10]
 8018686:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801868a:	2301      	movs	r3, #1
 801868c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8018696:	320c      	adds	r2, #12
 8018698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801869c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	7d1b      	ldrb	r3, [r3, #20]
 80186a4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	8adb      	ldrh	r3, [r3, #22]
 80186b2:	4619      	mov	r1, r3
 80186b4:	4610      	mov	r0, r2
 80186b6:	f7fe ff01 	bl	80174bc <GetTimeOnAir>
 80186ba:	4603      	mov	r3, r0
 80186bc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80186be:	f107 0314 	add.w	r3, r7, #20
 80186c2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80186c4:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 80186c8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80186cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	9301      	str	r3, [sp, #4]
 80186d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80186d8:	9300      	str	r3, [sp, #0]
 80186da:	460b      	mov	r3, r1
 80186dc:	6839      	ldr	r1, [r7, #0]
 80186de:	f7fd fb5a 	bl	8015d96 <RegionCommonIdentifyChannels>
 80186e2:	4603      	mov	r3, r0
 80186e4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80186e8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d14d      	bne.n	801878c <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	7a5b      	ldrb	r3, [r3, #9]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00e      	beq.n	8018716 <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80186f8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80186fc:	3b01      	subs	r3, #1
 80186fe:	4619      	mov	r1, r3
 8018700:	2000      	movs	r0, #0
 8018702:	f000 f8f5 	bl	80188f0 <randr>
 8018706:	4603      	mov	r3, r0
 8018708:	3398      	adds	r3, #152	@ 0x98
 801870a:	443b      	add	r3, r7
 801870c:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	701a      	strb	r2, [r3, #0]
 8018714:	e030      	b.n	8018778 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d10f      	bne.n	8018740 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018720:	4b1d      	ldr	r3, [pc, #116]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018728:	4b1b      	ldr	r3, [pc, #108]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801872a:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801872c:	339c      	adds	r3, #156	@ 0x9c
 801872e:	68ba      	ldr	r2, [r7, #8]
 8018730:	4619      	mov	r1, r3
 8018732:	f7fc fc93 	bl	801505c <RegionBaseUSComputeNext125kHzJoinChannel>
 8018736:	4603      	mov	r3, r0
 8018738:	2b03      	cmp	r3, #3
 801873a:	d11d      	bne.n	8018778 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801873c:	2303      	movs	r3, #3
 801873e:	e027      	b.n	8018790 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018740:	2300      	movs	r3, #0
 8018742:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018746:	e004      	b.n	8018752 <RegionUS915NextChannel+0x19a>
                {
                    i++;
 8018748:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801874c:	3301      	adds	r3, #1
 801874e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018752:	4b11      	ldr	r3, [pc, #68]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801875a:	b2da      	uxtb	r2, r3
 801875c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018760:	fa42 f303 	asr.w	r3, r2, r3
 8018764:	f003 0301 	and.w	r3, r3, #1
 8018768:	2b00      	cmp	r3, #0
 801876a:	d0ed      	beq.n	8018748 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 801876c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8018770:	3340      	adds	r3, #64	@ 0x40
 8018772:	b2da      	uxtb	r2, r3
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018778:	4b07      	ldr	r3, [pc, #28]	@ (8018798 <RegionUS915NextChannel+0x1e0>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	2248      	movs	r2, #72	@ 0x48
 8018786:	4619      	mov	r1, r3
 8018788:	f7fc feca 	bl	8015520 <RegionCommonChanDisable>
    }
    return status;
 801878c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018790:	4618      	mov	r0, r3
 8018792:	3798      	adds	r7, #152	@ 0x98
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}
 8018798:	20003c90 	.word	0x20003c90
 801879c:	20003c94 	.word	0x20003c94

080187a0 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80187a0:	b590      	push	{r4, r7, lr}
 80187a2:	b085      	sub	sp, #20
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80187ae:	4b23      	ldr	r3, [pc, #140]	@ (801883c <RegionUS915SetContinuousWave+0x9c>)
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	4b23      	ldr	r3, [pc, #140]	@ (8018840 <RegionUS915SetContinuousWave+0xa0>)
 80187b4:	6819      	ldr	r1, [r3, #0]
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	781b      	ldrb	r3, [r3, #0]
 80187ba:	461c      	mov	r4, r3
 80187bc:	4623      	mov	r3, r4
 80187be:	005b      	lsls	r3, r3, #1
 80187c0:	4423      	add	r3, r4
 80187c2:	009b      	lsls	r3, r3, #2
 80187c4:	440b      	add	r3, r1
 80187c6:	3309      	adds	r3, #9
 80187c8:	781b      	ldrb	r3, [r3, #0]
 80187ca:	4619      	mov	r1, r3
 80187cc:	460b      	mov	r3, r1
 80187ce:	005b      	lsls	r3, r3, #1
 80187d0:	440b      	add	r3, r1
 80187d2:	00db      	lsls	r3, r3, #3
 80187d4:	4413      	add	r3, r2
 80187d6:	3302      	adds	r3, #2
 80187d8:	f993 1000 	ldrsb.w	r1, [r3]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80187e2:	4b17      	ldr	r3, [pc, #92]	@ (8018840 <RegionUS915SetContinuousWave+0xa0>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80187ea:	f7fe fded 	bl	80173c8 <LimitTxPower>
 80187ee:	4603      	mov	r3, r0
 80187f0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80187f2:	2300      	movs	r3, #0
 80187f4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80187f6:	4b12      	ldr	r3, [pc, #72]	@ (8018840 <RegionUS915SetContinuousWave+0xa0>)
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	4619      	mov	r1, r3
 8018800:	460b      	mov	r3, r1
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	440b      	add	r3, r1
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018812:	f04f 0200 	mov.w	r2, #0
 8018816:	490b      	ldr	r1, [pc, #44]	@ (8018844 <RegionUS915SetContinuousWave+0xa4>)
 8018818:	4618      	mov	r0, r3
 801881a:	f7fd f9cd 	bl	8015bb8 <RegionCommonComputeTxPower>
 801881e:	4603      	mov	r3, r0
 8018820:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018822:	4b09      	ldr	r3, [pc, #36]	@ (8018848 <RegionUS915SetContinuousWave+0xa8>)
 8018824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	8992      	ldrh	r2, [r2, #12]
 801882a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801882e:	68b8      	ldr	r0, [r7, #8]
 8018830:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8018832:	bf00      	nop
 8018834:	3714      	adds	r7, #20
 8018836:	46bd      	mov	sp, r7
 8018838:	bd90      	pop	{r4, r7, pc}
 801883a:	bf00      	nop
 801883c:	20003c90 	.word	0x20003c90
 8018840:	20003c94 	.word	0x20003c94
 8018844:	41f00000 	.word	0x41f00000
 8018848:	0801e020 	.word	0x0801e020

0801884c <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801884c:	b480      	push	{r7}
 801884e:	b085      	sub	sp, #20
 8018850:	af00      	add	r7, sp, #0
 8018852:	4603      	mov	r3, r0
 8018854:	71fb      	strb	r3, [r7, #7]
 8018856:	460b      	mov	r3, r1
 8018858:	71bb      	strb	r3, [r7, #6]
 801885a:	4613      	mov	r3, r2
 801885c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801885e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018862:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018866:	4909      	ldr	r1, [pc, #36]	@ (801888c <RegionUS915ApplyDrOffset+0x40>)
 8018868:	0092      	lsls	r2, r2, #2
 801886a:	440a      	add	r2, r1
 801886c:	4413      	add	r3, r2
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018876:	2b00      	cmp	r3, #0
 8018878:	da01      	bge.n	801887e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801887a:	2300      	movs	r3, #0
 801887c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801887e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018880:	4618      	mov	r0, r3
 8018882:	3714      	adds	r7, #20
 8018884:	46bd      	mov	sp, r7
 8018886:	bc80      	pop	{r7}
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	0801dfec 	.word	0x0801dfec

08018890 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018890:	b480      	push	{r7}
 8018892:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018894:	4b0d      	ldr	r3, [pc, #52]	@ (80188cc <rand1+0x3c>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	4a0d      	ldr	r2, [pc, #52]	@ (80188d0 <rand1+0x40>)
 801889a:	fb02 f303 	mul.w	r3, r2, r3
 801889e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80188a2:	3339      	adds	r3, #57	@ 0x39
 80188a4:	4a09      	ldr	r2, [pc, #36]	@ (80188cc <rand1+0x3c>)
 80188a6:	6013      	str	r3, [r2, #0]
 80188a8:	4b08      	ldr	r3, [pc, #32]	@ (80188cc <rand1+0x3c>)
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	2303      	movs	r3, #3
 80188ae:	fba3 1302 	umull	r1, r3, r3, r2
 80188b2:	1ad1      	subs	r1, r2, r3
 80188b4:	0849      	lsrs	r1, r1, #1
 80188b6:	440b      	add	r3, r1
 80188b8:	0f99      	lsrs	r1, r3, #30
 80188ba:	460b      	mov	r3, r1
 80188bc:	07db      	lsls	r3, r3, #31
 80188be:	1a5b      	subs	r3, r3, r1
 80188c0:	1ad1      	subs	r1, r2, r3
 80188c2:	460b      	mov	r3, r1
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bc80      	pop	{r7}
 80188ca:	4770      	bx	lr
 80188cc:	20000100 	.word	0x20000100
 80188d0:	41c64e6d 	.word	0x41c64e6d

080188d4 <srand1>:

void srand1( uint32_t seed )
{
 80188d4:	b480      	push	{r7}
 80188d6:	b083      	sub	sp, #12
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
    next = seed;
 80188dc:	4a03      	ldr	r2, [pc, #12]	@ (80188ec <srand1+0x18>)
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	6013      	str	r3, [r2, #0]
}
 80188e2:	bf00      	nop
 80188e4:	370c      	adds	r7, #12
 80188e6:	46bd      	mov	sp, r7
 80188e8:	bc80      	pop	{r7}
 80188ea:	4770      	bx	lr
 80188ec:	20000100 	.word	0x20000100

080188f0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
 80188f8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80188fa:	f7ff ffc9 	bl	8018890 <rand1>
 80188fe:	4602      	mov	r2, r0
 8018900:	6839      	ldr	r1, [r7, #0]
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	1acb      	subs	r3, r1, r3
 8018906:	3301      	adds	r3, #1
 8018908:	fb92 f1f3 	sdiv	r1, r2, r3
 801890c:	fb01 f303 	mul.w	r3, r1, r3
 8018910:	1ad2      	subs	r2, r2, r3
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	4413      	add	r3, r2
}
 8018916:	4618      	mov	r0, r3
 8018918:	3708      	adds	r7, #8
 801891a:	46bd      	mov	sp, r7
 801891c:	bd80      	pop	{r7, pc}

0801891e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801891e:	b480      	push	{r7}
 8018920:	b085      	sub	sp, #20
 8018922:	af00      	add	r7, sp, #0
 8018924:	60f8      	str	r0, [r7, #12]
 8018926:	60b9      	str	r1, [r7, #8]
 8018928:	4613      	mov	r3, r2
 801892a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801892c:	e007      	b.n	801893e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801892e:	68ba      	ldr	r2, [r7, #8]
 8018930:	1c53      	adds	r3, r2, #1
 8018932:	60bb      	str	r3, [r7, #8]
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	1c59      	adds	r1, r3, #1
 8018938:	60f9      	str	r1, [r7, #12]
 801893a:	7812      	ldrb	r2, [r2, #0]
 801893c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801893e:	88fb      	ldrh	r3, [r7, #6]
 8018940:	1e5a      	subs	r2, r3, #1
 8018942:	80fa      	strh	r2, [r7, #6]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d1f2      	bne.n	801892e <memcpy1+0x10>
    }
}
 8018948:	bf00      	nop
 801894a:	bf00      	nop
 801894c:	3714      	adds	r7, #20
 801894e:	46bd      	mov	sp, r7
 8018950:	bc80      	pop	{r7}
 8018952:	4770      	bx	lr

08018954 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018954:	b480      	push	{r7}
 8018956:	b085      	sub	sp, #20
 8018958:	af00      	add	r7, sp, #0
 801895a:	60f8      	str	r0, [r7, #12]
 801895c:	60b9      	str	r1, [r7, #8]
 801895e:	4613      	mov	r3, r2
 8018960:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018962:	88fb      	ldrh	r3, [r7, #6]
 8018964:	3b01      	subs	r3, #1
 8018966:	68fa      	ldr	r2, [r7, #12]
 8018968:	4413      	add	r3, r2
 801896a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801896c:	e007      	b.n	801897e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801896e:	68ba      	ldr	r2, [r7, #8]
 8018970:	1c53      	adds	r3, r2, #1
 8018972:	60bb      	str	r3, [r7, #8]
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	1e59      	subs	r1, r3, #1
 8018978:	60f9      	str	r1, [r7, #12]
 801897a:	7812      	ldrb	r2, [r2, #0]
 801897c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801897e:	88fb      	ldrh	r3, [r7, #6]
 8018980:	1e5a      	subs	r2, r3, #1
 8018982:	80fa      	strh	r2, [r7, #6]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d1f2      	bne.n	801896e <memcpyr+0x1a>
    }
}
 8018988:	bf00      	nop
 801898a:	bf00      	nop
 801898c:	3714      	adds	r7, #20
 801898e:	46bd      	mov	sp, r7
 8018990:	bc80      	pop	{r7}
 8018992:	4770      	bx	lr

08018994 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018994:	b480      	push	{r7}
 8018996:	b083      	sub	sp, #12
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	460b      	mov	r3, r1
 801899e:	70fb      	strb	r3, [r7, #3]
 80189a0:	4613      	mov	r3, r2
 80189a2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80189a4:	e004      	b.n	80189b0 <memset1+0x1c>
    {
        *dst++ = value;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	1c5a      	adds	r2, r3, #1
 80189aa:	607a      	str	r2, [r7, #4]
 80189ac:	78fa      	ldrb	r2, [r7, #3]
 80189ae:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80189b0:	883b      	ldrh	r3, [r7, #0]
 80189b2:	1e5a      	subs	r2, r3, #1
 80189b4:	803a      	strh	r2, [r7, #0]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d1f5      	bne.n	80189a6 <memset1+0x12>
    }
}
 80189ba:	bf00      	nop
 80189bc:	bf00      	nop
 80189be:	370c      	adds	r7, #12
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bc80      	pop	{r7}
 80189c4:	4770      	bx	lr
	...

080189c8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80189c8:	b480      	push	{r7}
 80189ca:	b087      	sub	sp, #28
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	460b      	mov	r3, r1
 80189d2:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 80189d4:	4b1a      	ldr	r3, [pc, #104]	@ (8018a40 <Crc32+0x78>)
 80189d6:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80189d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189dc:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d101      	bne.n	80189e8 <Crc32+0x20>
    {
        return 0;
 80189e4:	2300      	movs	r3, #0
 80189e6:	e026      	b.n	8018a36 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80189e8:	2300      	movs	r3, #0
 80189ea:	827b      	strh	r3, [r7, #18]
 80189ec:	e01d      	b.n	8018a2a <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80189ee:	8a7b      	ldrh	r3, [r7, #18]
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	4413      	add	r3, r2
 80189f4:	781b      	ldrb	r3, [r3, #0]
 80189f6:	461a      	mov	r2, r3
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	4053      	eors	r3, r2
 80189fc:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80189fe:	2300      	movs	r3, #0
 8018a00:	823b      	strh	r3, [r7, #16]
 8018a02:	e00c      	b.n	8018a1e <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018a04:	697b      	ldr	r3, [r7, #20]
 8018a06:	085a      	lsrs	r2, r3, #1
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	f003 0301 	and.w	r3, r3, #1
 8018a0e:	4259      	negs	r1, r3
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	400b      	ands	r3, r1
 8018a14:	4053      	eors	r3, r2
 8018a16:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8018a18:	8a3b      	ldrh	r3, [r7, #16]
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	823b      	strh	r3, [r7, #16]
 8018a1e:	8a3b      	ldrh	r3, [r7, #16]
 8018a20:	2b07      	cmp	r3, #7
 8018a22:	d9ef      	bls.n	8018a04 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8018a24:	8a7b      	ldrh	r3, [r7, #18]
 8018a26:	3301      	adds	r3, #1
 8018a28:	827b      	strh	r3, [r7, #18]
 8018a2a:	8a7a      	ldrh	r2, [r7, #18]
 8018a2c:	887b      	ldrh	r3, [r7, #2]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d3dd      	bcc.n	80189ee <Crc32+0x26>
        }
    }

    return ~crc;
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	43db      	mvns	r3, r3
}
 8018a36:	4618      	mov	r0, r3
 8018a38:	371c      	adds	r7, #28
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	bc80      	pop	{r7}
 8018a3e:	4770      	bx	lr
 8018a40:	edb88320 	.word	0xedb88320

08018a44 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af02      	add	r7, sp, #8
 8018a4a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018a4c:	4a21      	ldr	r2, [pc, #132]	@ (8018ad4 <RadioInit+0x90>)
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018a52:	4b21      	ldr	r3, [pc, #132]	@ (8018ad8 <RadioInit+0x94>)
 8018a54:	2200      	movs	r2, #0
 8018a56:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018a58:	4b1f      	ldr	r3, [pc, #124]	@ (8018ad8 <RadioInit+0x94>)
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8018ad8 <RadioInit+0x94>)
 8018a60:	2200      	movs	r2, #0
 8018a62:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8018a64:	481d      	ldr	r0, [pc, #116]	@ (8018adc <RadioInit+0x98>)
 8018a66:	f001 feb9 	bl	801a7dc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8018a6a:	2000      	movs	r0, #0
 8018a6c:	f001 f81c 	bl	8019aa8 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8018a70:	f002 f94a 	bl	801ad08 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018a74:	2100      	movs	r1, #0
 8018a76:	2000      	movs	r0, #0
 8018a78:	f002 fcaa 	bl	801b3d0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8018a7c:	2204      	movs	r2, #4
 8018a7e:	2100      	movs	r1, #0
 8018a80:	2001      	movs	r0, #1
 8018a82:	f002 facf 	bl	801b024 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018a86:	2300      	movs	r3, #0
 8018a88:	2200      	movs	r2, #0
 8018a8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018a8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018a92:	f002 f9ff 	bl	801ae94 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018a96:	f000 fe9b 	bl	80197d0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	9300      	str	r3, [sp, #0]
 8018a9e:	4b10      	ldr	r3, [pc, #64]	@ (8018ae0 <RadioInit+0x9c>)
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018aa6:	480f      	ldr	r0, [pc, #60]	@ (8018ae4 <RadioInit+0xa0>)
 8018aa8:	f003 fe92 	bl	801c7d0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018aac:	2300      	movs	r3, #0
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8018ae8 <RadioInit+0xa4>)
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018ab8:	480c      	ldr	r0, [pc, #48]	@ (8018aec <RadioInit+0xa8>)
 8018aba:	f003 fe89 	bl	801c7d0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018abe:	4809      	ldr	r0, [pc, #36]	@ (8018ae4 <RadioInit+0xa0>)
 8018ac0:	f003 ff2a 	bl	801c918 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018ac4:	4809      	ldr	r0, [pc, #36]	@ (8018aec <RadioInit+0xa8>)
 8018ac6:	f003 ff27 	bl	801c918 <UTIL_TIMER_Stop>
}
 8018aca:	bf00      	nop
 8018acc:	3708      	adds	r7, #8
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	20003d98 	.word	0x20003d98
 8018ad8:	20003d9c 	.word	0x20003d9c
 8018adc:	08019b8d 	.word	0x08019b8d
 8018ae0:	08019b15 	.word	0x08019b15
 8018ae4:	20003df4 	.word	0x20003df4
 8018ae8:	08019b29 	.word	0x08019b29
 8018aec:	20003e0c 	.word	0x20003e0c

08018af0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018af4:	f001 feb4 	bl	801a860 <SUBGRF_GetOperatingMode>
 8018af8:	4603      	mov	r3, r0
 8018afa:	2b07      	cmp	r3, #7
 8018afc:	d00a      	beq.n	8018b14 <RadioGetStatus+0x24>
 8018afe:	2b07      	cmp	r3, #7
 8018b00:	dc0a      	bgt.n	8018b18 <RadioGetStatus+0x28>
 8018b02:	2b04      	cmp	r3, #4
 8018b04:	d002      	beq.n	8018b0c <RadioGetStatus+0x1c>
 8018b06:	2b05      	cmp	r3, #5
 8018b08:	d002      	beq.n	8018b10 <RadioGetStatus+0x20>
 8018b0a:	e005      	b.n	8018b18 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018b0c:	2302      	movs	r3, #2
 8018b0e:	e004      	b.n	8018b1a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018b10:	2301      	movs	r3, #1
 8018b12:	e002      	b.n	8018b1a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018b14:	2303      	movs	r3, #3
 8018b16:	e000      	b.n	8018b1a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018b18:	2300      	movs	r3, #0
    }
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	bd80      	pop	{r7, pc}
	...

08018b20 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	4603      	mov	r3, r0
 8018b28:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018b2a:	4a25      	ldr	r2, [pc, #148]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b2c:	79fb      	ldrb	r3, [r7, #7]
 8018b2e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8018b30:	79fb      	ldrb	r3, [r7, #7]
 8018b32:	4618      	mov	r0, r3
 8018b34:	f003 f80f 	bl	801bb56 <RFW_SetRadioModem>
    switch( modem )
 8018b38:	79fb      	ldrb	r3, [r7, #7]
 8018b3a:	3b01      	subs	r3, #1
 8018b3c:	2b03      	cmp	r3, #3
 8018b3e:	d80b      	bhi.n	8018b58 <RadioSetModem+0x38>
 8018b40:	a201      	add	r2, pc, #4	@ (adr r2, 8018b48 <RadioSetModem+0x28>)
 8018b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b46:	bf00      	nop
 8018b48:	08018b67 	.word	0x08018b67
 8018b4c:	08018b8d 	.word	0x08018b8d
 8018b50:	08018b9b 	.word	0x08018b9b
 8018b54:	08018ba9 	.word	0x08018ba9
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018b58:	2000      	movs	r0, #0
 8018b5a:	f002 fa3d 	bl	801afd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018b5e:	4b18      	ldr	r3, [pc, #96]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b60:	2200      	movs	r2, #0
 8018b62:	735a      	strb	r2, [r3, #13]
        break;
 8018b64:	e028      	b.n	8018bb8 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018b66:	2001      	movs	r0, #1
 8018b68:	f002 fa36 	bl	801afd8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018b6c:	4b14      	ldr	r3, [pc, #80]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b6e:	7b5a      	ldrb	r2, [r3, #13]
 8018b70:	4b13      	ldr	r3, [pc, #76]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b72:	7b1b      	ldrb	r3, [r3, #12]
 8018b74:	429a      	cmp	r2, r3
 8018b76:	d01e      	beq.n	8018bb6 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018b78:	4b11      	ldr	r3, [pc, #68]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b7a:	7b1a      	ldrb	r2, [r3, #12]
 8018b7c:	4b10      	ldr	r3, [pc, #64]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b7e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018b80:	4b0f      	ldr	r3, [pc, #60]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b82:	7b5b      	ldrb	r3, [r3, #13]
 8018b84:	4618      	mov	r0, r3
 8018b86:	f000 ff8f 	bl	8019aa8 <RadioSetPublicNetwork>
        }
        break;
 8018b8a:	e014      	b.n	8018bb6 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018b8c:	2002      	movs	r0, #2
 8018b8e:	f002 fa23 	bl	801afd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018b92:	4b0b      	ldr	r3, [pc, #44]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	735a      	strb	r2, [r3, #13]
        break;
 8018b98:	e00e      	b.n	8018bb8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018b9a:	2002      	movs	r0, #2
 8018b9c:	f002 fa1c 	bl	801afd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018ba0:	4b07      	ldr	r3, [pc, #28]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	735a      	strb	r2, [r3, #13]
        break;
 8018ba6:	e007      	b.n	8018bb8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018ba8:	2000      	movs	r0, #0
 8018baa:	f002 fa15 	bl	801afd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018bae:	4b04      	ldr	r3, [pc, #16]	@ (8018bc0 <RadioSetModem+0xa0>)
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	735a      	strb	r2, [r3, #13]
        break;
 8018bb4:	e000      	b.n	8018bb8 <RadioSetModem+0x98>
        break;
 8018bb6:	bf00      	nop
    }
}
 8018bb8:	bf00      	nop
 8018bba:	3708      	adds	r7, #8
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	20003d9c 	.word	0x20003d9c

08018bc4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f002 f9bd 	bl	801af4c <SUBGRF_SetRfFrequency>
}
 8018bd2:	bf00      	nop
 8018bd4:	3708      	adds	r7, #8
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}

08018bda <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018bda:	b580      	push	{r7, lr}
 8018bdc:	b090      	sub	sp, #64	@ 0x40
 8018bde:	af0a      	add	r7, sp, #40	@ 0x28
 8018be0:	60f8      	str	r0, [r7, #12]
 8018be2:	60b9      	str	r1, [r7, #8]
 8018be4:	603b      	str	r3, [r7, #0]
 8018be6:	4613      	mov	r3, r2
 8018be8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018bea:	2301      	movs	r3, #1
 8018bec:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8018bf6:	f000 fdfe 	bl	80197f6 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8018bfa:	2000      	movs	r0, #0
 8018bfc:	f7ff ff90 	bl	8018b20 <RadioSetModem>

    RadioSetChannel( freq );
 8018c00:	68f8      	ldr	r0, [r7, #12]
 8018c02:	f7ff ffdf 	bl	8018bc4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8018c06:	2301      	movs	r3, #1
 8018c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	9308      	str	r3, [sp, #32]
 8018c0e:	2300      	movs	r3, #0
 8018c10:	9307      	str	r3, [sp, #28]
 8018c12:	2300      	movs	r3, #0
 8018c14:	9306      	str	r3, [sp, #24]
 8018c16:	2300      	movs	r3, #0
 8018c18:	9305      	str	r3, [sp, #20]
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	9304      	str	r3, [sp, #16]
 8018c1e:	2300      	movs	r3, #0
 8018c20:	9303      	str	r3, [sp, #12]
 8018c22:	2300      	movs	r3, #0
 8018c24:	9302      	str	r3, [sp, #8]
 8018c26:	2303      	movs	r3, #3
 8018c28:	9301      	str	r3, [sp, #4]
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	9300      	str	r3, [sp, #0]
 8018c2e:	2300      	movs	r3, #0
 8018c30:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8018c34:	68b9      	ldr	r1, [r7, #8]
 8018c36:	2000      	movs	r0, #0
 8018c38:	f000 f840 	bl	8018cbc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	f000 fde1 	bl	8019804 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8018c42:	f000 ff5f 	bl	8019b04 <RadioGetWakeupTime>
 8018c46:	4603      	mov	r3, r0
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7e8 fe6a 	bl	8001922 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018c4e:	f003 ff7d 	bl	801cb4c <UTIL_TIMER_GetCurrentTime>
 8018c52:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018c54:	e00d      	b.n	8018c72 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8018c56:	2000      	movs	r0, #0
 8018c58:	f000 fea6 	bl	80199a8 <RadioRssi>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018c60:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018c68:	429a      	cmp	r2, r3
 8018c6a:	dd02      	ble.n	8018c72 <RadioIsChannelFree+0x98>
        {
            status = false;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8018c70:	e006      	b.n	8018c80 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018c72:	6938      	ldr	r0, [r7, #16]
 8018c74:	f003 ff7c 	bl	801cb70 <UTIL_TIMER_GetElapsedTime>
 8018c78:	4602      	mov	r2, r0
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	d8ea      	bhi.n	8018c56 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8018c80:	f000 fdb9 	bl	80197f6 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8018c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c86:	4618      	mov	r0, r3
 8018c88:	3718      	adds	r7, #24
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}

08018c8e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8018c8e:	b580      	push	{r7, lr}
 8018c90:	b082      	sub	sp, #8
 8018c92:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8018c94:	2300      	movs	r3, #0
 8018c96:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8018c98:	2001      	movs	r0, #1
 8018c9a:	f7ff ff41 	bl	8018b20 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	2100      	movs	r1, #0
 8018ca4:	2000      	movs	r0, #0
 8018ca6:	f002 f8f5 	bl	801ae94 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8018caa:	f001 feaa 	bl	801aa02 <SUBGRF_GetRandom>
 8018cae:	6078      	str	r0, [r7, #4]

    return rnd;
 8018cb0:	687b      	ldr	r3, [r7, #4]
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
	...

08018cbc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b08a      	sub	sp, #40	@ 0x28
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	60b9      	str	r1, [r7, #8]
 8018cc4:	607a      	str	r2, [r7, #4]
 8018cc6:	461a      	mov	r2, r3
 8018cc8:	4603      	mov	r3, r0
 8018cca:	73fb      	strb	r3, [r7, #15]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8018cd0:	4abd      	ldr	r2, [pc, #756]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018cd2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018cd6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018cd8:	f002 fefb 	bl	801bad2 <RFW_DeInit>
    if( rxContinuous == true )
 8018cdc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d001      	beq.n	8018ce8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8018ce8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d004      	beq.n	8018cfa <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018cf0:	4ab6      	ldr	r2, [pc, #728]	@ (8018fcc <RadioSetRxConfig+0x310>)
 8018cf2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8018cf6:	7013      	strb	r3, [r2, #0]
 8018cf8:	e002      	b.n	8018d00 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8018cfa:	4bb4      	ldr	r3, [pc, #720]	@ (8018fcc <RadioSetRxConfig+0x310>)
 8018cfc:	22ff      	movs	r2, #255	@ 0xff
 8018cfe:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018d00:	7bfb      	ldrb	r3, [r7, #15]
 8018d02:	2b04      	cmp	r3, #4
 8018d04:	d009      	beq.n	8018d1a <RadioSetRxConfig+0x5e>
 8018d06:	2b04      	cmp	r3, #4
 8018d08:	f300 81da 	bgt.w	80190c0 <RadioSetRxConfig+0x404>
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	f000 80bf 	beq.w	8018e90 <RadioSetRxConfig+0x1d4>
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	f000 812c 	beq.w	8018f70 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018d18:	e1d2      	b.n	80190c0 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	f001 ffb6 	bl	801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d20:	4ba9      	ldr	r3, [pc, #676]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d22:	2200      	movs	r2, #0
 8018d24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018d28:	4aa7      	ldr	r2, [pc, #668]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8018d2e:	4ba6      	ldr	r3, [pc, #664]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d30:	2209      	movs	r2, #9
 8018d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018d36:	4ba4      	ldr	r3, [pc, #656]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018d3c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018d3e:	68b8      	ldr	r0, [r7, #8]
 8018d40:	f002 fdfa 	bl	801b938 <SUBGRF_GetFskBandwidthRegValue>
 8018d44:	4603      	mov	r3, r0
 8018d46:	461a      	mov	r2, r3
 8018d48:	4b9f      	ldr	r3, [pc, #636]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d50:	2200      	movs	r2, #0
 8018d52:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018d54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018d56:	00db      	lsls	r3, r3, #3
 8018d58:	b29a      	uxth	r2, r3
 8018d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d5c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8018d5e:	4b9a      	ldr	r3, [pc, #616]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d60:	2200      	movs	r2, #0
 8018d62:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018d64:	4b98      	ldr	r3, [pc, #608]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d66:	2210      	movs	r2, #16
 8018d68:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018d6a:	4b97      	ldr	r3, [pc, #604]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018d70:	4b95      	ldr	r3, [pc, #596]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d72:	2200      	movs	r2, #0
 8018d74:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018d76:	4b95      	ldr	r3, [pc, #596]	@ (8018fcc <RadioSetRxConfig+0x310>)
 8018d78:	781a      	ldrb	r2, [r3, #0]
 8018d7a:	4b93      	ldr	r3, [pc, #588]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d7c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018d7e:	4b92      	ldr	r3, [pc, #584]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d80:	2201      	movs	r2, #1
 8018d82:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018d84:	4b90      	ldr	r3, [pc, #576]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018d86:	2200      	movs	r2, #0
 8018d88:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8018d8a:	2004      	movs	r0, #4
 8018d8c:	f7ff fec8 	bl	8018b20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018d90:	488f      	ldr	r0, [pc, #572]	@ (8018fd0 <RadioSetRxConfig+0x314>)
 8018d92:	f002 f9ad 	bl	801b0f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d96:	488f      	ldr	r0, [pc, #572]	@ (8018fd4 <RadioSetRxConfig+0x318>)
 8018d98:	f002 fa7c 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8018fd8 <RadioSetRxConfig+0x31c>)
 8018d9e:	f107 031c 	add.w	r3, r7, #28
 8018da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018da6:	e883 0003 	stmia.w	r3, {r0, r1}
 8018daa:	f107 031c 	add.w	r3, r7, #28
 8018dae:	4618      	mov	r0, r3
 8018db0:	f001 fda5 	bl	801a8fe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018db4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018db8:	f001 fdf0 	bl	801a99c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8018dbc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018dc0:	f000 fe10 	bl	80199e4 <RadioRead>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8018dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018dce:	f023 0310 	bic.w	r3, r3, #16
 8018dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(0x8b8, modReg);
 8018dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018dda:	4619      	mov	r1, r3
 8018ddc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8018de0:	f000 fdee 	bl	80199c0 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8018de4:	2104      	movs	r1, #4
 8018de6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8018dea:	f000 fde9 	bl	80199c0 <RadioWrite>
            modReg= RadioRead(0x89b);
 8018dee:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018df2:	f000 fdf7 	bl	80199e4 <RadioRead>
 8018df6:	4603      	mov	r3, r0
 8018df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e00:	f023 031c 	bic.w	r3, r3, #28
 8018e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8018e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e0c:	f043 0308 	orr.w	r3, r3, #8
 8018e10:	b2db      	uxtb	r3, r3
 8018e12:	4619      	mov	r1, r3
 8018e14:	f640 009b 	movw	r0, #2203	@ 0x89b
 8018e18:	f000 fdd2 	bl	80199c0 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8018e1c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018e20:	f000 fde0 	bl	80199e4 <RadioRead>
 8018e24:	4603      	mov	r3, r0
 8018e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8018e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e2e:	f023 0318 	bic.w	r3, r3, #24
 8018e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8018e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e3a:	f043 0318 	orr.w	r3, r3, #24
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	4619      	mov	r1, r3
 8018e42:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8018e46:	f000 fdbb 	bl	80199c0 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8018e4a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018e4e:	f000 fdc9 	bl	80199e4 <RadioRead>
 8018e52:	4603      	mov	r3, r0
 8018e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8018e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e68:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	4619      	mov	r1, r3
 8018e70:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018e74:	f000 fda4 	bl	80199c0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018e78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018e7a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018e7e:	fb02 f303 	mul.w	r3, r2, r3
 8018e82:	461a      	mov	r2, r3
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018e8c:	6093      	str	r3, [r2, #8]
            break;
 8018e8e:	e118      	b.n	80190c2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018e90:	2000      	movs	r0, #0
 8018e92:	f001 fefb 	bl	801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018e96:	4b4c      	ldr	r3, [pc, #304]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018e98:	2200      	movs	r2, #0
 8018e9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018ea4:	4b48      	ldr	r3, [pc, #288]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ea6:	220b      	movs	r2, #11
 8018ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018eac:	68b8      	ldr	r0, [r7, #8]
 8018eae:	f002 fd43 	bl	801b938 <SUBGRF_GetFskBandwidthRegValue>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	461a      	mov	r2, r3
 8018eb6:	4b44      	ldr	r3, [pc, #272]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018ebc:	4b42      	ldr	r3, [pc, #264]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018ec2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018ec4:	00db      	lsls	r3, r3, #3
 8018ec6:	b29a      	uxth	r2, r3
 8018ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018eca:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ece:	2204      	movs	r2, #4
 8018ed0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ed4:	2218      	movs	r2, #24
 8018ed6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018eda:	2200      	movs	r2, #0
 8018edc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018ede:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018ee2:	f083 0301 	eor.w	r3, r3, #1
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	461a      	mov	r2, r3
 8018eea:	4b37      	ldr	r3, [pc, #220]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018eec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018eee:	4b37      	ldr	r3, [pc, #220]	@ (8018fcc <RadioSetRxConfig+0x310>)
 8018ef0:	781a      	ldrb	r2, [r3, #0]
 8018ef2:	4b35      	ldr	r3, [pc, #212]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018ef4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018ef6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d003      	beq.n	8018f06 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018efe:	4b32      	ldr	r3, [pc, #200]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f00:	22f2      	movs	r2, #242	@ 0xf2
 8018f02:	75da      	strb	r2, [r3, #23]
 8018f04:	e002      	b.n	8018f0c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018f06:	4b30      	ldr	r3, [pc, #192]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f08:	2201      	movs	r2, #1
 8018f0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f0e:	2201      	movs	r2, #1
 8018f10:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018f12:	f000 fc70 	bl	80197f6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8018f16:	4b2c      	ldr	r3, [pc, #176]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	bf14      	ite	ne
 8018f20:	2301      	movne	r3, #1
 8018f22:	2300      	moveq	r3, #0
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7ff fdfa 	bl	8018b20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018f2c:	4828      	ldr	r0, [pc, #160]	@ (8018fd0 <RadioSetRxConfig+0x314>)
 8018f2e:	f002 f8df 	bl	801b0f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f32:	4828      	ldr	r0, [pc, #160]	@ (8018fd4 <RadioSetRxConfig+0x318>)
 8018f34:	f002 f9ae 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018f38:	4a28      	ldr	r2, [pc, #160]	@ (8018fdc <RadioSetRxConfig+0x320>)
 8018f3a:	f107 0314 	add.w	r3, r7, #20
 8018f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f42:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f46:	f107 0314 	add.w	r3, r7, #20
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f001 fcd7 	bl	801a8fe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018f50:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8018f54:	f001 fd22 	bl	801a99c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018f58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018f5a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018f5e:	fb02 f303 	mul.w	r3, r2, r3
 8018f62:	461a      	mov	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f6a:	4a17      	ldr	r2, [pc, #92]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f6c:	6093      	str	r3, [r2, #8]
            break;
 8018f6e:	e0a8      	b.n	80190c2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018f70:	2000      	movs	r0, #0
 8018f72:	f001 fe8b 	bl	801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018f76:	4b14      	ldr	r3, [pc, #80]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f78:	2201      	movs	r2, #1
 8018f7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	b2da      	uxtb	r2, r3
 8018f82:	4b11      	ldr	r3, [pc, #68]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018f88:	4a15      	ldr	r2, [pc, #84]	@ (8018fe0 <RadioSetRxConfig+0x324>)
 8018f8a:	68bb      	ldr	r3, [r7, #8]
 8018f8c:	4413      	add	r3, r2
 8018f8e:	781a      	ldrb	r2, [r3, #0]
 8018f90:	4b0d      	ldr	r3, [pc, #52]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018f96:	4a0c      	ldr	r2, [pc, #48]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018f98:	7bbb      	ldrb	r3, [r7, #14]
 8018f9a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d105      	bne.n	8018fb0 <RadioSetRxConfig+0x2f4>
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	2b0b      	cmp	r3, #11
 8018fa8:	d008      	beq.n	8018fbc <RadioSetRxConfig+0x300>
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2b0c      	cmp	r3, #12
 8018fae:	d005      	beq.n	8018fbc <RadioSetRxConfig+0x300>
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	2b01      	cmp	r3, #1
 8018fb4:	d116      	bne.n	8018fe4 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2b0c      	cmp	r3, #12
 8018fba:	d113      	bne.n	8018fe4 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018fbc:	4b02      	ldr	r3, [pc, #8]	@ (8018fc8 <RadioSetRxConfig+0x30c>)
 8018fbe:	2201      	movs	r2, #1
 8018fc0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018fc4:	e012      	b.n	8018fec <RadioSetRxConfig+0x330>
 8018fc6:	bf00      	nop
 8018fc8:	20003d9c 	.word	0x20003d9c
 8018fcc:	20000104 	.word	0x20000104
 8018fd0:	20003dd4 	.word	0x20003dd4
 8018fd4:	20003daa 	.word	0x20003daa
 8018fd8:	0801da50 	.word	0x0801da50
 8018fdc:	0801da58 	.word	0x0801da58
 8018fe0:	0801e0a4 	.word	0x0801e0a4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018fe4:	4b39      	ldr	r3, [pc, #228]	@ (80190cc <RadioSetRxConfig+0x410>)
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018fec:	4b37      	ldr	r3, [pc, #220]	@ (80190cc <RadioSetRxConfig+0x410>)
 8018fee:	2201      	movs	r2, #1
 8018ff0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018ff2:	4b36      	ldr	r3, [pc, #216]	@ (80190cc <RadioSetRxConfig+0x410>)
 8018ff4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018ff8:	2b05      	cmp	r3, #5
 8018ffa:	d004      	beq.n	8019006 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018ffc:	4b33      	ldr	r3, [pc, #204]	@ (80190cc <RadioSetRxConfig+0x410>)
 8018ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019002:	2b06      	cmp	r3, #6
 8019004:	d10a      	bne.n	801901c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8019006:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019008:	2b0b      	cmp	r3, #11
 801900a:	d803      	bhi.n	8019014 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801900c:	4b2f      	ldr	r3, [pc, #188]	@ (80190cc <RadioSetRxConfig+0x410>)
 801900e:	220c      	movs	r2, #12
 8019010:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019012:	e006      	b.n	8019022 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019014:	4a2d      	ldr	r2, [pc, #180]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019016:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019018:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801901a:	e002      	b.n	8019022 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801901c:	4a2b      	ldr	r2, [pc, #172]	@ (80190cc <RadioSetRxConfig+0x410>)
 801901e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019020:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019022:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8019026:	4b29      	ldr	r3, [pc, #164]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019028:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801902a:	4b29      	ldr	r3, [pc, #164]	@ (80190d0 <RadioSetRxConfig+0x414>)
 801902c:	781a      	ldrb	r2, [r3, #0]
 801902e:	4b27      	ldr	r3, [pc, #156]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019030:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019032:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8019036:	4b25      	ldr	r3, [pc, #148]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019038:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801903c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8019040:	4b22      	ldr	r3, [pc, #136]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019042:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019046:	f000 fbd6 	bl	80197f6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801904a:	4b20      	ldr	r3, [pc, #128]	@ (80190cc <RadioSetRxConfig+0x410>)
 801904c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019050:	2b00      	cmp	r3, #0
 8019052:	bf14      	ite	ne
 8019054:	2301      	movne	r3, #1
 8019056:	2300      	moveq	r3, #0
 8019058:	b2db      	uxtb	r3, r3
 801905a:	4618      	mov	r0, r3
 801905c:	f7ff fd60 	bl	8018b20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019060:	481c      	ldr	r0, [pc, #112]	@ (80190d4 <RadioSetRxConfig+0x418>)
 8019062:	f002 f845 	bl	801b0f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019066:	481c      	ldr	r0, [pc, #112]	@ (80190d8 <RadioSetRxConfig+0x41c>)
 8019068:	f002 f914 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801906c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801906e:	b2db      	uxtb	r3, r3
 8019070:	4618      	mov	r0, r3
 8019072:	f001 fe1a 	bl	801acaa <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019076:	4b15      	ldr	r3, [pc, #84]	@ (80190cc <RadioSetRxConfig+0x410>)
 8019078:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801907c:	2b01      	cmp	r3, #1
 801907e:	d10d      	bne.n	801909c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8019080:	f240 7036 	movw	r0, #1846	@ 0x736
 8019084:	f002 fa62 	bl	801b54c <SUBGRF_ReadRegister>
 8019088:	4603      	mov	r3, r0
 801908a:	f023 0304 	bic.w	r3, r3, #4
 801908e:	b2db      	uxtb	r3, r3
 8019090:	4619      	mov	r1, r3
 8019092:	f240 7036 	movw	r0, #1846	@ 0x736
 8019096:	f002 fa45 	bl	801b524 <SUBGRF_WriteRegister>
 801909a:	e00c      	b.n	80190b6 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801909c:	f240 7036 	movw	r0, #1846	@ 0x736
 80190a0:	f002 fa54 	bl	801b54c <SUBGRF_ReadRegister>
 80190a4:	4603      	mov	r3, r0
 80190a6:	f043 0304 	orr.w	r3, r3, #4
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	4619      	mov	r1, r3
 80190ae:	f240 7036 	movw	r0, #1846	@ 0x736
 80190b2:	f002 fa37 	bl	801b524 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80190b6:	4b05      	ldr	r3, [pc, #20]	@ (80190cc <RadioSetRxConfig+0x410>)
 80190b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80190bc:	609a      	str	r2, [r3, #8]
            break;
 80190be:	e000      	b.n	80190c2 <RadioSetRxConfig+0x406>
            break;
 80190c0:	bf00      	nop
    }
}
 80190c2:	bf00      	nop
 80190c4:	3728      	adds	r7, #40	@ 0x28
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	20003d9c 	.word	0x20003d9c
 80190d0:	20000104 	.word	0x20000104
 80190d4:	20003dd4 	.word	0x20003dd4
 80190d8:	20003daa 	.word	0x20003daa

080190dc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b086      	sub	sp, #24
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60ba      	str	r2, [r7, #8]
 80190e4:	607b      	str	r3, [r7, #4]
 80190e6:	4603      	mov	r3, r0
 80190e8:	73fb      	strb	r3, [r7, #15]
 80190ea:	460b      	mov	r3, r1
 80190ec:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80190ee:	f002 fcf0 	bl	801bad2 <RFW_DeInit>
    switch( modem )
 80190f2:	7bfb      	ldrb	r3, [r7, #15]
 80190f4:	2b03      	cmp	r3, #3
 80190f6:	f000 80d7 	beq.w	80192a8 <RadioSetTxConfig+0x1cc>
 80190fa:	2b03      	cmp	r3, #3
 80190fc:	f300 80e6 	bgt.w	80192cc <RadioSetTxConfig+0x1f0>
 8019100:	2b00      	cmp	r3, #0
 8019102:	d002      	beq.n	801910a <RadioSetTxConfig+0x2e>
 8019104:	2b01      	cmp	r3, #1
 8019106:	d061      	beq.n	80191cc <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8019108:	e0e0      	b.n	80192cc <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801910a:	4b7c      	ldr	r3, [pc, #496]	@ (80192fc <RadioSetTxConfig+0x220>)
 801910c:	2200      	movs	r2, #0
 801910e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019112:	4a7a      	ldr	r2, [pc, #488]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019114:	6a3b      	ldr	r3, [r7, #32]
 8019116:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019118:	4b78      	ldr	r3, [pc, #480]	@ (80192fc <RadioSetTxConfig+0x220>)
 801911a:	220b      	movs	r2, #11
 801911c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019120:	6878      	ldr	r0, [r7, #4]
 8019122:	f002 fc09 	bl	801b938 <SUBGRF_GetFskBandwidthRegValue>
 8019126:	4603      	mov	r3, r0
 8019128:	461a      	mov	r2, r3
 801912a:	4b74      	ldr	r3, [pc, #464]	@ (80192fc <RadioSetTxConfig+0x220>)
 801912c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019130:	4a72      	ldr	r2, [pc, #456]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019136:	4b71      	ldr	r3, [pc, #452]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019138:	2200      	movs	r2, #0
 801913a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801913c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801913e:	00db      	lsls	r3, r3, #3
 8019140:	b29a      	uxth	r2, r3
 8019142:	4b6e      	ldr	r3, [pc, #440]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019144:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019146:	4b6d      	ldr	r3, [pc, #436]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019148:	2204      	movs	r2, #4
 801914a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801914c:	4b6b      	ldr	r3, [pc, #428]	@ (80192fc <RadioSetTxConfig+0x220>)
 801914e:	2218      	movs	r2, #24
 8019150:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019152:	4b6a      	ldr	r3, [pc, #424]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019154:	2200      	movs	r2, #0
 8019156:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019158:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801915c:	f083 0301 	eor.w	r3, r3, #1
 8019160:	b2db      	uxtb	r3, r3
 8019162:	461a      	mov	r2, r3
 8019164:	4b65      	ldr	r3, [pc, #404]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019166:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019168:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801916c:	2b00      	cmp	r3, #0
 801916e:	d003      	beq.n	8019178 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019170:	4b62      	ldr	r3, [pc, #392]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019172:	22f2      	movs	r2, #242	@ 0xf2
 8019174:	75da      	strb	r2, [r3, #23]
 8019176:	e002      	b.n	801917e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019178:	4b60      	ldr	r3, [pc, #384]	@ (80192fc <RadioSetTxConfig+0x220>)
 801917a:	2201      	movs	r2, #1
 801917c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801917e:	4b5f      	ldr	r3, [pc, #380]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019180:	2201      	movs	r2, #1
 8019182:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019184:	f000 fb37 	bl	80197f6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8019188:	4b5c      	ldr	r3, [pc, #368]	@ (80192fc <RadioSetTxConfig+0x220>)
 801918a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801918e:	2b00      	cmp	r3, #0
 8019190:	bf14      	ite	ne
 8019192:	2301      	movne	r3, #1
 8019194:	2300      	moveq	r3, #0
 8019196:	b2db      	uxtb	r3, r3
 8019198:	4618      	mov	r0, r3
 801919a:	f7ff fcc1 	bl	8018b20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801919e:	4858      	ldr	r0, [pc, #352]	@ (8019300 <RadioSetTxConfig+0x224>)
 80191a0:	f001 ffa6 	bl	801b0f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191a4:	4857      	ldr	r0, [pc, #348]	@ (8019304 <RadioSetTxConfig+0x228>)
 80191a6:	f002 f875 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80191aa:	4a57      	ldr	r2, [pc, #348]	@ (8019308 <RadioSetTxConfig+0x22c>)
 80191ac:	f107 0310 	add.w	r3, r7, #16
 80191b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80191b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80191b8:	f107 0310 	add.w	r3, r7, #16
 80191bc:	4618      	mov	r0, r3
 80191be:	f001 fb9e 	bl	801a8fe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80191c2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80191c6:	f001 fbe9 	bl	801a99c <SUBGRF_SetWhiteningSeed>
            break;
 80191ca:	e080      	b.n	80192ce <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80191cc:	4b4b      	ldr	r3, [pc, #300]	@ (80192fc <RadioSetTxConfig+0x220>)
 80191ce:	2201      	movs	r2, #1
 80191d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80191d4:	6a3b      	ldr	r3, [r7, #32]
 80191d6:	b2da      	uxtb	r2, r3
 80191d8:	4b48      	ldr	r3, [pc, #288]	@ (80192fc <RadioSetTxConfig+0x220>)
 80191da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80191de:	4a4b      	ldr	r2, [pc, #300]	@ (801930c <RadioSetTxConfig+0x230>)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	4413      	add	r3, r2
 80191e4:	781a      	ldrb	r2, [r3, #0]
 80191e6:	4b45      	ldr	r3, [pc, #276]	@ (80192fc <RadioSetTxConfig+0x220>)
 80191e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80191ec:	4a43      	ldr	r2, [pc, #268]	@ (80192fc <RadioSetTxConfig+0x220>)
 80191ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80191f2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d105      	bne.n	8019208 <RadioSetTxConfig+0x12c>
 80191fc:	6a3b      	ldr	r3, [r7, #32]
 80191fe:	2b0b      	cmp	r3, #11
 8019200:	d008      	beq.n	8019214 <RadioSetTxConfig+0x138>
 8019202:	6a3b      	ldr	r3, [r7, #32]
 8019204:	2b0c      	cmp	r3, #12
 8019206:	d005      	beq.n	8019214 <RadioSetTxConfig+0x138>
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2b01      	cmp	r3, #1
 801920c:	d107      	bne.n	801921e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801920e:	6a3b      	ldr	r3, [r7, #32]
 8019210:	2b0c      	cmp	r3, #12
 8019212:	d104      	bne.n	801921e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019214:	4b39      	ldr	r3, [pc, #228]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019216:	2201      	movs	r2, #1
 8019218:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801921c:	e003      	b.n	8019226 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801921e:	4b37      	ldr	r3, [pc, #220]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019220:	2200      	movs	r2, #0
 8019222:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019226:	4b35      	ldr	r3, [pc, #212]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019228:	2201      	movs	r2, #1
 801922a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801922c:	4b33      	ldr	r3, [pc, #204]	@ (80192fc <RadioSetTxConfig+0x220>)
 801922e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8019232:	2b05      	cmp	r3, #5
 8019234:	d004      	beq.n	8019240 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019236:	4b31      	ldr	r3, [pc, #196]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019238:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801923c:	2b06      	cmp	r3, #6
 801923e:	d10a      	bne.n	8019256 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8019240:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019242:	2b0b      	cmp	r3, #11
 8019244:	d803      	bhi.n	801924e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019246:	4b2d      	ldr	r3, [pc, #180]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019248:	220c      	movs	r2, #12
 801924a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801924c:	e006      	b.n	801925c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801924e:	4a2b      	ldr	r2, [pc, #172]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019250:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019252:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019254:	e002      	b.n	801925c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019256:	4a29      	ldr	r2, [pc, #164]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019258:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801925a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801925c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019260:	4b26      	ldr	r3, [pc, #152]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019262:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019264:	4b2a      	ldr	r3, [pc, #168]	@ (8019310 <RadioSetTxConfig+0x234>)
 8019266:	781a      	ldrb	r2, [r3, #0]
 8019268:	4b24      	ldr	r3, [pc, #144]	@ (80192fc <RadioSetTxConfig+0x220>)
 801926a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801926c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8019270:	4b22      	ldr	r3, [pc, #136]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019272:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019276:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801927a:	4b20      	ldr	r3, [pc, #128]	@ (80192fc <RadioSetTxConfig+0x220>)
 801927c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8019280:	f000 fab9 	bl	80197f6 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8019284:	4b1d      	ldr	r3, [pc, #116]	@ (80192fc <RadioSetTxConfig+0x220>)
 8019286:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801928a:	2b00      	cmp	r3, #0
 801928c:	bf14      	ite	ne
 801928e:	2301      	movne	r3, #1
 8019290:	2300      	moveq	r3, #0
 8019292:	b2db      	uxtb	r3, r3
 8019294:	4618      	mov	r0, r3
 8019296:	f7ff fc43 	bl	8018b20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801929a:	4819      	ldr	r0, [pc, #100]	@ (8019300 <RadioSetTxConfig+0x224>)
 801929c:	f001 ff28 	bl	801b0f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192a0:	4818      	ldr	r0, [pc, #96]	@ (8019304 <RadioSetTxConfig+0x228>)
 80192a2:	f001 fff7 	bl	801b294 <SUBGRF_SetPacketParams>
            break;
 80192a6:	e012      	b.n	80192ce <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80192a8:	2003      	movs	r0, #3
 80192aa:	f7ff fc39 	bl	8018b20 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80192ae:	4b13      	ldr	r3, [pc, #76]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192b0:	2202      	movs	r2, #2
 80192b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80192b6:	4a11      	ldr	r2, [pc, #68]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192b8:	6a3b      	ldr	r3, [r7, #32]
 80192ba:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80192bc:	4b0f      	ldr	r3, [pc, #60]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192be:	2216      	movs	r2, #22
 80192c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80192c4:	480e      	ldr	r0, [pc, #56]	@ (8019300 <RadioSetTxConfig+0x224>)
 80192c6:	f001 ff13 	bl	801b0f0 <SUBGRF_SetModulationParams>
            break;
 80192ca:	e000      	b.n	80192ce <RadioSetTxConfig+0x1f2>
            break;
 80192cc:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80192ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192d2:	4618      	mov	r0, r3
 80192d4:	f002 fa42 	bl	801b75c <SUBGRF_SetRfTxPower>
 80192d8:	4603      	mov	r3, r0
 80192da:	461a      	mov	r2, r3
 80192dc:	4b07      	ldr	r3, [pc, #28]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192de:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80192e2:	4b06      	ldr	r3, [pc, #24]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192e4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80192e8:	4618      	mov	r0, r3
 80192ea:	f002 fc06 	bl	801bafa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80192ee:	4a03      	ldr	r2, [pc, #12]	@ (80192fc <RadioSetTxConfig+0x220>)
 80192f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192f2:	6053      	str	r3, [r2, #4]
}
 80192f4:	bf00      	nop
 80192f6:	3718      	adds	r7, #24
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}
 80192fc:	20003d9c 	.word	0x20003d9c
 8019300:	20003dd4 	.word	0x20003dd4
 8019304:	20003daa 	.word	0x20003daa
 8019308:	0801da58 	.word	0x0801da58
 801930c:	0801e0a4 	.word	0x0801e0a4
 8019310:	20000104 	.word	0x20000104

08019314 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019314:	b480      	push	{r7}
 8019316:	b083      	sub	sp, #12
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
    return true;
 801931c:	2301      	movs	r3, #1
}
 801931e:	4618      	mov	r0, r3
 8019320:	370c      	adds	r7, #12
 8019322:	46bd      	mov	sp, r7
 8019324:	bc80      	pop	{r7}
 8019326:	4770      	bx	lr

08019328 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019328:	b480      	push	{r7}
 801932a:	b085      	sub	sp, #20
 801932c:	af00      	add	r7, sp, #0
 801932e:	4603      	mov	r3, r0
 8019330:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019332:	2300      	movs	r3, #0
 8019334:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019336:	79fb      	ldrb	r3, [r7, #7]
 8019338:	2b0a      	cmp	r3, #10
 801933a:	d83e      	bhi.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
 801933c:	a201      	add	r2, pc, #4	@ (adr r2, 8019344 <RadioGetLoRaBandwidthInHz+0x1c>)
 801933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019342:	bf00      	nop
 8019344:	08019371 	.word	0x08019371
 8019348:	08019381 	.word	0x08019381
 801934c:	08019391 	.word	0x08019391
 8019350:	080193a1 	.word	0x080193a1
 8019354:	080193a9 	.word	0x080193a9
 8019358:	080193af 	.word	0x080193af
 801935c:	080193b5 	.word	0x080193b5
 8019360:	080193bb 	.word	0x080193bb
 8019364:	08019379 	.word	0x08019379
 8019368:	08019389 	.word	0x08019389
 801936c:	08019399 	.word	0x08019399
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019370:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8019374:	60fb      	str	r3, [r7, #12]
        break;
 8019376:	e020      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019378:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 801937c:	60fb      	str	r3, [r7, #12]
        break;
 801937e:	e01c      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019380:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8019384:	60fb      	str	r3, [r7, #12]
        break;
 8019386:	e018      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019388:	f245 1361 	movw	r3, #20833	@ 0x5161
 801938c:	60fb      	str	r3, [r7, #12]
        break;
 801938e:	e014      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019390:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8019394:	60fb      	str	r3, [r7, #12]
        break;
 8019396:	e010      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019398:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 801939c:	60fb      	str	r3, [r7, #12]
        break;
 801939e:	e00c      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80193a0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80193a4:	60fb      	str	r3, [r7, #12]
        break;
 80193a6:	e008      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80193a8:	4b07      	ldr	r3, [pc, #28]	@ (80193c8 <RadioGetLoRaBandwidthInHz+0xa0>)
 80193aa:	60fb      	str	r3, [r7, #12]
        break;
 80193ac:	e005      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80193ae:	4b07      	ldr	r3, [pc, #28]	@ (80193cc <RadioGetLoRaBandwidthInHz+0xa4>)
 80193b0:	60fb      	str	r3, [r7, #12]
        break;
 80193b2:	e002      	b.n	80193ba <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80193b4:	4b06      	ldr	r3, [pc, #24]	@ (80193d0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80193b6:	60fb      	str	r3, [r7, #12]
        break;
 80193b8:	bf00      	nop
    }

    return bandwidthInHz;
 80193ba:	68fb      	ldr	r3, [r7, #12]
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3714      	adds	r7, #20
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bc80      	pop	{r7}
 80193c4:	4770      	bx	lr
 80193c6:	bf00      	nop
 80193c8:	0001e848 	.word	0x0001e848
 80193cc:	0003d090 	.word	0x0003d090
 80193d0:	0007a120 	.word	0x0007a120

080193d4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80193d4:	b480      	push	{r7}
 80193d6:	b083      	sub	sp, #12
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	4608      	mov	r0, r1
 80193de:	4611      	mov	r1, r2
 80193e0:	461a      	mov	r2, r3
 80193e2:	4603      	mov	r3, r0
 80193e4:	70fb      	strb	r3, [r7, #3]
 80193e6:	460b      	mov	r3, r1
 80193e8:	803b      	strh	r3, [r7, #0]
 80193ea:	4613      	mov	r3, r2
 80193ec:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80193ee:	883b      	ldrh	r3, [r7, #0]
 80193f0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80193f2:	78ba      	ldrb	r2, [r7, #2]
 80193f4:	f082 0201 	eor.w	r2, r2, #1
 80193f8:	b2d2      	uxtb	r2, r2
 80193fa:	2a00      	cmp	r2, #0
 80193fc:	d001      	beq.n	8019402 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80193fe:	2208      	movs	r2, #8
 8019400:	e000      	b.n	8019404 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019402:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019404:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019406:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801940a:	7c3b      	ldrb	r3, [r7, #16]
 801940c:	7d39      	ldrb	r1, [r7, #20]
 801940e:	2900      	cmp	r1, #0
 8019410:	d001      	beq.n	8019416 <RadioGetGfskTimeOnAirNumerator+0x42>
 8019412:	2102      	movs	r1, #2
 8019414:	e000      	b.n	8019418 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019416:	2100      	movs	r1, #0
 8019418:	440b      	add	r3, r1
 801941a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801941c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801941e:	4618      	mov	r0, r3
 8019420:	370c      	adds	r7, #12
 8019422:	46bd      	mov	sp, r7
 8019424:	bc80      	pop	{r7}
 8019426:	4770      	bx	lr

08019428 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019428:	b480      	push	{r7}
 801942a:	b08b      	sub	sp, #44	@ 0x2c
 801942c:	af00      	add	r7, sp, #0
 801942e:	60f8      	str	r0, [r7, #12]
 8019430:	60b9      	str	r1, [r7, #8]
 8019432:	4611      	mov	r1, r2
 8019434:	461a      	mov	r2, r3
 8019436:	460b      	mov	r3, r1
 8019438:	71fb      	strb	r3, [r7, #7]
 801943a:	4613      	mov	r3, r2
 801943c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801943e:	79fb      	ldrb	r3, [r7, #7]
 8019440:	3304      	adds	r3, #4
 8019442:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019444:	2300      	movs	r3, #0
 8019446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	2b05      	cmp	r3, #5
 801944e:	d002      	beq.n	8019456 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	2b06      	cmp	r3, #6
 8019454:	d104      	bne.n	8019460 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019456:	88bb      	ldrh	r3, [r7, #4]
 8019458:	2b0b      	cmp	r3, #11
 801945a:	d801      	bhi.n	8019460 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801945c:	230c      	movs	r3, #12
 801945e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d105      	bne.n	8019472 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019466:	68bb      	ldr	r3, [r7, #8]
 8019468:	2b0b      	cmp	r3, #11
 801946a:	d008      	beq.n	801947e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801946c:	68bb      	ldr	r3, [r7, #8]
 801946e:	2b0c      	cmp	r3, #12
 8019470:	d005      	beq.n	801947e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	2b01      	cmp	r3, #1
 8019476:	d105      	bne.n	8019484 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019478:	68bb      	ldr	r3, [r7, #8]
 801947a:	2b0c      	cmp	r3, #12
 801947c:	d102      	bne.n	8019484 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801947e:	2301      	movs	r3, #1
 8019480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019484:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8019488:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801948a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801948e:	2a00      	cmp	r2, #0
 8019490:	d001      	beq.n	8019496 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8019492:	2210      	movs	r2, #16
 8019494:	e000      	b.n	8019498 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8019496:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019498:	4413      	add	r3, r2
 801949a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80194a0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80194a2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80194a6:	2a00      	cmp	r2, #0
 80194a8:	d001      	beq.n	80194ae <RadioGetLoRaTimeOnAirNumerator+0x86>
 80194aa:	2200      	movs	r2, #0
 80194ac:	e000      	b.n	80194b0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80194ae:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80194b0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80194b2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	2b06      	cmp	r3, #6
 80194b8:	d803      	bhi.n	80194c2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80194ba:	68bb      	ldr	r3, [r7, #8]
 80194bc:	009b      	lsls	r3, r3, #2
 80194be:	623b      	str	r3, [r7, #32]
 80194c0:	e00e      	b.n	80194e0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80194c2:	69fb      	ldr	r3, [r7, #28]
 80194c4:	3308      	adds	r3, #8
 80194c6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80194c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d004      	beq.n	80194da <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	3b02      	subs	r3, #2
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	623b      	str	r3, [r7, #32]
 80194d8:	e002      	b.n	80194e0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80194da:	68bb      	ldr	r3, [r7, #8]
 80194dc:	009b      	lsls	r3, r3, #2
 80194de:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80194e0:	69fb      	ldr	r3, [r7, #28]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	da01      	bge.n	80194ea <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80194e6:	2300      	movs	r3, #0
 80194e8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80194ea:	69fa      	ldr	r2, [r7, #28]
 80194ec:	6a3b      	ldr	r3, [r7, #32]
 80194ee:	4413      	add	r3, r2
 80194f0:	1e5a      	subs	r2, r3, #1
 80194f2:	6a3b      	ldr	r3, [r7, #32]
 80194f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80194f8:	697a      	ldr	r2, [r7, #20]
 80194fa:	fb03 f202 	mul.w	r2, r3, r2
 80194fe:	88bb      	ldrh	r3, [r7, #4]
 8019500:	4413      	add	r3, r2
    int32_t intermediate =
 8019502:	330c      	adds	r3, #12
 8019504:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	2b06      	cmp	r3, #6
 801950a:	d802      	bhi.n	8019512 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801950c:	69bb      	ldr	r3, [r7, #24]
 801950e:	3302      	adds	r3, #2
 8019510:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	009b      	lsls	r3, r3, #2
 8019516:	1c5a      	adds	r2, r3, #1
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	3b02      	subs	r3, #2
 801951c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019520:	4618      	mov	r0, r3
 8019522:	372c      	adds	r7, #44	@ 0x2c
 8019524:	46bd      	mov	sp, r7
 8019526:	bc80      	pop	{r7}
 8019528:	4770      	bx	lr
	...

0801952c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b08a      	sub	sp, #40	@ 0x28
 8019530:	af04      	add	r7, sp, #16
 8019532:	60b9      	str	r1, [r7, #8]
 8019534:	607a      	str	r2, [r7, #4]
 8019536:	461a      	mov	r2, r3
 8019538:	4603      	mov	r3, r0
 801953a:	73fb      	strb	r3, [r7, #15]
 801953c:	4613      	mov	r3, r2
 801953e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019544:	2301      	movs	r3, #1
 8019546:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019548:	7bfb      	ldrb	r3, [r7, #15]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d002      	beq.n	8019554 <RadioTimeOnAir+0x28>
 801954e:	2b01      	cmp	r3, #1
 8019550:	d017      	beq.n	8019582 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019552:	e035      	b.n	80195c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019554:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8019558:	8c3a      	ldrh	r2, [r7, #32]
 801955a:	7bb9      	ldrb	r1, [r7, #14]
 801955c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8019560:	9301      	str	r3, [sp, #4]
 8019562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019566:	9300      	str	r3, [sp, #0]
 8019568:	4603      	mov	r3, r0
 801956a:	6878      	ldr	r0, [r7, #4]
 801956c:	f7ff ff32 	bl	80193d4 <RadioGetGfskTimeOnAirNumerator>
 8019570:	4603      	mov	r3, r0
 8019572:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019576:	fb02 f303 	mul.w	r3, r2, r3
 801957a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	613b      	str	r3, [r7, #16]
        break;
 8019580:	e01e      	b.n	80195c0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019582:	8c39      	ldrh	r1, [r7, #32]
 8019584:	7bba      	ldrb	r2, [r7, #14]
 8019586:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801958a:	9302      	str	r3, [sp, #8]
 801958c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019590:	9301      	str	r3, [sp, #4]
 8019592:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019596:	9300      	str	r3, [sp, #0]
 8019598:	460b      	mov	r3, r1
 801959a:	6879      	ldr	r1, [r7, #4]
 801959c:	68b8      	ldr	r0, [r7, #8]
 801959e:	f7ff ff43 	bl	8019428 <RadioGetLoRaTimeOnAirNumerator>
 80195a2:	4603      	mov	r3, r0
 80195a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80195a8:	fb02 f303 	mul.w	r3, r2, r3
 80195ac:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80195ae:	4a0a      	ldr	r2, [pc, #40]	@ (80195d8 <RadioTimeOnAir+0xac>)
 80195b0:	68bb      	ldr	r3, [r7, #8]
 80195b2:	4413      	add	r3, r2
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7ff feb6 	bl	8019328 <RadioGetLoRaBandwidthInHz>
 80195bc:	6138      	str	r0, [r7, #16]
        break;
 80195be:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80195c0:	697a      	ldr	r2, [r7, #20]
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	4413      	add	r3, r2
 80195c6:	1e5a      	subs	r2, r3, #1
 80195c8:	693b      	ldr	r3, [r7, #16]
 80195ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	3718      	adds	r7, #24
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
 80195d6:	bf00      	nop
 80195d8:	0801e0a4 	.word	0x0801e0a4

080195dc <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b084      	sub	sp, #16
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
 80195e4:	460b      	mov	r3, r1
 80195e6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80195e8:	2300      	movs	r3, #0
 80195ea:	2200      	movs	r2, #0
 80195ec:	f240 2101 	movw	r1, #513	@ 0x201
 80195f0:	f240 2001 	movw	r0, #513	@ 0x201
 80195f4:	f001 fc4e 	bl	801ae94 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80195f8:	4b70      	ldr	r3, [pc, #448]	@ (80197bc <RadioSend+0x1e0>)
 80195fa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80195fe:	2101      	movs	r1, #1
 8019600:	4618      	mov	r0, r3
 8019602:	f002 f883 	bl	801b70c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8019606:	4b6d      	ldr	r3, [pc, #436]	@ (80197bc <RadioSend+0x1e0>)
 8019608:	781b      	ldrb	r3, [r3, #0]
 801960a:	2b01      	cmp	r3, #1
 801960c:	d112      	bne.n	8019634 <RadioSend+0x58>
 801960e:	4b6b      	ldr	r3, [pc, #428]	@ (80197bc <RadioSend+0x1e0>)
 8019610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019614:	2b06      	cmp	r3, #6
 8019616:	d10d      	bne.n	8019634 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8019618:	f640 0089 	movw	r0, #2185	@ 0x889
 801961c:	f001 ff96 	bl	801b54c <SUBGRF_ReadRegister>
 8019620:	4603      	mov	r3, r0
 8019622:	f023 0304 	bic.w	r3, r3, #4
 8019626:	b2db      	uxtb	r3, r3
 8019628:	4619      	mov	r1, r3
 801962a:	f640 0089 	movw	r0, #2185	@ 0x889
 801962e:	f001 ff79 	bl	801b524 <SUBGRF_WriteRegister>
 8019632:	e00c      	b.n	801964e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8019634:	f640 0089 	movw	r0, #2185	@ 0x889
 8019638:	f001 ff88 	bl	801b54c <SUBGRF_ReadRegister>
 801963c:	4603      	mov	r3, r0
 801963e:	f043 0304 	orr.w	r3, r3, #4
 8019642:	b2db      	uxtb	r3, r3
 8019644:	4619      	mov	r1, r3
 8019646:	f640 0089 	movw	r0, #2185	@ 0x889
 801964a:	f001 ff6b 	bl	801b524 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 801964e:	4b5b      	ldr	r3, [pc, #364]	@ (80197bc <RadioSend+0x1e0>)
 8019650:	781b      	ldrb	r3, [r3, #0]
 8019652:	2b03      	cmp	r3, #3
 8019654:	f200 80a5 	bhi.w	80197a2 <RadioSend+0x1c6>
 8019658:	a201      	add	r2, pc, #4	@ (adr r2, 8019660 <RadioSend+0x84>)
 801965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801965e:	bf00      	nop
 8019660:	0801968b 	.word	0x0801968b
 8019664:	08019671 	.word	0x08019671
 8019668:	080196eb 	.word	0x080196eb
 801966c:	0801970b 	.word	0x0801970b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019670:	4a52      	ldr	r2, [pc, #328]	@ (80197bc <RadioSend+0x1e0>)
 8019672:	78fb      	ldrb	r3, [r7, #3]
 8019674:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019676:	4852      	ldr	r0, [pc, #328]	@ (80197c0 <RadioSend+0x1e4>)
 8019678:	f001 fe0c 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801967c:	78fb      	ldrb	r3, [r7, #3]
 801967e:	2200      	movs	r2, #0
 8019680:	4619      	mov	r1, r3
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	f001 f928 	bl	801a8d8 <SUBGRF_SendPayload>
            break;
 8019688:	e08c      	b.n	80197a4 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801968a:	f002 fa28 	bl	801bade <RFW_Is_Init>
 801968e:	4603      	mov	r3, r0
 8019690:	2b01      	cmp	r3, #1
 8019692:	d11d      	bne.n	80196d0 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019694:	f107 020d 	add.w	r2, r7, #13
 8019698:	78fb      	ldrb	r3, [r7, #3]
 801969a:	4619      	mov	r1, r3
 801969c:	6878      	ldr	r0, [r7, #4]
 801969e:	f002 fa36 	bl	801bb0e <RFW_TransmitInit>
 80196a2:	4603      	mov	r3, r0
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d10c      	bne.n	80196c2 <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80196a8:	7b7a      	ldrb	r2, [r7, #13]
 80196aa:	4b44      	ldr	r3, [pc, #272]	@ (80197bc <RadioSend+0x1e0>)
 80196ac:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196ae:	4844      	ldr	r0, [pc, #272]	@ (80197c0 <RadioSend+0x1e4>)
 80196b0:	f001 fdf0 	bl	801b294 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80196b4:	7b7b      	ldrb	r3, [r7, #13]
 80196b6:	2200      	movs	r2, #0
 80196b8:	4619      	mov	r1, r3
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f001 f90c 	bl	801a8d8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80196c0:	e070      	b.n	80197a4 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80196c2:	4b40      	ldr	r3, [pc, #256]	@ (80197c4 <RadioSend+0x1e8>)
 80196c4:	2201      	movs	r2, #1
 80196c6:	2100      	movs	r1, #0
 80196c8:	2002      	movs	r0, #2
 80196ca:	f002 fa7d 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
 80196ce:	e072      	b.n	80197b6 <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80196d0:	4a3a      	ldr	r2, [pc, #232]	@ (80197bc <RadioSend+0x1e0>)
 80196d2:	78fb      	ldrb	r3, [r7, #3]
 80196d4:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196d6:	483a      	ldr	r0, [pc, #232]	@ (80197c0 <RadioSend+0x1e4>)
 80196d8:	f001 fddc 	bl	801b294 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80196dc:	78fb      	ldrb	r3, [r7, #3]
 80196de:	2200      	movs	r2, #0
 80196e0:	4619      	mov	r1, r3
 80196e2:	6878      	ldr	r0, [r7, #4]
 80196e4:	f001 f8f8 	bl	801a8d8 <SUBGRF_SendPayload>
            break;
 80196e8:	e05c      	b.n	80197a4 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80196ea:	4b34      	ldr	r3, [pc, #208]	@ (80197bc <RadioSend+0x1e0>)
 80196ec:	2202      	movs	r2, #2
 80196ee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80196f0:	4a32      	ldr	r2, [pc, #200]	@ (80197bc <RadioSend+0x1e0>)
 80196f2:	78fb      	ldrb	r3, [r7, #3]
 80196f4:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196f6:	4832      	ldr	r0, [pc, #200]	@ (80197c0 <RadioSend+0x1e4>)
 80196f8:	f001 fdcc 	bl	801b294 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80196fc:	78fb      	ldrb	r3, [r7, #3]
 80196fe:	2200      	movs	r2, #0
 8019700:	4619      	mov	r1, r3
 8019702:	6878      	ldr	r0, [r7, #4]
 8019704:	f001 f8e8 	bl	801a8d8 <SUBGRF_SendPayload>
            break;
 8019708:	e04c      	b.n	80197a4 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801970a:	78fb      	ldrb	r3, [r7, #3]
 801970c:	461a      	mov	r2, r3
 801970e:	6879      	ldr	r1, [r7, #4]
 8019710:	482d      	ldr	r0, [pc, #180]	@ (80197c8 <RadioSend+0x1ec>)
 8019712:	f000 fc68 	bl	8019fe6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019716:	4b29      	ldr	r3, [pc, #164]	@ (80197bc <RadioSend+0x1e0>)
 8019718:	2202      	movs	r2, #2
 801971a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801971c:	78fb      	ldrb	r3, [r7, #3]
 801971e:	3301      	adds	r3, #1
 8019720:	b2da      	uxtb	r2, r3
 8019722:	4b26      	ldr	r3, [pc, #152]	@ (80197bc <RadioSend+0x1e0>)
 8019724:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019726:	4826      	ldr	r0, [pc, #152]	@ (80197c0 <RadioSend+0x1e4>)
 8019728:	f001 fdb4 	bl	801b294 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801972c:	2100      	movs	r1, #0
 801972e:	20f1      	movs	r0, #241	@ 0xf1
 8019730:	f000 f946 	bl	80199c0 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8019734:	2100      	movs	r1, #0
 8019736:	20f0      	movs	r0, #240	@ 0xf0
 8019738:	f000 f942 	bl	80199c0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801973c:	4b1f      	ldr	r3, [pc, #124]	@ (80197bc <RadioSend+0x1e0>)
 801973e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019740:	2b64      	cmp	r3, #100	@ 0x64
 8019742:	d108      	bne.n	8019756 <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8019744:	2170      	movs	r1, #112	@ 0x70
 8019746:	20f3      	movs	r0, #243	@ 0xf3
 8019748:	f000 f93a 	bl	80199c0 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801974c:	211d      	movs	r1, #29
 801974e:	20f2      	movs	r0, #242	@ 0xf2
 8019750:	f000 f936 	bl	80199c0 <RadioWrite>
 8019754:	e007      	b.n	8019766 <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8019756:	21e1      	movs	r1, #225	@ 0xe1
 8019758:	20f3      	movs	r0, #243	@ 0xf3
 801975a:	f000 f931 	bl	80199c0 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801975e:	2104      	movs	r1, #4
 8019760:	20f2      	movs	r0, #242	@ 0xf2
 8019762:	f000 f92d 	bl	80199c0 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019766:	78fb      	ldrb	r3, [r7, #3]
 8019768:	b29b      	uxth	r3, r3
 801976a:	00db      	lsls	r3, r3, #3
 801976c:	b29b      	uxth	r3, r3
 801976e:	3302      	adds	r3, #2
 8019770:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019772:	89fb      	ldrh	r3, [r7, #14]
 8019774:	0a1b      	lsrs	r3, r3, #8
 8019776:	b29b      	uxth	r3, r3
 8019778:	b2db      	uxtb	r3, r3
 801977a:	4619      	mov	r1, r3
 801977c:	20f4      	movs	r0, #244	@ 0xf4
 801977e:	f000 f91f 	bl	80199c0 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8019782:	89fb      	ldrh	r3, [r7, #14]
 8019784:	b2db      	uxtb	r3, r3
 8019786:	4619      	mov	r1, r3
 8019788:	20f5      	movs	r0, #245	@ 0xf5
 801978a:	f000 f919 	bl	80199c0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801978e:	78fb      	ldrb	r3, [r7, #3]
 8019790:	3301      	adds	r3, #1
 8019792:	b2db      	uxtb	r3, r3
 8019794:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8019798:	4619      	mov	r1, r3
 801979a:	480b      	ldr	r0, [pc, #44]	@ (80197c8 <RadioSend+0x1ec>)
 801979c:	f001 f89c 	bl	801a8d8 <SUBGRF_SendPayload>
            break;
 80197a0:	e000      	b.n	80197a4 <RadioSend+0x1c8>
        }
        default:
            break;
 80197a2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80197a4:	4b05      	ldr	r3, [pc, #20]	@ (80197bc <RadioSend+0x1e0>)
 80197a6:	685b      	ldr	r3, [r3, #4]
 80197a8:	4619      	mov	r1, r3
 80197aa:	4808      	ldr	r0, [pc, #32]	@ (80197cc <RadioSend+0x1f0>)
 80197ac:	f003 f924 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80197b0:	4806      	ldr	r0, [pc, #24]	@ (80197cc <RadioSend+0x1f0>)
 80197b2:	f003 f843 	bl	801c83c <UTIL_TIMER_Start>
}
 80197b6:	3710      	adds	r7, #16
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd80      	pop	{r7, pc}
 80197bc:	20003d9c 	.word	0x20003d9c
 80197c0:	20003daa 	.word	0x20003daa
 80197c4:	0801da60 	.word	0x0801da60
 80197c8:	20003c98 	.word	0x20003c98
 80197cc:	20003df4 	.word	0x20003df4

080197d0 <RadioSleep>:

static void RadioSleep( void )
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b082      	sub	sp, #8
 80197d4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80197d6:	2300      	movs	r3, #0
 80197d8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80197da:	793b      	ldrb	r3, [r7, #4]
 80197dc:	f043 0304 	orr.w	r3, r3, #4
 80197e0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80197e2:	7938      	ldrb	r0, [r7, #4]
 80197e4:	f001 f954 	bl	801aa90 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80197e8:	2002      	movs	r0, #2
 80197ea:	f7e8 f89a 	bl	8001922 <HAL_Delay>
}
 80197ee:	bf00      	nop
 80197f0:	3708      	adds	r7, #8
 80197f2:	46bd      	mov	sp, r7
 80197f4:	bd80      	pop	{r7, pc}

080197f6 <RadioStandby>:

static void RadioStandby( void )
{
 80197f6:	b580      	push	{r7, lr}
 80197f8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80197fa:	2000      	movs	r0, #0
 80197fc:	f001 f97a 	bl	801aaf4 <SUBGRF_SetStandby>
}
 8019800:	bf00      	nop
 8019802:	bd80      	pop	{r7, pc}

08019804 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	af00      	add	r7, sp, #0
 801980a:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 801980c:	f002 f967 	bl	801bade <RFW_Is_Init>
 8019810:	4603      	mov	r3, r0
 8019812:	2b01      	cmp	r3, #1
 8019814:	d102      	bne.n	801981c <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8019816:	f002 f98a 	bl	801bb2e <RFW_ReceiveInit>
 801981a:	e007      	b.n	801982c <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801981c:	2300      	movs	r3, #0
 801981e:	2200      	movs	r2, #0
 8019820:	f240 2162 	movw	r1, #610	@ 0x262
 8019824:	f240 2062 	movw	r0, #610	@ 0x262
 8019828:	f001 fb34 	bl	801ae94 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d006      	beq.n	8019840 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019832:	6879      	ldr	r1, [r7, #4]
 8019834:	480f      	ldr	r0, [pc, #60]	@ (8019874 <RadioRx+0x70>)
 8019836:	f003 f8df 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801983a:	480e      	ldr	r0, [pc, #56]	@ (8019874 <RadioRx+0x70>)
 801983c:	f002 fffe 	bl	801c83c <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019840:	4b0d      	ldr	r3, [pc, #52]	@ (8019878 <RadioRx+0x74>)
 8019842:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019846:	2100      	movs	r1, #0
 8019848:	4618      	mov	r0, r3
 801984a:	f001 ff5f 	bl	801b70c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801984e:	4b0a      	ldr	r3, [pc, #40]	@ (8019878 <RadioRx+0x74>)
 8019850:	785b      	ldrb	r3, [r3, #1]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d004      	beq.n	8019860 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019856:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801985a:	f001 f987 	bl	801ab6c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801985e:	e005      	b.n	801986c <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019860:	4b05      	ldr	r3, [pc, #20]	@ (8019878 <RadioRx+0x74>)
 8019862:	689b      	ldr	r3, [r3, #8]
 8019864:	019b      	lsls	r3, r3, #6
 8019866:	4618      	mov	r0, r3
 8019868:	f001 f980 	bl	801ab6c <SUBGRF_SetRx>
}
 801986c:	bf00      	nop
 801986e:	3708      	adds	r7, #8
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}
 8019874:	20003e0c 	.word	0x20003e0c
 8019878:	20003d9c 	.word	0x20003d9c

0801987c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8019884:	f002 f92b 	bl	801bade <RFW_Is_Init>
 8019888:	4603      	mov	r3, r0
 801988a:	2b01      	cmp	r3, #1
 801988c:	d102      	bne.n	8019894 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801988e:	f002 f94e 	bl	801bb2e <RFW_ReceiveInit>
 8019892:	e007      	b.n	80198a4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019894:	2300      	movs	r3, #0
 8019896:	2200      	movs	r2, #0
 8019898:	f240 2162 	movw	r1, #610	@ 0x262
 801989c:	f240 2062 	movw	r0, #610	@ 0x262
 80198a0:	f001 faf8 	bl	801ae94 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d006      	beq.n	80198b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80198aa:	6879      	ldr	r1, [r7, #4]
 80198ac:	480f      	ldr	r0, [pc, #60]	@ (80198ec <RadioRxBoosted+0x70>)
 80198ae:	f003 f8a3 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80198b2:	480e      	ldr	r0, [pc, #56]	@ (80198ec <RadioRxBoosted+0x70>)
 80198b4:	f002 ffc2 	bl	801c83c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80198b8:	4b0d      	ldr	r3, [pc, #52]	@ (80198f0 <RadioRxBoosted+0x74>)
 80198ba:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80198be:	2100      	movs	r1, #0
 80198c0:	4618      	mov	r0, r3
 80198c2:	f001 ff23 	bl	801b70c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80198c6:	4b0a      	ldr	r3, [pc, #40]	@ (80198f0 <RadioRxBoosted+0x74>)
 80198c8:	785b      	ldrb	r3, [r3, #1]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d004      	beq.n	80198d8 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80198ce:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80198d2:	f001 f96b 	bl	801abac <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80198d6:	e005      	b.n	80198e4 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80198d8:	4b05      	ldr	r3, [pc, #20]	@ (80198f0 <RadioRxBoosted+0x74>)
 80198da:	689b      	ldr	r3, [r3, #8]
 80198dc:	019b      	lsls	r3, r3, #6
 80198de:	4618      	mov	r0, r3
 80198e0:	f001 f964 	bl	801abac <SUBGRF_SetRxBoosted>
}
 80198e4:	bf00      	nop
 80198e6:	3708      	adds	r7, #8
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}
 80198ec:	20003e0c 	.word	0x20003e0c
 80198f0:	20003d9c 	.word	0x20003d9c

080198f4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
 80198fc:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80198fe:	4b07      	ldr	r3, [pc, #28]	@ (801991c <RadioSetRxDutyCycle+0x28>)
 8019900:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019904:	2100      	movs	r1, #0
 8019906:	4618      	mov	r0, r3
 8019908:	f001 ff00 	bl	801b70c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801990c:	6839      	ldr	r1, [r7, #0]
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	f001 f970 	bl	801abf4 <SUBGRF_SetRxDutyCycle>
}
 8019914:	bf00      	nop
 8019916:	3708      	adds	r7, #8
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	20003d9c 	.word	0x20003d9c

08019920 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019920:	b580      	push	{r7, lr}
 8019922:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8019924:	4b09      	ldr	r3, [pc, #36]	@ (801994c <RadioStartCad+0x2c>)
 8019926:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801992a:	2100      	movs	r1, #0
 801992c:	4618      	mov	r0, r3
 801992e:	f001 feed 	bl	801b70c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019932:	2300      	movs	r3, #0
 8019934:	2200      	movs	r2, #0
 8019936:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801993a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801993e:	f001 faa9 	bl	801ae94 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019942:	f001 f983 	bl	801ac4c <SUBGRF_SetCad>
}
 8019946:	bf00      	nop
 8019948:	bd80      	pop	{r7, pc}
 801994a:	bf00      	nop
 801994c:	20003d9c 	.word	0x20003d9c

08019950 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	460b      	mov	r3, r1
 801995a:	70fb      	strb	r3, [r7, #3]
 801995c:	4613      	mov	r3, r2
 801995e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019960:	883b      	ldrh	r3, [r7, #0]
 8019962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019966:	fb02 f303 	mul.w	r3, r2, r3
 801996a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801996c:	6878      	ldr	r0, [r7, #4]
 801996e:	f001 faed 	bl	801af4c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019976:	4618      	mov	r0, r3
 8019978:	f001 fef0 	bl	801b75c <SUBGRF_SetRfTxPower>
 801997c:	4603      	mov	r3, r0
 801997e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8019980:	7afb      	ldrb	r3, [r7, #11]
 8019982:	2101      	movs	r1, #1
 8019984:	4618      	mov	r0, r3
 8019986:	f001 fec1 	bl	801b70c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801998a:	f001 f96d 	bl	801ac68 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801998e:	68f9      	ldr	r1, [r7, #12]
 8019990:	4804      	ldr	r0, [pc, #16]	@ (80199a4 <RadioSetTxContinuousWave+0x54>)
 8019992:	f003 f831 	bl	801c9f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019996:	4803      	ldr	r0, [pc, #12]	@ (80199a4 <RadioSetTxContinuousWave+0x54>)
 8019998:	f002 ff50 	bl	801c83c <UTIL_TIMER_Start>
}
 801999c:	bf00      	nop
 801999e:	3710      	adds	r7, #16
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}
 80199a4:	20003df4 	.word	0x20003df4

080199a8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	4603      	mov	r3, r0
 80199b0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80199b2:	f001 fd24 	bl	801b3fe <SUBGRF_GetRssiInst>
 80199b6:	4603      	mov	r3, r0
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	3708      	adds	r7, #8
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}

080199c0 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b082      	sub	sp, #8
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	4603      	mov	r3, r0
 80199c8:	460a      	mov	r2, r1
 80199ca:	80fb      	strh	r3, [r7, #6]
 80199cc:	4613      	mov	r3, r2
 80199ce:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80199d0:	797a      	ldrb	r2, [r7, #5]
 80199d2:	88fb      	ldrh	r3, [r7, #6]
 80199d4:	4611      	mov	r1, r2
 80199d6:	4618      	mov	r0, r3
 80199d8:	f001 fda4 	bl	801b524 <SUBGRF_WriteRegister>
}
 80199dc:	bf00      	nop
 80199de:	3708      	adds	r7, #8
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd80      	pop	{r7, pc}

080199e4 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	4603      	mov	r3, r0
 80199ec:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80199ee:	88fb      	ldrh	r3, [r7, #6]
 80199f0:	4618      	mov	r0, r3
 80199f2:	f001 fdab 	bl	801b54c <SUBGRF_ReadRegister>
 80199f6:	4603      	mov	r3, r0
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3708      	adds	r7, #8
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}

08019a00 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b082      	sub	sp, #8
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	4603      	mov	r3, r0
 8019a08:	6039      	str	r1, [r7, #0]
 8019a0a:	80fb      	strh	r3, [r7, #6]
 8019a0c:	4613      	mov	r3, r2
 8019a0e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019a10:	797b      	ldrb	r3, [r7, #5]
 8019a12:	b29a      	uxth	r2, r3
 8019a14:	88fb      	ldrh	r3, [r7, #6]
 8019a16:	6839      	ldr	r1, [r7, #0]
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f001 fdab 	bl	801b574 <SUBGRF_WriteRegisters>
}
 8019a1e:	bf00      	nop
 8019a20:	3708      	adds	r7, #8
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}

08019a26 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019a26:	b580      	push	{r7, lr}
 8019a28:	b082      	sub	sp, #8
 8019a2a:	af00      	add	r7, sp, #0
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	6039      	str	r1, [r7, #0]
 8019a30:	80fb      	strh	r3, [r7, #6]
 8019a32:	4613      	mov	r3, r2
 8019a34:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019a36:	797b      	ldrb	r3, [r7, #5]
 8019a38:	b29a      	uxth	r2, r3
 8019a3a:	88fb      	ldrh	r3, [r7, #6]
 8019a3c:	6839      	ldr	r1, [r7, #0]
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f001 fdba 	bl	801b5b8 <SUBGRF_ReadRegisters>
}
 8019a44:	bf00      	nop
 8019a46:	3708      	adds	r7, #8
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	bd80      	pop	{r7, pc}

08019a4c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b082      	sub	sp, #8
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	4603      	mov	r3, r0
 8019a54:	460a      	mov	r2, r1
 8019a56:	71fb      	strb	r3, [r7, #7]
 8019a58:	4613      	mov	r3, r2
 8019a5a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019a5c:	79fb      	ldrb	r3, [r7, #7]
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d10a      	bne.n	8019a78 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019a62:	4a0e      	ldr	r2, [pc, #56]	@ (8019a9c <RadioSetMaxPayloadLength+0x50>)
 8019a64:	79bb      	ldrb	r3, [r7, #6]
 8019a66:	7013      	strb	r3, [r2, #0]
 8019a68:	4b0c      	ldr	r3, [pc, #48]	@ (8019a9c <RadioSetMaxPayloadLength+0x50>)
 8019a6a:	781a      	ldrb	r2, [r3, #0]
 8019a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8019aa0 <RadioSetMaxPayloadLength+0x54>)
 8019a6e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a70:	480c      	ldr	r0, [pc, #48]	@ (8019aa4 <RadioSetMaxPayloadLength+0x58>)
 8019a72:	f001 fc0f 	bl	801b294 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019a76:	e00d      	b.n	8019a94 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019a78:	4b09      	ldr	r3, [pc, #36]	@ (8019aa0 <RadioSetMaxPayloadLength+0x54>)
 8019a7a:	7d5b      	ldrb	r3, [r3, #21]
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d109      	bne.n	8019a94 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019a80:	4a06      	ldr	r2, [pc, #24]	@ (8019a9c <RadioSetMaxPayloadLength+0x50>)
 8019a82:	79bb      	ldrb	r3, [r7, #6]
 8019a84:	7013      	strb	r3, [r2, #0]
 8019a86:	4b05      	ldr	r3, [pc, #20]	@ (8019a9c <RadioSetMaxPayloadLength+0x50>)
 8019a88:	781a      	ldrb	r2, [r3, #0]
 8019a8a:	4b05      	ldr	r3, [pc, #20]	@ (8019aa0 <RadioSetMaxPayloadLength+0x54>)
 8019a8c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a8e:	4805      	ldr	r0, [pc, #20]	@ (8019aa4 <RadioSetMaxPayloadLength+0x58>)
 8019a90:	f001 fc00 	bl	801b294 <SUBGRF_SetPacketParams>
}
 8019a94:	bf00      	nop
 8019a96:	3708      	adds	r7, #8
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	20000104 	.word	0x20000104
 8019aa0:	20003d9c 	.word	0x20003d9c
 8019aa4:	20003daa 	.word	0x20003daa

08019aa8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b082      	sub	sp, #8
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	4603      	mov	r3, r0
 8019ab0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019ab2:	4a13      	ldr	r2, [pc, #76]	@ (8019b00 <RadioSetPublicNetwork+0x58>)
 8019ab4:	79fb      	ldrb	r3, [r7, #7]
 8019ab6:	7313      	strb	r3, [r2, #12]
 8019ab8:	4b11      	ldr	r3, [pc, #68]	@ (8019b00 <RadioSetPublicNetwork+0x58>)
 8019aba:	7b1a      	ldrb	r2, [r3, #12]
 8019abc:	4b10      	ldr	r3, [pc, #64]	@ (8019b00 <RadioSetPublicNetwork+0x58>)
 8019abe:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019ac0:	2001      	movs	r0, #1
 8019ac2:	f7ff f82d 	bl	8018b20 <RadioSetModem>
    if( enable == true )
 8019ac6:	79fb      	ldrb	r3, [r7, #7]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d00a      	beq.n	8019ae2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019acc:	2134      	movs	r1, #52	@ 0x34
 8019ace:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019ad2:	f001 fd27 	bl	801b524 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019ad6:	2144      	movs	r1, #68	@ 0x44
 8019ad8:	f240 7041 	movw	r0, #1857	@ 0x741
 8019adc:	f001 fd22 	bl	801b524 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019ae0:	e009      	b.n	8019af6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019ae2:	2114      	movs	r1, #20
 8019ae4:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8019ae8:	f001 fd1c 	bl	801b524 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019aec:	2124      	movs	r1, #36	@ 0x24
 8019aee:	f240 7041 	movw	r0, #1857	@ 0x741
 8019af2:	f001 fd17 	bl	801b524 <SUBGRF_WriteRegister>
}
 8019af6:	bf00      	nop
 8019af8:	3708      	adds	r7, #8
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
 8019afe:	bf00      	nop
 8019b00:	20003d9c 	.word	0x20003d9c

08019b04 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019b08:	f001 fe5c 	bl	801b7c4 <SUBGRF_GetRadioWakeUpTime>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	3303      	adds	r3, #3
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019b1c:	f000 f80e 	bl	8019b3c <RadioOnTxTimeoutProcess>
}
 8019b20:	bf00      	nop
 8019b22:	3708      	adds	r7, #8
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}

08019b28 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8019b28:	b580      	push	{r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019b30:	f000 f818 	bl	8019b64 <RadioOnRxTimeoutProcess>
}
 8019b34:	bf00      	nop
 8019b36:	3708      	adds	r7, #8
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	bd80      	pop	{r7, pc}

08019b3c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019b40:	4b07      	ldr	r3, [pc, #28]	@ (8019b60 <RadioOnTxTimeoutProcess+0x24>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d008      	beq.n	8019b5a <RadioOnTxTimeoutProcess+0x1e>
 8019b48:	4b05      	ldr	r3, [pc, #20]	@ (8019b60 <RadioOnTxTimeoutProcess+0x24>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d003      	beq.n	8019b5a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019b52:	4b03      	ldr	r3, [pc, #12]	@ (8019b60 <RadioOnTxTimeoutProcess+0x24>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	685b      	ldr	r3, [r3, #4]
 8019b58:	4798      	blx	r3
    }
}
 8019b5a:	bf00      	nop
 8019b5c:	bd80      	pop	{r7, pc}
 8019b5e:	bf00      	nop
 8019b60:	20003d98 	.word	0x20003d98

08019b64 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019b68:	4b07      	ldr	r3, [pc, #28]	@ (8019b88 <RadioOnRxTimeoutProcess+0x24>)
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d008      	beq.n	8019b82 <RadioOnRxTimeoutProcess+0x1e>
 8019b70:	4b05      	ldr	r3, [pc, #20]	@ (8019b88 <RadioOnRxTimeoutProcess+0x24>)
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	68db      	ldr	r3, [r3, #12]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d003      	beq.n	8019b82 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019b7a:	4b03      	ldr	r3, [pc, #12]	@ (8019b88 <RadioOnRxTimeoutProcess+0x24>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	68db      	ldr	r3, [r3, #12]
 8019b80:	4798      	blx	r3
    }
}
 8019b82:	bf00      	nop
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop
 8019b88:	20003d98 	.word	0x20003d98

08019b8c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b082      	sub	sp, #8
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019b96:	4a05      	ldr	r2, [pc, #20]	@ (8019bac <RadioOnDioIrq+0x20>)
 8019b98:	88fb      	ldrh	r3, [r7, #6]
 8019b9a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8019b9e:	f000 f807 	bl	8019bb0 <RadioIrqProcess>
}
 8019ba2:	bf00      	nop
 8019ba4:	3708      	adds	r7, #8
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
 8019baa:	bf00      	nop
 8019bac:	20003d9c 	.word	0x20003d9c

08019bb0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019bb0:	b5b0      	push	{r4, r5, r7, lr}
 8019bb2:	b082      	sub	sp, #8
 8019bb4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8019bbe:	4bb6      	ldr	r3, [pc, #728]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019bc0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8019bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bc8:	f000 810d 	beq.w	8019de6 <RadioIrqProcess+0x236>
 8019bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bd0:	f300 81b7 	bgt.w	8019f42 <RadioIrqProcess+0x392>
 8019bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019bd8:	f000 80f1 	beq.w	8019dbe <RadioIrqProcess+0x20e>
 8019bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019be0:	f300 81af 	bgt.w	8019f42 <RadioIrqProcess+0x392>
 8019be4:	2b80      	cmp	r3, #128	@ 0x80
 8019be6:	f000 80d6 	beq.w	8019d96 <RadioIrqProcess+0x1e6>
 8019bea:	2b80      	cmp	r3, #128	@ 0x80
 8019bec:	f300 81a9 	bgt.w	8019f42 <RadioIrqProcess+0x392>
 8019bf0:	2b20      	cmp	r3, #32
 8019bf2:	dc49      	bgt.n	8019c88 <RadioIrqProcess+0xd8>
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	f340 81a4 	ble.w	8019f42 <RadioIrqProcess+0x392>
 8019bfa:	3b01      	subs	r3, #1
 8019bfc:	2b1f      	cmp	r3, #31
 8019bfe:	f200 81a0 	bhi.w	8019f42 <RadioIrqProcess+0x392>
 8019c02:	a201      	add	r2, pc, #4	@ (adr r2, 8019c08 <RadioIrqProcess+0x58>)
 8019c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c08:	08019c91 	.word	0x08019c91
 8019c0c:	08019ccb 	.word	0x08019ccb
 8019c10:	08019f43 	.word	0x08019f43
 8019c14:	08019e61 	.word	0x08019e61
 8019c18:	08019f43 	.word	0x08019f43
 8019c1c:	08019f43 	.word	0x08019f43
 8019c20:	08019f43 	.word	0x08019f43
 8019c24:	08019e6f 	.word	0x08019e6f
 8019c28:	08019f43 	.word	0x08019f43
 8019c2c:	08019f43 	.word	0x08019f43
 8019c30:	08019f43 	.word	0x08019f43
 8019c34:	08019f43 	.word	0x08019f43
 8019c38:	08019f43 	.word	0x08019f43
 8019c3c:	08019f43 	.word	0x08019f43
 8019c40:	08019f43 	.word	0x08019f43
 8019c44:	08019e8b 	.word	0x08019e8b
 8019c48:	08019f43 	.word	0x08019f43
 8019c4c:	08019f43 	.word	0x08019f43
 8019c50:	08019f43 	.word	0x08019f43
 8019c54:	08019f43 	.word	0x08019f43
 8019c58:	08019f43 	.word	0x08019f43
 8019c5c:	08019f43 	.word	0x08019f43
 8019c60:	08019f43 	.word	0x08019f43
 8019c64:	08019f43 	.word	0x08019f43
 8019c68:	08019f43 	.word	0x08019f43
 8019c6c:	08019f43 	.word	0x08019f43
 8019c70:	08019f43 	.word	0x08019f43
 8019c74:	08019f43 	.word	0x08019f43
 8019c78:	08019f43 	.word	0x08019f43
 8019c7c:	08019f43 	.word	0x08019f43
 8019c80:	08019f43 	.word	0x08019f43
 8019c84:	08019ec5 	.word	0x08019ec5
 8019c88:	2b40      	cmp	r3, #64	@ 0x40
 8019c8a:	f000 813c 	beq.w	8019f06 <RadioIrqProcess+0x356>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8019c8e:	e158      	b.n	8019f42 <RadioIrqProcess+0x392>
        TimerStop( &TxTimeoutTimer );
 8019c90:	4882      	ldr	r0, [pc, #520]	@ (8019e9c <RadioIrqProcess+0x2ec>)
 8019c92:	f002 fe41 	bl	801c918 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8019c96:	2000      	movs	r0, #0
 8019c98:	f000 ff2c 	bl	801aaf4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8019c9c:	f001 ff26 	bl	801baec <RFW_Is_LongPacketModeEnabled>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	d101      	bne.n	8019caa <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8019ca6:	f001 ff4a 	bl	801bb3e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8019caa:	4b7d      	ldr	r3, [pc, #500]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f000 8149 	beq.w	8019f46 <RadioIrqProcess+0x396>
 8019cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	f000 8143 	beq.w	8019f46 <RadioIrqProcess+0x396>
            RadioEvents->TxDone( );
 8019cc0:	4b77      	ldr	r3, [pc, #476]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4798      	blx	r3
        break;
 8019cc8:	e13d      	b.n	8019f46 <RadioIrqProcess+0x396>
        TimerStop( &RxTimeoutTimer );
 8019cca:	4876      	ldr	r0, [pc, #472]	@ (8019ea4 <RadioIrqProcess+0x2f4>)
 8019ccc:	f002 fe24 	bl	801c918 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019cd0:	4b71      	ldr	r3, [pc, #452]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019cd2:	785b      	ldrb	r3, [r3, #1]
 8019cd4:	f083 0301 	eor.w	r3, r3, #1
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d014      	beq.n	8019d08 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8019cde:	2000      	movs	r0, #0
 8019ce0:	f000 ff08 	bl	801aaf4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	f640 1002 	movw	r0, #2306	@ 0x902
 8019cea:	f001 fc1b 	bl	801b524 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8019cee:	f640 1044 	movw	r0, #2372	@ 0x944
 8019cf2:	f001 fc2b 	bl	801b54c <SUBGRF_ReadRegister>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	f043 0302 	orr.w	r3, r3, #2
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	4619      	mov	r1, r3
 8019d00:	f640 1044 	movw	r0, #2372	@ 0x944
 8019d04:	f001 fc0e 	bl	801b524 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8019d08:	1dfb      	adds	r3, r7, #7
 8019d0a:	22ff      	movs	r2, #255	@ 0xff
 8019d0c:	4619      	mov	r1, r3
 8019d0e:	4866      	ldr	r0, [pc, #408]	@ (8019ea8 <RadioIrqProcess+0x2f8>)
 8019d10:	f000 fdc0 	bl	801a894 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8019d14:	4865      	ldr	r0, [pc, #404]	@ (8019eac <RadioIrqProcess+0x2fc>)
 8019d16:	f001 fbb3 	bl	801b480 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8019d1a:	4b61      	ldr	r3, [pc, #388]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	f000 8113 	beq.w	8019f4a <RadioIrqProcess+0x39a>
 8019d24:	4b5e      	ldr	r3, [pc, #376]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	689b      	ldr	r3, [r3, #8]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	f000 810d 	beq.w	8019f4a <RadioIrqProcess+0x39a>
            switch ( SubgRf.PacketStatus.packetType )
 8019d30:	4b59      	ldr	r3, [pc, #356]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019d32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019d36:	2b01      	cmp	r3, #1
 8019d38:	d10e      	bne.n	8019d58 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8019d3a:	4b59      	ldr	r3, [pc, #356]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	689c      	ldr	r4, [r3, #8]
 8019d40:	79fb      	ldrb	r3, [r7, #7]
 8019d42:	4619      	mov	r1, r3
 8019d44:	4b54      	ldr	r3, [pc, #336]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019d46:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	4b52      	ldr	r3, [pc, #328]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019d4e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8019d52:	4855      	ldr	r0, [pc, #340]	@ (8019ea8 <RadioIrqProcess+0x2f8>)
 8019d54:	47a0      	blx	r4
                break;
 8019d56:	e01d      	b.n	8019d94 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019d58:	4b4f      	ldr	r3, [pc, #316]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d5c:	463a      	mov	r2, r7
 8019d5e:	4611      	mov	r1, r2
 8019d60:	4618      	mov	r0, r3
 8019d62:	f001 fe11 	bl	801b988 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019d66:	4b4e      	ldr	r3, [pc, #312]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	689c      	ldr	r4, [r3, #8]
 8019d6c:	79fb      	ldrb	r3, [r7, #7]
 8019d6e:	4619      	mov	r1, r3
 8019d70:	4b49      	ldr	r3, [pc, #292]	@ (8019e98 <RadioIrqProcess+0x2e8>)
 8019d72:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8019d76:	4618      	mov	r0, r3
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8019d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8019eb0 <RadioIrqProcess+0x300>)
 8019d80:	fb82 5203 	smull	r5, r2, r2, r3
 8019d84:	1192      	asrs	r2, r2, #6
 8019d86:	17db      	asrs	r3, r3, #31
 8019d88:	1ad3      	subs	r3, r2, r3
 8019d8a:	b25b      	sxtb	r3, r3
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	4846      	ldr	r0, [pc, #280]	@ (8019ea8 <RadioIrqProcess+0x2f8>)
 8019d90:	47a0      	blx	r4
                break;
 8019d92:	bf00      	nop
        break;
 8019d94:	e0d9      	b.n	8019f4a <RadioIrqProcess+0x39a>
        SUBGRF_SetStandby( STDBY_RC );
 8019d96:	2000      	movs	r0, #0
 8019d98:	f000 feac 	bl	801aaf4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019d9c:	4b40      	ldr	r3, [pc, #256]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	f000 80d4 	beq.w	8019f4e <RadioIrqProcess+0x39e>
 8019da6:	4b3e      	ldr	r3, [pc, #248]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	699b      	ldr	r3, [r3, #24]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	f000 80ce 	beq.w	8019f4e <RadioIrqProcess+0x39e>
            RadioEvents->CadDone( false );
 8019db2:	4b3b      	ldr	r3, [pc, #236]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	699b      	ldr	r3, [r3, #24]
 8019db8:	2000      	movs	r0, #0
 8019dba:	4798      	blx	r3
        break;
 8019dbc:	e0c7      	b.n	8019f4e <RadioIrqProcess+0x39e>
        SUBGRF_SetStandby( STDBY_RC );
 8019dbe:	2000      	movs	r0, #0
 8019dc0:	f000 fe98 	bl	801aaf4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019dc4:	4b36      	ldr	r3, [pc, #216]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	f000 80c2 	beq.w	8019f52 <RadioIrqProcess+0x3a2>
 8019dce:	4b34      	ldr	r3, [pc, #208]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	699b      	ldr	r3, [r3, #24]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	f000 80bc 	beq.w	8019f52 <RadioIrqProcess+0x3a2>
            RadioEvents->CadDone( true );
 8019dda:	4b31      	ldr	r3, [pc, #196]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	699b      	ldr	r3, [r3, #24]
 8019de0:	2001      	movs	r0, #1
 8019de2:	4798      	blx	r3
        break;
 8019de4:	e0b5      	b.n	8019f52 <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019de6:	4b33      	ldr	r3, [pc, #204]	@ (8019eb4 <RadioIrqProcess+0x304>)
 8019de8:	2201      	movs	r2, #1
 8019dea:	2100      	movs	r1, #0
 8019dec:	2002      	movs	r0, #2
 8019dee:	f001 feeb 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8019df2:	f000 fd35 	bl	801a860 <SUBGRF_GetOperatingMode>
 8019df6:	4603      	mov	r3, r0
 8019df8:	2b04      	cmp	r3, #4
 8019dfa:	d115      	bne.n	8019e28 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8019dfc:	4827      	ldr	r0, [pc, #156]	@ (8019e9c <RadioIrqProcess+0x2ec>)
 8019dfe:	f002 fd8b 	bl	801c918 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019e02:	2000      	movs	r0, #0
 8019e04:	f000 fe76 	bl	801aaf4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019e08:	4b25      	ldr	r3, [pc, #148]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	f000 80a2 	beq.w	8019f56 <RadioIrqProcess+0x3a6>
 8019e12:	4b23      	ldr	r3, [pc, #140]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	685b      	ldr	r3, [r3, #4]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	f000 809c 	beq.w	8019f56 <RadioIrqProcess+0x3a6>
                RadioEvents->TxTimeout( );
 8019e1e:	4b20      	ldr	r3, [pc, #128]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	4798      	blx	r3
        break;
 8019e26:	e096      	b.n	8019f56 <RadioIrqProcess+0x3a6>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8019e28:	f000 fd1a 	bl	801a860 <SUBGRF_GetOperatingMode>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	2b05      	cmp	r3, #5
 8019e30:	f040 8091 	bne.w	8019f56 <RadioIrqProcess+0x3a6>
            TimerStop( &RxTimeoutTimer );
 8019e34:	481b      	ldr	r0, [pc, #108]	@ (8019ea4 <RadioIrqProcess+0x2f4>)
 8019e36:	f002 fd6f 	bl	801c918 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	f000 fe5a 	bl	801aaf4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019e40:	4b17      	ldr	r3, [pc, #92]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f000 8086 	beq.w	8019f56 <RadioIrqProcess+0x3a6>
 8019e4a:	4b15      	ldr	r3, [pc, #84]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	f000 8080 	beq.w	8019f56 <RadioIrqProcess+0x3a6>
                RadioEvents->RxTimeout( );
 8019e56:	4b12      	ldr	r3, [pc, #72]	@ (8019ea0 <RadioIrqProcess+0x2f0>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	4798      	blx	r3
        break;
 8019e5e:	e07a      	b.n	8019f56 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019e60:	4b15      	ldr	r3, [pc, #84]	@ (8019eb8 <RadioIrqProcess+0x308>)
 8019e62:	2201      	movs	r2, #1
 8019e64:	2100      	movs	r1, #0
 8019e66:	2002      	movs	r0, #2
 8019e68:	f001 feae 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019e6c:	e07a      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019e6e:	4b13      	ldr	r3, [pc, #76]	@ (8019ebc <RadioIrqProcess+0x30c>)
 8019e70:	2201      	movs	r2, #1
 8019e72:	2100      	movs	r1, #0
 8019e74:	2002      	movs	r0, #2
 8019e76:	f001 fea7 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8019e7a:	f001 fe30 	bl	801bade <RFW_Is_Init>
 8019e7e:	4603      	mov	r3, r0
 8019e80:	2b01      	cmp	r3, #1
 8019e82:	d16a      	bne.n	8019f5a <RadioIrqProcess+0x3aa>
            RFW_ReceivePayload( );
 8019e84:	f001 fe61 	bl	801bb4a <RFW_ReceivePayload>
        break;
 8019e88:	e067      	b.n	8019f5a <RadioIrqProcess+0x3aa>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8019e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8019ec0 <RadioIrqProcess+0x310>)
 8019e8c:	2201      	movs	r2, #1
 8019e8e:	2100      	movs	r1, #0
 8019e90:	2002      	movs	r0, #2
 8019e92:	f001 fe99 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019e96:	e065      	b.n	8019f64 <RadioIrqProcess+0x3b4>
 8019e98:	20003d9c 	.word	0x20003d9c
 8019e9c:	20003df4 	.word	0x20003df4
 8019ea0:	20003d98 	.word	0x20003d98
 8019ea4:	20003e0c 	.word	0x20003e0c
 8019ea8:	20003c98 	.word	0x20003c98
 8019eac:	20003dc0 	.word	0x20003dc0
 8019eb0:	10624dd3 	.word	0x10624dd3
 8019eb4:	0801da78 	.word	0x0801da78
 8019eb8:	0801da8c 	.word	0x0801da8c
 8019ebc:	0801da98 	.word	0x0801da98
 8019ec0:	0801daa4 	.word	0x0801daa4
        TimerStop( &RxTimeoutTimer );
 8019ec4:	4829      	ldr	r0, [pc, #164]	@ (8019f6c <RadioIrqProcess+0x3bc>)
 8019ec6:	f002 fd27 	bl	801c918 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019eca:	4b29      	ldr	r3, [pc, #164]	@ (8019f70 <RadioIrqProcess+0x3c0>)
 8019ecc:	785b      	ldrb	r3, [r3, #1]
 8019ece:	f083 0301 	eor.w	r3, r3, #1
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d002      	beq.n	8019ede <RadioIrqProcess+0x32e>
            SUBGRF_SetStandby( STDBY_RC );
 8019ed8:	2000      	movs	r0, #0
 8019eda:	f000 fe0b 	bl	801aaf4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019ede:	4b25      	ldr	r3, [pc, #148]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d03b      	beq.n	8019f5e <RadioIrqProcess+0x3ae>
 8019ee6:	4b23      	ldr	r3, [pc, #140]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	68db      	ldr	r3, [r3, #12]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d036      	beq.n	8019f5e <RadioIrqProcess+0x3ae>
            RadioEvents->RxTimeout( );
 8019ef0:	4b20      	ldr	r3, [pc, #128]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	68db      	ldr	r3, [r3, #12]
 8019ef6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8019ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8019f78 <RadioIrqProcess+0x3c8>)
 8019efa:	2201      	movs	r2, #1
 8019efc:	2100      	movs	r1, #0
 8019efe:	2002      	movs	r0, #2
 8019f00:	f001 fe62 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019f04:	e02b      	b.n	8019f5e <RadioIrqProcess+0x3ae>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8019f06:	4b1d      	ldr	r3, [pc, #116]	@ (8019f7c <RadioIrqProcess+0x3cc>)
 8019f08:	2201      	movs	r2, #1
 8019f0a:	2100      	movs	r1, #0
 8019f0c:	2002      	movs	r0, #2
 8019f0e:	f001 fe5b 	bl	801bbc8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019f12:	4b17      	ldr	r3, [pc, #92]	@ (8019f70 <RadioIrqProcess+0x3c0>)
 8019f14:	785b      	ldrb	r3, [r3, #1]
 8019f16:	f083 0301 	eor.w	r3, r3, #1
 8019f1a:	b2db      	uxtb	r3, r3
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d002      	beq.n	8019f26 <RadioIrqProcess+0x376>
            SUBGRF_SetStandby( STDBY_RC );
 8019f20:	2000      	movs	r0, #0
 8019f22:	f000 fde7 	bl	801aaf4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8019f26:	4b13      	ldr	r3, [pc, #76]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d019      	beq.n	8019f62 <RadioIrqProcess+0x3b2>
 8019f2e:	4b11      	ldr	r3, [pc, #68]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	691b      	ldr	r3, [r3, #16]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d014      	beq.n	8019f62 <RadioIrqProcess+0x3b2>
            RadioEvents->RxError( );
 8019f38:	4b0e      	ldr	r3, [pc, #56]	@ (8019f74 <RadioIrqProcess+0x3c4>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	691b      	ldr	r3, [r3, #16]
 8019f3e:	4798      	blx	r3
        break;
 8019f40:	e00f      	b.n	8019f62 <RadioIrqProcess+0x3b2>
        break;
 8019f42:	bf00      	nop
 8019f44:	e00e      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f46:	bf00      	nop
 8019f48:	e00c      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f4a:	bf00      	nop
 8019f4c:	e00a      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f4e:	bf00      	nop
 8019f50:	e008      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f52:	bf00      	nop
 8019f54:	e006      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f56:	bf00      	nop
 8019f58:	e004      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f5a:	bf00      	nop
 8019f5c:	e002      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f5e:	bf00      	nop
 8019f60:	e000      	b.n	8019f64 <RadioIrqProcess+0x3b4>
        break;
 8019f62:	bf00      	nop
  }
}
 8019f64:	bf00      	nop
 8019f66:	3708      	adds	r7, #8
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f6c:	20003e0c 	.word	0x20003e0c
 8019f70:	20003d9c 	.word	0x20003d9c
 8019f74:	20003d98 	.word	0x20003d98
 8019f78:	0801dab0 	.word	0x0801dab0
 8019f7c:	0801dabc 	.word	0x0801dabc

08019f80 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019f84:	4b09      	ldr	r3, [pc, #36]	@ (8019fac <RadioTxPrbs+0x2c>)
 8019f86:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019f8a:	2101      	movs	r1, #1
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f001 fbbd 	bl	801b70c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8019f92:	4b07      	ldr	r3, [pc, #28]	@ (8019fb0 <RadioTxPrbs+0x30>)
 8019f94:	212d      	movs	r1, #45	@ 0x2d
 8019f96:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019f9a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019f9c:	f000 fe6d 	bl	801ac7a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8019fa0:	4804      	ldr	r0, [pc, #16]	@ (8019fb4 <RadioTxPrbs+0x34>)
 8019fa2:	f000 fdc3 	bl	801ab2c <SUBGRF_SetTx>
}
 8019fa6:	bf00      	nop
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	20003d9c 	.word	0x20003d9c
 8019fb0:	080199c1 	.word	0x080199c1
 8019fb4:	000fffff 	.word	0x000fffff

08019fb8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b084      	sub	sp, #16
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8019fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f001 fbc8 	bl	801b75c <SUBGRF_SetRfTxPower>
 8019fcc:	4603      	mov	r3, r0
 8019fce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8019fd0:	7bfb      	ldrb	r3, [r7, #15]
 8019fd2:	2101      	movs	r1, #1
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	f001 fb99 	bl	801b70c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019fda:	f000 fe45 	bl	801ac68 <SUBGRF_SetTxContinuousWave>
}
 8019fde:	bf00      	nop
 8019fe0:	3710      	adds	r7, #16
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}

08019fe6 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019fe6:	b480      	push	{r7}
 8019fe8:	b089      	sub	sp, #36	@ 0x24
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	60f8      	str	r0, [r7, #12]
 8019fee:	60b9      	str	r1, [r7, #8]
 8019ff0:	4613      	mov	r3, r2
 8019ff2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	61bb      	str	r3, [r7, #24]
 801a000:	e011      	b.n	801a026 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a002:	69bb      	ldr	r3, [r7, #24]
 801a004:	68ba      	ldr	r2, [r7, #8]
 801a006:	4413      	add	r3, r2
 801a008:	781a      	ldrb	r2, [r3, #0]
 801a00a:	69bb      	ldr	r3, [r7, #24]
 801a00c:	68b9      	ldr	r1, [r7, #8]
 801a00e:	440b      	add	r3, r1
 801a010:	43d2      	mvns	r2, r2
 801a012:	b2d2      	uxtb	r2, r2
 801a014:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a016:	69bb      	ldr	r3, [r7, #24]
 801a018:	68fa      	ldr	r2, [r7, #12]
 801a01a:	4413      	add	r3, r2
 801a01c:	2200      	movs	r2, #0
 801a01e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801a020:	69bb      	ldr	r3, [r7, #24]
 801a022:	3301      	adds	r3, #1
 801a024:	61bb      	str	r3, [r7, #24]
 801a026:	79fb      	ldrb	r3, [r7, #7]
 801a028:	69ba      	ldr	r2, [r7, #24]
 801a02a:	429a      	cmp	r2, r3
 801a02c:	dbe9      	blt.n	801a002 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801a02e:	2300      	movs	r3, #0
 801a030:	61bb      	str	r3, [r7, #24]
 801a032:	e049      	b.n	801a0c8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a034:	69bb      	ldr	r3, [r7, #24]
 801a036:	425a      	negs	r2, r3
 801a038:	f003 0307 	and.w	r3, r3, #7
 801a03c:	f002 0207 	and.w	r2, r2, #7
 801a040:	bf58      	it	pl
 801a042:	4253      	negpl	r3, r2
 801a044:	b2db      	uxtb	r3, r3
 801a046:	f1c3 0307 	rsb	r3, r3, #7
 801a04a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a04c:	69bb      	ldr	r3, [r7, #24]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	da00      	bge.n	801a054 <payload_integration+0x6e>
 801a052:	3307      	adds	r3, #7
 801a054:	10db      	asrs	r3, r3, #3
 801a056:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a058:	69bb      	ldr	r3, [r7, #24]
 801a05a:	3301      	adds	r3, #1
 801a05c:	425a      	negs	r2, r3
 801a05e:	f003 0307 	and.w	r3, r3, #7
 801a062:	f002 0207 	and.w	r2, r2, #7
 801a066:	bf58      	it	pl
 801a068:	4253      	negpl	r3, r2
 801a06a:	b2db      	uxtb	r3, r3
 801a06c:	f1c3 0307 	rsb	r3, r3, #7
 801a070:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a072:	69bb      	ldr	r3, [r7, #24]
 801a074:	3301      	adds	r3, #1
 801a076:	2b00      	cmp	r3, #0
 801a078:	da00      	bge.n	801a07c <payload_integration+0x96>
 801a07a:	3307      	adds	r3, #7
 801a07c:	10db      	asrs	r3, r3, #3
 801a07e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a080:	7dbb      	ldrb	r3, [r7, #22]
 801a082:	68ba      	ldr	r2, [r7, #8]
 801a084:	4413      	add	r3, r2
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	461a      	mov	r2, r3
 801a08a:	7dfb      	ldrb	r3, [r7, #23]
 801a08c:	fa42 f303 	asr.w	r3, r2, r3
 801a090:	b2db      	uxtb	r3, r3
 801a092:	f003 0301 	and.w	r3, r3, #1
 801a096:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a098:	7ffa      	ldrb	r2, [r7, #31]
 801a09a:	7cfb      	ldrb	r3, [r7, #19]
 801a09c:	4053      	eors	r3, r2
 801a09e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a0a0:	7d3b      	ldrb	r3, [r7, #20]
 801a0a2:	68fa      	ldr	r2, [r7, #12]
 801a0a4:	4413      	add	r3, r2
 801a0a6:	781b      	ldrb	r3, [r3, #0]
 801a0a8:	b25a      	sxtb	r2, r3
 801a0aa:	7ff9      	ldrb	r1, [r7, #31]
 801a0ac:	7d7b      	ldrb	r3, [r7, #21]
 801a0ae:	fa01 f303 	lsl.w	r3, r1, r3
 801a0b2:	b25b      	sxtb	r3, r3
 801a0b4:	4313      	orrs	r3, r2
 801a0b6:	b259      	sxtb	r1, r3
 801a0b8:	7d3b      	ldrb	r3, [r7, #20]
 801a0ba:	68fa      	ldr	r2, [r7, #12]
 801a0bc:	4413      	add	r3, r2
 801a0be:	b2ca      	uxtb	r2, r1
 801a0c0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801a0c2:	69bb      	ldr	r3, [r7, #24]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	61bb      	str	r3, [r7, #24]
 801a0c8:	79fb      	ldrb	r3, [r7, #7]
 801a0ca:	00db      	lsls	r3, r3, #3
 801a0cc:	69ba      	ldr	r2, [r7, #24]
 801a0ce:	429a      	cmp	r2, r3
 801a0d0:	dbb0      	blt.n	801a034 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a0d2:	7ffb      	ldrb	r3, [r7, #31]
 801a0d4:	01db      	lsls	r3, r3, #7
 801a0d6:	b25a      	sxtb	r2, r3
 801a0d8:	7ffb      	ldrb	r3, [r7, #31]
 801a0da:	019b      	lsls	r3, r3, #6
 801a0dc:	b25b      	sxtb	r3, r3
 801a0de:	4313      	orrs	r3, r2
 801a0e0:	b25b      	sxtb	r3, r3
 801a0e2:	7ffa      	ldrb	r2, [r7, #31]
 801a0e4:	2a00      	cmp	r2, #0
 801a0e6:	d101      	bne.n	801a0ec <payload_integration+0x106>
 801a0e8:	2220      	movs	r2, #32
 801a0ea:	e000      	b.n	801a0ee <payload_integration+0x108>
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	4313      	orrs	r3, r2
 801a0f0:	b259      	sxtb	r1, r3
 801a0f2:	79fb      	ldrb	r3, [r7, #7]
 801a0f4:	68fa      	ldr	r2, [r7, #12]
 801a0f6:	4413      	add	r3, r2
 801a0f8:	b2ca      	uxtb	r2, r1
 801a0fa:	701a      	strb	r2, [r3, #0]
}
 801a0fc:	bf00      	nop
 801a0fe:	3724      	adds	r7, #36	@ 0x24
 801a100:	46bd      	mov	sp, r7
 801a102:	bc80      	pop	{r7}
 801a104:	4770      	bx	lr
	...

0801a108 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b08c      	sub	sp, #48	@ 0x30
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	60b9      	str	r1, [r7, #8]
 801a110:	607a      	str	r2, [r7, #4]
 801a112:	603b      	str	r3, [r7, #0]
 801a114:	4603      	mov	r3, r0
 801a116:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801a118:	2300      	movs	r3, #0
 801a11a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t syncword[8] = {0};
 801a11c:	2300      	movs	r3, #0
 801a11e:	61fb      	str	r3, [r7, #28]
 801a120:	2300      	movs	r3, #0
 801a122:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a124:	f001 fcd5 	bl	801bad2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d001      	beq.n	801a132 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a12e:	2300      	movs	r3, #0
 801a130:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2b00      	cmp	r3, #0
 801a136:	bf14      	ite	ne
 801a138:	2301      	movne	r3, #1
 801a13a:	2300      	moveq	r3, #0
 801a13c:	b2da      	uxtb	r2, r3
 801a13e:	4b9f      	ldr	r3, [pc, #636]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a140:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a142:	7bfb      	ldrb	r3, [r7, #15]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d003      	beq.n	801a150 <RadioSetRxGenericConfig+0x48>
 801a148:	2b01      	cmp	r3, #1
 801a14a:	f000 80e8 	beq.w	801a31e <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a14e:	e1a0      	b.n	801a492 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d003      	beq.n	801a160 <RadioSetRxGenericConfig+0x58>
 801a158:	68bb      	ldr	r3, [r7, #8]
 801a15a:	691b      	ldr	r3, [r3, #16]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d102      	bne.n	801a166 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a164:	e196      	b.n	801a494 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801a166:	68bb      	ldr	r3, [r7, #8]
 801a168:	7d5b      	ldrb	r3, [r3, #21]
 801a16a:	2b08      	cmp	r3, #8
 801a16c:	d902      	bls.n	801a174 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a16e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a172:	e18f      	b.n	801a494 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a174:	2300      	movs	r3, #0
 801a176:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a178:	e00d      	b.n	801a196 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801a17a:	68bb      	ldr	r3, [r7, #8]
 801a17c:	699a      	ldr	r2, [r3, #24]
 801a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a180:	4413      	add	r3, r2
 801a182:	7819      	ldrb	r1, [r3, #0]
 801a184:	f107 021c 	add.w	r2, r7, #28
 801a188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a18a:	4413      	add	r3, r2
 801a18c:	460a      	mov	r2, r1
 801a18e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a192:	3301      	adds	r3, #1
 801a194:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	7d5b      	ldrb	r3, [r3, #21]
 801a19a:	461a      	mov	r2, r3
 801a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a19e:	4293      	cmp	r3, r2
 801a1a0:	dbeb      	blt.n	801a17a <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a1a2:	68bb      	ldr	r3, [r7, #8]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	bf14      	ite	ne
 801a1aa:	2301      	movne	r3, #1
 801a1ac:	2300      	moveq	r3, #0
 801a1ae:	b2db      	uxtb	r3, r3
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f000 fd6b 	bl	801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a1b6:	4b81      	ldr	r3, [pc, #516]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	68db      	ldr	r3, [r3, #12]
 801a1c2:	4a7e      	ldr	r2, [pc, #504]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a1c6:	68bb      	ldr	r3, [r7, #8]
 801a1c8:	791a      	ldrb	r2, [r3, #4]
 801a1ca:	4b7c      	ldr	r3, [pc, #496]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	689b      	ldr	r3, [r3, #8]
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f001 fbaf 	bl	801b938 <SUBGRF_GetFskBandwidthRegValue>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	461a      	mov	r2, r3
 801a1de:	4b77      	ldr	r3, [pc, #476]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a1e4:	4b75      	ldr	r3, [pc, #468]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	691b      	ldr	r3, [r3, #16]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	00db      	lsls	r3, r3, #3
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	4b71      	ldr	r3, [pc, #452]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1f6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	7d1a      	ldrb	r2, [r3, #20]
 801a1fc:	4b6f      	ldr	r3, [pc, #444]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a1fe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	7d5b      	ldrb	r3, [r3, #21]
 801a204:	00db      	lsls	r3, r3, #3
 801a206:	b2da      	uxtb	r2, r3
 801a208:	4b6c      	ldr	r3, [pc, #432]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a20a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a212:	4b6a      	ldr	r3, [pc, #424]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a214:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a216:	68bb      	ldr	r3, [r7, #8]
 801a218:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d105      	bne.n	801a22c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	69db      	ldr	r3, [r3, #28]
 801a224:	b2da      	uxtb	r2, r3
 801a226:	4b65      	ldr	r3, [pc, #404]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a228:	759a      	strb	r2, [r3, #22]
 801a22a:	e00b      	b.n	801a244 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a232:	2b02      	cmp	r3, #2
 801a234:	d103      	bne.n	801a23e <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a236:	4b61      	ldr	r3, [pc, #388]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a238:	22ff      	movs	r2, #255	@ 0xff
 801a23a:	759a      	strb	r2, [r3, #22]
 801a23c:	e002      	b.n	801a244 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a23e:	4b5f      	ldr	r3, [pc, #380]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a240:	22ff      	movs	r2, #255	@ 0xff
 801a242:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 801a24a:	2b02      	cmp	r3, #2
 801a24c:	d004      	beq.n	801a258 <RadioSetRxGenericConfig+0x150>
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801a254:	2b02      	cmp	r3, #2
 801a256:	d12d      	bne.n	801a2b4 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a25e:	2bf1      	cmp	r3, #241	@ 0xf1
 801a260:	d00c      	beq.n	801a27c <RadioSetRxGenericConfig+0x174>
 801a262:	68bb      	ldr	r3, [r7, #8]
 801a264:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a268:	2bf2      	cmp	r3, #242	@ 0xf2
 801a26a:	d007      	beq.n	801a27c <RadioSetRxGenericConfig+0x174>
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a272:	2b01      	cmp	r3, #1
 801a274:	d002      	beq.n	801a27c <RadioSetRxGenericConfig+0x174>
            return -1;
 801a276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a27a:	e10b      	b.n	801a494 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801a27c:	2300      	movs	r3, #0
 801a27e:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801a280:	68bb      	ldr	r3, [r7, #8]
 801a282:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a284:	4b4e      	ldr	r3, [pc, #312]	@ (801a3c0 <RadioSetRxGenericConfig+0x2b8>)
 801a286:	6819      	ldr	r1, [r3, #0]
 801a288:	f107 0310 	add.w	r3, r7, #16
 801a28c:	4a4d      	ldr	r2, [pc, #308]	@ (801a3c4 <RadioSetRxGenericConfig+0x2bc>)
 801a28e:	4618      	mov	r0, r3
 801a290:	f001 fc12 	bl	801bab8 <RFW_Init>
 801a294:	4603      	mov	r3, r0
 801a296:	2b00      	cmp	r3, #0
 801a298:	d002      	beq.n	801a2a0 <RadioSetRxGenericConfig+0x198>
            return -1;
 801a29a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a29e:	e0f9      	b.n	801a494 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a2a0:	4b46      	ldr	r3, [pc, #280]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a2a6:	4b45      	ldr	r3, [pc, #276]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2a8:	2201      	movs	r2, #1
 801a2aa:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a2ac:	4b43      	ldr	r3, [pc, #268]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	755a      	strb	r2, [r3, #21]
        {
 801a2b2:	e00e      	b.n	801a2d2 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a2ba:	4b40      	ldr	r3, [pc, #256]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2bc:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a2be:	68bb      	ldr	r3, [r7, #8]
 801a2c0:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a2c4:	4b3d      	ldr	r3, [pc, #244]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2c6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a2c8:	68bb      	ldr	r3, [r7, #8]
 801a2ca:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a2ce:	4b3b      	ldr	r3, [pc, #236]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a2d0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a2d2:	f7ff fa90 	bl	80197f6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a2d6:	2000      	movs	r0, #0
 801a2d8:	f7fe fc22 	bl	8018b20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a2dc:	483a      	ldr	r0, [pc, #232]	@ (801a3c8 <RadioSetRxGenericConfig+0x2c0>)
 801a2de:	f000 ff07 	bl	801b0f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2e2:	483a      	ldr	r0, [pc, #232]	@ (801a3cc <RadioSetRxGenericConfig+0x2c4>)
 801a2e4:	f000 ffd6 	bl	801b294 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a2e8:	f107 031c 	add.w	r3, r7, #28
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f000 fb06 	bl	801a8fe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a2f2:	68bb      	ldr	r3, [r7, #8]
 801a2f4:	8c1b      	ldrh	r3, [r3, #32]
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f000 fb50 	bl	801a99c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a2fc:	68bb      	ldr	r3, [r7, #8]
 801a2fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801a300:	4618      	mov	r0, r3
 801a302:	f000 fb2b 	bl	801a95c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a30c:	fb03 f202 	mul.w	r2, r3, r2
 801a310:	68bb      	ldr	r3, [r7, #8]
 801a312:	68db      	ldr	r3, [r3, #12]
 801a314:	fbb2 f3f3 	udiv	r3, r2, r3
 801a318:	4a28      	ldr	r2, [pc, #160]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a31a:	6093      	str	r3, [r2, #8]
        break;
 801a31c:	e0b9      	b.n	801a492 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801a31e:	68bb      	ldr	r3, [r7, #8]
 801a320:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801a322:	2b00      	cmp	r3, #0
 801a324:	d102      	bne.n	801a32c <RadioSetRxGenericConfig+0x224>
            return -1;
 801a326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a32a:	e0b3      	b.n	801a494 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801a332:	2b01      	cmp	r3, #1
 801a334:	d104      	bne.n	801a340 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a336:	68bb      	ldr	r3, [r7, #8]
 801a338:	69db      	ldr	r3, [r3, #28]
 801a33a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801a33e:	e002      	b.n	801a346 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801a340:	23ff      	movs	r3, #255	@ 0xff
 801a342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	bf14      	ite	ne
 801a34e:	2301      	movne	r3, #1
 801a350:	2300      	moveq	r3, #0
 801a352:	b2db      	uxtb	r3, r3
 801a354:	4618      	mov	r0, r3
 801a356:	f000 fc99 	bl	801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	b2db      	uxtb	r3, r3
 801a35e:	4618      	mov	r0, r3
 801a360:	f000 fca3 	bl	801acaa <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a364:	4b15      	ldr	r3, [pc, #84]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a366:	2201      	movs	r2, #1
 801a368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a36c:	68bb      	ldr	r3, [r7, #8]
 801a36e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a372:	4b12      	ldr	r3, [pc, #72]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a374:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 801a37e:	4b0f      	ldr	r3, [pc, #60]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a384:	68bb      	ldr	r3, [r7, #8]
 801a386:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801a38a:	4b0c      	ldr	r3, [pc, #48]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a38c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801a396:	2b02      	cmp	r3, #2
 801a398:	d01a      	beq.n	801a3d0 <RadioSetRxGenericConfig+0x2c8>
 801a39a:	2b02      	cmp	r3, #2
 801a39c:	dc2c      	bgt.n	801a3f8 <RadioSetRxGenericConfig+0x2f0>
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d002      	beq.n	801a3a8 <RadioSetRxGenericConfig+0x2a0>
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d005      	beq.n	801a3b2 <RadioSetRxGenericConfig+0x2aa>
            break;
 801a3a6:	e027      	b.n	801a3f8 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a3a8:	4b04      	ldr	r3, [pc, #16]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a3b0:	e023      	b.n	801a3fa <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a3b2:	4b02      	ldr	r3, [pc, #8]	@ (801a3bc <RadioSetRxGenericConfig+0x2b4>)
 801a3b4:	2201      	movs	r2, #1
 801a3b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a3ba:	e01e      	b.n	801a3fa <RadioSetRxGenericConfig+0x2f2>
 801a3bc:	20003d9c 	.word	0x20003d9c
 801a3c0:	20003d98 	.word	0x20003d98
 801a3c4:	20003e0c 	.word	0x20003e0c
 801a3c8:	20003dd4 	.word	0x20003dd4
 801a3cc:	20003daa 	.word	0x20003daa
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a3d6:	2b0b      	cmp	r3, #11
 801a3d8:	d004      	beq.n	801a3e4 <RadioSetRxGenericConfig+0x2dc>
 801a3da:	68bb      	ldr	r3, [r7, #8]
 801a3dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a3e0:	2b0c      	cmp	r3, #12
 801a3e2:	d104      	bne.n	801a3ee <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a3e4:	4b2d      	ldr	r3, [pc, #180]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a3e6:	2201      	movs	r2, #1
 801a3e8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a3ec:	e005      	b.n	801a3fa <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a3ee:	4b2b      	ldr	r3, [pc, #172]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a3f6:	e000      	b.n	801a3fa <RadioSetRxGenericConfig+0x2f2>
            break;
 801a3f8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a3fa:	4b28      	ldr	r3, [pc, #160]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a3fc:	2201      	movs	r2, #1
 801a3fe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 801a404:	4b25      	ldr	r3, [pc, #148]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a406:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 801a40e:	4b23      	ldr	r3, [pc, #140]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a410:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a412:	4a22      	ldr	r2, [pc, #136]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a418:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 801a420:	4b1e      	ldr	r3, [pc, #120]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a422:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 801a42c:	4b1b      	ldr	r3, [pc, #108]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a42e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a432:	f7ff f9e0 	bl	80197f6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a436:	2001      	movs	r0, #1
 801a438:	f7fe fb72 	bl	8018b20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a43c:	4818      	ldr	r0, [pc, #96]	@ (801a4a0 <RadioSetRxGenericConfig+0x398>)
 801a43e:	f000 fe57 	bl	801b0f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a442:	4818      	ldr	r0, [pc, #96]	@ (801a4a4 <RadioSetRxGenericConfig+0x39c>)
 801a444:	f000 ff26 	bl	801b294 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a448:	4b14      	ldr	r3, [pc, #80]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a44a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d10d      	bne.n	801a46e <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801a452:	f240 7036 	movw	r0, #1846	@ 0x736
 801a456:	f001 f879 	bl	801b54c <SUBGRF_ReadRegister>
 801a45a:	4603      	mov	r3, r0
 801a45c:	f023 0304 	bic.w	r3, r3, #4
 801a460:	b2db      	uxtb	r3, r3
 801a462:	4619      	mov	r1, r3
 801a464:	f240 7036 	movw	r0, #1846	@ 0x736
 801a468:	f001 f85c 	bl	801b524 <SUBGRF_WriteRegister>
 801a46c:	e00c      	b.n	801a488 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801a46e:	f240 7036 	movw	r0, #1846	@ 0x736
 801a472:	f001 f86b 	bl	801b54c <SUBGRF_ReadRegister>
 801a476:	4603      	mov	r3, r0
 801a478:	f043 0304 	orr.w	r3, r3, #4
 801a47c:	b2db      	uxtb	r3, r3
 801a47e:	4619      	mov	r1, r3
 801a480:	f240 7036 	movw	r0, #1846	@ 0x736
 801a484:	f001 f84e 	bl	801b524 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a488:	4b04      	ldr	r3, [pc, #16]	@ (801a49c <RadioSetRxGenericConfig+0x394>)
 801a48a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a48e:	609a      	str	r2, [r3, #8]
        break;
 801a490:	bf00      	nop
    }
    return status;
 801a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801a494:	4618      	mov	r0, r3
 801a496:	3730      	adds	r7, #48	@ 0x30
 801a498:	46bd      	mov	sp, r7
 801a49a:	bd80      	pop	{r7, pc}
 801a49c:	20003d9c 	.word	0x20003d9c
 801a4a0:	20003dd4 	.word	0x20003dd4
 801a4a4:	20003daa 	.word	0x20003daa

0801a4a8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b08a      	sub	sp, #40	@ 0x28
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	60b9      	str	r1, [r7, #8]
 801a4b0:	607b      	str	r3, [r7, #4]
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	73fb      	strb	r3, [r7, #15]
 801a4b6:	4613      	mov	r3, r2
 801a4b8:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	61fb      	str	r3, [r7, #28]
 801a4be:	2300      	movs	r3, #0
 801a4c0:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a4c2:	f001 fb06 	bl	801bad2 <RFW_DeInit>
    switch( modem )
 801a4c6:	7bfb      	ldrb	r3, [r7, #15]
 801a4c8:	2b02      	cmp	r3, #2
 801a4ca:	f000 8144 	beq.w	801a756 <RadioSetTxGenericConfig+0x2ae>
 801a4ce:	2b02      	cmp	r3, #2
 801a4d0:	f300 8160 	bgt.w	801a794 <RadioSetTxGenericConfig+0x2ec>
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d003      	beq.n	801a4e0 <RadioSetTxGenericConfig+0x38>
 801a4d8:	2b01      	cmp	r3, #1
 801a4da:	f000 80b7 	beq.w	801a64c <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801a4de:	e159      	b.n	801a794 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	689b      	ldr	r3, [r3, #8]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d003      	beq.n	801a4f0 <RadioSetTxGenericConfig+0x48>
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	691b      	ldr	r3, [r3, #16]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d102      	bne.n	801a4f6 <RadioSetTxGenericConfig+0x4e>
            return -1;
 801a4f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a4f4:	e163      	b.n	801a7be <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801a4f6:	68bb      	ldr	r3, [r7, #8]
 801a4f8:	7d1b      	ldrb	r3, [r3, #20]
 801a4fa:	2b08      	cmp	r3, #8
 801a4fc:	d902      	bls.n	801a504 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801a4fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a502:	e15c      	b.n	801a7be <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a504:	2300      	movs	r3, #0
 801a506:	627b      	str	r3, [r7, #36]	@ 0x24
 801a508:	e00d      	b.n	801a526 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801a50a:	68bb      	ldr	r3, [r7, #8]
 801a50c:	699a      	ldr	r2, [r3, #24]
 801a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a510:	4413      	add	r3, r2
 801a512:	7819      	ldrb	r1, [r3, #0]
 801a514:	f107 021c 	add.w	r2, r7, #28
 801a518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a51a:	4413      	add	r3, r2
 801a51c:	460a      	mov	r2, r1
 801a51e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a522:	3301      	adds	r3, #1
 801a524:	627b      	str	r3, [r7, #36]	@ 0x24
 801a526:	68bb      	ldr	r3, [r7, #8]
 801a528:	7d1b      	ldrb	r3, [r3, #20]
 801a52a:	461a      	mov	r2, r3
 801a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a52e:	4293      	cmp	r3, r2
 801a530:	dbeb      	blt.n	801a50a <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a532:	4ba5      	ldr	r3, [pc, #660]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a534:	2200      	movs	r2, #0
 801a536:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	689b      	ldr	r3, [r3, #8]
 801a53e:	4aa2      	ldr	r2, [pc, #648]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a540:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	781a      	ldrb	r2, [r3, #0]
 801a546:	4ba0      	ldr	r3, [pc, #640]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a54c:	68bb      	ldr	r3, [r7, #8]
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	4618      	mov	r0, r3
 801a552:	f001 f9f1 	bl	801b938 <SUBGRF_GetFskBandwidthRegValue>
 801a556:	4603      	mov	r3, r0
 801a558:	461a      	mov	r2, r3
 801a55a:	4b9b      	ldr	r3, [pc, #620]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a55c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	68db      	ldr	r3, [r3, #12]
 801a564:	4a98      	ldr	r2, [pc, #608]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a566:	6413      	str	r3, [r2, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a568:	4b97      	ldr	r3, [pc, #604]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a56a:	2200      	movs	r2, #0
 801a56c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	691b      	ldr	r3, [r3, #16]
 801a572:	b29b      	uxth	r3, r3
 801a574:	00db      	lsls	r3, r3, #3
 801a576:	b29a      	uxth	r2, r3
 801a578:	4b93      	ldr	r3, [pc, #588]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a57a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a57c:	4b92      	ldr	r3, [pc, #584]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a57e:	2204      	movs	r2, #4
 801a580:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a582:	68bb      	ldr	r3, [r7, #8]
 801a584:	7d1b      	ldrb	r3, [r3, #20]
 801a586:	00db      	lsls	r3, r3, #3
 801a588:	b2da      	uxtb	r2, r3
 801a58a:	4b8f      	ldr	r3, [pc, #572]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a58c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a58e:	4b8e      	ldr	r3, [pc, #568]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a590:	2200      	movs	r2, #0
 801a592:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801a59a:	2b02      	cmp	r3, #2
 801a59c:	d003      	beq.n	801a5a6 <RadioSetTxGenericConfig+0xfe>
 801a59e:	68bb      	ldr	r3, [r7, #8]
 801a5a0:	7f9b      	ldrb	r3, [r3, #30]
 801a5a2:	2b02      	cmp	r3, #2
 801a5a4:	d12a      	bne.n	801a5fc <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	7fdb      	ldrb	r3, [r3, #31]
 801a5aa:	2bf1      	cmp	r3, #241	@ 0xf1
 801a5ac:	d00a      	beq.n	801a5c4 <RadioSetTxGenericConfig+0x11c>
 801a5ae:	68bb      	ldr	r3, [r7, #8]
 801a5b0:	7fdb      	ldrb	r3, [r3, #31]
 801a5b2:	2bf2      	cmp	r3, #242	@ 0xf2
 801a5b4:	d006      	beq.n	801a5c4 <RadioSetTxGenericConfig+0x11c>
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	7fdb      	ldrb	r3, [r3, #31]
 801a5ba:	2b01      	cmp	r3, #1
 801a5bc:	d002      	beq.n	801a5c4 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801a5be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a5c2:	e0fc      	b.n	801a7be <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801a5c4:	2301      	movs	r3, #1
 801a5c6:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a5cc:	4b7f      	ldr	r3, [pc, #508]	@ (801a7cc <RadioSetTxGenericConfig+0x324>)
 801a5ce:	6819      	ldr	r1, [r3, #0]
 801a5d0:	f107 0310 	add.w	r3, r7, #16
 801a5d4:	4a7e      	ldr	r2, [pc, #504]	@ (801a7d0 <RadioSetTxGenericConfig+0x328>)
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f001 fa6e 	bl	801bab8 <RFW_Init>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d002      	beq.n	801a5e8 <RadioSetTxGenericConfig+0x140>
              return -1;
 801a5e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a5e6:	e0ea      	b.n	801a7be <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a5e8:	4b77      	ldr	r3, [pc, #476]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a5ee:	4b76      	ldr	r3, [pc, #472]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a5f0:	2201      	movs	r2, #1
 801a5f2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a5f4:	4b74      	ldr	r3, [pc, #464]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	755a      	strb	r2, [r3, #21]
        {
 801a5fa:	e00c      	b.n	801a616 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	7fda      	ldrb	r2, [r3, #31]
 801a600:	4b71      	ldr	r3, [pc, #452]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a602:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a60a:	4b6f      	ldr	r3, [pc, #444]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a60c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a60e:	68bb      	ldr	r3, [r7, #8]
 801a610:	7f9a      	ldrb	r2, [r3, #30]
 801a612:	4b6d      	ldr	r3, [pc, #436]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a614:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a616:	f7ff f8ee 	bl	80197f6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a61a:	2000      	movs	r0, #0
 801a61c:	f7fe fa80 	bl	8018b20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a620:	486c      	ldr	r0, [pc, #432]	@ (801a7d4 <RadioSetTxGenericConfig+0x32c>)
 801a622:	f000 fd65 	bl	801b0f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a626:	486c      	ldr	r0, [pc, #432]	@ (801a7d8 <RadioSetTxGenericConfig+0x330>)
 801a628:	f000 fe34 	bl	801b294 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a62c:	f107 031c 	add.w	r3, r7, #28
 801a630:	4618      	mov	r0, r3
 801a632:	f000 f964 	bl	801a8fe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	8b9b      	ldrh	r3, [r3, #28]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f000 f9ae 	bl	801a99c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a640:	68bb      	ldr	r3, [r7, #8]
 801a642:	8c1b      	ldrh	r3, [r3, #32]
 801a644:	4618      	mov	r0, r3
 801a646:	f000 f989 	bl	801a95c <SUBGRF_SetCrcPolynomial>
        break;
 801a64a:	e0a4      	b.n	801a796 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a64c:	4b5e      	ldr	r3, [pc, #376]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a64e:	2201      	movs	r2, #1
 801a650:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801a65a:	4b5b      	ldr	r3, [pc, #364]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a65c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801a666:	4b58      	ldr	r3, [pc, #352]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a66c:	68bb      	ldr	r3, [r7, #8]
 801a66e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a672:	4b55      	ldr	r3, [pc, #340]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a674:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801a678:	68bb      	ldr	r3, [r7, #8]
 801a67a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 801a67e:	2b02      	cmp	r3, #2
 801a680:	d010      	beq.n	801a6a4 <RadioSetTxGenericConfig+0x1fc>
 801a682:	2b02      	cmp	r3, #2
 801a684:	dc22      	bgt.n	801a6cc <RadioSetTxGenericConfig+0x224>
 801a686:	2b00      	cmp	r3, #0
 801a688:	d002      	beq.n	801a690 <RadioSetTxGenericConfig+0x1e8>
 801a68a:	2b01      	cmp	r3, #1
 801a68c:	d005      	beq.n	801a69a <RadioSetTxGenericConfig+0x1f2>
            break;
 801a68e:	e01d      	b.n	801a6cc <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a690:	4b4d      	ldr	r3, [pc, #308]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a692:	2200      	movs	r2, #0
 801a694:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a698:	e019      	b.n	801a6ce <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a69a:	4b4b      	ldr	r3, [pc, #300]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a69c:	2201      	movs	r2, #1
 801a69e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a6a2:	e014      	b.n	801a6ce <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a6aa:	2b0b      	cmp	r3, #11
 801a6ac:	d004      	beq.n	801a6b8 <RadioSetTxGenericConfig+0x210>
 801a6ae:	68bb      	ldr	r3, [r7, #8]
 801a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a6b4:	2b0c      	cmp	r3, #12
 801a6b6:	d104      	bne.n	801a6c2 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a6b8:	4b43      	ldr	r3, [pc, #268]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a6c0:	e005      	b.n	801a6ce <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a6c2:	4b41      	ldr	r3, [pc, #260]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801a6ca:	e000      	b.n	801a6ce <RadioSetTxGenericConfig+0x226>
            break;
 801a6cc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a6ce:	4b3e      	ldr	r3, [pc, #248]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6d0:	2201      	movs	r2, #1
 801a6d2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a6d4:	68bb      	ldr	r3, [r7, #8]
 801a6d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801a6d8:	4b3b      	ldr	r3, [pc, #236]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6da:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a6e2:	4b39      	ldr	r3, [pc, #228]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6e4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a6e6:	68bb      	ldr	r3, [r7, #8]
 801a6e8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a6ec:	4b36      	ldr	r3, [pc, #216]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6ee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a6f2:	68bb      	ldr	r3, [r7, #8]
 801a6f4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a6f8:	4b33      	ldr	r3, [pc, #204]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a6fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801a6fe:	f7ff f87a 	bl	80197f6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a702:	2001      	movs	r0, #1
 801a704:	f7fe fa0c 	bl	8018b20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a708:	4832      	ldr	r0, [pc, #200]	@ (801a7d4 <RadioSetTxGenericConfig+0x32c>)
 801a70a:	f000 fcf1 	bl	801b0f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a70e:	4832      	ldr	r0, [pc, #200]	@ (801a7d8 <RadioSetTxGenericConfig+0x330>)
 801a710:	f000 fdc0 	bl	801b294 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a714:	4b2c      	ldr	r3, [pc, #176]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801a71a:	2b06      	cmp	r3, #6
 801a71c:	d10d      	bne.n	801a73a <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801a71e:	f640 0089 	movw	r0, #2185	@ 0x889
 801a722:	f000 ff13 	bl	801b54c <SUBGRF_ReadRegister>
 801a726:	4603      	mov	r3, r0
 801a728:	f023 0304 	bic.w	r3, r3, #4
 801a72c:	b2db      	uxtb	r3, r3
 801a72e:	4619      	mov	r1, r3
 801a730:	f640 0089 	movw	r0, #2185	@ 0x889
 801a734:	f000 fef6 	bl	801b524 <SUBGRF_WriteRegister>
        break;
 801a738:	e02d      	b.n	801a796 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801a73a:	f640 0089 	movw	r0, #2185	@ 0x889
 801a73e:	f000 ff05 	bl	801b54c <SUBGRF_ReadRegister>
 801a742:	4603      	mov	r3, r0
 801a744:	f043 0304 	orr.w	r3, r3, #4
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	4619      	mov	r1, r3
 801a74c:	f640 0089 	movw	r0, #2185	@ 0x889
 801a750:	f000 fee8 	bl	801b524 <SUBGRF_WriteRegister>
        break;
 801a754:	e01f      	b.n	801a796 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d004      	beq.n	801a768 <RadioSetTxGenericConfig+0x2c0>
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a766:	d902      	bls.n	801a76e <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801a768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a76c:	e027      	b.n	801a7be <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801a76e:	2002      	movs	r0, #2
 801a770:	f7fe f9d6 	bl	8018b20 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a774:	4b14      	ldr	r3, [pc, #80]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a776:	2202      	movs	r2, #2
 801a778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a780:	4a11      	ldr	r2, [pc, #68]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a782:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a784:	4b10      	ldr	r3, [pc, #64]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a786:	2216      	movs	r2, #22
 801a788:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a78c:	4811      	ldr	r0, [pc, #68]	@ (801a7d4 <RadioSetTxGenericConfig+0x32c>)
 801a78e:	f000 fcaf 	bl	801b0f0 <SUBGRF_SetModulationParams>
        break;
 801a792:	e000      	b.n	801a796 <RadioSetTxGenericConfig+0x2ee>
        break;
 801a794:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a79a:	4618      	mov	r0, r3
 801a79c:	f000 ffde 	bl	801b75c <SUBGRF_SetRfTxPower>
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	461a      	mov	r2, r3
 801a7a4:	4b08      	ldr	r3, [pc, #32]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a7a6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7aa:	4b07      	ldr	r3, [pc, #28]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a7ac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	f001 f9a2 	bl	801bafa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a7b6:	4a04      	ldr	r2, [pc, #16]	@ (801a7c8 <RadioSetTxGenericConfig+0x320>)
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6053      	str	r3, [r2, #4]
    return 0;
 801a7bc:	2300      	movs	r3, #0
}
 801a7be:	4618      	mov	r0, r3
 801a7c0:	3728      	adds	r7, #40	@ 0x28
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd80      	pop	{r7, pc}
 801a7c6:	bf00      	nop
 801a7c8:	20003d9c 	.word	0x20003d9c
 801a7cc:	20003d98 	.word	0x20003d98
 801a7d0:	20003df4 	.word	0x20003df4
 801a7d4:	20003dd4 	.word	0x20003dd4
 801a7d8:	20003daa 	.word	0x20003daa

0801a7dc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b084      	sub	sp, #16
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d002      	beq.n	801a7f0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a7ea:	4a1a      	ldr	r2, [pc, #104]	@ (801a854 <SUBGRF_Init+0x78>)
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a7f0:	f7e6 fedc 	bl	80015ac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a7f4:	2002      	movs	r0, #2
 801a7f6:	f001 f87d 	bl	801b8f4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a7fa:	4b17      	ldr	r3, [pc, #92]	@ (801a858 <SUBGRF_Init+0x7c>)
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a800:	2000      	movs	r0, #0
 801a802:	f000 f977 	bl	801aaf4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a806:	f7ef fb8f 	bl	8009f28 <RBI_IsTCXO>
 801a80a:	4603      	mov	r3, r0
 801a80c:	2b01      	cmp	r3, #1
 801a80e:	d10e      	bne.n	801a82e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a810:	2140      	movs	r1, #64	@ 0x40
 801a812:	2001      	movs	r0, #1
 801a814:	f000 fb78 	bl	801af08 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a818:	2100      	movs	r1, #0
 801a81a:	f640 1011 	movw	r0, #2321	@ 0x911
 801a81e:	f000 fe81 	bl	801b524 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a822:	237f      	movs	r3, #127	@ 0x7f
 801a824:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a826:	7b38      	ldrb	r0, [r7, #12]
 801a828:	f000 fa85 	bl	801ad36 <SUBGRF_Calibrate>
 801a82c:	e009      	b.n	801a842 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a82e:	2120      	movs	r1, #32
 801a830:	f640 1011 	movw	r0, #2321	@ 0x911
 801a834:	f000 fe76 	bl	801b524 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a838:	2120      	movs	r1, #32
 801a83a:	f640 1012 	movw	r0, #2322	@ 0x912
 801a83e:	f000 fe71 	bl	801b524 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a842:	f7ef fb55 	bl	8009ef0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a846:	4b05      	ldr	r3, [pc, #20]	@ (801a85c <SUBGRF_Init+0x80>)
 801a848:	2201      	movs	r2, #1
 801a84a:	701a      	strb	r2, [r3, #0]
}
 801a84c:	bf00      	nop
 801a84e:	3710      	adds	r7, #16
 801a850:	46bd      	mov	sp, r7
 801a852:	bd80      	pop	{r7, pc}
 801a854:	20003e30 	.word	0x20003e30
 801a858:	20003e2c 	.word	0x20003e2c
 801a85c:	20003e24 	.word	0x20003e24

0801a860 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a860:	b480      	push	{r7}
 801a862:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a864:	4b02      	ldr	r3, [pc, #8]	@ (801a870 <SUBGRF_GetOperatingMode+0x10>)
 801a866:	781b      	ldrb	r3, [r3, #0]
}
 801a868:	4618      	mov	r0, r3
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bc80      	pop	{r7}
 801a86e:	4770      	bx	lr
 801a870:	20003e24 	.word	0x20003e24

0801a874 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b082      	sub	sp, #8
 801a878:	af00      	add	r7, sp, #0
 801a87a:	6078      	str	r0, [r7, #4]
 801a87c:	460b      	mov	r3, r1
 801a87e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a880:	78fb      	ldrb	r3, [r7, #3]
 801a882:	461a      	mov	r2, r3
 801a884:	6879      	ldr	r1, [r7, #4]
 801a886:	2000      	movs	r0, #0
 801a888:	f000 feb8 	bl	801b5fc <SUBGRF_WriteBuffer>
}
 801a88c:	bf00      	nop
 801a88e:	3708      	adds	r7, #8
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}

0801a894 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b086      	sub	sp, #24
 801a898:	af00      	add	r7, sp, #0
 801a89a:	60f8      	str	r0, [r7, #12]
 801a89c:	60b9      	str	r1, [r7, #8]
 801a89e:	4613      	mov	r3, r2
 801a8a0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a8a6:	f107 0317 	add.w	r3, r7, #23
 801a8aa:	4619      	mov	r1, r3
 801a8ac:	68b8      	ldr	r0, [r7, #8]
 801a8ae:	f000 fdbb 	bl	801b428 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	781b      	ldrb	r3, [r3, #0]
 801a8b6:	79fa      	ldrb	r2, [r7, #7]
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	d201      	bcs.n	801a8c0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a8bc:	2301      	movs	r3, #1
 801a8be:	e007      	b.n	801a8d0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a8c0:	7df8      	ldrb	r0, [r7, #23]
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	461a      	mov	r2, r3
 801a8c8:	68f9      	ldr	r1, [r7, #12]
 801a8ca:	f000 feb9 	bl	801b640 <SUBGRF_ReadBuffer>

    return 0;
 801a8ce:	2300      	movs	r3, #0
}
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	3718      	adds	r7, #24
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bd80      	pop	{r7, pc}

0801a8d8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b084      	sub	sp, #16
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	60f8      	str	r0, [r7, #12]
 801a8e0:	460b      	mov	r3, r1
 801a8e2:	607a      	str	r2, [r7, #4]
 801a8e4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a8e6:	7afb      	ldrb	r3, [r7, #11]
 801a8e8:	4619      	mov	r1, r3
 801a8ea:	68f8      	ldr	r0, [r7, #12]
 801a8ec:	f7ff ffc2 	bl	801a874 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f000 f91b 	bl	801ab2c <SUBGRF_SetTx>
}
 801a8f6:	bf00      	nop
 801a8f8:	3710      	adds	r7, #16
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}

0801a8fe <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a8fe:	b580      	push	{r7, lr}
 801a900:	b082      	sub	sp, #8
 801a902:	af00      	add	r7, sp, #0
 801a904:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a906:	2208      	movs	r2, #8
 801a908:	6879      	ldr	r1, [r7, #4]
 801a90a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801a90e:	f000 fe31 	bl	801b574 <SUBGRF_WriteRegisters>
    return 0;
 801a912:	2300      	movs	r3, #0
}
 801a914:	4618      	mov	r0, r3
 801a916:	3708      	adds	r7, #8
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	4603      	mov	r3, r0
 801a924:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a926:	88fb      	ldrh	r3, [r7, #6]
 801a928:	0a1b      	lsrs	r3, r3, #8
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	b2db      	uxtb	r3, r3
 801a92e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a930:	88fb      	ldrh	r3, [r7, #6]
 801a932:	b2db      	uxtb	r3, r3
 801a934:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a936:	f000 fb6b 	bl	801b010 <SUBGRF_GetPacketType>
 801a93a:	4603      	mov	r3, r0
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d108      	bne.n	801a952 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a940:	f107 030c 	add.w	r3, r7, #12
 801a944:	2202      	movs	r2, #2
 801a946:	4619      	mov	r1, r3
 801a948:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801a94c:	f000 fe12 	bl	801b574 <SUBGRF_WriteRegisters>
            break;
 801a950:	e000      	b.n	801a954 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a952:	bf00      	nop
    }
}
 801a954:	bf00      	nop
 801a956:	3710      	adds	r7, #16
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd80      	pop	{r7, pc}

0801a95c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b084      	sub	sp, #16
 801a960:	af00      	add	r7, sp, #0
 801a962:	4603      	mov	r3, r0
 801a964:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a966:	88fb      	ldrh	r3, [r7, #6]
 801a968:	0a1b      	lsrs	r3, r3, #8
 801a96a:	b29b      	uxth	r3, r3
 801a96c:	b2db      	uxtb	r3, r3
 801a96e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a970:	88fb      	ldrh	r3, [r7, #6]
 801a972:	b2db      	uxtb	r3, r3
 801a974:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a976:	f000 fb4b 	bl	801b010 <SUBGRF_GetPacketType>
 801a97a:	4603      	mov	r3, r0
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d108      	bne.n	801a992 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a980:	f107 030c 	add.w	r3, r7, #12
 801a984:	2202      	movs	r2, #2
 801a986:	4619      	mov	r1, r3
 801a988:	f240 60be 	movw	r0, #1726	@ 0x6be
 801a98c:	f000 fdf2 	bl	801b574 <SUBGRF_WriteRegisters>
            break;
 801a990:	e000      	b.n	801a994 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a992:	bf00      	nop
    }
}
 801a994:	bf00      	nop
 801a996:	3710      	adds	r7, #16
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}

0801a99c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b084      	sub	sp, #16
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a9aa:	f000 fb31 	bl	801b010 <SUBGRF_GetPacketType>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d121      	bne.n	801a9f8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a9b4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a9b8:	f000 fdc8 	bl	801b54c <SUBGRF_ReadRegister>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	f023 0301 	bic.w	r3, r3, #1
 801a9c2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a9c4:	88fb      	ldrh	r3, [r7, #6]
 801a9c6:	0a1b      	lsrs	r3, r3, #8
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	b25b      	sxtb	r3, r3
 801a9cc:	f003 0301 	and.w	r3, r3, #1
 801a9d0:	b25a      	sxtb	r2, r3
 801a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9d6:	4313      	orrs	r3, r2
 801a9d8:	b25b      	sxtb	r3, r3
 801a9da:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a9dc:	7bfb      	ldrb	r3, [r7, #15]
 801a9de:	4619      	mov	r1, r3
 801a9e0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801a9e4:	f000 fd9e 	bl	801b524 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a9e8:	88fb      	ldrh	r3, [r7, #6]
 801a9ea:	b2db      	uxtb	r3, r3
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801a9f2:	f000 fd97 	bl	801b524 <SUBGRF_WriteRegister>
            break;
 801a9f6:	e000      	b.n	801a9fa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a9f8:	bf00      	nop
    }
}
 801a9fa:	bf00      	nop
 801a9fc:	3710      	adds	r7, #16
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}

0801aa02 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801aa02:	b580      	push	{r7, lr}
 801aa04:	b082      	sub	sp, #8
 801aa06:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801aa10:	2300      	movs	r3, #0
 801aa12:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801aa14:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801aa18:	f000 fd98 	bl	801b54c <SUBGRF_ReadRegister>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801aa20:	79fb      	ldrb	r3, [r7, #7]
 801aa22:	f023 0301 	bic.w	r3, r3, #1
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	4619      	mov	r1, r3
 801aa2a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801aa2e:	f000 fd79 	bl	801b524 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801aa32:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801aa36:	f000 fd89 	bl	801b54c <SUBGRF_ReadRegister>
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801aa3e:	79bb      	ldrb	r3, [r7, #6]
 801aa40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	4619      	mov	r1, r3
 801aa48:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801aa4c:	f000 fd6a 	bl	801b524 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801aa50:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801aa54:	f000 f88a 	bl	801ab6c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801aa58:	463b      	mov	r3, r7
 801aa5a:	2204      	movs	r2, #4
 801aa5c:	4619      	mov	r1, r3
 801aa5e:	f640 0019 	movw	r0, #2073	@ 0x819
 801aa62:	f000 fda9 	bl	801b5b8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801aa66:	2000      	movs	r0, #0
 801aa68:	f000 f844 	bl	801aaf4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801aa6c:	79fb      	ldrb	r3, [r7, #7]
 801aa6e:	4619      	mov	r1, r3
 801aa70:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801aa74:	f000 fd56 	bl	801b524 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801aa78:	79bb      	ldrb	r3, [r7, #6]
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801aa80:	f000 fd50 	bl	801b524 <SUBGRF_WriteRegister>

    return number;
 801aa84:	683b      	ldr	r3, [r7, #0]
}
 801aa86:	4618      	mov	r0, r3
 801aa88:	3708      	adds	r7, #8
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
	...

0801aa90 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b084      	sub	sp, #16
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801aa98:	2000      	movs	r0, #0
 801aa9a:	f7ef fa30 	bl	8009efe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801aa9e:	2002      	movs	r0, #2
 801aaa0:	f000 ff28 	bl	801b8f4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aaa4:	793b      	ldrb	r3, [r7, #4]
 801aaa6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801aaaa:	b2db      	uxtb	r3, r3
 801aaac:	009b      	lsls	r3, r3, #2
 801aaae:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aab0:	793b      	ldrb	r3, [r7, #4]
 801aab2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801aab6:	b2db      	uxtb	r3, r3
 801aab8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aaba:	b25b      	sxtb	r3, r3
 801aabc:	4313      	orrs	r3, r2
 801aabe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801aac0:	793b      	ldrb	r3, [r7, #4]
 801aac2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801aaca:	4313      	orrs	r3, r2
 801aacc:	b25b      	sxtb	r3, r3
 801aace:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801aad0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801aad2:	f107 030f 	add.w	r3, r7, #15
 801aad6:	2201      	movs	r2, #1
 801aad8:	4619      	mov	r1, r3
 801aada:	2084      	movs	r0, #132	@ 0x84
 801aadc:	f000 fdd2 	bl	801b684 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801aae0:	4b03      	ldr	r3, [pc, #12]	@ (801aaf0 <SUBGRF_SetSleep+0x60>)
 801aae2:	2200      	movs	r2, #0
 801aae4:	701a      	strb	r2, [r3, #0]
}
 801aae6:	bf00      	nop
 801aae8:	3710      	adds	r7, #16
 801aaea:	46bd      	mov	sp, r7
 801aaec:	bd80      	pop	{r7, pc}
 801aaee:	bf00      	nop
 801aaf0:	20003e24 	.word	0x20003e24

0801aaf4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	4603      	mov	r3, r0
 801aafc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801aafe:	1dfb      	adds	r3, r7, #7
 801ab00:	2201      	movs	r2, #1
 801ab02:	4619      	mov	r1, r3
 801ab04:	2080      	movs	r0, #128	@ 0x80
 801ab06:	f000 fdbd 	bl	801b684 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801ab0a:	79fb      	ldrb	r3, [r7, #7]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d103      	bne.n	801ab18 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801ab10:	4b05      	ldr	r3, [pc, #20]	@ (801ab28 <SUBGRF_SetStandby+0x34>)
 801ab12:	2201      	movs	r2, #1
 801ab14:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801ab16:	e002      	b.n	801ab1e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801ab18:	4b03      	ldr	r3, [pc, #12]	@ (801ab28 <SUBGRF_SetStandby+0x34>)
 801ab1a:	2202      	movs	r2, #2
 801ab1c:	701a      	strb	r2, [r3, #0]
}
 801ab1e:	bf00      	nop
 801ab20:	3708      	adds	r7, #8
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	20003e24 	.word	0x20003e24

0801ab2c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b084      	sub	sp, #16
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801ab34:	4b0c      	ldr	r3, [pc, #48]	@ (801ab68 <SUBGRF_SetTx+0x3c>)
 801ab36:	2204      	movs	r2, #4
 801ab38:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	0c1b      	lsrs	r3, r3, #16
 801ab3e:	b2db      	uxtb	r3, r3
 801ab40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	0a1b      	lsrs	r3, r3, #8
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801ab50:	f107 030c 	add.w	r3, r7, #12
 801ab54:	2203      	movs	r2, #3
 801ab56:	4619      	mov	r1, r3
 801ab58:	2083      	movs	r0, #131	@ 0x83
 801ab5a:	f000 fd93 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ab5e:	bf00      	nop
 801ab60:	3710      	adds	r7, #16
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	bf00      	nop
 801ab68:	20003e24 	.word	0x20003e24

0801ab6c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b084      	sub	sp, #16
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801ab74:	4b0c      	ldr	r3, [pc, #48]	@ (801aba8 <SUBGRF_SetRx+0x3c>)
 801ab76:	2205      	movs	r2, #5
 801ab78:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	0c1b      	lsrs	r3, r3, #16
 801ab7e:	b2db      	uxtb	r3, r3
 801ab80:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	0a1b      	lsrs	r3, r3, #8
 801ab86:	b2db      	uxtb	r3, r3
 801ab88:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801ab90:	f107 030c 	add.w	r3, r7, #12
 801ab94:	2203      	movs	r2, #3
 801ab96:	4619      	mov	r1, r3
 801ab98:	2082      	movs	r0, #130	@ 0x82
 801ab9a:	f000 fd73 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ab9e:	bf00      	nop
 801aba0:	3710      	adds	r7, #16
 801aba2:	46bd      	mov	sp, r7
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	bf00      	nop
 801aba8:	20003e24 	.word	0x20003e24

0801abac <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801abb4:	4b0e      	ldr	r3, [pc, #56]	@ (801abf0 <SUBGRF_SetRxBoosted+0x44>)
 801abb6:	2205      	movs	r2, #5
 801abb8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801abba:	2197      	movs	r1, #151	@ 0x97
 801abbc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801abc0:	f000 fcb0 	bl	801b524 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	0c1b      	lsrs	r3, r3, #16
 801abc8:	b2db      	uxtb	r3, r3
 801abca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	0a1b      	lsrs	r3, r3, #8
 801abd0:	b2db      	uxtb	r3, r3
 801abd2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	b2db      	uxtb	r3, r3
 801abd8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801abda:	f107 030c 	add.w	r3, r7, #12
 801abde:	2203      	movs	r2, #3
 801abe0:	4619      	mov	r1, r3
 801abe2:	2082      	movs	r0, #130	@ 0x82
 801abe4:	f000 fd4e 	bl	801b684 <SUBGRF_WriteCommand>
}
 801abe8:	bf00      	nop
 801abea:	3710      	adds	r7, #16
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}
 801abf0:	20003e24 	.word	0x20003e24

0801abf4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b084      	sub	sp, #16
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	0c1b      	lsrs	r3, r3, #16
 801ac02:	b2db      	uxtb	r3, r3
 801ac04:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	0a1b      	lsrs	r3, r3, #8
 801ac0a:	b2db      	uxtb	r3, r3
 801ac0c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801ac14:	683b      	ldr	r3, [r7, #0]
 801ac16:	0c1b      	lsrs	r3, r3, #16
 801ac18:	b2db      	uxtb	r3, r3
 801ac1a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801ac1c:	683b      	ldr	r3, [r7, #0]
 801ac1e:	0a1b      	lsrs	r3, r3, #8
 801ac20:	b2db      	uxtb	r3, r3
 801ac22:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	b2db      	uxtb	r3, r3
 801ac28:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801ac2a:	f107 0308 	add.w	r3, r7, #8
 801ac2e:	2206      	movs	r2, #6
 801ac30:	4619      	mov	r1, r3
 801ac32:	2094      	movs	r0, #148	@ 0x94
 801ac34:	f000 fd26 	bl	801b684 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801ac38:	4b03      	ldr	r3, [pc, #12]	@ (801ac48 <SUBGRF_SetRxDutyCycle+0x54>)
 801ac3a:	2206      	movs	r2, #6
 801ac3c:	701a      	strb	r2, [r3, #0]
}
 801ac3e:	bf00      	nop
 801ac40:	3710      	adds	r7, #16
 801ac42:	46bd      	mov	sp, r7
 801ac44:	bd80      	pop	{r7, pc}
 801ac46:	bf00      	nop
 801ac48:	20003e24 	.word	0x20003e24

0801ac4c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801ac50:	2200      	movs	r2, #0
 801ac52:	2100      	movs	r1, #0
 801ac54:	20c5      	movs	r0, #197	@ 0xc5
 801ac56:	f000 fd15 	bl	801b684 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801ac5a:	4b02      	ldr	r3, [pc, #8]	@ (801ac64 <SUBGRF_SetCad+0x18>)
 801ac5c:	2207      	movs	r2, #7
 801ac5e:	701a      	strb	r2, [r3, #0]
}
 801ac60:	bf00      	nop
 801ac62:	bd80      	pop	{r7, pc}
 801ac64:	20003e24 	.word	0x20003e24

0801ac68 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	2100      	movs	r1, #0
 801ac70:	20d1      	movs	r0, #209	@ 0xd1
 801ac72:	f000 fd07 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ac76:	bf00      	nop
 801ac78:	bd80      	pop	{r7, pc}

0801ac7a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801ac7a:	b580      	push	{r7, lr}
 801ac7c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801ac7e:	2200      	movs	r2, #0
 801ac80:	2100      	movs	r1, #0
 801ac82:	20d2      	movs	r0, #210	@ 0xd2
 801ac84:	f000 fcfe 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ac88:	bf00      	nop
 801ac8a:	bd80      	pop	{r7, pc}

0801ac8c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b082      	sub	sp, #8
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	4603      	mov	r3, r0
 801ac94:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801ac96:	1dfb      	adds	r3, r7, #7
 801ac98:	2201      	movs	r2, #1
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	209f      	movs	r0, #159	@ 0x9f
 801ac9e:	f000 fcf1 	bl	801b684 <SUBGRF_WriteCommand>
}
 801aca2:	bf00      	nop
 801aca4:	3708      	adds	r7, #8
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}

0801acaa <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801acaa:	b580      	push	{r7, lr}
 801acac:	b084      	sub	sp, #16
 801acae:	af00      	add	r7, sp, #0
 801acb0:	4603      	mov	r3, r0
 801acb2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801acb4:	1dfb      	adds	r3, r7, #7
 801acb6:	2201      	movs	r2, #1
 801acb8:	4619      	mov	r1, r3
 801acba:	20a0      	movs	r0, #160	@ 0xa0
 801acbc:	f000 fce2 	bl	801b684 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801acc0:	79fb      	ldrb	r3, [r7, #7]
 801acc2:	2b3f      	cmp	r3, #63	@ 0x3f
 801acc4:	d91c      	bls.n	801ad00 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801acc6:	79fb      	ldrb	r3, [r7, #7]
 801acc8:	085b      	lsrs	r3, r3, #1
 801acca:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801accc:	2300      	movs	r3, #0
 801acce:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801acd0:	2300      	movs	r3, #0
 801acd2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801acd4:	e005      	b.n	801ace2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801acd6:	7bfb      	ldrb	r3, [r7, #15]
 801acd8:	089b      	lsrs	r3, r3, #2
 801acda:	73fb      	strb	r3, [r7, #15]
            exp++;
 801acdc:	7bbb      	ldrb	r3, [r7, #14]
 801acde:	3301      	adds	r3, #1
 801ace0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ace2:	7bfb      	ldrb	r3, [r7, #15]
 801ace4:	2b1f      	cmp	r3, #31
 801ace6:	d8f6      	bhi.n	801acd6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ace8:	7bfb      	ldrb	r3, [r7, #15]
 801acea:	00db      	lsls	r3, r3, #3
 801acec:	b2da      	uxtb	r2, r3
 801acee:	7bbb      	ldrb	r3, [r7, #14]
 801acf0:	4413      	add	r3, r2
 801acf2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801acf4:	7b7b      	ldrb	r3, [r7, #13]
 801acf6:	4619      	mov	r1, r3
 801acf8:	f240 7006 	movw	r0, #1798	@ 0x706
 801acfc:	f000 fc12 	bl	801b524 <SUBGRF_WriteRegister>
    }
}
 801ad00:	bf00      	nop
 801ad02:	3710      	adds	r7, #16
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}

0801ad08 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b082      	sub	sp, #8
 801ad0c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ad0e:	f7ef f912 	bl	8009f36 <RBI_IsDCDC>
 801ad12:	4603      	mov	r3, r0
 801ad14:	2b01      	cmp	r3, #1
 801ad16:	d102      	bne.n	801ad1e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ad18:	2301      	movs	r3, #1
 801ad1a:	71fb      	strb	r3, [r7, #7]
 801ad1c:	e001      	b.n	801ad22 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ad1e:	2300      	movs	r3, #0
 801ad20:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ad22:	1dfb      	adds	r3, r7, #7
 801ad24:	2201      	movs	r2, #1
 801ad26:	4619      	mov	r1, r3
 801ad28:	2096      	movs	r0, #150	@ 0x96
 801ad2a:	f000 fcab 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ad2e:	bf00      	nop
 801ad30:	3708      	adds	r7, #8
 801ad32:	46bd      	mov	sp, r7
 801ad34:	bd80      	pop	{r7, pc}

0801ad36 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ad36:	b580      	push	{r7, lr}
 801ad38:	b084      	sub	sp, #16
 801ad3a:	af00      	add	r7, sp, #0
 801ad3c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ad3e:	793b      	ldrb	r3, [r7, #4]
 801ad40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ad44:	b2db      	uxtb	r3, r3
 801ad46:	019b      	lsls	r3, r3, #6
 801ad48:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ad4a:	793b      	ldrb	r3, [r7, #4]
 801ad4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801ad50:	b2db      	uxtb	r3, r3
 801ad52:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ad54:	b25b      	sxtb	r3, r3
 801ad56:	4313      	orrs	r3, r2
 801ad58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ad5a:	793b      	ldrb	r3, [r7, #4]
 801ad5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ad60:	b2db      	uxtb	r3, r3
 801ad62:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801ad64:	b25b      	sxtb	r3, r3
 801ad66:	4313      	orrs	r3, r2
 801ad68:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ad6a:	793b      	ldrb	r3, [r7, #4]
 801ad6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ad70:	b2db      	uxtb	r3, r3
 801ad72:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801ad74:	b25b      	sxtb	r3, r3
 801ad76:	4313      	orrs	r3, r2
 801ad78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ad7a:	793b      	ldrb	r3, [r7, #4]
 801ad7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ad80:	b2db      	uxtb	r3, r3
 801ad82:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801ad84:	b25b      	sxtb	r3, r3
 801ad86:	4313      	orrs	r3, r2
 801ad88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ad8a:	793b      	ldrb	r3, [r7, #4]
 801ad8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801ad90:	b2db      	uxtb	r3, r3
 801ad92:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801ad94:	b25b      	sxtb	r3, r3
 801ad96:	4313      	orrs	r3, r2
 801ad98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801ad9a:	793b      	ldrb	r3, [r7, #4]
 801ad9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ada0:	b2db      	uxtb	r3, r3
 801ada2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801ada4:	4313      	orrs	r3, r2
 801ada6:	b25b      	sxtb	r3, r3
 801ada8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801adaa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801adac:	f107 030f 	add.w	r3, r7, #15
 801adb0:	2201      	movs	r2, #1
 801adb2:	4619      	mov	r1, r3
 801adb4:	2089      	movs	r0, #137	@ 0x89
 801adb6:	f000 fc65 	bl	801b684 <SUBGRF_WriteCommand>
}
 801adba:	bf00      	nop
 801adbc:	3710      	adds	r7, #16
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}
	...

0801adc4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	b084      	sub	sp, #16
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	4a1b      	ldr	r2, [pc, #108]	@ (801ae3c <SUBGRF_CalibrateImage+0x78>)
 801add0:	4293      	cmp	r3, r2
 801add2:	d904      	bls.n	801adde <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801add4:	23e1      	movs	r3, #225	@ 0xe1
 801add6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801add8:	23e9      	movs	r3, #233	@ 0xe9
 801adda:	737b      	strb	r3, [r7, #13]
 801addc:	e022      	b.n	801ae24 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	4a17      	ldr	r2, [pc, #92]	@ (801ae40 <SUBGRF_CalibrateImage+0x7c>)
 801ade2:	4293      	cmp	r3, r2
 801ade4:	d904      	bls.n	801adf0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801ade6:	23d7      	movs	r3, #215	@ 0xd7
 801ade8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801adea:	23db      	movs	r3, #219	@ 0xdb
 801adec:	737b      	strb	r3, [r7, #13]
 801adee:	e019      	b.n	801ae24 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	4a14      	ldr	r2, [pc, #80]	@ (801ae44 <SUBGRF_CalibrateImage+0x80>)
 801adf4:	4293      	cmp	r3, r2
 801adf6:	d904      	bls.n	801ae02 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801adf8:	23c1      	movs	r3, #193	@ 0xc1
 801adfa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801adfc:	23c5      	movs	r3, #197	@ 0xc5
 801adfe:	737b      	strb	r3, [r7, #13]
 801ae00:	e010      	b.n	801ae24 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	4a10      	ldr	r2, [pc, #64]	@ (801ae48 <SUBGRF_CalibrateImage+0x84>)
 801ae06:	4293      	cmp	r3, r2
 801ae08:	d904      	bls.n	801ae14 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801ae0a:	2375      	movs	r3, #117	@ 0x75
 801ae0c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801ae0e:	2381      	movs	r3, #129	@ 0x81
 801ae10:	737b      	strb	r3, [r7, #13]
 801ae12:	e007      	b.n	801ae24 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	4a0d      	ldr	r2, [pc, #52]	@ (801ae4c <SUBGRF_CalibrateImage+0x88>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d903      	bls.n	801ae24 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801ae1c:	236b      	movs	r3, #107	@ 0x6b
 801ae1e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ae20:	236f      	movs	r3, #111	@ 0x6f
 801ae22:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801ae24:	f107 030c 	add.w	r3, r7, #12
 801ae28:	2202      	movs	r2, #2
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	2098      	movs	r0, #152	@ 0x98
 801ae2e:	f000 fc29 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ae32:	bf00      	nop
 801ae34:	3710      	adds	r7, #16
 801ae36:	46bd      	mov	sp, r7
 801ae38:	bd80      	pop	{r7, pc}
 801ae3a:	bf00      	nop
 801ae3c:	35a4e900 	.word	0x35a4e900
 801ae40:	32a9f880 	.word	0x32a9f880
 801ae44:	2de54480 	.word	0x2de54480
 801ae48:	1b6b0b00 	.word	0x1b6b0b00
 801ae4c:	1954fc40 	.word	0x1954fc40

0801ae50 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801ae50:	b590      	push	{r4, r7, lr}
 801ae52:	b085      	sub	sp, #20
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	4604      	mov	r4, r0
 801ae58:	4608      	mov	r0, r1
 801ae5a:	4611      	mov	r1, r2
 801ae5c:	461a      	mov	r2, r3
 801ae5e:	4623      	mov	r3, r4
 801ae60:	71fb      	strb	r3, [r7, #7]
 801ae62:	4603      	mov	r3, r0
 801ae64:	71bb      	strb	r3, [r7, #6]
 801ae66:	460b      	mov	r3, r1
 801ae68:	717b      	strb	r3, [r7, #5]
 801ae6a:	4613      	mov	r3, r2
 801ae6c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801ae6e:	79fb      	ldrb	r3, [r7, #7]
 801ae70:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801ae72:	79bb      	ldrb	r3, [r7, #6]
 801ae74:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801ae76:	797b      	ldrb	r3, [r7, #5]
 801ae78:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801ae7a:	793b      	ldrb	r3, [r7, #4]
 801ae7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801ae7e:	f107 030c 	add.w	r3, r7, #12
 801ae82:	2204      	movs	r2, #4
 801ae84:	4619      	mov	r1, r3
 801ae86:	2095      	movs	r0, #149	@ 0x95
 801ae88:	f000 fbfc 	bl	801b684 <SUBGRF_WriteCommand>
}
 801ae8c:	bf00      	nop
 801ae8e:	3714      	adds	r7, #20
 801ae90:	46bd      	mov	sp, r7
 801ae92:	bd90      	pop	{r4, r7, pc}

0801ae94 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801ae94:	b590      	push	{r4, r7, lr}
 801ae96:	b085      	sub	sp, #20
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	4608      	mov	r0, r1
 801ae9e:	4611      	mov	r1, r2
 801aea0:	461a      	mov	r2, r3
 801aea2:	4623      	mov	r3, r4
 801aea4:	80fb      	strh	r3, [r7, #6]
 801aea6:	4603      	mov	r3, r0
 801aea8:	80bb      	strh	r3, [r7, #4]
 801aeaa:	460b      	mov	r3, r1
 801aeac:	807b      	strh	r3, [r7, #2]
 801aeae:	4613      	mov	r3, r2
 801aeb0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801aeb2:	88fb      	ldrh	r3, [r7, #6]
 801aeb4:	0a1b      	lsrs	r3, r3, #8
 801aeb6:	b29b      	uxth	r3, r3
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801aebc:	88fb      	ldrh	r3, [r7, #6]
 801aebe:	b2db      	uxtb	r3, r3
 801aec0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801aec2:	88bb      	ldrh	r3, [r7, #4]
 801aec4:	0a1b      	lsrs	r3, r3, #8
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	b2db      	uxtb	r3, r3
 801aeca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801aecc:	88bb      	ldrh	r3, [r7, #4]
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801aed2:	887b      	ldrh	r3, [r7, #2]
 801aed4:	0a1b      	lsrs	r3, r3, #8
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	b2db      	uxtb	r3, r3
 801aeda:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801aedc:	887b      	ldrh	r3, [r7, #2]
 801aede:	b2db      	uxtb	r3, r3
 801aee0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801aee2:	883b      	ldrh	r3, [r7, #0]
 801aee4:	0a1b      	lsrs	r3, r3, #8
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	b2db      	uxtb	r3, r3
 801aeea:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801aeec:	883b      	ldrh	r3, [r7, #0]
 801aeee:	b2db      	uxtb	r3, r3
 801aef0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801aef2:	f107 0308 	add.w	r3, r7, #8
 801aef6:	2208      	movs	r2, #8
 801aef8:	4619      	mov	r1, r3
 801aefa:	2008      	movs	r0, #8
 801aefc:	f000 fbc2 	bl	801b684 <SUBGRF_WriteCommand>
}
 801af00:	bf00      	nop
 801af02:	3714      	adds	r7, #20
 801af04:	46bd      	mov	sp, r7
 801af06:	bd90      	pop	{r4, r7, pc}

0801af08 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b084      	sub	sp, #16
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	4603      	mov	r3, r0
 801af10:	6039      	str	r1, [r7, #0]
 801af12:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801af14:	79fb      	ldrb	r3, [r7, #7]
 801af16:	f003 0307 	and.w	r3, r3, #7
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	0c1b      	lsrs	r3, r3, #16
 801af22:	b2db      	uxtb	r3, r3
 801af24:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	0a1b      	lsrs	r3, r3, #8
 801af2a:	b2db      	uxtb	r3, r3
 801af2c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	b2db      	uxtb	r3, r3
 801af32:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801af34:	f107 030c 	add.w	r3, r7, #12
 801af38:	2204      	movs	r2, #4
 801af3a:	4619      	mov	r1, r3
 801af3c:	2097      	movs	r0, #151	@ 0x97
 801af3e:	f000 fba1 	bl	801b684 <SUBGRF_WriteCommand>
}
 801af42:	bf00      	nop
 801af44:	3710      	adds	r7, #16
 801af46:	46bd      	mov	sp, r7
 801af48:	bd80      	pop	{r7, pc}
	...

0801af4c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801af4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801af50:	b084      	sub	sp, #16
 801af52:	af00      	add	r7, sp, #0
 801af54:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801af56:	2300      	movs	r3, #0
 801af58:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801af5a:	4b1d      	ldr	r3, [pc, #116]	@ (801afd0 <SUBGRF_SetRfFrequency+0x84>)
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	f083 0301 	eor.w	r3, r3, #1
 801af62:	b2db      	uxtb	r3, r3
 801af64:	2b00      	cmp	r3, #0
 801af66:	d005      	beq.n	801af74 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801af68:	6878      	ldr	r0, [r7, #4]
 801af6a:	f7ff ff2b 	bl	801adc4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801af6e:	4b18      	ldr	r3, [pc, #96]	@ (801afd0 <SUBGRF_SetRfFrequency+0x84>)
 801af70:	2201      	movs	r2, #1
 801af72:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2200      	movs	r2, #0
 801af78:	461c      	mov	r4, r3
 801af7a:	4615      	mov	r5, r2
 801af7c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801af80:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801af84:	4a13      	ldr	r2, [pc, #76]	@ (801afd4 <SUBGRF_SetRfFrequency+0x88>)
 801af86:	f04f 0300 	mov.w	r3, #0
 801af8a:	4640      	mov	r0, r8
 801af8c:	4649      	mov	r1, r9
 801af8e:	f7e5 fc79 	bl	8000884 <__aeabi_uldivmod>
 801af92:	4602      	mov	r2, r0
 801af94:	460b      	mov	r3, r1
 801af96:	4613      	mov	r3, r2
 801af98:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	0e1b      	lsrs	r3, r3, #24
 801af9e:	b2db      	uxtb	r3, r3
 801afa0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	0c1b      	lsrs	r3, r3, #16
 801afa6:	b2db      	uxtb	r3, r3
 801afa8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	0a1b      	lsrs	r3, r3, #8
 801afae:	b2db      	uxtb	r3, r3
 801afb0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	b2db      	uxtb	r3, r3
 801afb6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801afb8:	f107 0308 	add.w	r3, r7, #8
 801afbc:	2204      	movs	r2, #4
 801afbe:	4619      	mov	r1, r3
 801afc0:	2086      	movs	r0, #134	@ 0x86
 801afc2:	f000 fb5f 	bl	801b684 <SUBGRF_WriteCommand>
}
 801afc6:	bf00      	nop
 801afc8:	3710      	adds	r7, #16
 801afca:	46bd      	mov	sp, r7
 801afcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801afd0:	20003e2c 	.word	0x20003e2c
 801afd4:	01e84800 	.word	0x01e84800

0801afd8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	4603      	mov	r3, r0
 801afe0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801afe2:	79fa      	ldrb	r2, [r7, #7]
 801afe4:	4b09      	ldr	r3, [pc, #36]	@ (801b00c <SUBGRF_SetPacketType+0x34>)
 801afe6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801afe8:	79fb      	ldrb	r3, [r7, #7]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d104      	bne.n	801aff8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801afee:	2100      	movs	r1, #0
 801aff0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801aff4:	f000 fa96 	bl	801b524 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801aff8:	1dfb      	adds	r3, r7, #7
 801affa:	2201      	movs	r2, #1
 801affc:	4619      	mov	r1, r3
 801affe:	208a      	movs	r0, #138	@ 0x8a
 801b000:	f000 fb40 	bl	801b684 <SUBGRF_WriteCommand>
}
 801b004:	bf00      	nop
 801b006:	3708      	adds	r7, #8
 801b008:	46bd      	mov	sp, r7
 801b00a:	bd80      	pop	{r7, pc}
 801b00c:	20003e25 	.word	0x20003e25

0801b010 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b010:	b480      	push	{r7}
 801b012:	af00      	add	r7, sp, #0
    return PacketType;
 801b014:	4b02      	ldr	r3, [pc, #8]	@ (801b020 <SUBGRF_GetPacketType+0x10>)
 801b016:	781b      	ldrb	r3, [r3, #0]
}
 801b018:	4618      	mov	r0, r3
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bc80      	pop	{r7}
 801b01e:	4770      	bx	lr
 801b020:	20003e25 	.word	0x20003e25

0801b024 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b084      	sub	sp, #16
 801b028:	af00      	add	r7, sp, #0
 801b02a:	4603      	mov	r3, r0
 801b02c:	71fb      	strb	r3, [r7, #7]
 801b02e:	460b      	mov	r3, r1
 801b030:	71bb      	strb	r3, [r7, #6]
 801b032:	4613      	mov	r3, r2
 801b034:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801b036:	79fb      	ldrb	r3, [r7, #7]
 801b038:	2b01      	cmp	r3, #1
 801b03a:	d124      	bne.n	801b086 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801b03c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b040:	2b0f      	cmp	r3, #15
 801b042:	d106      	bne.n	801b052 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801b044:	2301      	movs	r3, #1
 801b046:	2201      	movs	r2, #1
 801b048:	2100      	movs	r1, #0
 801b04a:	2006      	movs	r0, #6
 801b04c:	f7ff ff00 	bl	801ae50 <SUBGRF_SetPaConfig>
 801b050:	e005      	b.n	801b05e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801b052:	2301      	movs	r3, #1
 801b054:	2201      	movs	r2, #1
 801b056:	2100      	movs	r1, #0
 801b058:	2004      	movs	r0, #4
 801b05a:	f7ff fef9 	bl	801ae50 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801b05e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b062:	2b0d      	cmp	r3, #13
 801b064:	dd02      	ble.n	801b06c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801b066:	230e      	movs	r3, #14
 801b068:	71bb      	strb	r3, [r7, #6]
 801b06a:	e006      	b.n	801b07a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801b06c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b070:	f113 0f11 	cmn.w	r3, #17
 801b074:	da01      	bge.n	801b07a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801b076:	23ef      	movs	r3, #239	@ 0xef
 801b078:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801b07a:	2118      	movs	r1, #24
 801b07c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b080:	f000 fa50 	bl	801b524 <SUBGRF_WriteRegister>
 801b084:	e025      	b.n	801b0d2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801b086:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b08a:	f000 fa5f 	bl	801b54c <SUBGRF_ReadRegister>
 801b08e:	4603      	mov	r3, r0
 801b090:	f043 031e 	orr.w	r3, r3, #30
 801b094:	b2db      	uxtb	r3, r3
 801b096:	4619      	mov	r1, r3
 801b098:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801b09c:	f000 fa42 	bl	801b524 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	2107      	movs	r1, #7
 801b0a6:	2004      	movs	r0, #4
 801b0a8:	f7ff fed2 	bl	801ae50 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801b0ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b0b0:	2b16      	cmp	r3, #22
 801b0b2:	dd02      	ble.n	801b0ba <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801b0b4:	2316      	movs	r3, #22
 801b0b6:	71bb      	strb	r3, [r7, #6]
 801b0b8:	e006      	b.n	801b0c8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801b0ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b0be:	f113 0f09 	cmn.w	r3, #9
 801b0c2:	da01      	bge.n	801b0c8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801b0c4:	23f7      	movs	r3, #247	@ 0xf7
 801b0c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801b0c8:	2138      	movs	r1, #56	@ 0x38
 801b0ca:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801b0ce:	f000 fa29 	bl	801b524 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b0d2:	79bb      	ldrb	r3, [r7, #6]
 801b0d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801b0d6:	797b      	ldrb	r3, [r7, #5]
 801b0d8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801b0da:	f107 030c 	add.w	r3, r7, #12
 801b0de:	2202      	movs	r2, #2
 801b0e0:	4619      	mov	r1, r3
 801b0e2:	208e      	movs	r0, #142	@ 0x8e
 801b0e4:	f000 face 	bl	801b684 <SUBGRF_WriteCommand>
}
 801b0e8:	bf00      	nop
 801b0ea:	3710      	adds	r7, #16
 801b0ec:	46bd      	mov	sp, r7
 801b0ee:	bd80      	pop	{r7, pc}

0801b0f0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b0f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b0f4:	b086      	sub	sp, #24
 801b0f6:	af00      	add	r7, sp, #0
 801b0f8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b0fe:	4a61      	ldr	r2, [pc, #388]	@ (801b284 <SUBGRF_SetModulationParams+0x194>)
 801b100:	f107 0308 	add.w	r3, r7, #8
 801b104:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b108:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	781a      	ldrb	r2, [r3, #0]
 801b110:	4b5d      	ldr	r3, [pc, #372]	@ (801b288 <SUBGRF_SetModulationParams+0x198>)
 801b112:	781b      	ldrb	r3, [r3, #0]
 801b114:	429a      	cmp	r2, r3
 801b116:	d004      	beq.n	801b122 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	781b      	ldrb	r3, [r3, #0]
 801b11c:	4618      	mov	r0, r3
 801b11e:	f7ff ff5b 	bl	801afd8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	781b      	ldrb	r3, [r3, #0]
 801b126:	2b03      	cmp	r3, #3
 801b128:	f200 80a5 	bhi.w	801b276 <SUBGRF_SetModulationParams+0x186>
 801b12c:	a201      	add	r2, pc, #4	@ (adr r2, 801b134 <SUBGRF_SetModulationParams+0x44>)
 801b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b132:	bf00      	nop
 801b134:	0801b145 	.word	0x0801b145
 801b138:	0801b205 	.word	0x0801b205
 801b13c:	0801b1c7 	.word	0x0801b1c7
 801b140:	0801b233 	.word	0x0801b233
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b144:	2308      	movs	r3, #8
 801b146:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	685b      	ldr	r3, [r3, #4]
 801b14c:	4a4f      	ldr	r2, [pc, #316]	@ (801b28c <SUBGRF_SetModulationParams+0x19c>)
 801b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b152:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	0c1b      	lsrs	r3, r3, #16
 801b158:	b2db      	uxtb	r3, r3
 801b15a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b15c:	697b      	ldr	r3, [r7, #20]
 801b15e:	0a1b      	lsrs	r3, r3, #8
 801b160:	b2db      	uxtb	r3, r3
 801b162:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	b2db      	uxtb	r3, r3
 801b168:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	7b1b      	ldrb	r3, [r3, #12]
 801b16e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	7b5b      	ldrb	r3, [r3, #13]
 801b174:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	689b      	ldr	r3, [r3, #8]
 801b17a:	2200      	movs	r2, #0
 801b17c:	461c      	mov	r4, r3
 801b17e:	4615      	mov	r5, r2
 801b180:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b184:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b188:	4a41      	ldr	r2, [pc, #260]	@ (801b290 <SUBGRF_SetModulationParams+0x1a0>)
 801b18a:	f04f 0300 	mov.w	r3, #0
 801b18e:	4640      	mov	r0, r8
 801b190:	4649      	mov	r1, r9
 801b192:	f7e5 fb77 	bl	8000884 <__aeabi_uldivmod>
 801b196:	4602      	mov	r2, r0
 801b198:	460b      	mov	r3, r1
 801b19a:	4613      	mov	r3, r2
 801b19c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b19e:	697b      	ldr	r3, [r7, #20]
 801b1a0:	0c1b      	lsrs	r3, r3, #16
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	0a1b      	lsrs	r3, r3, #8
 801b1aa:	b2db      	uxtb	r3, r3
 801b1ac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b1b4:	7cfb      	ldrb	r3, [r7, #19]
 801b1b6:	b29a      	uxth	r2, r3
 801b1b8:	f107 0308 	add.w	r3, r7, #8
 801b1bc:	4619      	mov	r1, r3
 801b1be:	208b      	movs	r0, #139	@ 0x8b
 801b1c0:	f000 fa60 	bl	801b684 <SUBGRF_WriteCommand>
        break;
 801b1c4:	e058      	b.n	801b278 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b1c6:	2304      	movs	r3, #4
 801b1c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	691b      	ldr	r3, [r3, #16]
 801b1ce:	4a2f      	ldr	r2, [pc, #188]	@ (801b28c <SUBGRF_SetModulationParams+0x19c>)
 801b1d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b1d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b1d6:	697b      	ldr	r3, [r7, #20]
 801b1d8:	0c1b      	lsrs	r3, r3, #16
 801b1da:	b2db      	uxtb	r3, r3
 801b1dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b1de:	697b      	ldr	r3, [r7, #20]
 801b1e0:	0a1b      	lsrs	r3, r3, #8
 801b1e2:	b2db      	uxtb	r3, r3
 801b1e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b1e6:	697b      	ldr	r3, [r7, #20]
 801b1e8:	b2db      	uxtb	r3, r3
 801b1ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	7d1b      	ldrb	r3, [r3, #20]
 801b1f0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b1f2:	7cfb      	ldrb	r3, [r7, #19]
 801b1f4:	b29a      	uxth	r2, r3
 801b1f6:	f107 0308 	add.w	r3, r7, #8
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	208b      	movs	r0, #139	@ 0x8b
 801b1fe:	f000 fa41 	bl	801b684 <SUBGRF_WriteCommand>
        break;
 801b202:	e039      	b.n	801b278 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b204:	2304      	movs	r3, #4
 801b206:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	7e1b      	ldrb	r3, [r3, #24]
 801b20c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	7e5b      	ldrb	r3, [r3, #25]
 801b212:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	7e9b      	ldrb	r3, [r3, #26]
 801b218:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	7edb      	ldrb	r3, [r3, #27]
 801b21e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b220:	7cfb      	ldrb	r3, [r7, #19]
 801b222:	b29a      	uxth	r2, r3
 801b224:	f107 0308 	add.w	r3, r7, #8
 801b228:	4619      	mov	r1, r3
 801b22a:	208b      	movs	r0, #139	@ 0x8b
 801b22c:	f000 fa2a 	bl	801b684 <SUBGRF_WriteCommand>

        break;
 801b230:	e022      	b.n	801b278 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b232:	2305      	movs	r3, #5
 801b234:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	685b      	ldr	r3, [r3, #4]
 801b23a:	4a14      	ldr	r2, [pc, #80]	@ (801b28c <SUBGRF_SetModulationParams+0x19c>)
 801b23c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b240:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b242:	697b      	ldr	r3, [r7, #20]
 801b244:	0c1b      	lsrs	r3, r3, #16
 801b246:	b2db      	uxtb	r3, r3
 801b248:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b24a:	697b      	ldr	r3, [r7, #20]
 801b24c:	0a1b      	lsrs	r3, r3, #8
 801b24e:	b2db      	uxtb	r3, r3
 801b250:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b252:	697b      	ldr	r3, [r7, #20]
 801b254:	b2db      	uxtb	r3, r3
 801b256:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	7b1b      	ldrb	r3, [r3, #12]
 801b25c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	7b5b      	ldrb	r3, [r3, #13]
 801b262:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b264:	7cfb      	ldrb	r3, [r7, #19]
 801b266:	b29a      	uxth	r2, r3
 801b268:	f107 0308 	add.w	r3, r7, #8
 801b26c:	4619      	mov	r1, r3
 801b26e:	208b      	movs	r0, #139	@ 0x8b
 801b270:	f000 fa08 	bl	801b684 <SUBGRF_WriteCommand>
        break;
 801b274:	e000      	b.n	801b278 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b276:	bf00      	nop
    }
}
 801b278:	bf00      	nop
 801b27a:	3718      	adds	r7, #24
 801b27c:	46bd      	mov	sp, r7
 801b27e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b282:	bf00      	nop
 801b284:	0801dacc 	.word	0x0801dacc
 801b288:	20003e25 	.word	0x20003e25
 801b28c:	3d090000 	.word	0x3d090000
 801b290:	01e84800 	.word	0x01e84800

0801b294 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b086      	sub	sp, #24
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b29c:	2300      	movs	r3, #0
 801b29e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b2a0:	4a48      	ldr	r2, [pc, #288]	@ (801b3c4 <SUBGRF_SetPacketParams+0x130>)
 801b2a2:	f107 030c 	add.w	r3, r7, #12
 801b2a6:	ca07      	ldmia	r2, {r0, r1, r2}
 801b2a8:	c303      	stmia	r3!, {r0, r1}
 801b2aa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	781a      	ldrb	r2, [r3, #0]
 801b2b0:	4b45      	ldr	r3, [pc, #276]	@ (801b3c8 <SUBGRF_SetPacketParams+0x134>)
 801b2b2:	781b      	ldrb	r3, [r3, #0]
 801b2b4:	429a      	cmp	r2, r3
 801b2b6:	d004      	beq.n	801b2c2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f7ff fe8b 	bl	801afd8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	781b      	ldrb	r3, [r3, #0]
 801b2c6:	2b03      	cmp	r3, #3
 801b2c8:	d878      	bhi.n	801b3bc <SUBGRF_SetPacketParams+0x128>
 801b2ca:	a201      	add	r2, pc, #4	@ (adr r2, 801b2d0 <SUBGRF_SetPacketParams+0x3c>)
 801b2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2d0:	0801b2e1 	.word	0x0801b2e1
 801b2d4:	0801b371 	.word	0x0801b371
 801b2d8:	0801b365 	.word	0x0801b365
 801b2dc:	0801b2e1 	.word	0x0801b2e1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	7a5b      	ldrb	r3, [r3, #9]
 801b2e4:	2bf1      	cmp	r3, #241	@ 0xf1
 801b2e6:	d10a      	bne.n	801b2fe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b2e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b2ec:	f7ff fb16 	bl	801a91c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b2f0:	f248 0005 	movw	r0, #32773	@ 0x8005
 801b2f4:	f7ff fb32 	bl	801a95c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b2f8:	2302      	movs	r3, #2
 801b2fa:	75bb      	strb	r3, [r7, #22]
 801b2fc:	e011      	b.n	801b322 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	7a5b      	ldrb	r3, [r3, #9]
 801b302:	2bf2      	cmp	r3, #242	@ 0xf2
 801b304:	d10a      	bne.n	801b31c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b306:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801b30a:	f7ff fb07 	bl	801a91c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b30e:	f241 0021 	movw	r0, #4129	@ 0x1021
 801b312:	f7ff fb23 	bl	801a95c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b316:	2306      	movs	r3, #6
 801b318:	75bb      	strb	r3, [r7, #22]
 801b31a:	e002      	b.n	801b322 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	7a5b      	ldrb	r3, [r3, #9]
 801b320:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b322:	2309      	movs	r3, #9
 801b324:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	885b      	ldrh	r3, [r3, #2]
 801b32a:	0a1b      	lsrs	r3, r3, #8
 801b32c:	b29b      	uxth	r3, r3
 801b32e:	b2db      	uxtb	r3, r3
 801b330:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	885b      	ldrh	r3, [r3, #2]
 801b336:	b2db      	uxtb	r3, r3
 801b338:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	791b      	ldrb	r3, [r3, #4]
 801b33e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	795b      	ldrb	r3, [r3, #5]
 801b344:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	799b      	ldrb	r3, [r3, #6]
 801b34a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	79db      	ldrb	r3, [r3, #7]
 801b350:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	7a1b      	ldrb	r3, [r3, #8]
 801b356:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801b358:	7dbb      	ldrb	r3, [r7, #22]
 801b35a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	7a9b      	ldrb	r3, [r3, #10]
 801b360:	753b      	strb	r3, [r7, #20]
        break;
 801b362:	e022      	b.n	801b3aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801b364:	2301      	movs	r3, #1
 801b366:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	7b1b      	ldrb	r3, [r3, #12]
 801b36c:	733b      	strb	r3, [r7, #12]
        break;
 801b36e:	e01c      	b.n	801b3aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801b370:	2306      	movs	r3, #6
 801b372:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	89db      	ldrh	r3, [r3, #14]
 801b378:	0a1b      	lsrs	r3, r3, #8
 801b37a:	b29b      	uxth	r3, r3
 801b37c:	b2db      	uxtb	r3, r3
 801b37e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	89db      	ldrh	r3, [r3, #14]
 801b384:	b2db      	uxtb	r3, r3
 801b386:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	7c1a      	ldrb	r2, [r3, #16]
 801b38c:	4b0f      	ldr	r3, [pc, #60]	@ (801b3cc <SUBGRF_SetPacketParams+0x138>)
 801b38e:	4611      	mov	r1, r2
 801b390:	7019      	strb	r1, [r3, #0]
 801b392:	4613      	mov	r3, r2
 801b394:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	7c5b      	ldrb	r3, [r3, #17]
 801b39a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	7c9b      	ldrb	r3, [r3, #18]
 801b3a0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	7cdb      	ldrb	r3, [r3, #19]
 801b3a6:	747b      	strb	r3, [r7, #17]
        break;
 801b3a8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801b3aa:	7dfb      	ldrb	r3, [r7, #23]
 801b3ac:	b29a      	uxth	r2, r3
 801b3ae:	f107 030c 	add.w	r3, r7, #12
 801b3b2:	4619      	mov	r1, r3
 801b3b4:	208c      	movs	r0, #140	@ 0x8c
 801b3b6:	f000 f965 	bl	801b684 <SUBGRF_WriteCommand>
 801b3ba:	e000      	b.n	801b3be <SUBGRF_SetPacketParams+0x12a>
        return;
 801b3bc:	bf00      	nop
}
 801b3be:	3718      	adds	r7, #24
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	bd80      	pop	{r7, pc}
 801b3c4:	0801dad4 	.word	0x0801dad4
 801b3c8:	20003e25 	.word	0x20003e25
 801b3cc:	20003e26 	.word	0x20003e26

0801b3d0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b084      	sub	sp, #16
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	460a      	mov	r2, r1
 801b3da:	71fb      	strb	r3, [r7, #7]
 801b3dc:	4613      	mov	r3, r2
 801b3de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801b3e0:	79fb      	ldrb	r3, [r7, #7]
 801b3e2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801b3e4:	79bb      	ldrb	r3, [r7, #6]
 801b3e6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801b3e8:	f107 030c 	add.w	r3, r7, #12
 801b3ec:	2202      	movs	r2, #2
 801b3ee:	4619      	mov	r1, r3
 801b3f0:	208f      	movs	r0, #143	@ 0x8f
 801b3f2:	f000 f947 	bl	801b684 <SUBGRF_WriteCommand>
}
 801b3f6:	bf00      	nop
 801b3f8:	3710      	adds	r7, #16
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}

0801b3fe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801b3fe:	b580      	push	{r7, lr}
 801b400:	b082      	sub	sp, #8
 801b402:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801b404:	2300      	movs	r3, #0
 801b406:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801b408:	1d3b      	adds	r3, r7, #4
 801b40a:	2201      	movs	r2, #1
 801b40c:	4619      	mov	r1, r3
 801b40e:	2015      	movs	r0, #21
 801b410:	f000 f95a 	bl	801b6c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801b414:	793b      	ldrb	r3, [r7, #4]
 801b416:	425b      	negs	r3, r3
 801b418:	105b      	asrs	r3, r3, #1
 801b41a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801b41c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b420:	4618      	mov	r0, r3
 801b422:	3708      	adds	r7, #8
 801b424:	46bd      	mov	sp, r7
 801b426:	bd80      	pop	{r7, pc}

0801b428 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b084      	sub	sp, #16
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801b432:	f107 030c 	add.w	r3, r7, #12
 801b436:	2202      	movs	r2, #2
 801b438:	4619      	mov	r1, r3
 801b43a:	2013      	movs	r0, #19
 801b43c:	f000 f944 	bl	801b6c8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801b440:	f7ff fde6 	bl	801b010 <SUBGRF_GetPacketType>
 801b444:	4603      	mov	r3, r0
 801b446:	2b01      	cmp	r3, #1
 801b448:	d10d      	bne.n	801b466 <SUBGRF_GetRxBufferStatus+0x3e>
 801b44a:	4b0c      	ldr	r3, [pc, #48]	@ (801b47c <SUBGRF_GetRxBufferStatus+0x54>)
 801b44c:	781b      	ldrb	r3, [r3, #0]
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	2b01      	cmp	r3, #1
 801b452:	d108      	bne.n	801b466 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801b454:	f240 7002 	movw	r0, #1794	@ 0x702
 801b458:	f000 f878 	bl	801b54c <SUBGRF_ReadRegister>
 801b45c:	4603      	mov	r3, r0
 801b45e:	461a      	mov	r2, r3
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	701a      	strb	r2, [r3, #0]
 801b464:	e002      	b.n	801b46c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801b466:	7b3a      	ldrb	r2, [r7, #12]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801b46c:	7b7a      	ldrb	r2, [r7, #13]
 801b46e:	683b      	ldr	r3, [r7, #0]
 801b470:	701a      	strb	r2, [r3, #0]
}
 801b472:	bf00      	nop
 801b474:	3710      	adds	r7, #16
 801b476:	46bd      	mov	sp, r7
 801b478:	bd80      	pop	{r7, pc}
 801b47a:	bf00      	nop
 801b47c:	20003e26 	.word	0x20003e26

0801b480 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801b480:	b580      	push	{r7, lr}
 801b482:	b084      	sub	sp, #16
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801b488:	f107 030c 	add.w	r3, r7, #12
 801b48c:	2203      	movs	r2, #3
 801b48e:	4619      	mov	r1, r3
 801b490:	2014      	movs	r0, #20
 801b492:	f000 f919 	bl	801b6c8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b496:	f7ff fdbb 	bl	801b010 <SUBGRF_GetPacketType>
 801b49a:	4603      	mov	r3, r0
 801b49c:	461a      	mov	r2, r3
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d002      	beq.n	801b4b0 <SUBGRF_GetPacketStatus+0x30>
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d013      	beq.n	801b4d6 <SUBGRF_GetPacketStatus+0x56>
 801b4ae:	e02a      	b.n	801b506 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b4b0:	7b3a      	ldrb	r2, [r7, #12]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b4b6:	7b7b      	ldrb	r3, [r7, #13]
 801b4b8:	425b      	negs	r3, r3
 801b4ba:	105b      	asrs	r3, r3, #1
 801b4bc:	b25a      	sxtb	r2, r3
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b4c2:	7bbb      	ldrb	r3, [r7, #14]
 801b4c4:	425b      	negs	r3, r3
 801b4c6:	105b      	asrs	r3, r3, #1
 801b4c8:	b25a      	sxtb	r2, r3
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	609a      	str	r2, [r3, #8]
            break;
 801b4d4:	e020      	b.n	801b518 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b4d6:	7b3b      	ldrb	r3, [r7, #12]
 801b4d8:	425b      	negs	r3, r3
 801b4da:	105b      	asrs	r3, r3, #1
 801b4dc:	b25a      	sxtb	r2, r3
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b4e2:	7b7b      	ldrb	r3, [r7, #13]
 801b4e4:	b25b      	sxtb	r3, r3
 801b4e6:	3302      	adds	r3, #2
 801b4e8:	109b      	asrs	r3, r3, #2
 801b4ea:	b25a      	sxtb	r2, r3
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b4f0:	7bbb      	ldrb	r3, [r7, #14]
 801b4f2:	425b      	negs	r3, r3
 801b4f4:	105b      	asrs	r3, r3, #1
 801b4f6:	b25a      	sxtb	r2, r3
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b4fc:	4b08      	ldr	r3, [pc, #32]	@ (801b520 <SUBGRF_GetPacketStatus+0xa0>)
 801b4fe:	681a      	ldr	r2, [r3, #0]
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	611a      	str	r2, [r3, #16]
            break;
 801b504:	e008      	b.n	801b518 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b506:	2214      	movs	r2, #20
 801b508:	2100      	movs	r1, #0
 801b50a:	6878      	ldr	r0, [r7, #4]
 801b50c:	f000 fe63 	bl	801c1d6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	220f      	movs	r2, #15
 801b514:	701a      	strb	r2, [r3, #0]
            break;
 801b516:	bf00      	nop
    }
}
 801b518:	bf00      	nop
 801b51a:	3710      	adds	r7, #16
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	20003e28 	.word	0x20003e28

0801b524 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0
 801b52a:	4603      	mov	r3, r0
 801b52c:	460a      	mov	r2, r1
 801b52e:	80fb      	strh	r3, [r7, #6]
 801b530:	4613      	mov	r3, r2
 801b532:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b534:	1d7a      	adds	r2, r7, #5
 801b536:	88f9      	ldrh	r1, [r7, #6]
 801b538:	2301      	movs	r3, #1
 801b53a:	4803      	ldr	r0, [pc, #12]	@ (801b548 <SUBGRF_WriteRegister+0x24>)
 801b53c:	f7eb fd30 	bl	8006fa0 <HAL_SUBGHZ_WriteRegisters>
}
 801b540:	bf00      	nop
 801b542:	3708      	adds	r7, #8
 801b544:	46bd      	mov	sp, r7
 801b546:	bd80      	pop	{r7, pc}
 801b548:	20000a68 	.word	0x20000a68

0801b54c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b084      	sub	sp, #16
 801b550:	af00      	add	r7, sp, #0
 801b552:	4603      	mov	r3, r0
 801b554:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b556:	f107 020f 	add.w	r2, r7, #15
 801b55a:	88f9      	ldrh	r1, [r7, #6]
 801b55c:	2301      	movs	r3, #1
 801b55e:	4804      	ldr	r0, [pc, #16]	@ (801b570 <SUBGRF_ReadRegister+0x24>)
 801b560:	f7eb fd7d 	bl	800705e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b564:	7bfb      	ldrb	r3, [r7, #15]
}
 801b566:	4618      	mov	r0, r3
 801b568:	3710      	adds	r7, #16
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}
 801b56e:	bf00      	nop
 801b570:	20000a68 	.word	0x20000a68

0801b574 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b086      	sub	sp, #24
 801b578:	af00      	add	r7, sp, #0
 801b57a:	4603      	mov	r3, r0
 801b57c:	6039      	str	r1, [r7, #0]
 801b57e:	80fb      	strh	r3, [r7, #6]
 801b580:	4613      	mov	r3, r2
 801b582:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b584:	f3ef 8310 	mrs	r3, PRIMASK
 801b588:	60fb      	str	r3, [r7, #12]
  return(result);
 801b58a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b58c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b58e:	b672      	cpsid	i
}
 801b590:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b592:	88bb      	ldrh	r3, [r7, #4]
 801b594:	88f9      	ldrh	r1, [r7, #6]
 801b596:	683a      	ldr	r2, [r7, #0]
 801b598:	4806      	ldr	r0, [pc, #24]	@ (801b5b4 <SUBGRF_WriteRegisters+0x40>)
 801b59a:	f7eb fd01 	bl	8006fa0 <HAL_SUBGHZ_WriteRegisters>
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5a2:	693b      	ldr	r3, [r7, #16]
 801b5a4:	f383 8810 	msr	PRIMASK, r3
}
 801b5a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5aa:	bf00      	nop
 801b5ac:	3718      	adds	r7, #24
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bd80      	pop	{r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	20000a68 	.word	0x20000a68

0801b5b8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b086      	sub	sp, #24
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	4603      	mov	r3, r0
 801b5c0:	6039      	str	r1, [r7, #0]
 801b5c2:	80fb      	strh	r3, [r7, #6]
 801b5c4:	4613      	mov	r3, r2
 801b5c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5c8:	f3ef 8310 	mrs	r3, PRIMASK
 801b5cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801b5ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b5d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5d2:	b672      	cpsid	i
}
 801b5d4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b5d6:	88bb      	ldrh	r3, [r7, #4]
 801b5d8:	88f9      	ldrh	r1, [r7, #6]
 801b5da:	683a      	ldr	r2, [r7, #0]
 801b5dc:	4806      	ldr	r0, [pc, #24]	@ (801b5f8 <SUBGRF_ReadRegisters+0x40>)
 801b5de:	f7eb fd3e 	bl	800705e <HAL_SUBGHZ_ReadRegisters>
 801b5e2:	697b      	ldr	r3, [r7, #20]
 801b5e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5e6:	693b      	ldr	r3, [r7, #16]
 801b5e8:	f383 8810 	msr	PRIMASK, r3
}
 801b5ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b5ee:	bf00      	nop
 801b5f0:	3718      	adds	r7, #24
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}
 801b5f6:	bf00      	nop
 801b5f8:	20000a68 	.word	0x20000a68

0801b5fc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b086      	sub	sp, #24
 801b600:	af00      	add	r7, sp, #0
 801b602:	4603      	mov	r3, r0
 801b604:	6039      	str	r1, [r7, #0]
 801b606:	71fb      	strb	r3, [r7, #7]
 801b608:	4613      	mov	r3, r2
 801b60a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b60c:	f3ef 8310 	mrs	r3, PRIMASK
 801b610:	60fb      	str	r3, [r7, #12]
  return(result);
 801b612:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b616:	b672      	cpsid	i
}
 801b618:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b61a:	79bb      	ldrb	r3, [r7, #6]
 801b61c:	b29b      	uxth	r3, r3
 801b61e:	79f9      	ldrb	r1, [r7, #7]
 801b620:	683a      	ldr	r2, [r7, #0]
 801b622:	4806      	ldr	r0, [pc, #24]	@ (801b63c <SUBGRF_WriteBuffer+0x40>)
 801b624:	f7eb fe2f 	bl	8007286 <HAL_SUBGHZ_WriteBuffer>
 801b628:	697b      	ldr	r3, [r7, #20]
 801b62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b62c:	693b      	ldr	r3, [r7, #16]
 801b62e:	f383 8810 	msr	PRIMASK, r3
}
 801b632:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b634:	bf00      	nop
 801b636:	3718      	adds	r7, #24
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}
 801b63c:	20000a68 	.word	0x20000a68

0801b640 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b640:	b580      	push	{r7, lr}
 801b642:	b086      	sub	sp, #24
 801b644:	af00      	add	r7, sp, #0
 801b646:	4603      	mov	r3, r0
 801b648:	6039      	str	r1, [r7, #0]
 801b64a:	71fb      	strb	r3, [r7, #7]
 801b64c:	4613      	mov	r3, r2
 801b64e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b650:	f3ef 8310 	mrs	r3, PRIMASK
 801b654:	60fb      	str	r3, [r7, #12]
  return(result);
 801b656:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b65a:	b672      	cpsid	i
}
 801b65c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b65e:	79bb      	ldrb	r3, [r7, #6]
 801b660:	b29b      	uxth	r3, r3
 801b662:	79f9      	ldrb	r1, [r7, #7]
 801b664:	683a      	ldr	r2, [r7, #0]
 801b666:	4806      	ldr	r0, [pc, #24]	@ (801b680 <SUBGRF_ReadBuffer+0x40>)
 801b668:	f7eb fe60 	bl	800732c <HAL_SUBGHZ_ReadBuffer>
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b670:	693b      	ldr	r3, [r7, #16]
 801b672:	f383 8810 	msr	PRIMASK, r3
}
 801b676:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b678:	bf00      	nop
 801b67a:	3718      	adds	r7, #24
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}
 801b680:	20000a68 	.word	0x20000a68

0801b684 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b684:	b580      	push	{r7, lr}
 801b686:	b086      	sub	sp, #24
 801b688:	af00      	add	r7, sp, #0
 801b68a:	4603      	mov	r3, r0
 801b68c:	6039      	str	r1, [r7, #0]
 801b68e:	71fb      	strb	r3, [r7, #7]
 801b690:	4613      	mov	r3, r2
 801b692:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b694:	f3ef 8310 	mrs	r3, PRIMASK
 801b698:	60fb      	str	r3, [r7, #12]
  return(result);
 801b69a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b69c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b69e:	b672      	cpsid	i
}
 801b6a0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b6a2:	88bb      	ldrh	r3, [r7, #4]
 801b6a4:	79f9      	ldrb	r1, [r7, #7]
 801b6a6:	683a      	ldr	r2, [r7, #0]
 801b6a8:	4806      	ldr	r0, [pc, #24]	@ (801b6c4 <SUBGRF_WriteCommand+0x40>)
 801b6aa:	f7eb fd39 	bl	8007120 <HAL_SUBGHZ_ExecSetCmd>
 801b6ae:	697b      	ldr	r3, [r7, #20]
 801b6b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6b2:	693b      	ldr	r3, [r7, #16]
 801b6b4:	f383 8810 	msr	PRIMASK, r3
}
 801b6b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b6ba:	bf00      	nop
 801b6bc:	3718      	adds	r7, #24
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}
 801b6c2:	bf00      	nop
 801b6c4:	20000a68 	.word	0x20000a68

0801b6c8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b086      	sub	sp, #24
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	6039      	str	r1, [r7, #0]
 801b6d2:	71fb      	strb	r3, [r7, #7]
 801b6d4:	4613      	mov	r3, r2
 801b6d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6d8:	f3ef 8310 	mrs	r3, PRIMASK
 801b6dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801b6de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b6e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6e2:	b672      	cpsid	i
}
 801b6e4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b6e6:	88bb      	ldrh	r3, [r7, #4]
 801b6e8:	79f9      	ldrb	r1, [r7, #7]
 801b6ea:	683a      	ldr	r2, [r7, #0]
 801b6ec:	4806      	ldr	r0, [pc, #24]	@ (801b708 <SUBGRF_ReadCommand+0x40>)
 801b6ee:	f7eb fd76 	bl	80071de <HAL_SUBGHZ_ExecGetCmd>
 801b6f2:	697b      	ldr	r3, [r7, #20]
 801b6f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6f6:	693b      	ldr	r3, [r7, #16]
 801b6f8:	f383 8810 	msr	PRIMASK, r3
}
 801b6fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b6fe:	bf00      	nop
 801b700:	3718      	adds	r7, #24
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}
 801b706:	bf00      	nop
 801b708:	20000a68 	.word	0x20000a68

0801b70c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b084      	sub	sp, #16
 801b710:	af00      	add	r7, sp, #0
 801b712:	4603      	mov	r3, r0
 801b714:	460a      	mov	r2, r1
 801b716:	71fb      	strb	r3, [r7, #7]
 801b718:	4613      	mov	r3, r2
 801b71a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b71c:	2301      	movs	r3, #1
 801b71e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b720:	79bb      	ldrb	r3, [r7, #6]
 801b722:	2b01      	cmp	r3, #1
 801b724:	d10d      	bne.n	801b742 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b726:	79fb      	ldrb	r3, [r7, #7]
 801b728:	2b01      	cmp	r3, #1
 801b72a:	d104      	bne.n	801b736 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b72c:	2302      	movs	r3, #2
 801b72e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b730:	2004      	movs	r0, #4
 801b732:	f000 f8df 	bl	801b8f4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b736:	79fb      	ldrb	r3, [r7, #7]
 801b738:	2b02      	cmp	r3, #2
 801b73a:	d107      	bne.n	801b74c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b73c:	2303      	movs	r3, #3
 801b73e:	73fb      	strb	r3, [r7, #15]
 801b740:	e004      	b.n	801b74c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b742:	79bb      	ldrb	r3, [r7, #6]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d101      	bne.n	801b74c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b748:	2301      	movs	r3, #1
 801b74a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b74c:	7bfb      	ldrb	r3, [r7, #15]
 801b74e:	4618      	mov	r0, r3
 801b750:	f7ee fbd5 	bl	8009efe <RBI_ConfigRFSwitch>
}
 801b754:	bf00      	nop
 801b756:	3710      	adds	r7, #16
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd80      	pop	{r7, pc}

0801b75c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	4603      	mov	r3, r0
 801b764:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b766:	2301      	movs	r3, #1
 801b768:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b76a:	f7ee fbd6 	bl	8009f1a <RBI_GetTxConfig>
 801b76e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	2b02      	cmp	r3, #2
 801b774:	d016      	beq.n	801b7a4 <SUBGRF_SetRfTxPower+0x48>
 801b776:	68bb      	ldr	r3, [r7, #8]
 801b778:	2b02      	cmp	r3, #2
 801b77a:	dc16      	bgt.n	801b7aa <SUBGRF_SetRfTxPower+0x4e>
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d003      	beq.n	801b78a <SUBGRF_SetRfTxPower+0x2e>
 801b782:	68bb      	ldr	r3, [r7, #8]
 801b784:	2b01      	cmp	r3, #1
 801b786:	d00a      	beq.n	801b79e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b788:	e00f      	b.n	801b7aa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b78e:	2b0f      	cmp	r3, #15
 801b790:	dd02      	ble.n	801b798 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b792:	2302      	movs	r3, #2
 801b794:	73fb      	strb	r3, [r7, #15]
            break;
 801b796:	e009      	b.n	801b7ac <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b798:	2301      	movs	r3, #1
 801b79a:	73fb      	strb	r3, [r7, #15]
            break;
 801b79c:	e006      	b.n	801b7ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b79e:	2301      	movs	r3, #1
 801b7a0:	73fb      	strb	r3, [r7, #15]
            break;
 801b7a2:	e003      	b.n	801b7ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b7a4:	2302      	movs	r3, #2
 801b7a6:	73fb      	strb	r3, [r7, #15]
            break;
 801b7a8:	e000      	b.n	801b7ac <SUBGRF_SetRfTxPower+0x50>
            break;
 801b7aa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b7ac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b7b0:	7bfb      	ldrb	r3, [r7, #15]
 801b7b2:	2202      	movs	r2, #2
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f7ff fc35 	bl	801b024 <SUBGRF_SetTxParams>

    return paSelect;
 801b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	3710      	adds	r7, #16
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}

0801b7c4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b7c8:	2301      	movs	r3, #1
}
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	46bd      	mov	sp, r7
 801b7ce:	bc80      	pop	{r7}
 801b7d0:	4770      	bx	lr
	...

0801b7d4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b082      	sub	sp, #8
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b7dc:	4b03      	ldr	r3, [pc, #12]	@ (801b7ec <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	2001      	movs	r0, #1
 801b7e2:	4798      	blx	r3
}
 801b7e4:	bf00      	nop
 801b7e6:	3708      	adds	r7, #8
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	bd80      	pop	{r7, pc}
 801b7ec:	20003e30 	.word	0x20003e30

0801b7f0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b7f0:	b580      	push	{r7, lr}
 801b7f2:	b082      	sub	sp, #8
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b7f8:	4b03      	ldr	r3, [pc, #12]	@ (801b808 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	2002      	movs	r0, #2
 801b7fe:	4798      	blx	r3
}
 801b800:	bf00      	nop
 801b802:	3708      	adds	r7, #8
 801b804:	46bd      	mov	sp, r7
 801b806:	bd80      	pop	{r7, pc}
 801b808:	20003e30 	.word	0x20003e30

0801b80c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b80c:	b580      	push	{r7, lr}
 801b80e:	b082      	sub	sp, #8
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b814:	4b03      	ldr	r3, [pc, #12]	@ (801b824 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	2040      	movs	r0, #64	@ 0x40
 801b81a:	4798      	blx	r3
}
 801b81c:	bf00      	nop
 801b81e:	3708      	adds	r7, #8
 801b820:	46bd      	mov	sp, r7
 801b822:	bd80      	pop	{r7, pc}
 801b824:	20003e30 	.word	0x20003e30

0801b828 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b082      	sub	sp, #8
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
 801b830:	460b      	mov	r3, r1
 801b832:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b834:	78fb      	ldrb	r3, [r7, #3]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d002      	beq.n	801b840 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b83a:	2b01      	cmp	r3, #1
 801b83c:	d005      	beq.n	801b84a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b83e:	e00a      	b.n	801b856 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b840:	4b07      	ldr	r3, [pc, #28]	@ (801b860 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	2080      	movs	r0, #128	@ 0x80
 801b846:	4798      	blx	r3
            break;
 801b848:	e005      	b.n	801b856 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b84a:	4b05      	ldr	r3, [pc, #20]	@ (801b860 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b852:	4798      	blx	r3
            break;
 801b854:	bf00      	nop
    }
}
 801b856:	bf00      	nop
 801b858:	3708      	adds	r7, #8
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
 801b85e:	bf00      	nop
 801b860:	20003e30 	.word	0x20003e30

0801b864 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b082      	sub	sp, #8
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b86c:	4b04      	ldr	r3, [pc, #16]	@ (801b880 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b874:	4798      	blx	r3
}
 801b876:	bf00      	nop
 801b878:	3708      	adds	r7, #8
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}
 801b87e:	bf00      	nop
 801b880:	20003e30 	.word	0x20003e30

0801b884 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b082      	sub	sp, #8
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b88c:	4b03      	ldr	r3, [pc, #12]	@ (801b89c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	2020      	movs	r0, #32
 801b892:	4798      	blx	r3
}
 801b894:	bf00      	nop
 801b896:	3708      	adds	r7, #8
 801b898:	46bd      	mov	sp, r7
 801b89a:	bd80      	pop	{r7, pc}
 801b89c:	20003e30 	.word	0x20003e30

0801b8a0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b8a0:	b580      	push	{r7, lr}
 801b8a2:	b082      	sub	sp, #8
 801b8a4:	af00      	add	r7, sp, #0
 801b8a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b8a8:	4b03      	ldr	r3, [pc, #12]	@ (801b8b8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	2004      	movs	r0, #4
 801b8ae:	4798      	blx	r3
}
 801b8b0:	bf00      	nop
 801b8b2:	3708      	adds	r7, #8
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	bd80      	pop	{r7, pc}
 801b8b8:	20003e30 	.word	0x20003e30

0801b8bc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b082      	sub	sp, #8
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b8c4:	4b03      	ldr	r3, [pc, #12]	@ (801b8d4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	2008      	movs	r0, #8
 801b8ca:	4798      	blx	r3
}
 801b8cc:	bf00      	nop
 801b8ce:	3708      	adds	r7, #8
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	bd80      	pop	{r7, pc}
 801b8d4:	20003e30 	.word	0x20003e30

0801b8d8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b082      	sub	sp, #8
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b8e0:	4b03      	ldr	r3, [pc, #12]	@ (801b8f0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	2010      	movs	r0, #16
 801b8e6:	4798      	blx	r3
}
 801b8e8:	bf00      	nop
 801b8ea:	3708      	adds	r7, #8
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	20003e30 	.word	0x20003e30

0801b8f4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b084      	sub	sp, #16
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	4603      	mov	r3, r0
 801b8fc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b8fe:	f7ee fb1a 	bl	8009f36 <RBI_IsDCDC>
 801b902:	4603      	mov	r3, r0
 801b904:	2b01      	cmp	r3, #1
 801b906:	d112      	bne.n	801b92e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b908:	f640 1023 	movw	r0, #2339	@ 0x923
 801b90c:	f7ff fe1e 	bl	801b54c <SUBGRF_ReadRegister>
 801b910:	4603      	mov	r3, r0
 801b912:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b914:	7bfb      	ldrb	r3, [r7, #15]
 801b916:	f023 0306 	bic.w	r3, r3, #6
 801b91a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b91c:	7bfa      	ldrb	r2, [r7, #15]
 801b91e:	79fb      	ldrb	r3, [r7, #7]
 801b920:	4313      	orrs	r3, r2
 801b922:	b2db      	uxtb	r3, r3
 801b924:	4619      	mov	r1, r3
 801b926:	f640 1023 	movw	r0, #2339	@ 0x923
 801b92a:	f7ff fdfb 	bl	801b524 <SUBGRF_WriteRegister>
  }
}
 801b92e:	bf00      	nop
 801b930:	3710      	adds	r7, #16
 801b932:	46bd      	mov	sp, r7
 801b934:	bd80      	pop	{r7, pc}
	...

0801b938 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b938:	b480      	push	{r7}
 801b93a:	b085      	sub	sp, #20
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d101      	bne.n	801b94a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b946:	231f      	movs	r3, #31
 801b948:	e017      	b.n	801b97a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b94a:	2300      	movs	r3, #0
 801b94c:	73fb      	strb	r3, [r7, #15]
 801b94e:	e00f      	b.n	801b970 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b950:	7bfb      	ldrb	r3, [r7, #15]
 801b952:	4a0c      	ldr	r2, [pc, #48]	@ (801b984 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b958:	687a      	ldr	r2, [r7, #4]
 801b95a:	429a      	cmp	r2, r3
 801b95c:	d205      	bcs.n	801b96a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b95e:	7bfb      	ldrb	r3, [r7, #15]
 801b960:	4a08      	ldr	r2, [pc, #32]	@ (801b984 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b962:	00db      	lsls	r3, r3, #3
 801b964:	4413      	add	r3, r2
 801b966:	791b      	ldrb	r3, [r3, #4]
 801b968:	e007      	b.n	801b97a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b96a:	7bfb      	ldrb	r3, [r7, #15]
 801b96c:	3301      	adds	r3, #1
 801b96e:	73fb      	strb	r3, [r7, #15]
 801b970:	7bfb      	ldrb	r3, [r7, #15]
 801b972:	2b15      	cmp	r3, #21
 801b974:	d9ec      	bls.n	801b950 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b976:	bf00      	nop
 801b978:	e7fd      	b.n	801b976 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b97a:	4618      	mov	r0, r3
 801b97c:	3714      	adds	r7, #20
 801b97e:	46bd      	mov	sp, r7
 801b980:	bc80      	pop	{r7}
 801b982:	4770      	bx	lr
 801b984:	0801e0a8 	.word	0x0801e0a8

0801b988 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	b08a      	sub	sp, #40	@ 0x28
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b992:	4b35      	ldr	r3, [pc, #212]	@ (801ba68 <SUBGRF_GetCFO+0xe0>)
 801b994:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801b996:	f640 0007 	movw	r0, #2055	@ 0x807
 801b99a:	f7ff fdd7 	bl	801b54c <SUBGRF_ReadRegister>
 801b99e:	4603      	mov	r3, r0
 801b9a0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b9a2:	7ffb      	ldrb	r3, [r7, #31]
 801b9a4:	08db      	lsrs	r3, r3, #3
 801b9a6:	b2db      	uxtb	r3, r3
 801b9a8:	f003 0303 	and.w	r3, r3, #3
 801b9ac:	3328      	adds	r3, #40	@ 0x28
 801b9ae:	443b      	add	r3, r7
 801b9b0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b9b4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b9b6:	7ffb      	ldrb	r3, [r7, #31]
 801b9b8:	f003 0307 	and.w	r3, r3, #7
 801b9bc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b9be:	7fba      	ldrb	r2, [r7, #30]
 801b9c0:	7f7b      	ldrb	r3, [r7, #29]
 801b9c2:	3b01      	subs	r3, #1
 801b9c4:	fa02 f303 	lsl.w	r3, r2, r3
 801b9c8:	461a      	mov	r2, r3
 801b9ca:	4b28      	ldr	r3, [pc, #160]	@ (801ba6c <SUBGRF_GetCFO+0xe4>)
 801b9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801b9d0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b9d2:	69ba      	ldr	r2, [r7, #24]
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9da:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b9dc:	2301      	movs	r3, #1
 801b9de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b9e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b9e6:	697a      	ldr	r2, [r7, #20]
 801b9e8:	fb02 f303 	mul.w	r3, r2, r3
 801b9ec:	2b07      	cmp	r3, #7
 801b9ee:	d802      	bhi.n	801b9f6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b9f0:	2302      	movs	r3, #2
 801b9f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801b9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b9fa:	697a      	ldr	r2, [r7, #20]
 801b9fc:	fb02 f303 	mul.w	r3, r2, r3
 801ba00:	2b03      	cmp	r3, #3
 801ba02:	d802      	bhi.n	801ba0a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ba04:	2304      	movs	r3, #4
 801ba06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ba0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ba0e:	69bb      	ldr	r3, [r7, #24]
 801ba10:	fb02 f303 	mul.w	r3, r2, r3
 801ba14:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801ba16:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801ba1a:	f7ff fd97 	bl	801b54c <SUBGRF_ReadRegister>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	021b      	lsls	r3, r3, #8
 801ba22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801ba26:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801ba28:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801ba2c:	f7ff fd8e 	bl	801b54c <SUBGRF_ReadRegister>
 801ba30:	4603      	mov	r3, r0
 801ba32:	461a      	mov	r2, r3
 801ba34:	6a3b      	ldr	r3, [r7, #32]
 801ba36:	4313      	orrs	r3, r2
 801ba38:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ba3a:	6a3b      	ldr	r3, [r7, #32]
 801ba3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d005      	beq.n	801ba50 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ba44:	6a3b      	ldr	r3, [r7, #32]
 801ba46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ba4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ba4e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	095b      	lsrs	r3, r3, #5
 801ba54:	6a3a      	ldr	r2, [r7, #32]
 801ba56:	fb02 f303 	mul.w	r3, r2, r3
 801ba5a:	11da      	asrs	r2, r3, #7
 801ba5c:	683b      	ldr	r3, [r7, #0]
 801ba5e:	601a      	str	r2, [r3, #0]
}
 801ba60:	bf00      	nop
 801ba62:	3728      	adds	r7, #40	@ 0x28
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}
 801ba68:	0c0a0804 	.word	0x0c0a0804
 801ba6c:	01e84800 	.word	0x01e84800

0801ba70 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801ba70:	b480      	push	{r7}
 801ba72:	b087      	sub	sp, #28
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	4603      	mov	r3, r0
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]
 801ba7c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801ba7e:	2300      	movs	r3, #0
 801ba80:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801ba82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba86:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801ba88:	697b      	ldr	r3, [r7, #20]
}
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	371c      	adds	r7, #28
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	bc80      	pop	{r7}
 801ba92:	4770      	bx	lr

0801ba94 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801ba94:	b480      	push	{r7}
 801ba96:	b087      	sub	sp, #28
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	60b9      	str	r1, [r7, #8]
 801ba9e:	607a      	str	r2, [r7, #4]
 801baa0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801baa2:	2300      	movs	r3, #0
 801baa4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801baa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801baaa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801baac:	697b      	ldr	r3, [r7, #20]
}
 801baae:	4618      	mov	r0, r3
 801bab0:	371c      	adds	r7, #28
 801bab2:	46bd      	mov	sp, r7
 801bab4:	bc80      	pop	{r7}
 801bab6:	4770      	bx	lr

0801bab8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801bab8:	b480      	push	{r7}
 801baba:	b085      	sub	sp, #20
 801babc:	af00      	add	r7, sp, #0
 801babe:	60f8      	str	r0, [r7, #12]
 801bac0:	60b9      	str	r1, [r7, #8]
 801bac2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801bac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif
}
 801bac8:	4618      	mov	r0, r3
 801baca:	3714      	adds	r7, #20
 801bacc:	46bd      	mov	sp, r7
 801bace:	bc80      	pop	{r7}
 801bad0:	4770      	bx	lr

0801bad2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801bad2:	b480      	push	{r7}
 801bad4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801bad6:	bf00      	nop
 801bad8:	46bd      	mov	sp, r7
 801bada:	bc80      	pop	{r7}
 801badc:	4770      	bx	lr

0801bade <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801bade:	b480      	push	{r7}
 801bae0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801bae2:	2300      	movs	r3, #0
#endif
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bc80      	pop	{r7}
 801baea:	4770      	bx	lr

0801baec <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801baec:	b480      	push	{r7}
 801baee:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801baf0:	2300      	movs	r3, #0
#endif
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bc80      	pop	{r7}
 801baf8:	4770      	bx	lr

0801bafa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801bafa:	b480      	push	{r7}
 801bafc:	b083      	sub	sp, #12
 801bafe:	af00      	add	r7, sp, #0
 801bb00:	4603      	mov	r3, r0
 801bb02:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801bb04:	bf00      	nop
 801bb06:	370c      	adds	r7, #12
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	bc80      	pop	{r7}
 801bb0c:	4770      	bx	lr

0801bb0e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801bb0e:	b480      	push	{r7}
 801bb10:	b087      	sub	sp, #28
 801bb12:	af00      	add	r7, sp, #0
 801bb14:	60f8      	str	r0, [r7, #12]
 801bb16:	460b      	mov	r3, r1
 801bb18:	607a      	str	r2, [r7, #4]
 801bb1a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801bb1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb20:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801bb22:	697b      	ldr	r3, [r7, #20]
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	371c      	adds	r7, #28
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bc80      	pop	{r7}
 801bb2c:	4770      	bx	lr

0801bb2e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801bb2e:	b480      	push	{r7}
 801bb30:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801bb32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
#endif
}
 801bb36:	4618      	mov	r0, r3
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bc80      	pop	{r7}
 801bb3c:	4770      	bx	lr

0801bb3e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801bb3e:	b480      	push	{r7}
 801bb40:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801bb42:	bf00      	nop
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bc80      	pop	{r7}
 801bb48:	4770      	bx	lr

0801bb4a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801bb4a:	b480      	push	{r7}
 801bb4c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801bb4e:	bf00      	nop
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bc80      	pop	{r7}
 801bb54:	4770      	bx	lr

0801bb56 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801bb56:	b480      	push	{r7}
 801bb58:	b083      	sub	sp, #12
 801bb5a:	af00      	add	r7, sp, #0
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801bb60:	bf00      	nop
 801bb62:	370c      	adds	r7, #12
 801bb64:	46bd      	mov	sp, r7
 801bb66:	bc80      	pop	{r7}
 801bb68:	4770      	bx	lr
	...

0801bb6c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bb70:	2218      	movs	r2, #24
 801bb72:	2100      	movs	r1, #0
 801bb74:	4807      	ldr	r0, [pc, #28]	@ (801bb94 <UTIL_ADV_TRACE_Init+0x28>)
 801bb76:	f000 fb2e 	bl	801c1d6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bb7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bb7e:	2100      	movs	r1, #0
 801bb80:	4805      	ldr	r0, [pc, #20]	@ (801bb98 <UTIL_ADV_TRACE_Init+0x2c>)
 801bb82:	f000 fb28 	bl	801c1d6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bb86:	4b05      	ldr	r3, [pc, #20]	@ (801bb9c <UTIL_ADV_TRACE_Init+0x30>)
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	4805      	ldr	r0, [pc, #20]	@ (801bba0 <UTIL_ADV_TRACE_Init+0x34>)
 801bb8c:	4798      	blx	r3
 801bb8e:	4603      	mov	r3, r0
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	20003e34 	.word	0x20003e34
 801bb98:	20003e4c 	.word	0x20003e4c
 801bb9c:	0801dc18 	.word	0x0801dc18
 801bba0:	0801be0d 	.word	0x0801be0d

0801bba4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bba4:	b480      	push	{r7}
 801bba6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bba8:	4b06      	ldr	r3, [pc, #24]	@ (801bbc4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bbaa:	8a5a      	ldrh	r2, [r3, #18]
 801bbac:	4b05      	ldr	r3, [pc, #20]	@ (801bbc4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bbae:	8a1b      	ldrh	r3, [r3, #16]
 801bbb0:	429a      	cmp	r2, r3
 801bbb2:	d101      	bne.n	801bbb8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801bbb4:	2301      	movs	r3, #1
 801bbb6:	e000      	b.n	801bbba <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801bbb8:	2300      	movs	r3, #0
}
 801bbba:	4618      	mov	r0, r3
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bc80      	pop	{r7}
 801bbc0:	4770      	bx	lr
 801bbc2:	bf00      	nop
 801bbc4:	20003e34 	.word	0x20003e34

0801bbc8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bbc8:	b408      	push	{r3}
 801bbca:	b580      	push	{r7, lr}
 801bbcc:	b08d      	sub	sp, #52	@ 0x34
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	60f8      	str	r0, [r7, #12]
 801bbd2:	60b9      	str	r1, [r7, #8]
 801bbd4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bbde:	4b37      	ldr	r3, [pc, #220]	@ (801bcbc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bbe0:	7a1b      	ldrb	r3, [r3, #8]
 801bbe2:	461a      	mov	r2, r3
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	4293      	cmp	r3, r2
 801bbe8:	d902      	bls.n	801bbf0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bbea:	f06f 0304 	mvn.w	r3, #4
 801bbee:	e05e      	b.n	801bcae <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bbf0:	4b32      	ldr	r3, [pc, #200]	@ (801bcbc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bbf2:	68da      	ldr	r2, [r3, #12]
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	4013      	ands	r3, r2
 801bbf8:	68ba      	ldr	r2, [r7, #8]
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d002      	beq.n	801bc04 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bbfe:	f06f 0305 	mvn.w	r3, #5
 801bc02:	e054      	b.n	801bcae <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bc04:	4b2d      	ldr	r3, [pc, #180]	@ (801bcbc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bc06:	685b      	ldr	r3, [r3, #4]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d00a      	beq.n	801bc22 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d007      	beq.n	801bc22 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bc12:	4b2a      	ldr	r3, [pc, #168]	@ (801bcbc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bc14:	685b      	ldr	r3, [r3, #4]
 801bc16:	f107 0116 	add.w	r1, r7, #22
 801bc1a:	f107 0218 	add.w	r2, r7, #24
 801bc1e:	4610      	mov	r0, r2
 801bc20:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bc22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801bc26:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bc2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bc30:	4823      	ldr	r0, [pc, #140]	@ (801bcc0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801bc32:	f001 f961 	bl	801cef8 <tiny_vsnprintf_like>
 801bc36:	4603      	mov	r3, r0
 801bc38:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801bc3a:	f000 f9f1 	bl	801c020 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bc3e:	8afa      	ldrh	r2, [r7, #22]
 801bc40:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bc42:	4413      	add	r3, r2
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	f107 0214 	add.w	r2, r7, #20
 801bc4a:	4611      	mov	r1, r2
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	f000 f969 	bl	801bf24 <TRACE_AllocateBufer>
 801bc52:	4603      	mov	r3, r0
 801bc54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bc58:	d025      	beq.n	801bca6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bc5e:	e00e      	b.n	801bc7e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bc60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bc62:	8aba      	ldrh	r2, [r7, #20]
 801bc64:	3330      	adds	r3, #48	@ 0x30
 801bc66:	443b      	add	r3, r7
 801bc68:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801bc6c:	4b15      	ldr	r3, [pc, #84]	@ (801bcc4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bc6e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801bc70:	8abb      	ldrh	r3, [r7, #20]
 801bc72:	3301      	adds	r3, #1
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bc78:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bc7a:	3301      	adds	r3, #1
 801bc7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bc7e:	8afb      	ldrh	r3, [r7, #22]
 801bc80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bc82:	429a      	cmp	r2, r3
 801bc84:	d3ec      	bcc.n	801bc60 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bc86:	8abb      	ldrh	r3, [r7, #20]
 801bc88:	461a      	mov	r2, r3
 801bc8a:	4b0e      	ldr	r3, [pc, #56]	@ (801bcc4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bc8c:	18d0      	adds	r0, r2, r3
 801bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bc92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bc96:	f001 f92f 	bl	801cef8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bc9a:	f000 f9df 	bl	801c05c <TRACE_UnLock>

    return TRACE_Send();
 801bc9e:	f000 f831 	bl	801bd04 <TRACE_Send>
 801bca2:	4603      	mov	r3, r0
 801bca4:	e003      	b.n	801bcae <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bca6:	f000 f9d9 	bl	801c05c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bcaa:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bcae:	4618      	mov	r0, r3
 801bcb0:	3734      	adds	r7, #52	@ 0x34
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bcb8:	b001      	add	sp, #4
 801bcba:	4770      	bx	lr
 801bcbc:	20003e34 	.word	0x20003e34
 801bcc0:	2000424c 	.word	0x2000424c
 801bcc4:	20003e4c 	.word	0x20003e4c

0801bcc8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bcc8:	b480      	push	{r7}
 801bcca:	b083      	sub	sp, #12
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801bcd0:	4a03      	ldr	r2, [pc, #12]	@ (801bce0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	6053      	str	r3, [r2, #4]
}
 801bcd6:	bf00      	nop
 801bcd8:	370c      	adds	r7, #12
 801bcda:	46bd      	mov	sp, r7
 801bcdc:	bc80      	pop	{r7}
 801bcde:	4770      	bx	lr
 801bce0:	20003e34 	.word	0x20003e34

0801bce4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bce4:	b480      	push	{r7}
 801bce6:	b083      	sub	sp, #12
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	4603      	mov	r3, r0
 801bcec:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bcee:	4a04      	ldr	r2, [pc, #16]	@ (801bd00 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bcf0:	79fb      	ldrb	r3, [r7, #7]
 801bcf2:	7213      	strb	r3, [r2, #8]
}
 801bcf4:	bf00      	nop
 801bcf6:	370c      	adds	r7, #12
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bc80      	pop	{r7}
 801bcfc:	4770      	bx	lr
 801bcfe:	bf00      	nop
 801bd00:	20003e34 	.word	0x20003e34

0801bd04 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b088      	sub	sp, #32
 801bd08:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801bd0e:	2300      	movs	r3, #0
 801bd10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd12:	f3ef 8310 	mrs	r3, PRIMASK
 801bd16:	613b      	str	r3, [r7, #16]
  return(result);
 801bd18:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bd1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd1c:	b672      	cpsid	i
}
 801bd1e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801bd20:	f000 f9ba 	bl	801c098 <TRACE_IsLocked>
 801bd24:	4603      	mov	r3, r0
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d15d      	bne.n	801bde6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801bd2a:	f000 f979 	bl	801c020 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bd2e:	4b34      	ldr	r3, [pc, #208]	@ (801be00 <TRACE_Send+0xfc>)
 801bd30:	8a1a      	ldrh	r2, [r3, #16]
 801bd32:	4b33      	ldr	r3, [pc, #204]	@ (801be00 <TRACE_Send+0xfc>)
 801bd34:	8a5b      	ldrh	r3, [r3, #18]
 801bd36:	429a      	cmp	r2, r3
 801bd38:	d04d      	beq.n	801bdd6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bd3a:	4b31      	ldr	r3, [pc, #196]	@ (801be00 <TRACE_Send+0xfc>)
 801bd3c:	789b      	ldrb	r3, [r3, #2]
 801bd3e:	2b01      	cmp	r3, #1
 801bd40:	d117      	bne.n	801bd72 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bd42:	4b2f      	ldr	r3, [pc, #188]	@ (801be00 <TRACE_Send+0xfc>)
 801bd44:	881a      	ldrh	r2, [r3, #0]
 801bd46:	4b2e      	ldr	r3, [pc, #184]	@ (801be00 <TRACE_Send+0xfc>)
 801bd48:	8a1b      	ldrh	r3, [r3, #16]
 801bd4a:	1ad3      	subs	r3, r2, r3
 801bd4c:	b29a      	uxth	r2, r3
 801bd4e:	4b2c      	ldr	r3, [pc, #176]	@ (801be00 <TRACE_Send+0xfc>)
 801bd50:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bd52:	4b2b      	ldr	r3, [pc, #172]	@ (801be00 <TRACE_Send+0xfc>)
 801bd54:	2202      	movs	r2, #2
 801bd56:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bd58:	4b29      	ldr	r3, [pc, #164]	@ (801be00 <TRACE_Send+0xfc>)
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bd5e:	4b28      	ldr	r3, [pc, #160]	@ (801be00 <TRACE_Send+0xfc>)
 801bd60:	8a9b      	ldrh	r3, [r3, #20]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d105      	bne.n	801bd72 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bd66:	4b26      	ldr	r3, [pc, #152]	@ (801be00 <TRACE_Send+0xfc>)
 801bd68:	2200      	movs	r2, #0
 801bd6a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bd6c:	4b24      	ldr	r3, [pc, #144]	@ (801be00 <TRACE_Send+0xfc>)
 801bd6e:	2200      	movs	r2, #0
 801bd70:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bd72:	4b23      	ldr	r3, [pc, #140]	@ (801be00 <TRACE_Send+0xfc>)
 801bd74:	789b      	ldrb	r3, [r3, #2]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d115      	bne.n	801bda6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bd7a:	4b21      	ldr	r3, [pc, #132]	@ (801be00 <TRACE_Send+0xfc>)
 801bd7c:	8a5a      	ldrh	r2, [r3, #18]
 801bd7e:	4b20      	ldr	r3, [pc, #128]	@ (801be00 <TRACE_Send+0xfc>)
 801bd80:	8a1b      	ldrh	r3, [r3, #16]
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d908      	bls.n	801bd98 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bd86:	4b1e      	ldr	r3, [pc, #120]	@ (801be00 <TRACE_Send+0xfc>)
 801bd88:	8a5a      	ldrh	r2, [r3, #18]
 801bd8a:	4b1d      	ldr	r3, [pc, #116]	@ (801be00 <TRACE_Send+0xfc>)
 801bd8c:	8a1b      	ldrh	r3, [r3, #16]
 801bd8e:	1ad3      	subs	r3, r2, r3
 801bd90:	b29a      	uxth	r2, r3
 801bd92:	4b1b      	ldr	r3, [pc, #108]	@ (801be00 <TRACE_Send+0xfc>)
 801bd94:	829a      	strh	r2, [r3, #20]
 801bd96:	e006      	b.n	801bda6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bd98:	4b19      	ldr	r3, [pc, #100]	@ (801be00 <TRACE_Send+0xfc>)
 801bd9a:	8a1b      	ldrh	r3, [r3, #16]
 801bd9c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bda0:	b29a      	uxth	r2, r3
 801bda2:	4b17      	ldr	r3, [pc, #92]	@ (801be00 <TRACE_Send+0xfc>)
 801bda4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bda6:	4b16      	ldr	r3, [pc, #88]	@ (801be00 <TRACE_Send+0xfc>)
 801bda8:	8a1b      	ldrh	r3, [r3, #16]
 801bdaa:	461a      	mov	r2, r3
 801bdac:	4b15      	ldr	r3, [pc, #84]	@ (801be04 <TRACE_Send+0x100>)
 801bdae:	4413      	add	r3, r2
 801bdb0:	61bb      	str	r3, [r7, #24]
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	f383 8810 	msr	PRIMASK, r3
}
 801bdbc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801bdbe:	f7e5 fd79 	bl	80018b4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bdc2:	4b11      	ldr	r3, [pc, #68]	@ (801be08 <TRACE_Send+0x104>)
 801bdc4:	68db      	ldr	r3, [r3, #12]
 801bdc6:	4a0e      	ldr	r2, [pc, #56]	@ (801be00 <TRACE_Send+0xfc>)
 801bdc8:	8a92      	ldrh	r2, [r2, #20]
 801bdca:	4611      	mov	r1, r2
 801bdcc:	69b8      	ldr	r0, [r7, #24]
 801bdce:	4798      	blx	r3
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	77fb      	strb	r3, [r7, #31]
 801bdd4:	e00d      	b.n	801bdf2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801bdd6:	f000 f941 	bl	801c05c <TRACE_UnLock>
 801bdda:	697b      	ldr	r3, [r7, #20]
 801bddc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdde:	68bb      	ldr	r3, [r7, #8]
 801bde0:	f383 8810 	msr	PRIMASK, r3
}
 801bde4:	e005      	b.n	801bdf2 <TRACE_Send+0xee>
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	f383 8810 	msr	PRIMASK, r3
}
 801bdf0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801bdf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	3720      	adds	r7, #32
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	bf00      	nop
 801be00:	20003e34 	.word	0x20003e34
 801be04:	20003e4c 	.word	0x20003e4c
 801be08:	0801dc18 	.word	0x0801dc18

0801be0c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b088      	sub	sp, #32
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801be14:	2300      	movs	r3, #0
 801be16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be18:	f3ef 8310 	mrs	r3, PRIMASK
 801be1c:	617b      	str	r3, [r7, #20]
  return(result);
 801be1e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801be20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801be22:	b672      	cpsid	i
}
 801be24:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801be26:	4b3c      	ldr	r3, [pc, #240]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be28:	789b      	ldrb	r3, [r3, #2]
 801be2a:	2b02      	cmp	r3, #2
 801be2c:	d106      	bne.n	801be3c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801be2e:	4b3a      	ldr	r3, [pc, #232]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be30:	2200      	movs	r2, #0
 801be32:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801be34:	4b38      	ldr	r3, [pc, #224]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be36:	2200      	movs	r2, #0
 801be38:	821a      	strh	r2, [r3, #16]
 801be3a:	e00a      	b.n	801be52 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801be3c:	4b36      	ldr	r3, [pc, #216]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be3e:	8a1a      	ldrh	r2, [r3, #16]
 801be40:	4b35      	ldr	r3, [pc, #212]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be42:	8a9b      	ldrh	r3, [r3, #20]
 801be44:	4413      	add	r3, r2
 801be46:	b29b      	uxth	r3, r3
 801be48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	4b32      	ldr	r3, [pc, #200]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be50:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801be52:	4b31      	ldr	r3, [pc, #196]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be54:	8a1a      	ldrh	r2, [r3, #16]
 801be56:	4b30      	ldr	r3, [pc, #192]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be58:	8a5b      	ldrh	r3, [r3, #18]
 801be5a:	429a      	cmp	r2, r3
 801be5c:	d04d      	beq.n	801befa <TRACE_TxCpltCallback+0xee>
 801be5e:	4b2e      	ldr	r3, [pc, #184]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be60:	8adb      	ldrh	r3, [r3, #22]
 801be62:	2b01      	cmp	r3, #1
 801be64:	d149      	bne.n	801befa <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801be66:	4b2c      	ldr	r3, [pc, #176]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be68:	789b      	ldrb	r3, [r3, #2]
 801be6a:	2b01      	cmp	r3, #1
 801be6c:	d117      	bne.n	801be9e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801be6e:	4b2a      	ldr	r3, [pc, #168]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be70:	881a      	ldrh	r2, [r3, #0]
 801be72:	4b29      	ldr	r3, [pc, #164]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be74:	8a1b      	ldrh	r3, [r3, #16]
 801be76:	1ad3      	subs	r3, r2, r3
 801be78:	b29a      	uxth	r2, r3
 801be7a:	4b27      	ldr	r3, [pc, #156]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be7c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801be7e:	4b26      	ldr	r3, [pc, #152]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be80:	2202      	movs	r2, #2
 801be82:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801be84:	4b24      	ldr	r3, [pc, #144]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be86:	2200      	movs	r2, #0
 801be88:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801be8a:	4b23      	ldr	r3, [pc, #140]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be8c:	8a9b      	ldrh	r3, [r3, #20]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d105      	bne.n	801be9e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801be92:	4b21      	ldr	r3, [pc, #132]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be94:	2200      	movs	r2, #0
 801be96:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801be98:	4b1f      	ldr	r3, [pc, #124]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801be9a:	2200      	movs	r2, #0
 801be9c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801be9e:	4b1e      	ldr	r3, [pc, #120]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bea0:	789b      	ldrb	r3, [r3, #2]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d115      	bne.n	801bed2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bea6:	4b1c      	ldr	r3, [pc, #112]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bea8:	8a5a      	ldrh	r2, [r3, #18]
 801beaa:	4b1b      	ldr	r3, [pc, #108]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801beac:	8a1b      	ldrh	r3, [r3, #16]
 801beae:	429a      	cmp	r2, r3
 801beb0:	d908      	bls.n	801bec4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801beb2:	4b19      	ldr	r3, [pc, #100]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801beb4:	8a5a      	ldrh	r2, [r3, #18]
 801beb6:	4b18      	ldr	r3, [pc, #96]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801beb8:	8a1b      	ldrh	r3, [r3, #16]
 801beba:	1ad3      	subs	r3, r2, r3
 801bebc:	b29a      	uxth	r2, r3
 801bebe:	4b16      	ldr	r3, [pc, #88]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bec0:	829a      	strh	r2, [r3, #20]
 801bec2:	e006      	b.n	801bed2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bec4:	4b14      	ldr	r3, [pc, #80]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bec6:	8a1b      	ldrh	r3, [r3, #16]
 801bec8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801becc:	b29a      	uxth	r2, r3
 801bece:	4b12      	ldr	r3, [pc, #72]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bed0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bed2:	4b11      	ldr	r3, [pc, #68]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bed4:	8a1b      	ldrh	r3, [r3, #16]
 801bed6:	461a      	mov	r2, r3
 801bed8:	4b10      	ldr	r3, [pc, #64]	@ (801bf1c <TRACE_TxCpltCallback+0x110>)
 801beda:	4413      	add	r3, r2
 801bedc:	61fb      	str	r3, [r7, #28]
 801bede:	69bb      	ldr	r3, [r7, #24]
 801bee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bee2:	693b      	ldr	r3, [r7, #16]
 801bee4:	f383 8810 	msr	PRIMASK, r3
}
 801bee8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801beea:	4b0d      	ldr	r3, [pc, #52]	@ (801bf20 <TRACE_TxCpltCallback+0x114>)
 801beec:	68db      	ldr	r3, [r3, #12]
 801beee:	4a0a      	ldr	r2, [pc, #40]	@ (801bf18 <TRACE_TxCpltCallback+0x10c>)
 801bef0:	8a92      	ldrh	r2, [r2, #20]
 801bef2:	4611      	mov	r1, r2
 801bef4:	69f8      	ldr	r0, [r7, #28]
 801bef6:	4798      	blx	r3
 801bef8:	e00a      	b.n	801bf10 <TRACE_TxCpltCallback+0x104>
 801befa:	69bb      	ldr	r3, [r7, #24]
 801befc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	f383 8810 	msr	PRIMASK, r3
}
 801bf04:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801bf06:	f7e5 fcdd 	bl	80018c4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801bf0a:	f000 f8a7 	bl	801c05c <TRACE_UnLock>
  }
}
 801bf0e:	bf00      	nop
 801bf10:	bf00      	nop
 801bf12:	3720      	adds	r7, #32
 801bf14:	46bd      	mov	sp, r7
 801bf16:	bd80      	pop	{r7, pc}
 801bf18:	20003e34 	.word	0x20003e34
 801bf1c:	20003e4c 	.word	0x20003e4c
 801bf20:	0801dc18 	.word	0x0801dc18

0801bf24 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bf24:	b480      	push	{r7}
 801bf26:	b087      	sub	sp, #28
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	6039      	str	r1, [r7, #0]
 801bf2e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801bf30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bf34:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf36:	f3ef 8310 	mrs	r3, PRIMASK
 801bf3a:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf3c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bf3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf40:	b672      	cpsid	i
}
 801bf42:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bf44:	4b35      	ldr	r3, [pc, #212]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf46:	8a5a      	ldrh	r2, [r3, #18]
 801bf48:	4b34      	ldr	r3, [pc, #208]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf4a:	8a1b      	ldrh	r3, [r3, #16]
 801bf4c:	429a      	cmp	r2, r3
 801bf4e:	d11b      	bne.n	801bf88 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bf50:	4b32      	ldr	r3, [pc, #200]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf52:	8a5b      	ldrh	r3, [r3, #18]
 801bf54:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bf58:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bf5a:	88fa      	ldrh	r2, [r7, #6]
 801bf5c:	8afb      	ldrh	r3, [r7, #22]
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	d33a      	bcc.n	801bfd8 <TRACE_AllocateBufer+0xb4>
 801bf62:	4b2e      	ldr	r3, [pc, #184]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf64:	8a1b      	ldrh	r3, [r3, #16]
 801bf66:	88fa      	ldrh	r2, [r7, #6]
 801bf68:	429a      	cmp	r2, r3
 801bf6a:	d235      	bcs.n	801bfd8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bf6c:	4b2b      	ldr	r3, [pc, #172]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf6e:	2201      	movs	r2, #1
 801bf70:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bf72:	4b2a      	ldr	r3, [pc, #168]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf74:	8a5a      	ldrh	r2, [r3, #18]
 801bf76:	4b29      	ldr	r3, [pc, #164]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf78:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bf7a:	4b28      	ldr	r3, [pc, #160]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf7c:	8a1b      	ldrh	r3, [r3, #16]
 801bf7e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bf80:	4b26      	ldr	r3, [pc, #152]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf82:	2200      	movs	r2, #0
 801bf84:	825a      	strh	r2, [r3, #18]
 801bf86:	e027      	b.n	801bfd8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bf88:	4b24      	ldr	r3, [pc, #144]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf8a:	8a5a      	ldrh	r2, [r3, #18]
 801bf8c:	4b23      	ldr	r3, [pc, #140]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf8e:	8a1b      	ldrh	r3, [r3, #16]
 801bf90:	429a      	cmp	r2, r3
 801bf92:	d91b      	bls.n	801bfcc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bf94:	4b21      	ldr	r3, [pc, #132]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bf96:	8a5b      	ldrh	r3, [r3, #18]
 801bf98:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bf9c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801bf9e:	88fa      	ldrh	r2, [r7, #6]
 801bfa0:	8afb      	ldrh	r3, [r7, #22]
 801bfa2:	429a      	cmp	r2, r3
 801bfa4:	d318      	bcc.n	801bfd8 <TRACE_AllocateBufer+0xb4>
 801bfa6:	4b1d      	ldr	r3, [pc, #116]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfa8:	8a1b      	ldrh	r3, [r3, #16]
 801bfaa:	88fa      	ldrh	r2, [r7, #6]
 801bfac:	429a      	cmp	r2, r3
 801bfae:	d213      	bcs.n	801bfd8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bfb0:	4b1a      	ldr	r3, [pc, #104]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfb2:	2201      	movs	r2, #1
 801bfb4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bfb6:	4b19      	ldr	r3, [pc, #100]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfb8:	8a5a      	ldrh	r2, [r3, #18]
 801bfba:	4b18      	ldr	r3, [pc, #96]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfbc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bfbe:	4b17      	ldr	r3, [pc, #92]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfc0:	8a1b      	ldrh	r3, [r3, #16]
 801bfc2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bfc4:	4b15      	ldr	r3, [pc, #84]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	825a      	strh	r2, [r3, #18]
 801bfca:	e005      	b.n	801bfd8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bfcc:	4b13      	ldr	r3, [pc, #76]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfce:	8a1a      	ldrh	r2, [r3, #16]
 801bfd0:	4b12      	ldr	r3, [pc, #72]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfd2:	8a5b      	ldrh	r3, [r3, #18]
 801bfd4:	1ad3      	subs	r3, r2, r3
 801bfd6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801bfd8:	8afa      	ldrh	r2, [r7, #22]
 801bfda:	88fb      	ldrh	r3, [r7, #6]
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d90f      	bls.n	801c000 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bfe0:	4b0e      	ldr	r3, [pc, #56]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfe2:	8a5a      	ldrh	r2, [r3, #18]
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bfe8:	4b0c      	ldr	r3, [pc, #48]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bfea:	8a5a      	ldrh	r2, [r3, #18]
 801bfec:	88fb      	ldrh	r3, [r7, #6]
 801bfee:	4413      	add	r3, r2
 801bff0:	b29b      	uxth	r3, r3
 801bff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bff6:	b29a      	uxth	r2, r3
 801bff8:	4b08      	ldr	r3, [pc, #32]	@ (801c01c <TRACE_AllocateBufer+0xf8>)
 801bffa:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bffc:	2300      	movs	r3, #0
 801bffe:	82bb      	strh	r3, [r7, #20]
 801c000:	693b      	ldr	r3, [r7, #16]
 801c002:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c004:	68bb      	ldr	r3, [r7, #8]
 801c006:	f383 8810 	msr	PRIMASK, r3
}
 801c00a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c00c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c010:	4618      	mov	r0, r3
 801c012:	371c      	adds	r7, #28
 801c014:	46bd      	mov	sp, r7
 801c016:	bc80      	pop	{r7}
 801c018:	4770      	bx	lr
 801c01a:	bf00      	nop
 801c01c:	20003e34 	.word	0x20003e34

0801c020 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c020:	b480      	push	{r7}
 801c022:	b085      	sub	sp, #20
 801c024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c026:	f3ef 8310 	mrs	r3, PRIMASK
 801c02a:	607b      	str	r3, [r7, #4]
  return(result);
 801c02c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c02e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c030:	b672      	cpsid	i
}
 801c032:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c034:	4b08      	ldr	r3, [pc, #32]	@ (801c058 <TRACE_Lock+0x38>)
 801c036:	8adb      	ldrh	r3, [r3, #22]
 801c038:	3301      	adds	r3, #1
 801c03a:	b29a      	uxth	r2, r3
 801c03c:	4b06      	ldr	r3, [pc, #24]	@ (801c058 <TRACE_Lock+0x38>)
 801c03e:	82da      	strh	r2, [r3, #22]
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	f383 8810 	msr	PRIMASK, r3
}
 801c04a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c04c:	bf00      	nop
 801c04e:	3714      	adds	r7, #20
 801c050:	46bd      	mov	sp, r7
 801c052:	bc80      	pop	{r7}
 801c054:	4770      	bx	lr
 801c056:	bf00      	nop
 801c058:	20003e34 	.word	0x20003e34

0801c05c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c05c:	b480      	push	{r7}
 801c05e:	b085      	sub	sp, #20
 801c060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c062:	f3ef 8310 	mrs	r3, PRIMASK
 801c066:	607b      	str	r3, [r7, #4]
  return(result);
 801c068:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c06a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c06c:	b672      	cpsid	i
}
 801c06e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c070:	4b08      	ldr	r3, [pc, #32]	@ (801c094 <TRACE_UnLock+0x38>)
 801c072:	8adb      	ldrh	r3, [r3, #22]
 801c074:	3b01      	subs	r3, #1
 801c076:	b29a      	uxth	r2, r3
 801c078:	4b06      	ldr	r3, [pc, #24]	@ (801c094 <TRACE_UnLock+0x38>)
 801c07a:	82da      	strh	r2, [r3, #22]
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	f383 8810 	msr	PRIMASK, r3
}
 801c086:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c088:	bf00      	nop
 801c08a:	3714      	adds	r7, #20
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bc80      	pop	{r7}
 801c090:	4770      	bx	lr
 801c092:	bf00      	nop
 801c094:	20003e34 	.word	0x20003e34

0801c098 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c098:	b480      	push	{r7}
 801c09a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c09c:	4b05      	ldr	r3, [pc, #20]	@ (801c0b4 <TRACE_IsLocked+0x1c>)
 801c09e:	8adb      	ldrh	r3, [r3, #22]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	bf14      	ite	ne
 801c0a4:	2301      	movne	r3, #1
 801c0a6:	2300      	moveq	r3, #0
 801c0a8:	b2db      	uxtb	r3, r3
}
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bc80      	pop	{r7}
 801c0b0:	4770      	bx	lr
 801c0b2:	bf00      	nop
 801c0b4:	20003e34 	.word	0x20003e34

0801c0b8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c0b8:	b480      	push	{r7}
 801c0ba:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0bc:	4b04      	ldr	r3, [pc, #16]	@ (801c0d0 <UTIL_LPM_Init+0x18>)
 801c0be:	2200      	movs	r2, #0
 801c0c0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c0c2:	4b04      	ldr	r3, [pc, #16]	@ (801c0d4 <UTIL_LPM_Init+0x1c>)
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c0c8:	bf00      	nop
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bc80      	pop	{r7}
 801c0ce:	4770      	bx	lr
 801c0d0:	2000444c 	.word	0x2000444c
 801c0d4:	20004450 	.word	0x20004450

0801c0d8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c0d8:	b480      	push	{r7}
 801c0da:	b087      	sub	sp, #28
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	6078      	str	r0, [r7, #4]
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0e4:	f3ef 8310 	mrs	r3, PRIMASK
 801c0e8:	613b      	str	r3, [r7, #16]
  return(result);
 801c0ea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c0ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0ee:	b672      	cpsid	i
}
 801c0f0:	bf00      	nop
  
  switch( state )
 801c0f2:	78fb      	ldrb	r3, [r7, #3]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d008      	beq.n	801c10a <UTIL_LPM_SetStopMode+0x32>
 801c0f8:	2b01      	cmp	r3, #1
 801c0fa:	d10e      	bne.n	801c11a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (801c134 <UTIL_LPM_SetStopMode+0x5c>)
 801c0fe:	681a      	ldr	r2, [r3, #0]
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	4313      	orrs	r3, r2
 801c104:	4a0b      	ldr	r2, [pc, #44]	@ (801c134 <UTIL_LPM_SetStopMode+0x5c>)
 801c106:	6013      	str	r3, [r2, #0]
      break;
 801c108:	e008      	b.n	801c11c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	43da      	mvns	r2, r3
 801c10e:	4b09      	ldr	r3, [pc, #36]	@ (801c134 <UTIL_LPM_SetStopMode+0x5c>)
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	4013      	ands	r3, r2
 801c114:	4a07      	ldr	r2, [pc, #28]	@ (801c134 <UTIL_LPM_SetStopMode+0x5c>)
 801c116:	6013      	str	r3, [r2, #0]
      break;
 801c118:	e000      	b.n	801c11c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c11a:	bf00      	nop
 801c11c:	697b      	ldr	r3, [r7, #20]
 801c11e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	f383 8810 	msr	PRIMASK, r3
}
 801c126:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c128:	bf00      	nop
 801c12a:	371c      	adds	r7, #28
 801c12c:	46bd      	mov	sp, r7
 801c12e:	bc80      	pop	{r7}
 801c130:	4770      	bx	lr
 801c132:	bf00      	nop
 801c134:	2000444c 	.word	0x2000444c

0801c138 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c138:	b480      	push	{r7}
 801c13a:	b087      	sub	sp, #28
 801c13c:	af00      	add	r7, sp, #0
 801c13e:	6078      	str	r0, [r7, #4]
 801c140:	460b      	mov	r3, r1
 801c142:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c144:	f3ef 8310 	mrs	r3, PRIMASK
 801c148:	613b      	str	r3, [r7, #16]
  return(result);
 801c14a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c14c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c14e:	b672      	cpsid	i
}
 801c150:	bf00      	nop
  
  switch(state)
 801c152:	78fb      	ldrb	r3, [r7, #3]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d008      	beq.n	801c16a <UTIL_LPM_SetOffMode+0x32>
 801c158:	2b01      	cmp	r3, #1
 801c15a:	d10e      	bne.n	801c17a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c15c:	4b0d      	ldr	r3, [pc, #52]	@ (801c194 <UTIL_LPM_SetOffMode+0x5c>)
 801c15e:	681a      	ldr	r2, [r3, #0]
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	4313      	orrs	r3, r2
 801c164:	4a0b      	ldr	r2, [pc, #44]	@ (801c194 <UTIL_LPM_SetOffMode+0x5c>)
 801c166:	6013      	str	r3, [r2, #0]
      break;
 801c168:	e008      	b.n	801c17c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	43da      	mvns	r2, r3
 801c16e:	4b09      	ldr	r3, [pc, #36]	@ (801c194 <UTIL_LPM_SetOffMode+0x5c>)
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	4013      	ands	r3, r2
 801c174:	4a07      	ldr	r2, [pc, #28]	@ (801c194 <UTIL_LPM_SetOffMode+0x5c>)
 801c176:	6013      	str	r3, [r2, #0]
      break;
 801c178:	e000      	b.n	801c17c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c17a:	bf00      	nop
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	f383 8810 	msr	PRIMASK, r3
}
 801c186:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c188:	bf00      	nop
 801c18a:	371c      	adds	r7, #28
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bc80      	pop	{r7}
 801c190:	4770      	bx	lr
 801c192:	bf00      	nop
 801c194:	20004450 	.word	0x20004450

0801c198 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c198:	b480      	push	{r7}
 801c19a:	b087      	sub	sp, #28
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	60f8      	str	r0, [r7, #12]
 801c1a0:	60b9      	str	r1, [r7, #8]
 801c1a2:	4613      	mov	r3, r2
 801c1a4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c1ae:	e007      	b.n	801c1c0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c1b0:	693a      	ldr	r2, [r7, #16]
 801c1b2:	1c53      	adds	r3, r2, #1
 801c1b4:	613b      	str	r3, [r7, #16]
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	1c59      	adds	r1, r3, #1
 801c1ba:	6179      	str	r1, [r7, #20]
 801c1bc:	7812      	ldrb	r2, [r2, #0]
 801c1be:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c1c0:	88fb      	ldrh	r3, [r7, #6]
 801c1c2:	1e5a      	subs	r2, r3, #1
 801c1c4:	80fa      	strh	r2, [r7, #6]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d1f2      	bne.n	801c1b0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c1ca:	bf00      	nop
 801c1cc:	bf00      	nop
 801c1ce:	371c      	adds	r7, #28
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bc80      	pop	{r7}
 801c1d4:	4770      	bx	lr

0801c1d6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c1d6:	b480      	push	{r7}
 801c1d8:	b085      	sub	sp, #20
 801c1da:	af00      	add	r7, sp, #0
 801c1dc:	6078      	str	r0, [r7, #4]
 801c1de:	460b      	mov	r3, r1
 801c1e0:	70fb      	strb	r3, [r7, #3]
 801c1e2:	4613      	mov	r3, r2
 801c1e4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c1ea:	e004      	b.n	801c1f6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	1c5a      	adds	r2, r3, #1
 801c1f0:	60fa      	str	r2, [r7, #12]
 801c1f2:	78fa      	ldrb	r2, [r7, #3]
 801c1f4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c1f6:	883b      	ldrh	r3, [r7, #0]
 801c1f8:	1e5a      	subs	r2, r3, #1
 801c1fa:	803a      	strh	r2, [r7, #0]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d1f5      	bne.n	801c1ec <UTIL_MEM_set_8+0x16>
  }
}
 801c200:	bf00      	nop
 801c202:	bf00      	nop
 801c204:	3714      	adds	r7, #20
 801c206:	46bd      	mov	sp, r7
 801c208:	bc80      	pop	{r7}
 801c20a:	4770      	bx	lr

0801c20c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b08c      	sub	sp, #48	@ 0x30
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c214:	4b67      	ldr	r3, [pc, #412]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801c21a:	4b66      	ldr	r3, [pc, #408]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c21c:	681a      	ldr	r2, [r3, #0]
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4013      	ands	r3, r2
 801c222:	4a64      	ldr	r2, [pc, #400]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c224:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c226:	e083      	b.n	801c330 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801c228:	2300      	movs	r3, #0
 801c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c22c:	e002      	b.n	801c234 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c230:	3301      	adds	r3, #1
 801c232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c234:	4a60      	ldr	r2, [pc, #384]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c238:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c23c:	4b5f      	ldr	r3, [pc, #380]	@ (801c3bc <UTIL_SEQ_Run+0x1b0>)
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	401a      	ands	r2, r3
 801c242:	4b5c      	ldr	r3, [pc, #368]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	4013      	ands	r3, r2
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d0f0      	beq.n	801c22e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c24c:	4a5a      	ldr	r2, [pc, #360]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c250:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c254:	4b59      	ldr	r3, [pc, #356]	@ (801c3bc <UTIL_SEQ_Run+0x1b0>)
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	401a      	ands	r2, r3
 801c25a:	4b56      	ldr	r3, [pc, #344]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	4013      	ands	r3, r2
 801c260:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c262:	4a55      	ldr	r2, [pc, #340]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c266:	00db      	lsls	r3, r3, #3
 801c268:	4413      	add	r3, r2
 801c26a:	685a      	ldr	r2, [r3, #4]
 801c26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c26e:	4013      	ands	r3, r2
 801c270:	2b00      	cmp	r3, #0
 801c272:	d106      	bne.n	801c282 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c274:	4a50      	ldr	r2, [pc, #320]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c278:	00db      	lsls	r3, r3, #3
 801c27a:	4413      	add	r3, r2
 801c27c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c280:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c282:	4a4d      	ldr	r2, [pc, #308]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c286:	00db      	lsls	r3, r3, #3
 801c288:	4413      	add	r3, r2
 801c28a:	685a      	ldr	r2, [r3, #4]
 801c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c28e:	4013      	ands	r3, r2
 801c290:	4618      	mov	r0, r3
 801c292:	f000 f8f9 	bl	801c488 <SEQ_BitPosition>
 801c296:	4603      	mov	r3, r0
 801c298:	461a      	mov	r2, r3
 801c29a:	4b49      	ldr	r3, [pc, #292]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c29c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c29e:	4a46      	ldr	r2, [pc, #280]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2a2:	00db      	lsls	r3, r3, #3
 801c2a4:	4413      	add	r3, r2
 801c2a6:	685a      	ldr	r2, [r3, #4]
 801c2a8:	4b45      	ldr	r3, [pc, #276]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	2101      	movs	r1, #1
 801c2ae:	fa01 f303 	lsl.w	r3, r1, r3
 801c2b2:	43db      	mvns	r3, r3
 801c2b4:	401a      	ands	r2, r3
 801c2b6:	4940      	ldr	r1, [pc, #256]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2ba:	00db      	lsls	r3, r3, #3
 801c2bc:	440b      	add	r3, r1
 801c2be:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2c0:	f3ef 8310 	mrs	r3, PRIMASK
 801c2c4:	61bb      	str	r3, [r7, #24]
  return(result);
 801c2c6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c2c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2ca:	b672      	cpsid	i
}
 801c2cc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c2ce:	4b3c      	ldr	r3, [pc, #240]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	2201      	movs	r2, #1
 801c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801c2d8:	43da      	mvns	r2, r3
 801c2da:	4b3a      	ldr	r3, [pc, #232]	@ (801c3c4 <UTIL_SEQ_Run+0x1b8>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	4013      	ands	r3, r2
 801c2e0:	4a38      	ldr	r2, [pc, #224]	@ (801c3c4 <UTIL_SEQ_Run+0x1b8>)
 801c2e2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c2e4:	2302      	movs	r3, #2
 801c2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c2e8:	e013      	b.n	801c312 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c2ec:	3b01      	subs	r3, #1
 801c2ee:	4a32      	ldr	r2, [pc, #200]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c2f0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c2f4:	4b32      	ldr	r3, [pc, #200]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	2201      	movs	r2, #1
 801c2fa:	fa02 f303 	lsl.w	r3, r2, r3
 801c2fe:	43da      	mvns	r2, r3
 801c300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c302:	3b01      	subs	r3, #1
 801c304:	400a      	ands	r2, r1
 801c306:	492c      	ldr	r1, [pc, #176]	@ (801c3b8 <UTIL_SEQ_Run+0x1ac>)
 801c308:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c30e:	3b01      	subs	r3, #1
 801c310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c314:	2b00      	cmp	r3, #0
 801c316:	d1e8      	bne.n	801c2ea <UTIL_SEQ_Run+0xde>
 801c318:	6a3b      	ldr	r3, [r7, #32]
 801c31a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	f383 8810 	msr	PRIMASK, r3
}
 801c322:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c324:	4b26      	ldr	r3, [pc, #152]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	4a27      	ldr	r2, [pc, #156]	@ (801c3c8 <UTIL_SEQ_Run+0x1bc>)
 801c32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c32e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c330:	4b24      	ldr	r3, [pc, #144]	@ (801c3c4 <UTIL_SEQ_Run+0x1b8>)
 801c332:	681a      	ldr	r2, [r3, #0]
 801c334:	4b21      	ldr	r3, [pc, #132]	@ (801c3bc <UTIL_SEQ_Run+0x1b0>)
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	401a      	ands	r2, r3
 801c33a:	4b1e      	ldr	r3, [pc, #120]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	4013      	ands	r3, r2
 801c340:	2b00      	cmp	r3, #0
 801c342:	d007      	beq.n	801c354 <UTIL_SEQ_Run+0x148>
 801c344:	4b21      	ldr	r3, [pc, #132]	@ (801c3cc <UTIL_SEQ_Run+0x1c0>)
 801c346:	681a      	ldr	r2, [r3, #0]
 801c348:	4b21      	ldr	r3, [pc, #132]	@ (801c3d0 <UTIL_SEQ_Run+0x1c4>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	4013      	ands	r3, r2
 801c34e:	2b00      	cmp	r3, #0
 801c350:	f43f af6a 	beq.w	801c228 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c354:	4b1a      	ldr	r3, [pc, #104]	@ (801c3c0 <UTIL_SEQ_Run+0x1b4>)
 801c356:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c35a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c35c:	f000 f888 	bl	801c470 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c360:	f3ef 8310 	mrs	r3, PRIMASK
 801c364:	613b      	str	r3, [r7, #16]
  return(result);
 801c366:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c36a:	b672      	cpsid	i
}
 801c36c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c36e:	4b15      	ldr	r3, [pc, #84]	@ (801c3c4 <UTIL_SEQ_Run+0x1b8>)
 801c370:	681a      	ldr	r2, [r3, #0]
 801c372:	4b12      	ldr	r3, [pc, #72]	@ (801c3bc <UTIL_SEQ_Run+0x1b0>)
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	401a      	ands	r2, r3
 801c378:	4b0e      	ldr	r3, [pc, #56]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	4013      	ands	r3, r2
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d108      	bne.n	801c394 <UTIL_SEQ_Run+0x188>
 801c382:	4b12      	ldr	r3, [pc, #72]	@ (801c3cc <UTIL_SEQ_Run+0x1c0>)
 801c384:	681a      	ldr	r2, [r3, #0]
 801c386:	4b12      	ldr	r3, [pc, #72]	@ (801c3d0 <UTIL_SEQ_Run+0x1c4>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	4013      	ands	r3, r2
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d101      	bne.n	801c394 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801c390:	f7e5 f986 	bl	80016a0 <UTIL_SEQ_Idle>
 801c394:	69fb      	ldr	r3, [r7, #28]
 801c396:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	f383 8810 	msr	PRIMASK, r3
}
 801c39e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c3a0:	f000 f86c 	bl	801c47c <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c3a4:	4a03      	ldr	r2, [pc, #12]	@ (801c3b4 <UTIL_SEQ_Run+0x1a8>)
 801c3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a8:	6013      	str	r3, [r2, #0]

  return;
 801c3aa:	bf00      	nop
}
 801c3ac:	3730      	adds	r7, #48	@ 0x30
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bd80      	pop	{r7, pc}
 801c3b2:	bf00      	nop
 801c3b4:	2000010c 	.word	0x2000010c
 801c3b8:	200044e4 	.word	0x200044e4
 801c3bc:	20000108 	.word	0x20000108
 801c3c0:	20004460 	.word	0x20004460
 801c3c4:	20004454 	.word	0x20004454
 801c3c8:	20004464 	.word	0x20004464
 801c3cc:	20004458 	.word	0x20004458
 801c3d0:	2000445c 	.word	0x2000445c

0801c3d4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b088      	sub	sp, #32
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	60f8      	str	r0, [r7, #12]
 801c3dc:	60b9      	str	r1, [r7, #8]
 801c3de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3e0:	f3ef 8310 	mrs	r3, PRIMASK
 801c3e4:	617b      	str	r3, [r7, #20]
  return(result);
 801c3e6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c3e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3ea:	b672      	cpsid	i
}
 801c3ec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c3ee:	68f8      	ldr	r0, [r7, #12]
 801c3f0:	f000 f84a 	bl	801c488 <SEQ_BitPosition>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	4a06      	ldr	r2, [pc, #24]	@ (801c414 <UTIL_SEQ_RegTask+0x40>)
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c400:	69fb      	ldr	r3, [r7, #28]
 801c402:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c404:	69bb      	ldr	r3, [r7, #24]
 801c406:	f383 8810 	msr	PRIMASK, r3
}
 801c40a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c40c:	bf00      	nop
}
 801c40e:	3720      	adds	r7, #32
 801c410:	46bd      	mov	sp, r7
 801c412:	bd80      	pop	{r7, pc}
 801c414:	20004464 	.word	0x20004464

0801c418 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c418:	b480      	push	{r7}
 801c41a:	b087      	sub	sp, #28
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	6078      	str	r0, [r7, #4]
 801c420:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c422:	f3ef 8310 	mrs	r3, PRIMASK
 801c426:	60fb      	str	r3, [r7, #12]
  return(result);
 801c428:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c42a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c42c:	b672      	cpsid	i
}
 801c42e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c430:	4b0d      	ldr	r3, [pc, #52]	@ (801c468 <UTIL_SEQ_SetTask+0x50>)
 801c432:	681a      	ldr	r2, [r3, #0]
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	4313      	orrs	r3, r2
 801c438:	4a0b      	ldr	r2, [pc, #44]	@ (801c468 <UTIL_SEQ_SetTask+0x50>)
 801c43a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c43c:	4a0b      	ldr	r2, [pc, #44]	@ (801c46c <UTIL_SEQ_SetTask+0x54>)
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	431a      	orrs	r2, r3
 801c448:	4908      	ldr	r1, [pc, #32]	@ (801c46c <UTIL_SEQ_SetTask+0x54>)
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c450:	697b      	ldr	r3, [r7, #20]
 801c452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	f383 8810 	msr	PRIMASK, r3
}
 801c45a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c45c:	bf00      	nop
}
 801c45e:	371c      	adds	r7, #28
 801c460:	46bd      	mov	sp, r7
 801c462:	bc80      	pop	{r7}
 801c464:	4770      	bx	lr
 801c466:	bf00      	nop
 801c468:	20004454 	.word	0x20004454
 801c46c:	200044e4 	.word	0x200044e4

0801c470 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c470:	b480      	push	{r7}
 801c472:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c474:	bf00      	nop
}
 801c476:	46bd      	mov	sp, r7
 801c478:	bc80      	pop	{r7}
 801c47a:	4770      	bx	lr

0801c47c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c47c:	b480      	push	{r7}
 801c47e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c480:	bf00      	nop
}
 801c482:	46bd      	mov	sp, r7
 801c484:	bc80      	pop	{r7}
 801c486:	4770      	bx	lr

0801c488 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c488:	b480      	push	{r7}
 801c48a:	b085      	sub	sp, #20
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c490:	2300      	movs	r3, #0
 801c492:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c49a:	d204      	bcs.n	801c4a6 <SEQ_BitPosition+0x1e>
 801c49c:	2310      	movs	r3, #16
 801c49e:	73fb      	strb	r3, [r7, #15]
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	041b      	lsls	r3, r3, #16
 801c4a4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c4ac:	d205      	bcs.n	801c4ba <SEQ_BitPosition+0x32>
 801c4ae:	7bfb      	ldrb	r3, [r7, #15]
 801c4b0:	3308      	adds	r3, #8
 801c4b2:	73fb      	strb	r3, [r7, #15]
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	021b      	lsls	r3, r3, #8
 801c4b8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c4c0:	d205      	bcs.n	801c4ce <SEQ_BitPosition+0x46>
 801c4c2:	7bfb      	ldrb	r3, [r7, #15]
 801c4c4:	3304      	adds	r3, #4
 801c4c6:	73fb      	strb	r3, [r7, #15]
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	011b      	lsls	r3, r3, #4
 801c4cc:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	0f1b      	lsrs	r3, r3, #28
 801c4d2:	4a07      	ldr	r2, [pc, #28]	@ (801c4f0 <SEQ_BitPosition+0x68>)
 801c4d4:	5cd2      	ldrb	r2, [r2, r3]
 801c4d6:	7bfb      	ldrb	r3, [r7, #15]
 801c4d8:	4413      	add	r3, r2
 801c4da:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c4dc:	7bfb      	ldrb	r3, [r7, #15]
 801c4de:	f1c3 031f 	rsb	r3, r3, #31
 801c4e2:	b2db      	uxtb	r3, r3
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3714      	adds	r7, #20
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bc80      	pop	{r7}
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	0801e158 	.word	0x0801e158

0801c4f4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c4f4:	b082      	sub	sp, #8
 801c4f6:	b480      	push	{r7}
 801c4f8:	b087      	sub	sp, #28
 801c4fa:	af00      	add	r7, sp, #0
 801c4fc:	60f8      	str	r0, [r7, #12]
 801c4fe:	1d38      	adds	r0, r7, #4
 801c500:	e880 0006 	stmia.w	r0, {r1, r2}
 801c504:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c506:	2300      	movs	r3, #0
 801c508:	613b      	str	r3, [r7, #16]
 801c50a:	2300      	movs	r3, #0
 801c50c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c50e:	687a      	ldr	r2, [r7, #4]
 801c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c512:	4413      	add	r3, r2
 801c514:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c516:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c51a:	b29a      	uxth	r2, r3
 801c51c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c520:	b29b      	uxth	r3, r3
 801c522:	4413      	add	r3, r2
 801c524:	b29b      	uxth	r3, r3
 801c526:	b21b      	sxth	r3, r3
 801c528:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c52a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c52e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c532:	db0a      	blt.n	801c54a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c534:	693b      	ldr	r3, [r7, #16]
 801c536:	3301      	adds	r3, #1
 801c538:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c53a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c53e:	b29b      	uxth	r3, r3
 801c540:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801c544:	b29b      	uxth	r3, r3
 801c546:	b21b      	sxth	r3, r3
 801c548:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	461a      	mov	r2, r3
 801c54e:	f107 0310 	add.w	r3, r7, #16
 801c552:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c556:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c55a:	68f8      	ldr	r0, [r7, #12]
 801c55c:	371c      	adds	r7, #28
 801c55e:	46bd      	mov	sp, r7
 801c560:	bc80      	pop	{r7}
 801c562:	b002      	add	sp, #8
 801c564:	4770      	bx	lr

0801c566 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c566:	b082      	sub	sp, #8
 801c568:	b480      	push	{r7}
 801c56a:	b087      	sub	sp, #28
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	60f8      	str	r0, [r7, #12]
 801c570:	1d38      	adds	r0, r7, #4
 801c572:	e880 0006 	stmia.w	r0, {r1, r2}
 801c576:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c578:	2300      	movs	r3, #0
 801c57a:	613b      	str	r3, [r7, #16]
 801c57c:	2300      	movs	r3, #0
 801c57e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c580:	687a      	ldr	r2, [r7, #4]
 801c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c584:	1ad3      	subs	r3, r2, r3
 801c586:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c588:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c58c:	b29a      	uxth	r2, r3
 801c58e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801c592:	b29b      	uxth	r3, r3
 801c594:	1ad3      	subs	r3, r2, r3
 801c596:	b29b      	uxth	r3, r3
 801c598:	b21b      	sxth	r3, r3
 801c59a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c59c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	da0a      	bge.n	801c5ba <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c5a4:	693b      	ldr	r3, [r7, #16]
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c5aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c5ae:	b29b      	uxth	r3, r3
 801c5b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801c5b4:	b29b      	uxth	r3, r3
 801c5b6:	b21b      	sxth	r3, r3
 801c5b8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	461a      	mov	r2, r3
 801c5be:	f107 0310 	add.w	r3, r7, #16
 801c5c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c5c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c5ca:	68f8      	ldr	r0, [r7, #12]
 801c5cc:	371c      	adds	r7, #28
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bc80      	pop	{r7}
 801c5d2:	b002      	add	sp, #8
 801c5d4:	4770      	bx	lr
	...

0801c5d8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b088      	sub	sp, #32
 801c5dc:	af02      	add	r7, sp, #8
 801c5de:	463b      	mov	r3, r7
 801c5e0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	60bb      	str	r3, [r7, #8]
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c5ec:	4b10      	ldr	r3, [pc, #64]	@ (801c630 <SysTimeSet+0x58>)
 801c5ee:	691b      	ldr	r3, [r3, #16]
 801c5f0:	f107 0208 	add.w	r2, r7, #8
 801c5f4:	3204      	adds	r2, #4
 801c5f6:	4610      	mov	r0, r2
 801c5f8:	4798      	blx	r3
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c5fe:	f107 0010 	add.w	r0, r7, #16
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	9300      	str	r3, [sp, #0]
 801c606:	68bb      	ldr	r3, [r7, #8]
 801c608:	463a      	mov	r2, r7
 801c60a:	ca06      	ldmia	r2, {r1, r2}
 801c60c:	f7ff ffab 	bl	801c566 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c610:	4b07      	ldr	r3, [pc, #28]	@ (801c630 <SysTimeSet+0x58>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	693a      	ldr	r2, [r7, #16]
 801c616:	4610      	mov	r0, r2
 801c618:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c61a:	4b05      	ldr	r3, [pc, #20]	@ (801c630 <SysTimeSet+0x58>)
 801c61c:	689b      	ldr	r3, [r3, #8]
 801c61e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c622:	4610      	mov	r0, r2
 801c624:	4798      	blx	r3
}
 801c626:	bf00      	nop
 801c628:	3718      	adds	r7, #24
 801c62a:	46bd      	mov	sp, r7
 801c62c:	bd80      	pop	{r7, pc}
 801c62e:	bf00      	nop
 801c630:	0801dc04 	.word	0x0801dc04

0801c634 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b08a      	sub	sp, #40	@ 0x28
 801c638:	af02      	add	r7, sp, #8
 801c63a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c63c:	2300      	movs	r3, #0
 801c63e:	61bb      	str	r3, [r7, #24]
 801c640:	2300      	movs	r3, #0
 801c642:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c644:	2300      	movs	r3, #0
 801c646:	613b      	str	r3, [r7, #16]
 801c648:	2300      	movs	r3, #0
 801c64a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c64c:	4b14      	ldr	r3, [pc, #80]	@ (801c6a0 <SysTimeGet+0x6c>)
 801c64e:	691b      	ldr	r3, [r3, #16]
 801c650:	f107 0218 	add.w	r2, r7, #24
 801c654:	3204      	adds	r2, #4
 801c656:	4610      	mov	r0, r2
 801c658:	4798      	blx	r3
 801c65a:	4603      	mov	r3, r0
 801c65c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c65e:	4b10      	ldr	r3, [pc, #64]	@ (801c6a0 <SysTimeGet+0x6c>)
 801c660:	68db      	ldr	r3, [r3, #12]
 801c662:	4798      	blx	r3
 801c664:	4603      	mov	r3, r0
 801c666:	b21b      	sxth	r3, r3
 801c668:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c66a:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a0 <SysTimeGet+0x6c>)
 801c66c:	685b      	ldr	r3, [r3, #4]
 801c66e:	4798      	blx	r3
 801c670:	4603      	mov	r3, r0
 801c672:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c674:	f107 0010 	add.w	r0, r7, #16
 801c678:	69fb      	ldr	r3, [r7, #28]
 801c67a:	9300      	str	r3, [sp, #0]
 801c67c:	69bb      	ldr	r3, [r7, #24]
 801c67e:	f107 0208 	add.w	r2, r7, #8
 801c682:	ca06      	ldmia	r2, {r1, r2}
 801c684:	f7ff ff36 	bl	801c4f4 <SysTimeAdd>

  return sysTime;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	461a      	mov	r2, r3
 801c68c:	f107 0310 	add.w	r3, r7, #16
 801c690:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c694:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c698:	6878      	ldr	r0, [r7, #4]
 801c69a:	3720      	adds	r7, #32
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}
 801c6a0:	0801dc04 	.word	0x0801dc04

0801c6a4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	b084      	sub	sp, #16
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	60bb      	str	r3, [r7, #8]
 801c6b0:	2300      	movs	r3, #0
 801c6b2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c6b4:	4b0a      	ldr	r3, [pc, #40]	@ (801c6e0 <SysTimeGetMcuTime+0x3c>)
 801c6b6:	691b      	ldr	r3, [r3, #16]
 801c6b8:	f107 0208 	add.w	r2, r7, #8
 801c6bc:	3204      	adds	r2, #4
 801c6be:	4610      	mov	r0, r2
 801c6c0:	4798      	blx	r3
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	461a      	mov	r2, r3
 801c6ca:	f107 0308 	add.w	r3, r7, #8
 801c6ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c6d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c6d6:	6878      	ldr	r0, [r7, #4]
 801c6d8:	3710      	adds	r7, #16
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd80      	pop	{r7, pc}
 801c6de:	bf00      	nop
 801c6e0:	0801dc04 	.word	0x0801dc04

0801c6e4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b088      	sub	sp, #32
 801c6e8:	af02      	add	r7, sp, #8
 801c6ea:	463b      	mov	r3, r7
 801c6ec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c6f0:	4b0f      	ldr	r3, [pc, #60]	@ (801c730 <SysTimeToMs+0x4c>)
 801c6f2:	68db      	ldr	r3, [r3, #12]
 801c6f4:	4798      	blx	r3
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	b21b      	sxth	r3, r3
 801c6fa:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c6fc:	4b0c      	ldr	r3, [pc, #48]	@ (801c730 <SysTimeToMs+0x4c>)
 801c6fe:	685b      	ldr	r3, [r3, #4]
 801c700:	4798      	blx	r3
 801c702:	4603      	mov	r3, r0
 801c704:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c706:	f107 0008 	add.w	r0, r7, #8
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	9300      	str	r3, [sp, #0]
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	463a      	mov	r2, r7
 801c712:	ca06      	ldmia	r2, {r1, r2}
 801c714:	f7ff ff27 	bl	801c566 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c71e:	fb02 f303 	mul.w	r3, r2, r3
 801c722:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c726:	4413      	add	r3, r2
}
 801c728:	4618      	mov	r0, r3
 801c72a:	3718      	adds	r7, #24
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}
 801c730:	0801dc04 	.word	0x0801dc04

0801c734 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b08a      	sub	sp, #40	@ 0x28
 801c738:	af02      	add	r7, sp, #8
 801c73a:	6078      	str	r0, [r7, #4]
 801c73c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c73e:	683b      	ldr	r3, [r7, #0]
 801c740:	4a19      	ldr	r2, [pc, #100]	@ (801c7a8 <SysTimeFromMs+0x74>)
 801c742:	fba2 2303 	umull	r2, r3, r2, r3
 801c746:	099b      	lsrs	r3, r3, #6
 801c748:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c74a:	69fb      	ldr	r3, [r7, #28]
 801c74c:	617b      	str	r3, [r7, #20]
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	b29a      	uxth	r2, r3
 801c752:	69fb      	ldr	r3, [r7, #28]
 801c754:	b29b      	uxth	r3, r3
 801c756:	4619      	mov	r1, r3
 801c758:	0149      	lsls	r1, r1, #5
 801c75a:	1ac9      	subs	r1, r1, r3
 801c75c:	0089      	lsls	r1, r1, #2
 801c75e:	440b      	add	r3, r1
 801c760:	00db      	lsls	r3, r3, #3
 801c762:	b29b      	uxth	r3, r3
 801c764:	1ad3      	subs	r3, r2, r3
 801c766:	b29b      	uxth	r3, r3
 801c768:	b21b      	sxth	r3, r3
 801c76a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c76c:	f107 030c 	add.w	r3, r7, #12
 801c770:	2200      	movs	r2, #0
 801c772:	601a      	str	r2, [r3, #0]
 801c774:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c776:	4b0d      	ldr	r3, [pc, #52]	@ (801c7ac <SysTimeFromMs+0x78>)
 801c778:	68db      	ldr	r3, [r3, #12]
 801c77a:	4798      	blx	r3
 801c77c:	4603      	mov	r3, r0
 801c77e:	b21b      	sxth	r3, r3
 801c780:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c782:	4b0a      	ldr	r3, [pc, #40]	@ (801c7ac <SysTimeFromMs+0x78>)
 801c784:	685b      	ldr	r3, [r3, #4]
 801c786:	4798      	blx	r3
 801c788:	4603      	mov	r3, r0
 801c78a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c78c:	6878      	ldr	r0, [r7, #4]
 801c78e:	693b      	ldr	r3, [r7, #16]
 801c790:	9300      	str	r3, [sp, #0]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	f107 0214 	add.w	r2, r7, #20
 801c798:	ca06      	ldmia	r2, {r1, r2}
 801c79a:	f7ff feab 	bl	801c4f4 <SysTimeAdd>
}
 801c79e:	6878      	ldr	r0, [r7, #4]
 801c7a0:	3720      	adds	r7, #32
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	bd80      	pop	{r7, pc}
 801c7a6:	bf00      	nop
 801c7a8:	10624dd3 	.word	0x10624dd3
 801c7ac:	0801dc04 	.word	0x0801dc04

0801c7b0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c7b0:	b580      	push	{r7, lr}
 801c7b2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c7b4:	4b04      	ldr	r3, [pc, #16]	@ (801c7c8 <UTIL_TIMER_Init+0x18>)
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c7ba:	4b04      	ldr	r3, [pc, #16]	@ (801c7cc <UTIL_TIMER_Init+0x1c>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	4798      	blx	r3
 801c7c0:	4603      	mov	r3, r0
}
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	bd80      	pop	{r7, pc}
 801c7c6:	bf00      	nop
 801c7c8:	200044f4 	.word	0x200044f4
 801c7cc:	0801dbd8 	.word	0x0801dbd8

0801c7d0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c7d0:	b580      	push	{r7, lr}
 801c7d2:	b084      	sub	sp, #16
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	60f8      	str	r0, [r7, #12]
 801c7d8:	60b9      	str	r1, [r7, #8]
 801c7da:	603b      	str	r3, [r7, #0]
 801c7dc:	4613      	mov	r3, r2
 801c7de:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d023      	beq.n	801c82e <UTIL_TIMER_Create+0x5e>
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d020      	beq.n	801c82e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c7f2:	4b11      	ldr	r3, [pc, #68]	@ (801c838 <UTIL_TIMER_Create+0x68>)
 801c7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c7f6:	68b8      	ldr	r0, [r7, #8]
 801c7f8:	4798      	blx	r3
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	2200      	movs	r2, #0
 801c804:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	2200      	movs	r2, #0
 801c80a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	2200      	movs	r2, #0
 801c810:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	683a      	ldr	r2, [r7, #0]
 801c816:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	69ba      	ldr	r2, [r7, #24]
 801c81c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	79fa      	ldrb	r2, [r7, #7]
 801c822:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	2200      	movs	r2, #0
 801c828:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c82a:	2300      	movs	r3, #0
 801c82c:	e000      	b.n	801c830 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c82e:	2301      	movs	r3, #1
  }
}
 801c830:	4618      	mov	r0, r3
 801c832:	3710      	adds	r7, #16
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}
 801c838:	0801dbd8 	.word	0x0801dbd8

0801c83c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b08a      	sub	sp, #40	@ 0x28
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c844:	2300      	movs	r3, #0
 801c846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d056      	beq.n	801c8fe <UTIL_TIMER_Start+0xc2>
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f000 f9a9 	bl	801cba8 <TimerExists>
 801c856:	4603      	mov	r3, r0
 801c858:	f083 0301 	eor.w	r3, r3, #1
 801c85c:	b2db      	uxtb	r3, r3
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d04d      	beq.n	801c8fe <UTIL_TIMER_Start+0xc2>
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	7a5b      	ldrb	r3, [r3, #9]
 801c866:	2b00      	cmp	r3, #0
 801c868:	d149      	bne.n	801c8fe <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c86a:	f3ef 8310 	mrs	r3, PRIMASK
 801c86e:	613b      	str	r3, [r7, #16]
  return(result);
 801c870:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c872:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c874:	b672      	cpsid	i
}
 801c876:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	685b      	ldr	r3, [r3, #4]
 801c87c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c87e:	4b24      	ldr	r3, [pc, #144]	@ (801c910 <UTIL_TIMER_Start+0xd4>)
 801c880:	6a1b      	ldr	r3, [r3, #32]
 801c882:	4798      	blx	r3
 801c884:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c886:	6a3a      	ldr	r2, [r7, #32]
 801c888:	69bb      	ldr	r3, [r7, #24]
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d201      	bcs.n	801c892 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c88e:	69bb      	ldr	r3, [r7, #24]
 801c890:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	6a3a      	ldr	r2, [r7, #32]
 801c896:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	2200      	movs	r2, #0
 801c89c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	2201      	movs	r2, #1
 801c8a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	2200      	movs	r2, #0
 801c8a8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c8aa:	4b1a      	ldr	r3, [pc, #104]	@ (801c914 <UTIL_TIMER_Start+0xd8>)
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d106      	bne.n	801c8c0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c8b2:	4b17      	ldr	r3, [pc, #92]	@ (801c910 <UTIL_TIMER_Start+0xd4>)
 801c8b4:	691b      	ldr	r3, [r3, #16]
 801c8b6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f000 f9eb 	bl	801cc94 <TimerInsertNewHeadTimer>
 801c8be:	e017      	b.n	801c8f0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c8c0:	4b13      	ldr	r3, [pc, #76]	@ (801c910 <UTIL_TIMER_Start+0xd4>)
 801c8c2:	699b      	ldr	r3, [r3, #24]
 801c8c4:	4798      	blx	r3
 801c8c6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	681a      	ldr	r2, [r3, #0]
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	441a      	add	r2, r3
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	681a      	ldr	r2, [r3, #0]
 801c8d8:	4b0e      	ldr	r3, [pc, #56]	@ (801c914 <UTIL_TIMER_Start+0xd8>)
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	429a      	cmp	r2, r3
 801c8e0:	d203      	bcs.n	801c8ea <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c8e2:	6878      	ldr	r0, [r7, #4]
 801c8e4:	f000 f9d6 	bl	801cc94 <TimerInsertNewHeadTimer>
 801c8e8:	e002      	b.n	801c8f0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c8ea:	6878      	ldr	r0, [r7, #4]
 801c8ec:	f000 f9a2 	bl	801cc34 <TimerInsertTimer>
 801c8f0:	69fb      	ldr	r3, [r7, #28]
 801c8f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	f383 8810 	msr	PRIMASK, r3
}
 801c8fa:	bf00      	nop
  {
 801c8fc:	e002      	b.n	801c904 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c8fe:	2301      	movs	r3, #1
 801c900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801c904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801c908:	4618      	mov	r0, r3
 801c90a:	3728      	adds	r7, #40	@ 0x28
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd80      	pop	{r7, pc}
 801c910:	0801dbd8 	.word	0x0801dbd8
 801c914:	200044f4 	.word	0x200044f4

0801c918 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b088      	sub	sp, #32
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c920:	2300      	movs	r3, #0
 801c922:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	2b00      	cmp	r3, #0
 801c928:	d05b      	beq.n	801c9e2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c92a:	f3ef 8310 	mrs	r3, PRIMASK
 801c92e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c930:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c934:	b672      	cpsid	i
}
 801c936:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c938:	4b2d      	ldr	r3, [pc, #180]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c93e:	4b2c      	ldr	r3, [pc, #176]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	2201      	movs	r2, #1
 801c948:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c94a:	4b29      	ldr	r3, [pc, #164]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d041      	beq.n	801c9d6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	2200      	movs	r2, #0
 801c956:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c958:	4b25      	ldr	r3, [pc, #148]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	687a      	ldr	r2, [r7, #4]
 801c95e:	429a      	cmp	r2, r3
 801c960:	d134      	bne.n	801c9cc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c962:	4b23      	ldr	r3, [pc, #140]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	2200      	movs	r2, #0
 801c968:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c96a:	4b21      	ldr	r3, [pc, #132]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	695b      	ldr	r3, [r3, #20]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d00a      	beq.n	801c98a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c974:	4b1e      	ldr	r3, [pc, #120]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	695b      	ldr	r3, [r3, #20]
 801c97a:	4a1d      	ldr	r2, [pc, #116]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c97c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c97e:	4b1c      	ldr	r3, [pc, #112]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	4618      	mov	r0, r3
 801c984:	f000 f92c 	bl	801cbe0 <TimerSetTimeout>
 801c988:	e023      	b.n	801c9d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c98a:	4b1a      	ldr	r3, [pc, #104]	@ (801c9f4 <UTIL_TIMER_Stop+0xdc>)
 801c98c:	68db      	ldr	r3, [r3, #12]
 801c98e:	4798      	blx	r3
            TimerListHead = NULL;
 801c990:	4b17      	ldr	r3, [pc, #92]	@ (801c9f0 <UTIL_TIMER_Stop+0xd8>)
 801c992:	2200      	movs	r2, #0
 801c994:	601a      	str	r2, [r3, #0]
 801c996:	e01c      	b.n	801c9d2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c998:	697a      	ldr	r2, [r7, #20]
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	429a      	cmp	r2, r3
 801c99e:	d110      	bne.n	801c9c2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c9a0:	697b      	ldr	r3, [r7, #20]
 801c9a2:	695b      	ldr	r3, [r3, #20]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d006      	beq.n	801c9b6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c9a8:	697b      	ldr	r3, [r7, #20]
 801c9aa:	695b      	ldr	r3, [r3, #20]
 801c9ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c9ae:	69bb      	ldr	r3, [r7, #24]
 801c9b0:	697a      	ldr	r2, [r7, #20]
 801c9b2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c9b4:	e00d      	b.n	801c9d2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c9ba:	69bb      	ldr	r3, [r7, #24]
 801c9bc:	697a      	ldr	r2, [r7, #20]
 801c9be:	615a      	str	r2, [r3, #20]
            break;
 801c9c0:	e007      	b.n	801c9d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c9c6:	697b      	ldr	r3, [r7, #20]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c9cc:	697b      	ldr	r3, [r7, #20]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d1e2      	bne.n	801c998 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	77fb      	strb	r3, [r7, #31]
 801c9d6:	693b      	ldr	r3, [r7, #16]
 801c9d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	f383 8810 	msr	PRIMASK, r3
}
 801c9e0:	e001      	b.n	801c9e6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c9e2:	2301      	movs	r3, #1
 801c9e4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c9e6:	7ffb      	ldrb	r3, [r7, #31]
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3720      	adds	r7, #32
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd80      	pop	{r7, pc}
 801c9f0:	200044f4 	.word	0x200044f4
 801c9f4:	0801dbd8 	.word	0x0801dbd8

0801c9f8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b084      	sub	sp, #16
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
 801ca00:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ca02:	2300      	movs	r3, #0
 801ca04:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d102      	bne.n	801ca12 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ca0c:	2301      	movs	r3, #1
 801ca0e:	73fb      	strb	r3, [r7, #15]
 801ca10:	e014      	b.n	801ca3c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ca12:	4b0d      	ldr	r3, [pc, #52]	@ (801ca48 <UTIL_TIMER_SetPeriod+0x50>)
 801ca14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca16:	6838      	ldr	r0, [r7, #0]
 801ca18:	4798      	blx	r3
 801ca1a:	4602      	mov	r2, r0
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ca20:	6878      	ldr	r0, [r7, #4]
 801ca22:	f000 f8c1 	bl	801cba8 <TimerExists>
 801ca26:	4603      	mov	r3, r0
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d007      	beq.n	801ca3c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f7ff ff73 	bl	801c918 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ca32:	6878      	ldr	r0, [r7, #4]
 801ca34:	f7ff ff02 	bl	801c83c <UTIL_TIMER_Start>
 801ca38:	4603      	mov	r3, r0
 801ca3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca3e:	4618      	mov	r0, r3
 801ca40:	3710      	adds	r7, #16
 801ca42:	46bd      	mov	sp, r7
 801ca44:	bd80      	pop	{r7, pc}
 801ca46:	bf00      	nop
 801ca48:	0801dbd8 	.word	0x0801dbd8

0801ca4c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ca4c:	b590      	push	{r4, r7, lr}
 801ca4e:	b089      	sub	sp, #36	@ 0x24
 801ca50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca52:	f3ef 8310 	mrs	r3, PRIMASK
 801ca56:	60bb      	str	r3, [r7, #8]
  return(result);
 801ca58:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ca5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca5c:	b672      	cpsid	i
}
 801ca5e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ca60:	4b38      	ldr	r3, [pc, #224]	@ (801cb44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca62:	695b      	ldr	r3, [r3, #20]
 801ca64:	4798      	blx	r3
 801ca66:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ca68:	4b36      	ldr	r3, [pc, #216]	@ (801cb44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ca6a:	691b      	ldr	r3, [r3, #16]
 801ca6c:	4798      	blx	r3
 801ca6e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ca70:	693a      	ldr	r2, [r7, #16]
 801ca72:	697b      	ldr	r3, [r7, #20]
 801ca74:	1ad3      	subs	r3, r2, r3
 801ca76:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ca78:	4b33      	ldr	r3, [pc, #204]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d037      	beq.n	801caf0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ca80:	4b31      	ldr	r3, [pc, #196]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ca86:	69fb      	ldr	r3, [r7, #28]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	68fa      	ldr	r2, [r7, #12]
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	d206      	bcs.n	801ca9e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ca90:	69fb      	ldr	r3, [r7, #28]
 801ca92:	681a      	ldr	r2, [r3, #0]
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	1ad2      	subs	r2, r2, r3
 801ca98:	69fb      	ldr	r3, [r7, #28]
 801ca9a:	601a      	str	r2, [r3, #0]
 801ca9c:	e002      	b.n	801caa4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ca9e:	69fb      	ldr	r3, [r7, #28]
 801caa0:	2200      	movs	r2, #0
 801caa2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801caa4:	69fb      	ldr	r3, [r7, #28]
 801caa6:	695b      	ldr	r3, [r3, #20]
 801caa8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801caaa:	69fb      	ldr	r3, [r7, #28]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d1ea      	bne.n	801ca86 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cab0:	e01e      	b.n	801caf0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801cab2:	4b25      	ldr	r3, [pc, #148]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cab8:	4b23      	ldr	r3, [pc, #140]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	695b      	ldr	r3, [r3, #20]
 801cabe:	4a22      	ldr	r2, [pc, #136]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cac0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801cac2:	69fb      	ldr	r3, [r7, #28]
 801cac4:	2200      	movs	r2, #0
 801cac6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cac8:	69fb      	ldr	r3, [r7, #28]
 801caca:	2200      	movs	r2, #0
 801cacc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cace:	69fb      	ldr	r3, [r7, #28]
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	69fa      	ldr	r2, [r7, #28]
 801cad4:	6912      	ldr	r2, [r2, #16]
 801cad6:	4610      	mov	r0, r2
 801cad8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cada:	69fb      	ldr	r3, [r7, #28]
 801cadc:	7adb      	ldrb	r3, [r3, #11]
 801cade:	2b01      	cmp	r3, #1
 801cae0:	d106      	bne.n	801caf0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801cae2:	69fb      	ldr	r3, [r7, #28]
 801cae4:	7a9b      	ldrb	r3, [r3, #10]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d102      	bne.n	801caf0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801caea:	69f8      	ldr	r0, [r7, #28]
 801caec:	f7ff fea6 	bl	801c83c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801caf0:	4b15      	ldr	r3, [pc, #84]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d00d      	beq.n	801cb14 <UTIL_TIMER_IRQ_Handler+0xc8>
 801caf8:	4b13      	ldr	r3, [pc, #76]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d0d7      	beq.n	801cab2 <UTIL_TIMER_IRQ_Handler+0x66>
 801cb02:	4b11      	ldr	r3, [pc, #68]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	681c      	ldr	r4, [r3, #0]
 801cb08:	4b0e      	ldr	r3, [pc, #56]	@ (801cb44 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cb0a:	699b      	ldr	r3, [r3, #24]
 801cb0c:	4798      	blx	r3
 801cb0e:	4603      	mov	r3, r0
 801cb10:	429c      	cmp	r4, r3
 801cb12:	d3ce      	bcc.n	801cab2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cb14:	4b0c      	ldr	r3, [pc, #48]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	d009      	beq.n	801cb30 <UTIL_TIMER_IRQ_Handler+0xe4>
 801cb1c:	4b0a      	ldr	r3, [pc, #40]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	7a1b      	ldrb	r3, [r3, #8]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d104      	bne.n	801cb30 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cb26:	4b08      	ldr	r3, [pc, #32]	@ (801cb48 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	f000 f858 	bl	801cbe0 <TimerSetTimeout>
 801cb30:	69bb      	ldr	r3, [r7, #24]
 801cb32:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	f383 8810 	msr	PRIMASK, r3
}
 801cb3a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cb3c:	bf00      	nop
 801cb3e:	3724      	adds	r7, #36	@ 0x24
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd90      	pop	{r4, r7, pc}
 801cb44:	0801dbd8 	.word	0x0801dbd8
 801cb48:	200044f4 	.word	0x200044f4

0801cb4c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cb4c:	b580      	push	{r7, lr}
 801cb4e:	b082      	sub	sp, #8
 801cb50:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cb52:	4b06      	ldr	r3, [pc, #24]	@ (801cb6c <UTIL_TIMER_GetCurrentTime+0x20>)
 801cb54:	69db      	ldr	r3, [r3, #28]
 801cb56:	4798      	blx	r3
 801cb58:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cb5a:	4b04      	ldr	r3, [pc, #16]	@ (801cb6c <UTIL_TIMER_GetCurrentTime+0x20>)
 801cb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb5e:	6878      	ldr	r0, [r7, #4]
 801cb60:	4798      	blx	r3
 801cb62:	4603      	mov	r3, r0
}
 801cb64:	4618      	mov	r0, r3
 801cb66:	3708      	adds	r7, #8
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	bd80      	pop	{r7, pc}
 801cb6c:	0801dbd8 	.word	0x0801dbd8

0801cb70 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b084      	sub	sp, #16
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cb78:	4b0a      	ldr	r3, [pc, #40]	@ (801cba4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb7a:	69db      	ldr	r3, [r3, #28]
 801cb7c:	4798      	blx	r3
 801cb7e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cb80:	4b08      	ldr	r3, [pc, #32]	@ (801cba4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb84:	6878      	ldr	r0, [r7, #4]
 801cb86:	4798      	blx	r3
 801cb88:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cb8a:	4b06      	ldr	r3, [pc, #24]	@ (801cba4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cb8e:	68f9      	ldr	r1, [r7, #12]
 801cb90:	68ba      	ldr	r2, [r7, #8]
 801cb92:	1a8a      	subs	r2, r1, r2
 801cb94:	4610      	mov	r0, r2
 801cb96:	4798      	blx	r3
 801cb98:	4603      	mov	r3, r0
}
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	3710      	adds	r7, #16
 801cb9e:	46bd      	mov	sp, r7
 801cba0:	bd80      	pop	{r7, pc}
 801cba2:	bf00      	nop
 801cba4:	0801dbd8 	.word	0x0801dbd8

0801cba8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cba8:	b480      	push	{r7}
 801cbaa:	b085      	sub	sp, #20
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cbb0:	4b0a      	ldr	r3, [pc, #40]	@ (801cbdc <TimerExists+0x34>)
 801cbb2:	681b      	ldr	r3, [r3, #0]
 801cbb4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cbb6:	e008      	b.n	801cbca <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cbb8:	68fa      	ldr	r2, [r7, #12]
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d101      	bne.n	801cbc4 <TimerExists+0x1c>
    {
      return true;
 801cbc0:	2301      	movs	r3, #1
 801cbc2:	e006      	b.n	801cbd2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	695b      	ldr	r3, [r3, #20]
 801cbc8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d1f3      	bne.n	801cbb8 <TimerExists+0x10>
  }
  return false;
 801cbd0:	2300      	movs	r3, #0
}
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	3714      	adds	r7, #20
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	bc80      	pop	{r7}
 801cbda:	4770      	bx	lr
 801cbdc:	200044f4 	.word	0x200044f4

0801cbe0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cbe0:	b590      	push	{r4, r7, lr}
 801cbe2:	b085      	sub	sp, #20
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cbe8:	4b11      	ldr	r3, [pc, #68]	@ (801cc30 <TimerSetTimeout+0x50>)
 801cbea:	6a1b      	ldr	r3, [r3, #32]
 801cbec:	4798      	blx	r3
 801cbee:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	2201      	movs	r2, #1
 801cbf4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681c      	ldr	r4, [r3, #0]
 801cbfa:	4b0d      	ldr	r3, [pc, #52]	@ (801cc30 <TimerSetTimeout+0x50>)
 801cbfc:	699b      	ldr	r3, [r3, #24]
 801cbfe:	4798      	blx	r3
 801cc00:	4602      	mov	r2, r0
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	4413      	add	r3, r2
 801cc06:	429c      	cmp	r4, r3
 801cc08:	d207      	bcs.n	801cc1a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cc0a:	4b09      	ldr	r3, [pc, #36]	@ (801cc30 <TimerSetTimeout+0x50>)
 801cc0c:	699b      	ldr	r3, [r3, #24]
 801cc0e:	4798      	blx	r3
 801cc10:	4602      	mov	r2, r0
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	441a      	add	r2, r3
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cc1a:	4b05      	ldr	r3, [pc, #20]	@ (801cc30 <TimerSetTimeout+0x50>)
 801cc1c:	689b      	ldr	r3, [r3, #8]
 801cc1e:	687a      	ldr	r2, [r7, #4]
 801cc20:	6812      	ldr	r2, [r2, #0]
 801cc22:	4610      	mov	r0, r2
 801cc24:	4798      	blx	r3
}
 801cc26:	bf00      	nop
 801cc28:	3714      	adds	r7, #20
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd90      	pop	{r4, r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	0801dbd8 	.word	0x0801dbd8

0801cc34 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cc34:	b480      	push	{r7}
 801cc36:	b085      	sub	sp, #20
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cc3c:	4b14      	ldr	r3, [pc, #80]	@ (801cc90 <TimerInsertTimer+0x5c>)
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cc42:	4b13      	ldr	r3, [pc, #76]	@ (801cc90 <TimerInsertTimer+0x5c>)
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	695b      	ldr	r3, [r3, #20]
 801cc48:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cc4a:	e012      	b.n	801cc72 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681a      	ldr	r2, [r3, #0]
 801cc50:	68bb      	ldr	r3, [r7, #8]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	429a      	cmp	r2, r3
 801cc56:	d905      	bls.n	801cc64 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cc58:	68bb      	ldr	r3, [r7, #8]
 801cc5a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	695b      	ldr	r3, [r3, #20]
 801cc60:	60bb      	str	r3, [r7, #8]
 801cc62:	e006      	b.n	801cc72 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	687a      	ldr	r2, [r7, #4]
 801cc68:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	68ba      	ldr	r2, [r7, #8]
 801cc6e:	615a      	str	r2, [r3, #20]
        return;
 801cc70:	e009      	b.n	801cc86 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	695b      	ldr	r3, [r3, #20]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d1e8      	bne.n	801cc4c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	687a      	ldr	r2, [r7, #4]
 801cc7e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2200      	movs	r2, #0
 801cc84:	615a      	str	r2, [r3, #20]
}
 801cc86:	3714      	adds	r7, #20
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	bc80      	pop	{r7}
 801cc8c:	4770      	bx	lr
 801cc8e:	bf00      	nop
 801cc90:	200044f4 	.word	0x200044f4

0801cc94 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b084      	sub	sp, #16
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cc9c:	4b0b      	ldr	r3, [pc, #44]	@ (801cccc <TimerInsertNewHeadTimer+0x38>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d002      	beq.n	801ccae <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801cca8:	68fb      	ldr	r3, [r7, #12]
 801ccaa:	2200      	movs	r2, #0
 801ccac:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	68fa      	ldr	r2, [r7, #12]
 801ccb2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ccb4:	4a05      	ldr	r2, [pc, #20]	@ (801cccc <TimerInsertNewHeadTimer+0x38>)
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ccba:	4b04      	ldr	r3, [pc, #16]	@ (801cccc <TimerInsertNewHeadTimer+0x38>)
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f7ff ff8e 	bl	801cbe0 <TimerSetTimeout>
}
 801ccc4:	bf00      	nop
 801ccc6:	3710      	adds	r7, #16
 801ccc8:	46bd      	mov	sp, r7
 801ccca:	bd80      	pop	{r7, pc}
 801cccc:	200044f4 	.word	0x200044f4

0801ccd0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ccd0:	b480      	push	{r7}
 801ccd2:	b085      	sub	sp, #20
 801ccd4:	af00      	add	r7, sp, #0
 801ccd6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ccd8:	2300      	movs	r3, #0
 801ccda:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ccdc:	e00e      	b.n	801ccfc <ee_skip_atoi+0x2c>
 801ccde:	68fa      	ldr	r2, [r7, #12]
 801cce0:	4613      	mov	r3, r2
 801cce2:	009b      	lsls	r3, r3, #2
 801cce4:	4413      	add	r3, r2
 801cce6:	005b      	lsls	r3, r3, #1
 801cce8:	4618      	mov	r0, r3
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	1c59      	adds	r1, r3, #1
 801ccf0:	687a      	ldr	r2, [r7, #4]
 801ccf2:	6011      	str	r1, [r2, #0]
 801ccf4:	781b      	ldrb	r3, [r3, #0]
 801ccf6:	4403      	add	r3, r0
 801ccf8:	3b30      	subs	r3, #48	@ 0x30
 801ccfa:	60fb      	str	r3, [r7, #12]
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	781b      	ldrb	r3, [r3, #0]
 801cd02:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd04:	d904      	bls.n	801cd10 <ee_skip_atoi+0x40>
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	2b39      	cmp	r3, #57	@ 0x39
 801cd0e:	d9e6      	bls.n	801ccde <ee_skip_atoi+0xe>
  return i;
 801cd10:	68fb      	ldr	r3, [r7, #12]
}
 801cd12:	4618      	mov	r0, r3
 801cd14:	3714      	adds	r7, #20
 801cd16:	46bd      	mov	sp, r7
 801cd18:	bc80      	pop	{r7}
 801cd1a:	4770      	bx	lr

0801cd1c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801cd1c:	b480      	push	{r7}
 801cd1e:	b099      	sub	sp, #100	@ 0x64
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	60f8      	str	r0, [r7, #12]
 801cd24:	60b9      	str	r1, [r7, #8]
 801cd26:	607a      	str	r2, [r7, #4]
 801cd28:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801cd2a:	4b71      	ldr	r3, [pc, #452]	@ (801cef0 <ee_number+0x1d4>)
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801cd30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d002      	beq.n	801cd40 <ee_number+0x24>
 801cd3a:	4b6e      	ldr	r3, [pc, #440]	@ (801cef4 <ee_number+0x1d8>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801cd40:	683b      	ldr	r3, [r7, #0]
 801cd42:	2b01      	cmp	r3, #1
 801cd44:	dd02      	ble.n	801cd4c <ee_number+0x30>
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	2b24      	cmp	r3, #36	@ 0x24
 801cd4a:	dd01      	ble.n	801cd50 <ee_number+0x34>
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	e0ca      	b.n	801cee6 <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801cd50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd52:	f003 0301 	and.w	r3, r3, #1
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d001      	beq.n	801cd5e <ee_number+0x42>
 801cd5a:	2330      	movs	r3, #48	@ 0x30
 801cd5c:	e000      	b.n	801cd60 <ee_number+0x44>
 801cd5e:	2320      	movs	r3, #32
 801cd60:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801cd64:	2300      	movs	r3, #0
 801cd66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801cd6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd6c:	f003 0302 	and.w	r3, r3, #2
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d00b      	beq.n	801cd8c <ee_number+0x70>
  {
    if (num < 0)
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	da08      	bge.n	801cd8c <ee_number+0x70>
    {
      sign = '-';
 801cd7a:	232d      	movs	r3, #45	@ 0x2d
 801cd7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	425b      	negs	r3, r3
 801cd84:	607b      	str	r3, [r7, #4]
      size--;
 801cd86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cd88:	3b01      	subs	r3, #1
 801cd8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d11e      	bne.n	801cdd4 <ee_number+0xb8>
    tmp[i++] = '0';
 801cd96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cd98:	1c5a      	adds	r2, r3, #1
 801cd9a:	657a      	str	r2, [r7, #84]	@ 0x54
 801cd9c:	3360      	adds	r3, #96	@ 0x60
 801cd9e:	443b      	add	r3, r7
 801cda0:	2230      	movs	r2, #48	@ 0x30
 801cda2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801cda6:	e018      	b.n	801cdda <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	683a      	ldr	r2, [r7, #0]
 801cdac:	fbb3 f1f2 	udiv	r1, r3, r2
 801cdb0:	fb01 f202 	mul.w	r2, r1, r2
 801cdb4:	1a9b      	subs	r3, r3, r2
 801cdb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801cdb8:	441a      	add	r2, r3
 801cdba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cdbc:	1c59      	adds	r1, r3, #1
 801cdbe:	6579      	str	r1, [r7, #84]	@ 0x54
 801cdc0:	7812      	ldrb	r2, [r2, #0]
 801cdc2:	3360      	adds	r3, #96	@ 0x60
 801cdc4:	443b      	add	r3, r7
 801cdc6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801cdca:	687a      	ldr	r2, [r7, #4]
 801cdcc:	683b      	ldr	r3, [r7, #0]
 801cdce:	fbb2 f3f3 	udiv	r3, r2, r3
 801cdd2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d1e6      	bne.n	801cda8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801cdda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cdde:	429a      	cmp	r2, r3
 801cde0:	dd01      	ble.n	801cde6 <ee_number+0xca>
 801cde2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cde4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801cde6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801cde8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cdea:	1ad3      	subs	r3, r2, r3
 801cdec:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cdee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cdf0:	f003 0301 	and.w	r3, r3, #1
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d112      	bne.n	801ce1e <ee_number+0x102>
 801cdf8:	e00c      	b.n	801ce14 <ee_number+0xf8>
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	1c5a      	adds	r2, r3, #1
 801cdfe:	60fa      	str	r2, [r7, #12]
 801ce00:	2220      	movs	r2, #32
 801ce02:	701a      	strb	r2, [r3, #0]
 801ce04:	68bb      	ldr	r3, [r7, #8]
 801ce06:	3b01      	subs	r3, #1
 801ce08:	60bb      	str	r3, [r7, #8]
 801ce0a:	68bb      	ldr	r3, [r7, #8]
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d101      	bne.n	801ce14 <ee_number+0xf8>
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	e068      	b.n	801cee6 <ee_number+0x1ca>
 801ce14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ce16:	1e5a      	subs	r2, r3, #1
 801ce18:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	dced      	bgt.n	801cdfa <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ce1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d01b      	beq.n	801ce5e <ee_number+0x142>
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	1c5a      	adds	r2, r3, #1
 801ce2a:	60fa      	str	r2, [r7, #12]
 801ce2c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801ce30:	701a      	strb	r2, [r3, #0]
 801ce32:	68bb      	ldr	r3, [r7, #8]
 801ce34:	3b01      	subs	r3, #1
 801ce36:	60bb      	str	r3, [r7, #8]
 801ce38:	68bb      	ldr	r3, [r7, #8]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d10f      	bne.n	801ce5e <ee_number+0x142>
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	e051      	b.n	801cee6 <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	1c5a      	adds	r2, r3, #1
 801ce46:	60fa      	str	r2, [r7, #12]
 801ce48:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801ce4c:	701a      	strb	r2, [r3, #0]
 801ce4e:	68bb      	ldr	r3, [r7, #8]
 801ce50:	3b01      	subs	r3, #1
 801ce52:	60bb      	str	r3, [r7, #8]
 801ce54:	68bb      	ldr	r3, [r7, #8]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d101      	bne.n	801ce5e <ee_number+0x142>
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	e043      	b.n	801cee6 <ee_number+0x1ca>
 801ce5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ce60:	1e5a      	subs	r2, r3, #1
 801ce62:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	dcec      	bgt.n	801ce42 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ce68:	e00c      	b.n	801ce84 <ee_number+0x168>
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	1c5a      	adds	r2, r3, #1
 801ce6e:	60fa      	str	r2, [r7, #12]
 801ce70:	2230      	movs	r2, #48	@ 0x30
 801ce72:	701a      	strb	r2, [r3, #0]
 801ce74:	68bb      	ldr	r3, [r7, #8]
 801ce76:	3b01      	subs	r3, #1
 801ce78:	60bb      	str	r3, [r7, #8]
 801ce7a:	68bb      	ldr	r3, [r7, #8]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d101      	bne.n	801ce84 <ee_number+0x168>
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	e030      	b.n	801cee6 <ee_number+0x1ca>
 801ce84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ce86:	1e5a      	subs	r2, r3, #1
 801ce88:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ce8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ce8c:	429a      	cmp	r2, r3
 801ce8e:	dbec      	blt.n	801ce6a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ce90:	e010      	b.n	801ceb4 <ee_number+0x198>
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	1c5a      	adds	r2, r3, #1
 801ce96:	60fa      	str	r2, [r7, #12]
 801ce98:	f107 0110 	add.w	r1, r7, #16
 801ce9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ce9e:	440a      	add	r2, r1
 801cea0:	7812      	ldrb	r2, [r2, #0]
 801cea2:	701a      	strb	r2, [r3, #0]
 801cea4:	68bb      	ldr	r3, [r7, #8]
 801cea6:	3b01      	subs	r3, #1
 801cea8:	60bb      	str	r3, [r7, #8]
 801ceaa:	68bb      	ldr	r3, [r7, #8]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d101      	bne.n	801ceb4 <ee_number+0x198>
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	e018      	b.n	801cee6 <ee_number+0x1ca>
 801ceb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ceb6:	1e5a      	subs	r2, r3, #1
 801ceb8:	657a      	str	r2, [r7, #84]	@ 0x54
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	dce9      	bgt.n	801ce92 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801cebe:	e00c      	b.n	801ceda <ee_number+0x1be>
 801cec0:	68fb      	ldr	r3, [r7, #12]
 801cec2:	1c5a      	adds	r2, r3, #1
 801cec4:	60fa      	str	r2, [r7, #12]
 801cec6:	2220      	movs	r2, #32
 801cec8:	701a      	strb	r2, [r3, #0]
 801ceca:	68bb      	ldr	r3, [r7, #8]
 801cecc:	3b01      	subs	r3, #1
 801cece:	60bb      	str	r3, [r7, #8]
 801ced0:	68bb      	ldr	r3, [r7, #8]
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d101      	bne.n	801ceda <ee_number+0x1be>
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	e005      	b.n	801cee6 <ee_number+0x1ca>
 801ceda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cedc:	1e5a      	subs	r2, r3, #1
 801cede:	66ba      	str	r2, [r7, #104]	@ 0x68
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	dced      	bgt.n	801cec0 <ee_number+0x1a4>

  return str;
 801cee4:	68fb      	ldr	r3, [r7, #12]
}
 801cee6:	4618      	mov	r0, r3
 801cee8:	3764      	adds	r7, #100	@ 0x64
 801ceea:	46bd      	mov	sp, r7
 801ceec:	bc80      	pop	{r7}
 801ceee:	4770      	bx	lr
 801cef0:	20000110 	.word	0x20000110
 801cef4:	20000114 	.word	0x20000114

0801cef8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801cef8:	b580      	push	{r7, lr}
 801cefa:	b092      	sub	sp, #72	@ 0x48
 801cefc:	af04      	add	r7, sp, #16
 801cefe:	60f8      	str	r0, [r7, #12]
 801cf00:	60b9      	str	r1, [r7, #8]
 801cf02:	607a      	str	r2, [r7, #4]
 801cf04:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	dc01      	bgt.n	801cf10 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801cf0c:	2300      	movs	r3, #0
 801cf0e:	e13e      	b.n	801d18e <tiny_vsnprintf_like+0x296>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf14:	e128      	b.n	801d168 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801cf16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	1ad2      	subs	r2, r2, r3
 801cf1c:	68bb      	ldr	r3, [r7, #8]
 801cf1e:	3b01      	subs	r3, #1
 801cf20:	429a      	cmp	r2, r3
 801cf22:	f280 812e 	bge.w	801d182 <tiny_vsnprintf_like+0x28a>
    
    if (*fmt != '%')
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	781b      	ldrb	r3, [r3, #0]
 801cf2a:	2b25      	cmp	r3, #37	@ 0x25
 801cf2c:	d006      	beq.n	801cf3c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801cf2e:	687a      	ldr	r2, [r7, #4]
 801cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf32:	1c59      	adds	r1, r3, #1
 801cf34:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801cf36:	7812      	ldrb	r2, [r2, #0]
 801cf38:	701a      	strb	r2, [r3, #0]
      continue;
 801cf3a:	e112      	b.n	801d162 <tiny_vsnprintf_like+0x26a>
    }
                  
    // Process flags
    flags = 0;
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	3301      	adds	r3, #1
 801cf44:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	781b      	ldrb	r3, [r3, #0]
 801cf4a:	2b30      	cmp	r3, #48	@ 0x30
 801cf4c:	d103      	bne.n	801cf56 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801cf4e:	6a3b      	ldr	r3, [r7, #32]
 801cf50:	f043 0301 	orr.w	r3, r3, #1
 801cf54:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801cf56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf5a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	781b      	ldrb	r3, [r3, #0]
 801cf60:	2b2f      	cmp	r3, #47	@ 0x2f
 801cf62:	d908      	bls.n	801cf76 <tiny_vsnprintf_like+0x7e>
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	781b      	ldrb	r3, [r3, #0]
 801cf68:	2b39      	cmp	r3, #57	@ 0x39
 801cf6a:	d804      	bhi.n	801cf76 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801cf6c:	1d3b      	adds	r3, r7, #4
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f7ff feae 	bl	801ccd0 <ee_skip_atoi>
 801cf74:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801cf76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf7a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801cf7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf80:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801cf82:	230a      	movs	r3, #10
 801cf84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	781b      	ldrb	r3, [r3, #0]
 801cf8a:	3b58      	subs	r3, #88	@ 0x58
 801cf8c:	2b20      	cmp	r3, #32
 801cf8e:	f200 8094 	bhi.w	801d0ba <tiny_vsnprintf_like+0x1c2>
 801cf92:	a201      	add	r2, pc, #4	@ (adr r2, 801cf98 <tiny_vsnprintf_like+0xa0>)
 801cf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf98:	0801d0a3 	.word	0x0801d0a3
 801cf9c:	0801d0bb 	.word	0x0801d0bb
 801cfa0:	0801d0bb 	.word	0x0801d0bb
 801cfa4:	0801d0bb 	.word	0x0801d0bb
 801cfa8:	0801d0bb 	.word	0x0801d0bb
 801cfac:	0801d0bb 	.word	0x0801d0bb
 801cfb0:	0801d0bb 	.word	0x0801d0bb
 801cfb4:	0801d0bb 	.word	0x0801d0bb
 801cfb8:	0801d0bb 	.word	0x0801d0bb
 801cfbc:	0801d0bb 	.word	0x0801d0bb
 801cfc0:	0801d0bb 	.word	0x0801d0bb
 801cfc4:	0801d027 	.word	0x0801d027
 801cfc8:	0801d0b1 	.word	0x0801d0b1
 801cfcc:	0801d0bb 	.word	0x0801d0bb
 801cfd0:	0801d0bb 	.word	0x0801d0bb
 801cfd4:	0801d0bb 	.word	0x0801d0bb
 801cfd8:	0801d0bb 	.word	0x0801d0bb
 801cfdc:	0801d0b1 	.word	0x0801d0b1
 801cfe0:	0801d0bb 	.word	0x0801d0bb
 801cfe4:	0801d0bb 	.word	0x0801d0bb
 801cfe8:	0801d0bb 	.word	0x0801d0bb
 801cfec:	0801d0bb 	.word	0x0801d0bb
 801cff0:	0801d0bb 	.word	0x0801d0bb
 801cff4:	0801d0bb 	.word	0x0801d0bb
 801cff8:	0801d0bb 	.word	0x0801d0bb
 801cffc:	0801d0bb 	.word	0x0801d0bb
 801d000:	0801d0bb 	.word	0x0801d0bb
 801d004:	0801d047 	.word	0x0801d047
 801d008:	0801d0bb 	.word	0x0801d0bb
 801d00c:	0801d107 	.word	0x0801d107
 801d010:	0801d0bb 	.word	0x0801d0bb
 801d014:	0801d0bb 	.word	0x0801d0bb
 801d018:	0801d0ab 	.word	0x0801d0ab
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d01e:	1c5a      	adds	r2, r3, #1
 801d020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d022:	2220      	movs	r2, #32
 801d024:	701a      	strb	r2, [r3, #0]
 801d026:	69fb      	ldr	r3, [r7, #28]
 801d028:	3b01      	subs	r3, #1
 801d02a:	61fb      	str	r3, [r7, #28]
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	dcf4      	bgt.n	801d01c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	1d1a      	adds	r2, r3, #4
 801d036:	603a      	str	r2, [r7, #0]
 801d038:	6819      	ldr	r1, [r3, #0]
 801d03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d03c:	1c5a      	adds	r2, r3, #1
 801d03e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d040:	b2ca      	uxtb	r2, r1
 801d042:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d044:	e08d      	b.n	801d162 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	1d1a      	adds	r2, r3, #4
 801d04a:	603a      	str	r2, [r7, #0]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d052:	2b00      	cmp	r3, #0
 801d054:	d101      	bne.n	801d05a <tiny_vsnprintf_like+0x162>
 801d056:	4b50      	ldr	r3, [pc, #320]	@ (801d198 <tiny_vsnprintf_like+0x2a0>)
 801d058:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d05a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d05c:	f7e3 f890 	bl	8000180 <strlen>
 801d060:	4603      	mov	r3, r0
 801d062:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d064:	e004      	b.n	801d070 <tiny_vsnprintf_like+0x178>
 801d066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d068:	1c5a      	adds	r2, r3, #1
 801d06a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d06c:	2220      	movs	r2, #32
 801d06e:	701a      	strb	r2, [r3, #0]
 801d070:	69fb      	ldr	r3, [r7, #28]
 801d072:	1e5a      	subs	r2, r3, #1
 801d074:	61fa      	str	r2, [r7, #28]
 801d076:	693a      	ldr	r2, [r7, #16]
 801d078:	429a      	cmp	r2, r3
 801d07a:	dbf4      	blt.n	801d066 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d07c:	2300      	movs	r3, #0
 801d07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d080:	e00a      	b.n	801d098 <tiny_vsnprintf_like+0x1a0>
 801d082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d084:	1c53      	adds	r3, r2, #1
 801d086:	627b      	str	r3, [r7, #36]	@ 0x24
 801d088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d08a:	1c59      	adds	r1, r3, #1
 801d08c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801d08e:	7812      	ldrb	r2, [r2, #0]
 801d090:	701a      	strb	r2, [r3, #0]
 801d092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d094:	3301      	adds	r3, #1
 801d096:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	429a      	cmp	r2, r3
 801d09e:	dbf0      	blt.n	801d082 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d0a0:	e05f      	b.n	801d162 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d0a2:	6a3b      	ldr	r3, [r7, #32]
 801d0a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d0a8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d0aa:	2310      	movs	r3, #16
 801d0ac:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801d0ae:	e02b      	b.n	801d108 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d0b0:	6a3b      	ldr	r3, [r7, #32]
 801d0b2:	f043 0302 	orr.w	r3, r3, #2
 801d0b6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d0b8:	e025      	b.n	801d106 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	781b      	ldrb	r3, [r3, #0]
 801d0be:	2b25      	cmp	r3, #37	@ 0x25
 801d0c0:	d004      	beq.n	801d0cc <tiny_vsnprintf_like+0x1d4>
 801d0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0c4:	1c5a      	adds	r2, r3, #1
 801d0c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d0c8:	2225      	movs	r2, #37	@ 0x25
 801d0ca:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d0cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	1ad2      	subs	r2, r2, r3
 801d0d2:	68bb      	ldr	r3, [r7, #8]
 801d0d4:	3b01      	subs	r3, #1
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	da16      	bge.n	801d108 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d006      	beq.n	801d0f0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d0e2:	687a      	ldr	r2, [r7, #4]
 801d0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0e6:	1c59      	adds	r1, r3, #1
 801d0e8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801d0ea:	7812      	ldrb	r2, [r2, #0]
 801d0ec:	701a      	strb	r2, [r3, #0]
 801d0ee:	e002      	b.n	801d0f6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	3b01      	subs	r3, #1
 801d0f4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	1ad2      	subs	r2, r2, r3
 801d0fc:	68bb      	ldr	r3, [r7, #8]
 801d0fe:	3b01      	subs	r3, #1
 801d100:	429a      	cmp	r2, r3
 801d102:	db2d      	blt.n	801d160 <tiny_vsnprintf_like+0x268>
 801d104:	e000      	b.n	801d108 <tiny_vsnprintf_like+0x210>
        break;
 801d106:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d108:	697b      	ldr	r3, [r7, #20]
 801d10a:	2b6c      	cmp	r3, #108	@ 0x6c
 801d10c:	d105      	bne.n	801d11a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	1d1a      	adds	r2, r3, #4
 801d112:	603a      	str	r2, [r7, #0]
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	637b      	str	r3, [r7, #52]	@ 0x34
 801d118:	e00f      	b.n	801d13a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d11a:	6a3b      	ldr	r3, [r7, #32]
 801d11c:	f003 0302 	and.w	r3, r3, #2
 801d120:	2b00      	cmp	r3, #0
 801d122:	d005      	beq.n	801d130 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d124:	683b      	ldr	r3, [r7, #0]
 801d126:	1d1a      	adds	r2, r3, #4
 801d128:	603a      	str	r2, [r7, #0]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	637b      	str	r3, [r7, #52]	@ 0x34
 801d12e:	e004      	b.n	801d13a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d130:	683b      	ldr	r3, [r7, #0]
 801d132:	1d1a      	adds	r2, r3, #4
 801d134:	603a      	str	r2, [r7, #0]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d13a:	68bb      	ldr	r3, [r7, #8]
 801d13c:	1e5a      	subs	r2, r3, #1
 801d13e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	1acb      	subs	r3, r1, r3
 801d144:	1ad1      	subs	r1, r2, r3
 801d146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d148:	6a3b      	ldr	r3, [r7, #32]
 801d14a:	9302      	str	r3, [sp, #8]
 801d14c:	69bb      	ldr	r3, [r7, #24]
 801d14e:	9301      	str	r3, [sp, #4]
 801d150:	69fb      	ldr	r3, [r7, #28]
 801d152:	9300      	str	r3, [sp, #0]
 801d154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d158:	f7ff fde0 	bl	801cd1c <ee_number>
 801d15c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d15e:	e000      	b.n	801d162 <tiny_vsnprintf_like+0x26a>
        continue;
 801d160:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	3301      	adds	r3, #1
 801d166:	607b      	str	r3, [r7, #4]
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	781b      	ldrb	r3, [r3, #0]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	f47f aed2 	bne.w	801cf16 <tiny_vsnprintf_like+0x1e>
 801d172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	1ad2      	subs	r2, r2, r3
 801d178:	68bb      	ldr	r3, [r7, #8]
 801d17a:	3b01      	subs	r3, #1
 801d17c:	429a      	cmp	r2, r3
 801d17e:	f6bf aeca 	bge.w	801cf16 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d184:	2200      	movs	r2, #0
 801d186:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	1ad3      	subs	r3, r2, r3
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3738      	adds	r7, #56	@ 0x38
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}
 801d196:	bf00      	nop
 801d198:	0801db30 	.word	0x0801db30

0801d19c <memset>:
 801d19c:	4402      	add	r2, r0
 801d19e:	4603      	mov	r3, r0
 801d1a0:	4293      	cmp	r3, r2
 801d1a2:	d100      	bne.n	801d1a6 <memset+0xa>
 801d1a4:	4770      	bx	lr
 801d1a6:	f803 1b01 	strb.w	r1, [r3], #1
 801d1aa:	e7f9      	b.n	801d1a0 <memset+0x4>

0801d1ac <__libc_init_array>:
 801d1ac:	b570      	push	{r4, r5, r6, lr}
 801d1ae:	4d0d      	ldr	r5, [pc, #52]	@ (801d1e4 <__libc_init_array+0x38>)
 801d1b0:	4c0d      	ldr	r4, [pc, #52]	@ (801d1e8 <__libc_init_array+0x3c>)
 801d1b2:	1b64      	subs	r4, r4, r5
 801d1b4:	10a4      	asrs	r4, r4, #2
 801d1b6:	2600      	movs	r6, #0
 801d1b8:	42a6      	cmp	r6, r4
 801d1ba:	d109      	bne.n	801d1d0 <__libc_init_array+0x24>
 801d1bc:	4d0b      	ldr	r5, [pc, #44]	@ (801d1ec <__libc_init_array+0x40>)
 801d1be:	4c0c      	ldr	r4, [pc, #48]	@ (801d1f0 <__libc_init_array+0x44>)
 801d1c0:	f000 f89a 	bl	801d2f8 <_init>
 801d1c4:	1b64      	subs	r4, r4, r5
 801d1c6:	10a4      	asrs	r4, r4, #2
 801d1c8:	2600      	movs	r6, #0
 801d1ca:	42a6      	cmp	r6, r4
 801d1cc:	d105      	bne.n	801d1da <__libc_init_array+0x2e>
 801d1ce:	bd70      	pop	{r4, r5, r6, pc}
 801d1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1d4:	4798      	blx	r3
 801d1d6:	3601      	adds	r6, #1
 801d1d8:	e7ee      	b.n	801d1b8 <__libc_init_array+0xc>
 801d1da:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1de:	4798      	blx	r3
 801d1e0:	3601      	adds	r6, #1
 801d1e2:	e7f2      	b.n	801d1ca <__libc_init_array+0x1e>
 801d1e4:	0801e170 	.word	0x0801e170
 801d1e8:	0801e170 	.word	0x0801e170
 801d1ec:	0801e170 	.word	0x0801e170
 801d1f0:	0801e174 	.word	0x0801e174
 801d1f4:	00000000 	.word	0x00000000

0801d1f8 <floor>:
 801d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1fc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d200:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801d204:	2e13      	cmp	r6, #19
 801d206:	4602      	mov	r2, r0
 801d208:	460b      	mov	r3, r1
 801d20a:	460c      	mov	r4, r1
 801d20c:	4605      	mov	r5, r0
 801d20e:	4680      	mov	r8, r0
 801d210:	dc35      	bgt.n	801d27e <floor+0x86>
 801d212:	2e00      	cmp	r6, #0
 801d214:	da17      	bge.n	801d246 <floor+0x4e>
 801d216:	a334      	add	r3, pc, #208	@ (adr r3, 801d2e8 <floor+0xf0>)
 801d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21c:	f7e2 ffbe 	bl	800019c <__adddf3>
 801d220:	2200      	movs	r2, #0
 801d222:	2300      	movs	r3, #0
 801d224:	f7e3 f9ee 	bl	8000604 <__aeabi_dcmpgt>
 801d228:	b150      	cbz	r0, 801d240 <floor+0x48>
 801d22a:	2c00      	cmp	r4, #0
 801d22c:	da57      	bge.n	801d2de <floor+0xe6>
 801d22e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801d232:	432c      	orrs	r4, r5
 801d234:	2500      	movs	r5, #0
 801d236:	42ac      	cmp	r4, r5
 801d238:	4c2d      	ldr	r4, [pc, #180]	@ (801d2f0 <floor+0xf8>)
 801d23a:	bf08      	it	eq
 801d23c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801d240:	4623      	mov	r3, r4
 801d242:	462a      	mov	r2, r5
 801d244:	e024      	b.n	801d290 <floor+0x98>
 801d246:	4f2b      	ldr	r7, [pc, #172]	@ (801d2f4 <floor+0xfc>)
 801d248:	4137      	asrs	r7, r6
 801d24a:	ea01 0c07 	and.w	ip, r1, r7
 801d24e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801d252:	d01d      	beq.n	801d290 <floor+0x98>
 801d254:	a324      	add	r3, pc, #144	@ (adr r3, 801d2e8 <floor+0xf0>)
 801d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d25a:	f7e2 ff9f 	bl	800019c <__adddf3>
 801d25e:	2200      	movs	r2, #0
 801d260:	2300      	movs	r3, #0
 801d262:	f7e3 f9cf 	bl	8000604 <__aeabi_dcmpgt>
 801d266:	2800      	cmp	r0, #0
 801d268:	d0ea      	beq.n	801d240 <floor+0x48>
 801d26a:	2c00      	cmp	r4, #0
 801d26c:	bfbe      	ittt	lt
 801d26e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801d272:	4133      	asrlt	r3, r6
 801d274:	18e4      	addlt	r4, r4, r3
 801d276:	ea24 0407 	bic.w	r4, r4, r7
 801d27a:	2500      	movs	r5, #0
 801d27c:	e7e0      	b.n	801d240 <floor+0x48>
 801d27e:	2e33      	cmp	r6, #51	@ 0x33
 801d280:	dd0a      	ble.n	801d298 <floor+0xa0>
 801d282:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d286:	d103      	bne.n	801d290 <floor+0x98>
 801d288:	f7e2 ff88 	bl	800019c <__adddf3>
 801d28c:	4602      	mov	r2, r0
 801d28e:	460b      	mov	r3, r1
 801d290:	4610      	mov	r0, r2
 801d292:	4619      	mov	r1, r3
 801d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d298:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801d29c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801d2a0:	fa2c f707 	lsr.w	r7, ip, r7
 801d2a4:	4207      	tst	r7, r0
 801d2a6:	d0f3      	beq.n	801d290 <floor+0x98>
 801d2a8:	a30f      	add	r3, pc, #60	@ (adr r3, 801d2e8 <floor+0xf0>)
 801d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ae:	f7e2 ff75 	bl	800019c <__adddf3>
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f7e3 f9a5 	bl	8000604 <__aeabi_dcmpgt>
 801d2ba:	2800      	cmp	r0, #0
 801d2bc:	d0c0      	beq.n	801d240 <floor+0x48>
 801d2be:	2c00      	cmp	r4, #0
 801d2c0:	da0a      	bge.n	801d2d8 <floor+0xe0>
 801d2c2:	2e14      	cmp	r6, #20
 801d2c4:	d101      	bne.n	801d2ca <floor+0xd2>
 801d2c6:	3401      	adds	r4, #1
 801d2c8:	e006      	b.n	801d2d8 <floor+0xe0>
 801d2ca:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801d2ce:	2301      	movs	r3, #1
 801d2d0:	40b3      	lsls	r3, r6
 801d2d2:	441d      	add	r5, r3
 801d2d4:	4545      	cmp	r5, r8
 801d2d6:	d3f6      	bcc.n	801d2c6 <floor+0xce>
 801d2d8:	ea25 0507 	bic.w	r5, r5, r7
 801d2dc:	e7b0      	b.n	801d240 <floor+0x48>
 801d2de:	2500      	movs	r5, #0
 801d2e0:	462c      	mov	r4, r5
 801d2e2:	e7ad      	b.n	801d240 <floor+0x48>
 801d2e4:	f3af 8000 	nop.w
 801d2e8:	8800759c 	.word	0x8800759c
 801d2ec:	7e37e43c 	.word	0x7e37e43c
 801d2f0:	bff00000 	.word	0xbff00000
 801d2f4:	000fffff 	.word	0x000fffff

0801d2f8 <_init>:
 801d2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2fa:	bf00      	nop
 801d2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2fe:	bc08      	pop	{r3}
 801d300:	469e      	mov	lr, r3
 801d302:	4770      	bx	lr

0801d304 <_fini>:
 801d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d306:	bf00      	nop
 801d308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d30a:	bc08      	pop	{r3}
 801d30c:	469e      	mov	lr, r3
 801d30e:	4770      	bx	lr
